(self.webpackChunkwebpack_test = self.webpackChunkwebpack_test || []).push([[7416], {
	7416: (t, e, i) => {
		"use strict"; i.r(e), i.d(e, { cellInfo: () => A, drilldown: () => R, gridView: () => F, headerInfo: () => v, linkedMappingController: () => T, mappingController: () => L.v }); var o = i(2981), s = i(1656), a = i(2085), r = i(3082), n = i(6615), l = function() { }; l.prototype.notifySettedGridData = function(t, e, i, o, s, r) { try { if (this.options.scrollFix && this.settedData) { for (var n = this.getTopRowIndex(), l = 0; l <= this.lastIndex; l++) { var h = n + l; this.drawRowData(h - this.rowIndex, h) } return } this.dataList.clearFilter(!0), this._oldFilterArrStr || this.notifyClearFilter(!0), this.settedData = !1; i = i; (e = e || !1) || (this.rowStyleArr = [], this.cellStyleArr = [], this.cellClassArr = [], this.rowReadOnlyArr = [], this.cellReadOnlyArr = [], this.rowDisabledArr = [], this.cellDisabledArr = [], this.rowStyleFixedArr = [], this.rowStyleDataArr = [], this.columnStyleFixedArr = [], this.columnStyleDataArr = [], this.columnClassObj = {}, this.lastIndex = -1, this.lastTopRowIndex = null, this.bScrollTop = -1, this.extraData = { grid: {}, row: [], col: [], cell: [] }, i = 0, this._removeAllTDCellClass()), this.hasFooter && (this.footerTempSum = []), this.beforeDataLength = -1, 1 == this.isDrillDown && (this.setCellInfo(), 1 == this.isPaste ? this.initPasteDrilldown() : this.initDrilldown()), this.initStyleArr(i), 0 == this.loadFlag && e ? this.loadFlag = !1 : this.loadFlag = !0, this.lastTopRowIndex = null; var d = { gridData: !0 !== r }; e && (d.append = !0, d.keepTop = !0), this.notifyDataChanged(d), this.loadFlag = !0, 0 == this.getTotalRow() && this.removeFocusedCell(), this.options.focusOnSetData && this._setFocusedCell(0, 0), this.setScrollYHeight(), this.settedData = !0, this.options.fixedRightColumn > 0 && this._handleScrollX(), (!e && this.options.fixedColumn > 0 || this.options.fixedRightColumn > 0) && this.arrangeOverflowXScroll(!0), (!0 === s || this.options.instanceBindBySetData) && this.options.ref && this._refreshInstance(t, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyBeforeSettedCellData = function() { try { if (null != this.editedCell) return void this.editedCell.handleEndEdit() } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifySettedCellData = function(t, e, i, o) { try { this.hasFooter && (this.footerTempSum = []); var s = this.getColumnIndex(e); t = this._getGroupbyGroupedRowIndex(t); this.notifyCellChanged(t, s, o), null == s && null != this._dataList.getColumnIndex(e) && this._refreshExpression(t, e), this.isDrillDown && (null == s && this._dataList.options.depthColumn && (s = this._dataList.getColumnIndex(e)), this.drilldown.options.depthColumn == s && (this.notifyDataChanged({ keepTop: !0 }), 0 == this.getDataLength() && this.removeFocusedCell(), this.setScrollYHeight())); var n = r.D.getDataPrefix("colMerged"), l = this.getCellInfo(e), h = t, d = this.getTotalRow(); if (l && l.options.colMerge && l.options.colMergeEdit && !this.groupbyStatus.grouped) { var p = this.data_td_list[(h - this.rowIndex) * this.oneRowDataLength + s]; if (p) { var u, c = p.getAttribute(n); if ("1" == c && i != this.dataList.getCellData(h - 1, s)) if (p.setAttribute(n, "0"), this.drawCellData(h - this.rowIndex, h, s), h < d - 1) (u = this.data_td_list[(h - this.rowIndex + 1) * this.oneRowDataLength + s]) && (i == this.dataList.getCellData(h + 1, s) ? u.setAttribute(n, "1") : u.setAttribute(n, "0"), this.drawCellData(h - this.rowIndex + 1, h + 1, s)); if ("0" == c) if (h >= 1 && i == this.dataList.getCellData(h - 1, s) && (p.setAttribute(n, "1"), this.drawCellData(h - this.rowIndex, h, s)), h < d - 1) (u = this.data_td_list[(h - this.rowIndex + 1) * this.oneRowDataLength + s]) && (i == this.dataList.getCellData(h + 1, s) ? u.setAttribute(n, "1") : u.setAttribute(n, "0"), this.drawCellData(h - this.rowIndex + 1, h + 1, s)) } } this.moveDirection = null } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyBeforeInsertedRow = function(t) {
			try { !this.isDrillDown && t > this.getDataLength() && (t = this.getDataLength()); var e = !1, i = []; if (this.isDrillDown) { for (var o = this.drilldown.getParentRowIndex(t); o > -1;)this.drilldown.isOpen(this.drilldown.getDisplayRowIndex(o)) || (e = !0, i.push(o)), o = this.drilldown.getParentRowIndex(o); if (e) for (var s = i.length - 1; s >= 0; s--)if (!this.drilldown.isOpen(i[s])) { var r = this.drilldown.getDisplayRowIndex(i[s]); this._toggle(r) } } } catch (t) {
				a.w.printStackTrace(t, null, this)
			}
		}, l.prototype.notifyAfterInsertedRow = function(t, e) { try { this.settedData = !1; for (var i = this.dataList.getRealRowIndex(t), o = this.getTotalCol(), s = [i * o, 0], r = 0; r < o; r++)s.push(null); if (this.resetExpressionFunc(), [].splice.apply(this.cellStyleArr, s), [].splice.apply(this.cellClassArr, s), [].splice.apply(this.cellReadOnlyArr, s), [].splice.apply(this.cellDisabledArr, s), this.extraData.row.splice(t, 0, null), this.extraData.cell.splice(t, 0, null), 1 == this.options.setCellInputTypeCustom && !this.validTypeGetter) { var n = this.getColumnCount(); for (r = 0; r < n; r++) { var l = this.getCellInfo(r); "custom" == l.options.inputType && (l.cellManagerHashByRowIndex.splice(i, 0, null), l.cellManagerIDByRowIndex.splice(i, 0, null)) } } if (this.isDrillDown && this.drilldown.statusArr.splice(i, 0, !0), this.hasFooter && (this.footerTempSum = []), this._mergeNotifyRowChanged("insertRow", t), !0 !== e && (this.notifyRowInserted(t), this.notifyStatusChanged({ rowIndex: [t] })), this.options.ref && 1 != this.insertRowByInstance && !0 !== e && this.repeatNodeChildTagName && this.repeatNodeChildTagName.length > 0) { var h; h = 1 == this.repeatNodeTagNameFilter && 1 == this.repeatNodeTagName.length ? this.filteredRepeatNodeTagName[0] : this.repeatNodeTagName[0]; var d, p = WebSquare.xml.parse("<" + h + "></" + h + ">").documentElement, u = p, c = h; this.repeatNodeTagName.length > 1 && (c = this.repeatNodeTagName.slice(1, this.repeatNodeTagName.length).join("/")); for (r = 1; r < this.repeatNodeTagName.length; r++)u = WebSquare.xml.createNode(u, this.repeatNodeTagName[r], !1); d = this.repeatNodeTagName.length > 1 ? WebSquare.xml.findNode(p, c) : p; for (r = 0; r < this.repeatNodeChildTagName.length; r++)WebSquare.xml.createNode(d, this.repeatNodeChildTagName[r], !1); t >= this.maxRowLength ? WebSquare.ModelUtil.setInstanceNode(p, this.options.ref, null, "append", !1, this.scope_id) : WebSquare.ModelUtil.setInstanceNode(p, this.options.ref + "/" + h + "[" + (t + 1) + "]", null, "insertBeforeSibling", !1, this.scope_id) } return this.settedData = !0, this.loadFlag = null == this.loadFlag || this.loadFlag, this._refreshColumnClass(), t } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyBeforeRemovedRow = function(t) { try { if (this.options.ref && 1 != this.removeRowByInstance) { var e = this.getRealRowIndex(t) + 1; WebSquare.ModelUtil.removeInstanceNode(this.options.ref + "/" + this.repeatNodeTagName[0] + "[" + e + "]", !1, this.scope_id) } if (this.isDrillDown && this._dataList.options.depthColumn) { for (var i = !1, o = [], s = this.drilldown.getParentRowIndex(t); s > -1;)this.drilldown.isOpen(this.drilldown.getDisplayRowIndex(s)) || (i = !0, o.push(s)), s = this.drilldown.getParentRowIndex(s); if (i) for (var r = o.length - 1; r >= 0; r--)if (!this.drilldown.isOpen(o[r])) { var n = this.drilldown.getDisplayRowIndex(o[r]); this._toggle(n) } t = this.drilldown.getDisplayRowIndex(t) } } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyBeforeKeepFilter = function() { try { var t = this._dataList.getFilterList(); if (t.length <= 0 || isNaN(t.length)) return; this._oldFilterArrStr = JSON.stringify(t, (function(t, e) { return "function" == typeof e || "object" == typeof e && e.constructor === RegExp ? e.toString() : e })), this.customFilterStatusObj && (this._oldStatusObj = JSON.stringify(this.customFilterStatusObj)), this.customFilterList && this.customFilterList.customFilterListFilterInfo ? this._oldFilterInfo = JSON.stringify(this.customFilterList.customFilterListFilterInfo, (function(t, e) { return "function" == typeof e || "object" == typeof e && e.constructor === RegExp ? e.toString() : e })) : this.groupbyStatus.grouped && this.groupbyStatus.filter && (this._oldFilterInfo = JSON.stringify(this.groupbyStatus.filter, (function(t, e) { return "function" == typeof e || "object" == typeof e && e.constructor === RegExp ? e.toString() : e }))) } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyAfterKeepFilter = function() { try { if (!this._oldFilterArrStr) return; this._refreshCustomFilterHistory(this._oldFilterArrStr, this._oldFilterInfo, this._oldStatusObj), this._oldFilterArrStr = null, this._oldFilterInfo = null, this._oldStatusObj = null } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyAfterRemovedRow = function(t, e, i, o) {
			try {
				this.removed = !0,
				this.isDrillDown && this.drilldown.statusArr.splice(i, 1); !this.isDrillDown || this.options.drilldownRealRowIndexAll; this.cellStyleArr.splice(this.oneRowDataLength * i, this.oneRowDataLength), this.cellClassArr.splice(this.oneRowDataLength * i, this.oneRowDataLength), this.cellReadOnlyArr.splice(this.oneRowDataLength * i, this.oneRowDataLength), this.cellDisabledArr.splice(this.oneRowDataLength * i, this.oneRowDataLength); for (var s = this.getColumnCount(), n = 0; n < s; n++) { var l = this.getCellInfo(n); if ("custom" == l.options.inputType && 1 == this.options.setCellInputTypeCustom && !this.validTypeGetter) { if (this.options.senseReader || l.options.embeddedInput) { var h = l.cellManagerHashByRowIndex[i]; if (h && h.options.embeddedInput) { var d = l.cellManagerIDByRowIndex[i], p = this.id + "_" + d, u = this.dom[p], c = null; null != u && (c = WebSquare.idCache[u.uuid]), c && "function" == typeof c.remove && c.remove(), delete this.dom[p] } } l.cellManagerHashByRowIndex.splice(i, 1), l.cellManagerIDByRowIndex.splice(i, 1) } } if (this.itemValueObj) for (var g in this.itemValueObj) { var f = o.split(",")[this._dataList.bodyIdColIndexMap[g]]; for (var m in this.itemValueObj[g]) -1 != m.indexOf("auto") && this.itemValueObj[g][m] === f && (this.itemValueObj[g][m] = "") } if (!0 !== e) { var y = this.checkScrollEnd, b = this.scrollEvent; if (this.checkScrollEnd = !1, this.scrollEvent = !1, this._getFocusedRowIndex() == this.getDataLength()) { var w = this._getFocusedRowIndex(), v = this.getFocusedColumnIndex(); this.removeRowFocus(this.getDataLength()), this._setFocusedCell(w - 1, v) } this.resetExpressionFunc(), this.hasFooter && (this.footerTempSum = []), this._mergeNotifyRowChanged("removeRow", t), this.notifyRowChanged(t), 0 == this.getDataLength() && this.removeFocusedCell(), this.setScrollYHeight(), this.notifyStatusChanged({ rowindex: [t] }), r.D.setTimeout((function(t, e) { this.checkScrollEnd = t, this.scrollEvent = e }), { key: this.id + "_notifyAfterRemovedRow", caller: this, delay: 150, args: [y, b] }) }
			} catch (t) { a.w.printStackTrace(t, null, this) }
		}, l.prototype.notifyRemovedRows = function(t, e) { try { if (!0 !== e) { var i = this.checkScrollEnd, o = this.scrollEvent; this.checkScrollEnd = !1, this.scrollEvent = !1, this.resetExpressionFunc(); for (var s = t.split(","), n = 0; n < s.length; n++)this._mergeNotifyRowChanged("removeRow", s[n]); this.notifyRowChanged(), r.D.setTimeout((function(t, e) { this.checkScrollEnd = t, this.scrollEvent = e }), { key: this.id + "_notifyAfterRemovedRow", caller: this, delay: 150, args: [i, o] }) } } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyRemovedAll = function(t) {
			try {
				this.removed = !0; var e = this.hiddenRowObj.extraRow; this.hiddenRowObj = { length: 0, extraRow: e, row: {}, init: !1 }, this.loadFlag = !0, this.rowStyleArr = [], this.rowReadOnlyArr = [], this.rowDisabledArr = [], this.cellStyleArr = [], this.cellClassArr = [], this.rowStyleFixedArr = [], this.rowStyleDataArr = [], this.columnStyleFixedArr = [], this.columnStyleDataArr = [], this.columnClassObj = {}, this.cellReadOnlyArr = [], this.cellDisabledArr = [], this.extraData = { grid: {}, row: [], col: [], cell: [] }, this._removeAllTDCellClass(), this.resetExpressionFunc(); for (var i = this.getTotalCol(), o = 0; o < i; o++) { var s = this.getCellInfo(o); if (s && s.options && "expression" == s.options.inputType) for (var r = this.drawedRowLength, n = 0; n < r; n++)s.options.expressionFunc && s.options.expressionFunc[n] && (s.options.expressionFunc[n] = {}); else if ("custom" == s.options.inputType) if (1 != this.options.setCellInputTypeCustom || this.validTypeGetter) s.options.typeGetter && (s.cellManagerHashByID = {}, s.cellManagerHashByRowIndex = {}, s.cellManagerIDByRowIndex = {}); else { if (this.options.senseReader || s.options.embeddedInput) for (var l = 0; l < s.cellManagerIDByRowIndex.length; l++) { var h = s.cellManagerHashByRowIndex[l]; if (h && h.options.embeddedInput) { var d = s.cellManagerIDByRowIndex[l], p = this.id + "_" + d, u = this.dom[p], c = null; null != u && (c = WebSquare.idCache[u.uuid]), c && "function" == typeof c.remove && c.remove(), delete this.dom[p], s.cellManagerIDByRowIndex[l] = null, s.cellManagerHashByRowIndex[l] = null } } s.cellManagerHashByRowIndex = [], s.cellManagerIDByRowIndex = [] } } this.removeFocusedCell(); for (o = 0; o < this.dataRowList.length; o++) {
					var g = this.dataRowList[o]; g.style.display = "none",
						this.__addClass(g, "w2grid_hidedRow"), this.__hasClass(g, "w2grid_lastRow") && this.__removeClass(g, "w2grid_lastRow")
				} this.lastDisplayedRow = -1, this.subtotalHidden(), this.rowIndex = -1, this.lastIndex = -1, this.lastTopRowIndex = null, this.bScrollTop = -1, this.maxRowLength = 0, this.displayNoResultMessage(), this.drawFooter(); var f = { sortIcon: this.options.hideSortIconOnNoData }; this.drawHeader(void 0, f), this._setCheckboxHead(), 0 == this.getDataLength() && (this.removeFocusedCell(), "all" === this.options.visibleRowNum && this.setSize(null, this.defaultDataLayerHeight)), this.setScrollYHeight(), this.options.ref && 1 != this.removeRowByInstance && WebSquare.ModelUtil.removeInstanceNodes({ xpath: this.options.ref + "/" + this.repeatNodeTagName[0], gridNoRefresh: !0, scopeId: this.scope_id }), this.options.groupbyFilterBox && !1 !== t && this.clearFilterHistory(), 1 == this.isDrillDown && this.initDrilldown(), this.itemValueObj = {}
			} catch (t) { a.w.printStackTrace(t, null, this) }
		}, l.prototype.notifyRemovedRange = function(t) { try { this.removed = !0, this.notifyRowChanged(t) } catch (t) { a.w.printStackTrace(t) } }, l.prototype.notifyCreatedRowStatus = function(t) { try { this.rowStyleArr = this.rowStyleArr.slice(0, t).concat([null]).concat(this.rowStyleArr.slice(t)), this.rowReadOnlyArr = this.rowReadOnlyArr.slice(0, t).concat([null]).concat(this.rowReadOnlyArr.slice(t)), this.rowDisabledArr = this.rowDisabledArr.slice(0, t).concat([null]).concat(this.rowDisabledArr.slice(t)), this.rowStyleFixedArr = this.rowStyleFixedArr.slice(0, t).concat([null]).concat(this.rowStyleFixedArr.slice(t)), this.rowStyleDataArr = this.rowStyleDataArr.slice(0, t).concat([null]).concat(this.rowStyleDataArr.slice(t)) } catch (t) { a.w.printStackTrace(t) } }, l.prototype.notifyRemovedRowStatus = function(t) { try { this.rowStyleArr.splice(t, 1), this.rowReadOnlyArr.splice(t, 1), this.rowDisabledArr.splice(t, 1), this.rowStyleFixedArr.splice(t, 1), this.rowStyleDataArr.splice(t, 1) } catch (t) { a.w.printStackTrace(t) } }, l.prototype.notifyDeleteRow = function(t) { try { this._drawRowStatus(t - this.rowIndex, t), this.displayNoResultMessage(), this.hasFooter && this.options.excludeDeletedRows && this.drawFooter(), this.hasSubtotal && this.options.excludeDeletedRows && (this.subtotalHidden({ startRowIndex: 0 }), this.refreshSubtotalRow(this.rowIndex)); for (var e = 0; e < this.getColCnt(); e++) { var i = this.getColumnID(e), o = this.expressionAssArr[i]; if (null != o) for (var s = 0; s < o.length; s++) { var r = this.getColumnIndex(o[s]); this.drawCellData(t - this.rowIndex, t, r) } } } catch (t) { a.w.printStackTrace(t) } }, l.prototype.notifyUndeleteRow = function(t) { try { this._drawRowStatus(t - this.rowIndex, t), this.displayNoResultMessage(), this.hasFooter && this.options.excludeDeletedRows && this.drawFooter(), this.hasSubtotal && this.options.excludeDeletedRows && (this.subtotalHidden({ startRowIndex: 0 }), this.refreshSubtotalRow(this.rowIndex)); for (var e = 0; e < this.getColCnt(); e++) { var i = this.getColumnID(e), o = this.expressionAssArr[i]; if (null != o) for (var s = 0; s < o.length; s++) { var r = this.getColumnIndex(o[s]); this.drawCellData(t - this.rowIndex, t, r) } } } catch (t) { a.w.printStackTrace(t) } }, l.prototype.notifyReformed = function() { try { if (this.options.rowStatusVisible) for (var t = this.options.showLastRow && !this.hasSubtotal ? this.lastIndex + 1 : this.lastIndex, e = 0; e <= t; e++)this._drawRowStatus(e, this.rowIndex + e) } catch (t) { a.w.printStackTrace(t) } }, l.prototype.notifyModifyAllStatus = function(t) { try { for (var e = 0; e < this.getDataLength(); e++)this._drawRowStatus(e - this.rowIndex, e); this.displayNoResultMessage(), this.notifyStatusChanged({ rowIndex: "all" }) } catch (t) { a.w.printStackTrace(t) } }, l.prototype.notifyModifyRangeStatus = function(t, e, i) { try { var o = this.getDataLength(); if (0 <= t && e <= o) for (var s = t; s <= e; s++)this._drawRowStatus(s - this.rowIndex, s); this.displayNoResultMessage(), this.notifyStatusChanged({ startIndex: t, endIndex: e }) } catch (t) { a.w.printStackTrace(t) } }, l.prototype.notifyModifyRowStatus = function(t, e) { try { t > -1 && t < this.getDataLength() && (this._drawRowStatus(t - this.rowIndex, t), this.displayNoResultMessage(), this.notifyStatusChanged({ rowIndex: [t] })) } catch (t) { a.w.printStackTrace(t) } },
			l.prototype.notifyModifyMatchedStatus = function(t, e, i) { try { for (var o = [], s = this.getDataLength(), r = 0; r < s; r++) { var n = this.getColumnID(t), l = this.dataList.getRealRowIndex(r); if (this.dataList._getCellData(l, n) + "" == e + "") i != this.dataList._setRowStatus(l, i) && o.push(r), this._drawRowStatus(r - this.rowIndex, r), this.displayNoResultMessage() } this.notifyStatusChanged({ rowIndex: o }) } catch (t) { a.w.printStackTrace(t) } }, l.prototype.notifySetColumnDefaultValue = function(t, e) { try { this.drawColumnData(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifySettedData = function(t) { try { this.groupbyStatus.grouped && this.clearGroupby(), this.loadCheck = [], t || this.options.focusOnSetData || this.removeFocusedCell() } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifySetRowXML = function(t, e) { e ? this.notifyRowChanged(t) : this.notifyRowInserted(t) }, l.prototype.notifyRowMoveUp = function(t) { try { var e = this.extraData.row[t - 1]; this.extraData.row[t - 1] = this.extraData.row[t], this.extraData.row[t] = e, e = this.extraData.cell[t - 1], this.extraData.cell[t - 1] = this.extraData.cell[t], this.extraData.cell[t] = e, this._getFocusedRowIndex() == t && this._setFocusedCell(t - 1, this.getFocusedColumnIndex()), this.notifyRowChanged(t - 1) } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyRowMoveDown = function(t) { try { var e = this.extraData.row[t + 1]; this.extraData.row[t + 1] = this.extraData.row[t], this.extraData.row[t] = e, e = this.extraData.cell[t + 1], this.extraData.cell[t + 1] = this.extraData.cell[t], this.extraData.cell[t] = e, this._getFocusedRowIndex() == t && this._setFocusedCell(t + 1, this.getFocusedColumnIndex()), this.notifyRowChanged(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyRowModified = function(t) { try { this.changeCount++, this.drawRowData(t - this.rowIndex, t), this.hasSubtotal && this.refreshSubtotalRow(t), this.drawFooter(), this.drawHeader() } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyStatusChanged = function(t) { try { var e, i, o = !1; "object" == typeof t.rowIndex ? (e = 0, i = t.rowIndex.length, o = !0) : "all" == t.rowIndex ? (e = 0, i = this.getDataLength()) : "number" == typeof t.startIndex && "number" == typeof t.endIndex && (e = t.startIndex, i = t.endIndex); for (var s = e; s < i; s++) { var r; if (r = o ? t.rowIndex[s] : s, null != this.rowStatusColIDArr) for (var n = 0; n < this.rowStatusColIDArr.length; n++) { var l = this.getColumnIndex(this.rowStatusColIDArr[n]); this.drawCellData(r - this.rowIndex, r, l) } } this.hasFooter && (this.options.excludeDeletedRows || this.options.excludeModifiedRows) && this.drawFooter(), this.hasSubtotal && (this.options.excludeDeletedRows || this.options.excludeModifiedRows) && (this.subtotalHidden({ startRowIndex: 0 }), this.refreshSubtotalRow(this.rowIndex)) } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifySaveFocusedCell = function() { try { this.focusedCellInfo.beforeFocusedCell = !(0 == this.focusedCell.length), this.focusedCellInfo.beforeFocusedCell && (this.focusedCellInfo.beforeFocusedCellRealRowIndex = this.dataList.getRealRowIndex(this.focusedCell[0].focusedRowIndex), this.focusedCellInfo.beforeFocusedCellRealColumnIndex = this.focusedCell[0].focusedColIndex) } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifySetFocusedCell = function(t) { try { var e = this.options.filterFocusMode, i = this.focusedCellInfo.beforeFocusedCellRealRowIndex; if ("outfocus" !== e && "infocus" !== e) { if (this.focusedCellInfo.beforeFocusedCell) for (var o = 0; o < this.getDataLength(); o++)if (this.dataList.getRealRowIndex(o) == i) { this._setFocusedCell(o, this.focusedCellInfo.beforeFocusedCellRealColumnIndex, !1, { isSort: t }); break } } else "outfocus" == e && this.outFocusedCell(); this.focusedCellInfo = {} } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifySettedFilter = function(t) {
				try {
					var e = t && t.isSort, i = t && t.fiteredColID; if (this.notifySetFocusedCell({ isSort: e }), e && this.syncWithSortStatus(), this.groupbyStatus.grouped) for (var o in this.customFilterStatusObj) if (this.customFilterStatusObj[o]) { this.rowNumArr = []; for (var s = 0; s < this.getDataLength(); s++)this.rowNumArr.push(s); break } 1 == this.isDrillDown && this._linkedDataList && (this.setCellInfo(), this.initDrilldown())
						; var r = !t || !1 !== t.keepTop, n = []; if (this.hiddenRowObj.init) { for (var l in this.hiddenRowObj.row) !0 === this.hiddenRowObj.row[l] && n.push(l); this.clearRowVisible({ noDraw: !0 }) } if (this._mergeNotifyFilter(), this.notifyDataChanged({ keepTop: r }), 0 == this.getDataLength() && this.removeFocusedCell(), this.setScrollYHeight(), e && !this.groupbyStatus.grouped && this.drawHeaderSortImages(), i && !e && this.options.useFilterList) { var h = this.bodyToHeaderRelation[i]; if (h) { var d = this.getElementById(this.id + "_" + h + "_filter"); d && WebSquare.style.addClass(d, "w2grid_customFilter_filter") } } for (s = 0; s < n.length; s++)this.setRowVisible(n[s])
				} catch (t) { a.w.printStackTrace(t, null, this) }
			}, l.prototype.notifySettedFilterByUser = function(t) { try { if (this.options.useFilterListSync) { var e = t.colID, i = JSON.parse(t.oldFilteredRowIndexArr), o = JSON.parse(t.newFilteredRowIndexArr); if (this.groupbyStatus.grouped); else if (this.options.useFilterList) { this.customFilterList || this.createCustomFilterList(null, !0), this.customFilterList.filterHistory.column[0] !== e && (this.customFilterList.filterHistory.column.unshift(e), this.customFilterList.filterHistory.filteredRowIndexArr.unshift(i)); var s = this.dataList.getColData(e, o), r = this.getUniqueValueOfArray(s), n = this.changeItemValue("label", e, r); this.customFilterList.customFilterListFilterInfo || (this.customFilterList.customFilterListFilterInfo = {}), this.customFilterList.customFilterListFilterInfo[e] = []; for (var l = 0; l < n.length; l++) { var h = n[l], d = this; "string" == typeof h && (h = h.replace(/[\^\$\.\[\]\{\}\+\(\)\|\*\\\?]/g, (function(t) { return d.replacechar(t) }))), this.customFilterList.customFilterListFilterInfo[e].push(h) } } } } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyBeforeClearSort = function() { try { this.notifySaveFocusedCell(), this.clearHeaderSort() } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyClearSortFilter = function() { try { var t = this._getFocusedRowIndex(), e = this.getFocusedColumnIndex(); this.syncWithSortStatus(), this.rowNumArr = null, this.removeFocusedCell(), this._mergeNotifyFilter(), this.notifyDataChanged({ keepTop: !0 }), 0 == this.getDataLength() && this.removeFocusedCell(), this.setScrollYHeight(), "infocus" == this.options.filterFocusMode && this._setFocusedCell(t, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyBeforeSettedColumnFilter = function() { try { this.lastTopRowIndex = null, this.scrollEvent = !1, this.rowIndex = 0 } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyAfterSettedColumnFilter = function() { try { var t = this.getElementById(this.id + "_scrollY_div"), e = t.scrollTop; this.bScrollTop = -1, this.scrollEvent = !0, t.scrollTop = e, this.options.groupbyFilterBox && this.refreshGroupbyFilterBox() } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyBeforeRemovedColumnFilter = function() { try { this.lastTopRowIndex = null, this.scrollEvent = !1, this.rowIndex = 0 } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyAfterRemovedColumnFilter = function() { try { var t = this.getElementById(this.id + "_scrollY_div"), e = t.scrollTop; this.bScrollTop = -1, this.scrollEvent = !0, t.scrollTop = e, this.options.groupbyFilterBox && this.refreshGroupbyFilterBox() } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyRemovedFilter = function(t) { try { !0 === t && this.clearHeaderSort(), this.rowNumArr = null, this._mergeNotifyFilter(), this.notifyDataChanged({ keepTop: !0 }), 0 == this.getDataLength() && this.removeFocusedCell(), this.lastTopRowIndex = null, this.setScrollYHeight() } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyClearFilter = function(t) {
				try {
					for (var e in this.clearHeaderSort(), this.rowNumArr = null, this._mergeNotifyFilter(), t || (this.adjustDraw_keepTop = !0, this.notifyDataChanged({ keepTop: !0 }), this.adjustDraw_keepTop = null), 0 == this.getDataLength() && this.removeFocusedCell(), this.lastTopRowIndex = null, this.setScrollYHeight(), this.headerInfoHash) { var i = this.getElementById(this.id + "_" + e + "_filter"); i && WebSquare.style.removeClass(i, "w2grid_customFilter_filter") } this.itemValueObj = {}, this.firstOpenCustomFilter = {}, this.customFilterStatusObj = {},
						this.customFilterList && (this.customFilterList.filterHistory = { column: [], filteredRowIndexArr: [] }, this.customFilterList.customFilterListFilterInfo = {}), this.groupbyFilterList && (this.groupbyFilterList.filterHistory = { column: [], filteredRowIndexArr: [] })
				} catch (t) { a.w.printStackTrace(t, null, this) }
			}, l.prototype.notifyMultisort = function() { try { this.syncWithSortStatus(), this.drawHeaderSortImages() } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyBeforeInitDataList = function() { try { this.removeAllFinish = !0 } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyAfterInitDataList = function() { try { this.loadCheck = [], this.initFlag = !0, this.skipScrollEndEvent = !0, this.skipScrollStartEvent = !0, this.hasFooter && this.initFooterDataObj(), this.initHeaderDataObj(), 1 == this.isDrillDown && this.initDrilldown(), this.removeAllFinish = !1, this.initColumns() } catch (t) { a.w.printStackTrace(t, null, this) } }, l.prototype.notifyRefresh = function(t) { try { !this.startedDisplayNone && this.rowIndex >= 0 && (t && this.setDataTable(), this._mergeRefresh(), this.drawData(this.rowIndex, 0), t && this.setScrollYHeight(), this.displayNoResultMessage()) } catch (t) { a.w.printStackTrace(t, null, this) } }; var h, d = i(1960), p = i(7275), u = function() { }; u.prototype.toHTML = function() {
				try {
					var t = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + "/mainZIndex/@value") || "10", e = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + "/xScrollZIndex/@value") || "20", i = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + "/yScrollZIndex/@value") || "15"; if (this.uncompleted) return; var o = [], r = "scroll" === this.options.overflowY, n = (this.options.drawType, "hidden"), l = !0 === this.options.scrollXNative ? "display:none;" : "", h = "native" === this.options.drawType ? "visibility:hidden;" : "", d = this.options.title ? " title='" + this.options.title.wq_replaceAll("'", "&#39;") + "'" : "", p = this.options.moreButtonTitle ? this.options.moreButtonTitle.wq_replaceAll("'", "&#39;") : WebSquare.language.getMessage("Grid_more_Button") || "목록 더보기", u = p ? " title='" + p + "'" : "", c = "none" == this.options.focusMode || "linear" == this.options.focusFlow ? "" : " tabIndex='0'", g = this.options.scrollFocus ? " tabIndex='0'" : "", f = "" == this.options.style ? "style='overflow:" + n + ";'" : "style='" + this.options.style + ";overflow:" + n + ";'", m = this.options.readOnly ? " w2grid_readonly_outer" : "", y = function(t) { return this._useRole() ? " role='" + t + "' " : "" }; if (o.push("<div id='" + this.id + "' class='w2grid " + this.options.className + m + "' " + f + d + c + ">"), this.options.senseReader && this.options.useStartEndDiv && o.push("<div id='" + this.id + "_gridstart_div' style='height:0px; font-size:0; line-height:0px;' tabindex='0'>그리드 시작</div>"), this.options.groupbyZone && this.options.groupbyFilterBox && "top" == this.options.groupbyFilterBoxLocation && (o.push("<div id='" + this.id + "_groupbyFilterBox_div' class='w2grid_groupbyFilterBox' style='top:0px;left:0px; right:" + (r ? this.scrollLayerWidthSize : "0") + "px;float:left;'>"), o.push("<div id='" + this.id + "_groupbyFilterBox_main' class='w2grid_groupbyFilterBox_main'>"), o.push("<div id='" + this.id + "_groupbyFilterBox_buttons' class='w2grid_groupbyFilterBox_buttons' >"), o.push('<input id="' + this.id + '_groupbyFilterBox_delete" type="button" value="X" class="w2grid_groupbyFilterBox_delete" />'), o.push('<input id="' + this.id + '_groupbyFilterBox_apply" type="checkbox" class="w2grid_groupbyFilterBox_apply" />'), o.push("</div>"), o.push('<div id="' + this.id + '_groupbyFilterBox_select"' + y.call(this, "combobox") + 'aria-labelledby="' + this.id + '_groupbyFilterBox_itemTable" aria-autocomplete="none" class="" tabindex="0">'), o.push("</div>"), o.push("</div>"), o.push("</div>")), this.options.groupbyZone) { var b = "<div id='" + this.id + "_groupbyZone_div' class='w2grid_groupbyZone' style='width:0px; height:0px;'>", w = ""; this.options.groupbyZoneSearch && (w = "<div id='" + this.id + "_groupbyZone_search' class='w2grid_groupbyZone_search'></div>"), o.push(b + w + "</div>") }
					return o.push("<div id='" + this.id + "_main_div' class='w2grid_main' style='z-index:" + t + ";overflow:" + n + ";position:absolute;left:0px; right:" + (r ? this.scrollLayerWidthSize : "0") + "px; top:0px; bottom:" + this.scrollLayerWidthSize + "px;float:left;'>"), o.push(this.mainDataGridLayout()), this.options.useMoreButton && o.push("<button id='" + this.id + "_grid_more_button' class='w2_grid_more_button'" + u + "></button>"), o.push("</div>"), this.options.groupbyZone && this.options.groupbyFilterBox && "bottom" == this.options.groupbyFilterBoxLocation && (o.push("<div id='" + this.id + "_groupbyFilterBox_div' class='w2grid_groupbyFilterBox' style='left:0px; right:" + (r ? this.scrollLayerWidthSize : "0") + "px; bottom:0px;float:left;'>"), o.push("<div id='" + this.id + "_groupbyFilterBox_main' class='w2grid_groupbyFilterBox_main' >"), o.push("<div id='" + this.id + "_groupbyFilterBox_buttons' class='w2grid_groupbyFilterBox_buttons' >"), o.push('<input id="' + this.id + '_groupbyFilterBox_delete" type="button" value="X" class="w2grid_groupbyFilterBox_delete"/>'), o.push('<input id="' + this.id + '_groupbyFilterBox_apply" type="checkbox" class="w2grid_groupbyFilterBox_apply" />'), o.push("</div>"), o.push('<div id="' + this.id + '_groupbyFilterBox_select"' + y.call(this, "combobox") + 'aria-labelledby="' + this.id + '_groupbyFilterBox_itemTable" aria-autocomplete="none" class="" tabindex="0">'), o.push("</div>"), o.push("</div>"), o.push("</div>")), o.push("<div id='" + this.id + "_scrollX_div' class='w2grid_scrollX' style='z-index:" + e + ";overflow-x:hidden;overflow-y:hidden;position:absolute; height:0px; left:0px; right:" + (r ? this.scrollWidthSize : "0") + "px; bottom:0px;" + l + "'>"), o.push(this.getScrollX()), o.push("</div>"), o.push("<div id='" + this.id + "_scrollY_div' class='w2grid_scrollY' style='z-index:" + i + ";position:absolute; overflow-x:hidden;overflow-y:scroll;width:" + (r || "native" === this.options.drawType ? this.scrollLayerWidthSize : "0") + "px; height: 100%;right:0px;" + h + g + "'>"), o.push(this.getScrollY()), o.push("</div>"), o.push("<div id='" + this.id + "_iScrollX' class='w2grid_iScrollX' style='visibility:hidden;'></div>"), o.push("<div id='" + this.id + "_iScrollY' class='w2grid_iScrollY' style='visibility:hidden;'></div>"), o.push("<div id='" + this.id + "_resize_line' class='w2grid_resize_line' style='display:none;position:absolute;top:10px; bottom:0px;border:0px dashed #222222; border-left-width:1px;'></div>"), o.push("<div id='" + this.id + "_noresult' style='display:none;position:absolute;" + this.options.noResultMessageStyle + "' class='" + this.options.noResultMessageClass + "'>" + this.options.noResultMessage + "</div>"), (this.options.senseReader && this.options.useStartEndDiv || 1 == this.options.moveKeyEditModeAll) && o.push("<div id='" + this.id + "_gridend_div' style='height:0px; font-size:0; line-height:0px;' tabindex='0'>그리드 끝</div>"), o.push("</div>"), o.join("")
				} catch (t) { a.w.printStackTrace(t, null, this) }
			}, u.prototype.getScrollY = function() { try { return "<div id='" + this.id + "_size_y' style='height:0px; position:absolute; top:0px; left:0px; width:18px;'></div>" } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getScrollX = function() {
				try {
					for (var t = this.getFixedColumnLastIndex(), e = 0, i = 0; i < t; i++)this.hiddenList[i] || (e += this.colWidthList[i]); var o = this.getFixedRightColumnLastIndex(), s = 0; for (i = this.colWidthList.length - 1; i >= o; i--)this.hiddenList[i] || (s += this.colWidthList[i]); var r = this.options.scrollFocus ? " tabIndex='0'" : " tabIndex='-1'", n = [], l = this.options.fixedColumnScrollHidden ? "hidden" : "scroll"; return n.push("<table id='" + this.id + "_scrollX_table' style='height:18px;table-layout:fixed; border-collapse:collapse; border-spacing:0px; width:100%'>"), n.push("<tr>"), n.push("<td id='" + this.id + "_scrollX_left' style='border:0px solid red;padding:0px 0px 0px 0px;height:" + this.scrollLayerWidthSize + "px;width:" + e + "px;vertical-align:bottom;'>"), n.push("<div style='height:" + this.scrollLayerWidthSize + "px;overflow-x:" + l + ";overflow-y:hidden'></div>"), n.push("</td>"), n.push("<td style='border:0px solid orange;padding:0px 0px 0px 0px;height:18px;'>"),
						n.push("<div id='" + this.id + "_scrollX_right' style='height:18px;border:0px solid blue; overflow-x:scroll;overflow-y:hidden;padding:0px 0px 0px 0px;padding-top:-5px;'" + r + ">"), n.push("<div id='" + this.id + "_scroll_size' style='height:1px;width:" + parseInt(this.gridWidth - e - s) + "px'></div>"), n.push("</div>"), n.push("</td>"), n.push("<td id='" + this.id + "_scrollX_fixedRight' style='border:0px solid red;padding:0px 0px 0px 0px;height:" + this.scrollLayerWidthSize + "px;width:" + s + "px;vertical-align:bottom;'>"), n.push("<div style='height:" + this.scrollLayerWidthSize + "px;overflow-x:scroll;overflow-y:hidden'></div>"), n.push("</td>"), n.push("</tr>"), n.push("</table>"), n.join("")
				} catch (t) { a.w.printStackTrace(t, null, this) }
			}, u.prototype.mainDataGridLayout = function() { try { this.setTableStruct(); var t = []; return t.push(this.getBodyTable()), t.push(this.getFooterTable()), this.setInitialCSS(), t.join("") } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setColArr = function() { try { this.colGroupArr = [], this.setColWidth(), this.gridWidth = 0; var t, e, i = -1; if (this.options.rowStatusVisible) { var o = 40; this.options.rowStatusWidth.length > 0 && (this.options.rowStatusWidth.indexOf("*") > -1 ? (o = this.options.rowStatusWidth, i++) : this.options.rowStatusWidth - 0 > -1 && (o = this.options.rowStatusWidth - 0)), this.colWidthList.unshift(o), this.hiddenList.unshift(!1), this.hiddenAdaptiveList.unshift(!1) } if (this.options.rowNumVisible) { o = 40; this.options.rowNumWidth.length > 0 && (this.options.rowNumWidth.indexOf("*") > -1 ? (o = this.options.rowNumWidth, i++) : this.options.rowNumWidth - 0 > -1 && (o = this.options.rowNumWidth - 0)), this.colWidthList.unshift(o), this.hiddenList.unshift(!1), this.hiddenAdaptiveList.unshift(!1) } if (i > -1) { this.autofitColumn = !0; for (var s = 0; s < 2; s++)this.colWidthList[s] && "string" == typeof this.colWidthList[s] && this.colWidthList[s].indexOf("*") > -1 && (this.autofitColumnIndexArr.push(s), this.autofitColumnWidthArr[s] = this.colWidthList[s]) } if (this.isIE6or7) { t = [], e = this.colIndexes.bodyColInfo.colSpanArr; var r = this.colIndexes.bodyColInfo.colIndexArr.length; for (s = 0; s < r; s++)if (e[s]) for (var n = 0; n < e[s]; n++)t[n] = !0 } this.colGroupArr.push("<colgroup>"); for (s = 0; s < this.colWidthList.length; s++) { null == this.colWidthList[s] && (this.colWidthList[s] = 70); var l = isNaN(this.colWidthList[s]) ? 0 : this.colWidthList[s]; this.hiddenList[s] ? l = 0 : (this.gridWidth += l, this.isIE6or7 && (s < this.defaultColCnt || !t[s]) && (l--, s == this.defaultColCnt && l--)), this.colGroupArr.push("<col id='colGroupID_" + s + "' style='width:" + l + "px;white-space:nowrap' />") } this.colGroupArr.push("</colgroup>") } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setCss = function() {
				try {
					if (this.options.headerTableClass = this.struct.head.attr.class || "gridHeaderTableDefault", this.options.headerTrClass = this.struct.head.attr.rowClass || "gridHeaderTRDefault", this.options.headerTdClass = this.struct.head.attr.columnClass || "gridHeaderTDDefault", this.options.bodyTableClass = this.struct.body.attr.class || "gridBodyTableDefault", this.options.bodyTrClass = this.struct.body.attr.rowClass || "gridBodyTRDefault", this.options.bodyTdClass = this.struct.body.attr.columnClass || "gridBodyDefault", r.D.isIEAllVersion() ? this.options.gridNativeClass = "gridNativeIE" : this.options.gridNativeClass = "gridNative", this.hasFooter && (this.options.footerTableClass = this.struct.foot.attr.class || "gridFooterTableDefault", this.options.footerTrClass = this.struct.foot.attr.rowClass || "gridFooterTRDefault", this.options.footerTdClass = this.struct.foot.attr.columnClass || "gridFooterTDDefault"), this.hasSubtotal) {
						this.options.subtotalTrClass = this.struct.subtotalArr[this.struct.subtotalArr.length - 1].attr.rowClass || "gridSubtotalTRDefault", this.options.subtotalTdClass = this.struct.subtotalArr[this.struct.subtotalArr.length - 1].attr.columnClass || "gridSubtotalDefault"; for (var t = 0; t < this.struct.subtotalArr.length; t++)if (this.struct.subtotalArr[t].attr.subtotalClass) { this.subtotalClassList = []; break } if (this.subtotalClassList) for (t = 0; t < this.struct.subtotalArr.length; t++) {
							var e = this.struct.subtotalArr[t].attr.subtotalClass || "gridSubtotalDefault"
							; this.subtotalClassList.push(e)
						}
					}
				} catch (t) { a.w.printStackTrace(t, null, this) }
			}, u.prototype.setInitialCSS = function() { try { this.options.oddEvenColorDisplay && (WebSquare.cssStyleSheet.addRule("#" + this.id + " .evenTd", "background-color:" + this.options.evenRowBackgroundColor), WebSquare.cssStyleSheet.addRule("#" + this.id + " .oddTd", "background-color:" + this.options.oddRowBackgroundColor)), this.rowStyleIndex = 0, this.cellStyleIndex = 0, this.readOnlyTdStyle = "", this.readOnlyTdImg = "", this.disabledTdStyle = "", this.rowOverStyle = "", "" != this.options.readOnlyBackgroundColor && (this.readOnlyTdStyle = "background-color:" + this.options.readOnlyBackgroundColor), "" == this.options.readOnlyBackgroundImg && "" == this.options.readOnlyBackgroundImgCSS || (this.options.readOnlyBackgroundImgCSS ? this.readOnlyTdImg = this.options.readOnlyBackgroundImgCSS : this.readOnlyTdImg = "background:url(" + this.options.readOnlyBackgroundImg + ") no-repeat center center; background-size: cover"), "" != this.options.disabledBackgroundColor && (this.disabledTdStyle = "background-color:" + this.options.disabledBackgroundColor), "" != this.options.disabledFontColor && (this.disabledTdStyle = "" != this.disabledTdStyle ? this.disabledTdStyle + ";" : "", this.disabledTdStyle += "color:" + this.options.disabledFontColor), "" != this.options.rowNumBackgroundColor && WebSquare.cssStyleSheet.addRule("#" + this.id + " ." + this.options.bodyTdClass + "_rowNumber", "background-color:" + this.options.rowNumBackgroundColor), this.options.rowMouseOver && (this.rowOverStyle = "background-color:" + this.options.rowMouseOverColor), -1 != this.options.defaultHeaderCellHeight && WebSquare.cssStyleSheet.addRule("#" + this.id + " th." + this.options.headerTdClass, "height:" + this.options.defaultHeaderCellHeight + "px"), -1 != this.options.defaultCellHeight && (WebSquare.cssStyleSheet.addRule("#" + this.id + " td." + this.options.bodyTdClass, "height:" + this.options.defaultCellHeight + "px"), -1 == this.options.defaultHeaderCellHeight && WebSquare.cssStyleSheet.addRule("#" + this.id + " th." + this.options.headerTdClass, "height:" + this.options.defaultCellHeight + "px")) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getGridClassName = function(t, e) { try { return null == t || "" == t ? e : t } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.grid2TableXml = function(t) { try { var e = WebSquare.Elem.api.getElementsByTagName(this.element, t, s.v._XML_NAMESPACE.W2); return e.length > 0 ? this.oneGrid2TableXml(e[0]) : null } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.xml2JSON = function(t) { try { var e = { attr: {}, rowArr: [], rowAttrArr: [] }; e.attr = WebSquare.Parser.parseAttribute(t); for (var i = WebSquare.Elem.api.getElementsByTagName(t, "row", s.v._XML_NAMESPACE.W2), o = 0; o < i.length; o++) { e.rowAttrArr[o] = WebSquare.Parser.parseAttribute(i[o]); for (var r = WebSquare.Elem.api.getElementsByTagName(i[o], "column", s.v._XML_NAMESPACE.W2), n = [], l = 0; l < r.length; l++) { var h = WebSquare.Parser.parseAttribute(r[l]); h["@xml"] = r[l], n.push(h) } e.rowArr.push(n) } return e } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.oneGrid2TableXml = function(t) { try { var e = WebSquare.xml.serialize(t), i = e.indexOf("w2:header") >= 0 ? "th" : "td"; return e = (e = (e = (e = (e = e.wq_replaceAll("w2:header", this.options.fixPrint ? "tbody" : "thead")).wq_replaceAll("w2:gBody", "tbody")).wq_replaceAll("w2:footer", "tbody")).wq_replaceAll("w2:row", "tr")).wq_replaceAll("w2:column", i), WebSquare.xml.parse(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setColWidth = function() { try { var t = this.getColCnt(); this.colWidthList = [], this.autoFitColWidthList = null, this.hiddenList = [], this.hiddenAdaptiveList = []; for (var e = 0; e < t; e++)this.colWidthList[e] = null, this.hiddenList[e] = !1, this.hiddenAdaptiveList[e] = !1; this.initializeTableInfo() } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getColCnt = function() { try { for (var t = 0, e = this.htmlInfo ? this.htmlInfo.head.rowArr[0] : this.struct.head.rowArr[0], i = 0; i < e.length; i++) { var o = e[i]; t += parseInt(o.colSpan, 10) || 1 } return t } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.initializeTableInfo = function() {
				try {
					var t = this, e = function(e) {
						if (null == e) return null
							; for (var i = [], o = [], s = [], a = [], r = [], n = e.rowArr, l = [], h = 0; h < n.length; h++) { for (var d = [], p = 0; p < t.colWidthList.length; p++)d.push(!1); l.push(d) } var u = 0; t.options.rowNumVisible && (i.push(0), s.push(0), a.push(n.length), r.push([u++])), t.options.rowStatusVisible && (i.push(!0 === t.options.rowNumVisible ? 1 : 0), s.push(0), a.push(n.length), r.push([u++])); for (h = 0; h < n.length; h++) { var c = n[h], g = 0; for (p = 0; p < c.length; p++) { for (var f = c[p], m = parseInt(f.colSpan || 1), y = parseInt(f.rowSpan || 1); void 0 !== l[h][g] && l[h][g];)g++; f.colIndex = g + t.defaultColCnt, i.push(g + t.defaultColCnt), s.push(h), a.push(y); var b = f.width || ""; if (m > 1) { if ("string" == typeof b && b.indexOf("*") > -1) { t.autofitColumn = !0; for (var w = 0; w < m; w++) { var v = g + w; t.colWidthList[v] = b, t.autofitColumnWidthArr[v + t.defaultColCnt] = b, t.autofitColumnIndexArr.push(v + t.defaultColCnt) } } o[i.length - 1] = m } if (1 == m && null == t.colWidthList[g]) if ("string" == typeof b && b.indexOf("*") > -1) { t.autofitColumn = !0; v = g; t.colWidthList[v] = b, t.autofitColumnIndexArr.push(v + t.defaultColCnt), t.autofitColumnWidthArr[v + t.defaultColCnt] = b } else t.colWidthList[g] = parseInt(b || 0); for (var C = 0; C < m; C++) { r[g + t.defaultColCnt + C] || (r[g + t.defaultColCnt + C] = []), r[g + t.defaultColCnt + C].push(u), l[h][g + C] = !0, "true" == f.hidden && (t.hiddenList[g + C] = !0); for (var I = 1; I < y; I++)l[h + I][g + C] = !0 } u++, delete f.hidden } } return { colIndexArr: i, colSpanArr: o, trIndexArr: s, rowSpanArr: a, colIndexMatch: r }
					}; if (this.colIndexes = { headerColInfo: e(this.struct.head), bodyColInfo: e(this.struct.body), footerColInfo: e(this.struct.foot) }, this.hasSubtotal) { this.colIndexes.subtotalColInfo = []; for (var i = 0; i < this.struct.subtotalArr.length; i++) { var o = e(this.struct.subtotalArr[i]); this.colIndexes.subtotalColInfo.push(o), this.colIndexes.subtotalColInfo[this.struct.subtotalArr[i].attr.targetColumnID] = o } }
				} catch (t) { a.w.printStackTrace(t, null, this) }
			}, u.prototype.getFooterTable = function() { try { if (!this.hasFooter) return ""; this.hasFooter = !0; var t = ""; this.options.footerSummary ? t = this.options.footerSummary ? " summary='" + this.options.footerSummary.wq_replaceAll("'", "&#39;") + "'" : "" : this.options.captionTitle && this.options.footerSummaryAuto && (t = " summary='" + this.options.captionTitle + WebSquare.language.getMessage("Grid_footer_caption") + "'"), "html5" == WebSquare.docType && (t = ""); var e = ""; if (e = "<table id='" + this.id + "_foot_table' class='" + this.options.footerTableClass + "' style='position:absolute; bottom:0px; table-layout:fixed; border-collapse:collapse; border-spacing:0px; width:" + this.gridWidth + "px;'" + t + ">", e += this.getColGroup(this.id + "_col_footer"), this.options.footerCaption ? e += "<caption>" + this.options.footerCaption + "</caption>" : this.options.captionTitle && this.options.footerCaptionAuto && (e += "<caption>" + this.options.captionTitle + WebSquare.language.getMessage("Grid_footer_caption") + "</caption>"), r.D.isSafari() || r.D.isChrome() && r.D._getChromeVersion() < 94) e += "<thead><tr></tr></thead>"; else if (r.D.isIE()) { for (var i = "", o = 0; o < this.getColCnt(); o++)i += "<td></td>"; e += "<thead style='visibility:collapse;'><tr>" + i + "</tr></thead>" } e += this.getTableHtml(this.htmlInfo.foot, "tbody", "td", this.options.footerTdClass), e += "</table>"; var s = r.D.getDataPrefix("or_wd="), n = r.D.getDataPrefix("dis="); return e = (e = e.wq_replaceAll("width=", s)).wq_replaceAll("disabled=", n) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getBodyTable = function() {
				try {
					var t = "width:" + this.gridWidth + "px;'"; this.isIE6or7 && (t = "'"); var e = ""; this.options.summary && "html5" != WebSquare.docType && (e = " summary = '" + (this.element.getAttribute("summary") || "").wq_replaceAll("'", "&#39;") + "' "); var i = "", o = "native" === this.options.drawType ? "auto" : "hidden", s = !0 === this.options.scrollXNative ? "auto" : "hidden", n = "native" === this.options.drawType ? " " + this.options.gridNativeClass : "", l = "native" === this.options.drawType ? "" : " border-collapse:collapse"; if (i = "<div id='" + this.id + "_dataLayer' class='w2grid_dataLayer' style='position:absolute; width:100%; top:0px;bottom:0px;overflow-x:" + s + ";overflow-y:" + o + ";'>",
						i += this.getGridHeaderFillerTable(this.headerXml, this.options.headerTdClass, this.options.headerTrClass, this.id + "_head_table", this.options.headerTableClass), i += "<table id='" + this.id + "_body_table' class='" + this.options.headerTableClass + n + "' style='position:absolute;left:0px;top:0px;table-layout:fixed;" + l + "; border-spacing:0px;" + t + e + ">", i += this.getColGroup(this.id + "_col_body"), this.captionXml) { var h = WebSquare.xml.parse("<caption/>"), d = null, p = WebSquare.Parser.parseAttribute(this.captionXml); for (var u in p) { if ("id" == u) { var c = p[u]; c && h.documentElement.setAttribute("id", this.id + "_" + c) } else h.documentElement.setAttribute(u, p[u]); "value" == u && (d = p[u]) } if (d) h.documentElement.appendChild(h.createTextNode(d)); else for (var g = this.captionXml.getChildNodes(), f = 0; f < g.length; f++)if (3 === g[f].getNodeType()) { var m = h.createTextNode(g[f].getNodeValue()); h.documentElement.appendChild(m) } i += WebSquare.xml.noNameSpaceSerialize(h) } if (this.isWebKit) { if (!this.captionXml) { var y = "transparent", b = "0"; try { for (f = 0; f < document.styleSheets.length; f++) { var w = document.styleSheets[f]; try { w.cssRules } catch (t) { continue } for (var v = 0; w.cssRules && v < w.cssRules.length; v++) { var C = w.cssRules[v]; if (C.selectorText == "." + this.options.headerTableClass) { y = C.style["border-top-color"], b = parseInt(C.style["border-top-width"]) / 2, f = document.styleSheets.length; break } } } } catch (t) { } i += "<caption style='height:" + b + "px;background-color:" + y + ";'></caption>" } (r.D.isSafari() || r.D.isChrome() && r.D._getChromeVersion() < 94) && (i += "<thead><tr></tr></thead>") } i += this.getTableHtml(this.htmlInfo.head, "thead", "th", this.options.headerTdClass); n = ""; "native" === this.options.drawType && (n = " class='" + this.options.gridNativeClass + "'"), i += "<tbody id='" + this.id + "_body_tbody'" + n + "></tbody>", i += "</table>", i += "</div>"; var I = r.D.getDataPrefix("or_wd="); return i = i.wq_replaceAll("width=", I)
				} catch (t) { a.w.printStackTrace(t, null, this) }
			}, u.prototype.getTableInfo = function(t, e, i) { try { var s = o.x.extend({}, t.attr), r = [], n = t.rowAttrArr || [{}], l = t.rowArr; s.id = this.id + "_" + e + "_tbody", s.style = ""; for (var h = 0; h < l.length; h++) { r.push([]); for (var d = 0; d < l[h].length; d++) { var p = o.x.extend({}, l[h][d]); if (p.class = e + " " + e + "_data", this.isIE6or7) { var u = parseInt(p.colSpan || "1"), c = parseInt(p.colIndex); if (u > 1) { for (var g = 1; g < u; g++)0 != this.hgap[i + "_" + c] && (this.hgap[i + "_" + (c + g)] = !0); this.hgap[i + "_" + c] = !0 } else this.hgap[i + "_" + c] = !1 } var f = p.textAlign, m = p.style ? p.style + ";" : ""; m = m + "text-align:" + (f || "center"), p.style = m, r[h].push(p) } } return { attr: s, rowArr: r, rowAttrArr: n } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getBodyHtmlInfo = function() {
				try {
					var t = this.options.bodyTdClass, e = this.options.bodyTrClass, i = this.getTableInfo(this.struct.body, t, e), o = i.attr, r = i.rowArr, n = i.rowAttrArr; this.oneRowLength = r.length, this.oneRowDataLength = 0, this.tdIdList = [], this.bodyIdColIndexMap = {}, this.colMoveIndexMap = {}; for (var l = 0, h = {}, d = 0; d < r.length; d++) {
						n[d].trIndex = d, this.oneRowDataLength += r[d].length; for (var u = 0; u < r[d].length; u++) {
							var c = r[d][u], g = c.style.split(";"); if (g.length > 0) for (var f = 0; f < g.length; f++)if (g[f].indexOf(":") > -1) { try { var m = g[f].split(":")[0].wq_trim(), y = g[f].split(":")[1].wq_trim(); this.options.useDefaultStyle ? this.setDefaultStyle(l, m, y) : "text-align" !== m || c.textAlign ? this.setColumnStyle(l, m, y) : this._setInitStyle(l, m, y) } catch (t) { } if (!this.options.applyAllColumnStyle) break } var b = this.options.adaptiveStyle || s.v.getConfiguration("/WebSquare/" + this.options.pluginName + "/adaptiveStyle/@value"); if ("none" == this.options.adaptiveStyle && (b = ""), b = c.adaptiveStyle || b, "none" == c.adaptiveStyle && (b = ""), b) { var w = b.split(";"); if (w.length > 0) for (var v = 0; v < w.length; v++)if (w[v].indexOf(":") > -1) try { var C = w[v].split(":")[0].wq_trim(), I = w[v].split(":")[1].wq_trim(); this.setAdaptiveColumnStyle(l, C, I) } catch (t) { } } "textarea" == c.inputType && "all" == c.displayType && (c.style += ";word-break:break-all;white-space:normal;"); var _ = c.id; if (null == c.col_id ? (c.col_id = _, c.id = this.id + "_" + _, c["@xml"] = c["@xml"].cloneNode(!0), c["@xml"].setAttribute("col_id", _), c["@xml"].setAttribute("id", this.id + "_" + _)) : _ = c.col_id,
								this._setCellInfo(_, c["@xml"]), this.bodyIdColIndexMap[_] = l, 0 == d && (this.colMoveIndexMap[_] = l), h[_]) { var x = WebSquare.language.getMessage("E_comp_duplicated_Msg", _) || "id[" + _ + "] 가 중복사용되었습니다. 소스코드를 확인하세요."; $l(x) } else h[_] = _; this.tdIdList.push(_), "" === _ && p.k.printLog("warning : The " + this.id + " column name for column index " + l + " is missing."), l++
						}
					} return { attr: o, rowArr: r, rowAttrArr: n }
				} catch (t) { a.w.printStackTrace(t, null, this) }
			}, u.prototype.getHeaderHtmlInfo = function() { try { var t = this.options.headerTdClass, e = this.options.headerTrClass, i = this.getTableInfo(this.struct.head, t, e), o = i.attr, s = i.rowArr, r = i.rowAttrArr, n = []; this.thIdList = [], this.colMoveHeaderIndexMap = {}, o.id = this.id + "_head_table", o.class = this.options.headerTableClass; var l = /(?:^|;)\s*height\s*:\s*(\d*)px\s*(?:$|;)/i.exec(this.struct.head.attr.style); l && 2 == l.length && (this.headerHeight = parseInt(l[1])), o.style = this.options.hideHeader ? "display:none" : "", this.headCellInfoHash = {}; for (var h = 0; h < s.length; h++) { n.push([]); for (var d = 0; d < s[h].length; d++) { var p = s[h][d], u = null, c = p.inputType, g = p.dataType, f = p.value; if (void 0 !== f && null != f || void 0 !== (f = p.defaultValue) && null != f || (f = ""), "checkbox" == c) u = "<input type='checkbox' style='border:0px solid blue;background-color:transprent;' />"; else if ("select" == c) { var m = ""; if (this.options.chooseOption) { if (m = this.options.chooseOptionLabel || this.defaultChooseOptionLabel, this.options.useLocale && this.options.chooseOptionLabelLocaleRef) (b = this.getLocaleValue(this.options.chooseOptionLabelLocaleRef)) && (m = b) } else if (this.options.allOption) { m = WebSquare.language.getMessage("Grid_all") || "-전체-" } else if ("json" !== p["@xml"]._elementType) { var y = (WebSquare.xml.serialize(p["@xml"]).match(/label\s*>[^<]+<\//) || "").toString(); "" !== y && (m = y.slice(y.toString().indexOf(">") + 1, -2)) } u = "<div style='width:100%;height:20px;top:0px;left:0px;position:relative;background-color:#ffffff' class='w2selectbox " + this.options.headerTdClass + " " + this.options.headerTdClass + "_data'><span style='display:none'></span><table class='w2selectbox_table_main'><tr class='w2selectbox_row w2selectbox_row_main'><td class='w2selectbox_col_label'><div class='w2selectbox_label'>" + m + "</div></td><td class='w2selectbox_col_button'></td></tr></table></div>" } else if ("text" == c && "own" == g) u = "<input type='text' class='w2grid_head_input' style='width:95%; height:18px;' />"; else { var b; if (this.options.useLocale && p.localeRef) (b = this.getLocaleValue(p.localeRef)) && (f = b); f = null != f ? f : ""; var w = ""; "span" == this.options.dataTag && (w = "class='w2grid_span'"), u = "<" + this.options.dataTag + " " + w + " style='padding-top:0px; padding-left:4px;padding-right:4px' >" + f + this.dataTagClose } n[h].push(u), this.thIdList.push(p.id), this.headCellInfoHash[p.id] = p["@xml"], this._setHeaderInfo(p.id, p["@xml"]), null == p.col_id && (p.col_id = p.id) } } return { attr: o, rowArr: s, rowAttrArr: r, headerTdHtml: n } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getFooterHtmlInfo = function() { try { for (var t = this.options.footerTdClass, e = this.options.footerTrClass, i = this.getTableInfo(this.struct.foot, t, e), o = i.attr, s = i.rowArr, r = i.rowAttrArr, n = 0; n < s.length; n++)r[n]["data-trindex"] = n; var l = /(?:^|;)\s*height\s*:\s*(\d*)px\s*(?:$|;)/i.exec(this.struct.foot.attr.style); return l && 2 == l.length && (this.footerHeight = parseInt(l[1])), { attr: o, rowArr: s, rowAttrArr: r } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getSubtotalHtmlInfo = function(t) { try { var e = this.options.subtotalTdClass; this.subtotalClassList && (e = t.attr.subtotalClass || "gridSubtotalDefault"); for (var i = this.options.subtotalTrClass, o = this.getTableInfo(t, e, i), s = o.attr, r = o.rowArr, n = o.rowAttrArr, l = 0; l < r.length; l++) { n[l].trIndex = l, n[l].targetColumnID = s.targetColumnID; for (var h = 0; h < r[l].length; h++)r[l][h].class = r[l][h].class + " " + this.id + "_subtotal__column" + h, delete r[l][h].hidden } return { attr: s, rowArr: r, rowAttrArr: n } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getTableHtml = function(t, e, i, s) {
				try {
					var n = t.attr, l = t.rowArr, h = t.rowAttrArr, d = [], p = ""; if ("native" === this.options.drawType) {
						var u = {}; o.x.extend(u, n),
							u.class ? u.class += " " + this.options.gridNativeClass : u.class = this.options.gridNativeClass, p = this.getAttributesString(u)
					} else p = this.getAttributesString(n); d.push("<" + e + p + ">"); var c = "", g = ""; l.length >= 2 && (c = !1 === this.options.rowNumRowSpan ? " rowSpan='1'" : " rowSpan='" + l.length + "'", g = !1 === this.options.rowStatusRowSpan ? " rowSpan='1'" : " rowSpan='" + l.length + "'"); var f = ""; "native" === this.options.drawType && t === this.htmlInfo.head && (f = " " + this.options.gridNativeClass); for (var m = r.D.getDataPrefix("colIndex"), y = 0; y < l.length; y++) { if (t == this.htmlInfo.head ? d.push("<tr" + this.getAttributesString(h[y]) + " class='gridHeaderStyle_" + y + f + "'>") : t == this.htmlInfo.foot ? d.push("<tr" + this.getAttributesString(h[y]) + " class='gridFooterStyle_" + y + "'>") : d.push("<tr" + this.getAttributesString(h[y]) + ">"), 0 == this.options.rowNumRowSpan && this.options.rowNumVisible) if (y === l.length - 1) { var b = ""; t == this.htmlInfo.head && (b = this.options.rowNumHeaderValue), d.push("<" + i + c + " class='" + s + " " + s + "_rowNumber' value='" + b + "' " + m + "='0' id='_headerRowNumber'></" + i + ">") } else d.push("<" + i + c + " class='" + s + " " + s + "_rowNumber' value='' " + m + "='0' id='_headerRowNumber'></" + i + ">"); else if (0 === y) { b = ""; t == this.htmlInfo.head && (b = this.options.rowNumHeaderValue), this.options.rowNumVisible && d.push("<" + i + c + " class='" + s + " " + s + "_rowNumber' value='" + b + "' " + m + "='0' id='_headerRowNumber'></" + i + ">") } if (!1 === this.options.rowStatusRowSpan) { if (y === l.length - 1) { var w = ""; t == this.htmlInfo.head && (w = this.options.rowStatusHeaderValue), this.options.rowStatusVisible && d.push("<" + i + g + " class='" + s + " " + s + "_rowStatus' value='" + w + "' " + m + "='" + (this.options.rowNumVisible ? 1 : 0) + "' id='_headerRowStatus'></" + i + ">") } else if (this.options.rowStatusVisible) if (this.options.rowStatusColSpan && 0 == y) { var v = 1; l[y][0].colSpan ? v += Number(l[y][0].colSpan) : v++; var C = " colSpan='" + v + "'", I = l[y][0].value; d.push("<" + i + g + C + " class='" + s + " " + s + "_rowStatus' value='" + I + "' " + m + "='" + (this.options.rowNumVisible ? 1 : 0) + "' id='_headerRowStatus'></" + i + ">") } else d.push("<" + i + g + " class='" + s + " " + s + "_rowStatus' value='' " + m + "='" + (this.options.rowNumVisible ? 1 : 0) + "' id='_headerRowStatus'></" + i + ">") } else if (0 == y) { w = ""; t == this.htmlInfo.head && (w = this.options.rowStatusHeaderValue), this.options.rowStatusVisible && d.push("<" + i + g + " class='" + s + " " + s + "_rowStatus' value='" + w + "' " + m + "='" + (this.options.rowNumVisible ? 1 : 0) + "' id='_headerRowStatus'></" + i + ">") } for (var _ = 0; _ < l[y].length; _++) { if (s !== this.options.subtotalTdClass && s !== this.options.footerTdClass || null == l[y][_].columnClass) if (this.subtotalClassList && l[y][_].columnClass) { for (var x = 0; x < this.subtotalClassList.length; x++)if (this.subtotalClassList[x] && s === this.subtotalClassList[x]) { S = l[y][_].class; l[y][_].class = l[y][_].columnClass + " " + l[y][_].class, d.push("<" + i + this.getAttributesString(l[y][_]) + ">"), l[y][_].class = S; break } } else d.push("<" + i + this.getAttributesString(l[y][_]) + ">"); else { var S = l[y][_].class; l[y][_].class = l[y][_].columnClass + " " + l[y][_].class, d.push("<" + i + this.getAttributesString(l[y][_]) + ">"), l[y][_].class = S } t.headerTdHtml && t.headerTdHtml[y][_] && d.push(t.headerTdHtml[y][_]), d.push("</" + i + ">") } d.push("</tr>") } return d.push("</" + e + ">"), d.join("")
				} catch (t) { a.w.printStackTrace(t, null, this) }
			}, u.prototype.getGridHeaderFillerTable = function(t, e, i, o, s) { try { if (!this.options.headFiller) return ""; var r = [], n = ""; return this.options.hideHeader && (n = "display:none"), r.push("<table class='" + this.options.headerTableClass + "' style='z-index:-1;position:absolute;table-layout:fixed; border-collapse:collapse; border-spacing:0px; width:" + this.gridWidth + "px; '>"), r.push("<tbody id='" + this.id + "_" + e + "_tbody_tmp' style='" + n + "' class='" + s + "'>"), r.push("<tr class='" + i + "'>"), r.push("<td style='' id='" + this.id + "_header_bg_td' class='" + e + " " + e + "_rowNumber'>&nbsp;</td>"), r.push("</tr>"), r.push("</tbody>"), r.push("</table>"), r.join("") } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getColGroup = function(t) { try { return this.colGroupArr.join("").wq_replaceAll("colGroupID", t) } catch (t) { a.w.printStackTrace(t, null, this) } },
				u.prototype.initializeLayoutEvents = function() { try { !0 !== this.options.scrollXNative && this.event.addListener2(this.getElementById(this.id + "_scrollX_right"), "onscroll", this.handleScrollX, this), this.event.addListener2(this.getElementById(this.id + "_scrollY_div"), "onscroll", this.handleScrollY, this), this.event.addListener2(this.render, "onmousewheel", this.handleWheel, this), this.options.groupbyZone && (this.event.addListener2(this.getElementById(this.id + "_groupbyZone_div"), "onclick", this.handleGroupbyZoneClick, this), this.event.addListener2(this.getElementById(this.id + "_groupbyZone_div"), "onmousedown", this.handleChangeGroupDepth, this)), this.options.resize && !r.D.isMobile() && (this.event.addListener(this.getElementById(this.id + "_dataLayer"), "onmousemove", this.event.bindAsEventListener(this, this.handleColumnResize)), this.event.addListener(this.getElementById(this.id + "_dataLayer"), "onmousedown", this.event.bindAsEventListener(this, this.doColumnResize)), this.event.addListener(document.documentElement, "onmouseup", this.event.bindAsEventListener(this, this.endColumnResize)), this.options.rowResize && (this.event.addListener(this.getElementById(this.id + "_body_tbody"), "onmousemove", this.event.bindAsEventListener(this, this.handleRowResize)), this.event.addListener(this.getElementById(this.id + "_body_tbody"), "onmousedown", this.event.bindAsEventListener(this, this.doRowResize)), this.event.addListener(document.documentElement, "onmouseup", this.event.bindAsEventListener(this, this.endRowResize))), r.D.isIE() && s.v.browserVersion() <= 8 && this.event.addListener(this.render, "onmousemove", this.event.bindAsEventListener(this, (function(t) { (this.resizeStarted || this.options.rowResize && this.rowResizeStarted || null != this.columnMoveTarget) && d.B.preventDefault(t) })))), this.options.resize && r.D.isMobile() && (this.event.addListener(this.getElementById(this.id + "_dataLayer"), "ontouchmove", this.event.bindAsEventListener(this, this.handleColumnResize)), this.event.addListener(this.getElementById(this.id + "_dataLayer"), "ontouchstart", this.event.bindAsEventListener(this, this.doColumnResize)), this.event.addListener(document.documentElement, "ontouchend", this.event.bindAsEventListener(this, this.endColumnResize))) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.handleScrollX = function(t) { try { var e = d.B.getTarget(t); e && (this._scrollXPrev || (this._scrollXPrev = {}), this._scrollXPrev.scrollLeft === e.scrollLeft && this._scrollXPrev.scrollTop === e.scrollTop && this._scrollXPrev.scrollWidth === e.scrollWidth && this._scrollXPrev.scrollHeight === e.scrollHeight && (this.scrollXPreventEndEdit = !0), this._scrollXPrev.scrollLeft = e.scrollLeft, this._scrollXPrev.scrollTop = e.scrollTop, this._scrollXPrev.scrollWidth = e.scrollWidth, this._scrollXPrev.scrollHeight = e.scrollHeight), s.v.clearTimer(this.id + "_completiveDrawData", !0), s.v.clearTimer(this.id + "_applyStyleOptions", !0), null == this.editedCell || this.scrollXPreventEndEdit || this._fireOnviewchange(this.editedCell.id, "handleEndEdit", [t]), this._handleScrollX(), this.scrollXPreventEndEdit && this.editedCell && this.editedCell.setPosition && this.editedCell.setPosition(), this.scrollXPreventEndEdit = !1, d.B.fireEvent(this, "onscrollx", t) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._handleScrollX = function() {
					try {
						this.body_table || (this.head_table = this.getElementById(this.id + "_head_table"), this.body_table = this.getElementById(this.id + "_body_table"), this.hasFooter && (this.foot_table = this.getElementById(this.id + "_foot_table")), this.scrollX_right = this.getElementById(this.id + "_scrollX_right")), void 0 !== this.colGroup && null != this.colGroup || (this.colGroup = {}, this.colGroup.bodyColList = this.body_table.getElementsByTagName("col"), this.hasFooter ? this.colGroup.footerColList = this.foot_table.getElementsByTagName("col") : this.colGroup.footerColList = null); var t = 0; if (this.options.scrollByColumn) { var e = null != WebSquare.BootLoader.fullViewRatio ? WebSquare.BootLoader.fullViewRatio : 1; e > 1 ? t = 1 + Math.round(e) : e < 1 && (t = 1 + Math.round(1 / e)) }
						var i = this.getFixedColumnLastIndex(), o = this.scrollX_right.scrollLeft, s = this.gridWidth - o - t - this.fixedWidth - 1 - this.fixedWidthRight, n = s; s = s > 0 ? s : 0; var l = this.options.fixedRightColumn > 0; if (!l) { if (this.head_table.style.width = s + "px", this.isWebKit) { for (var h = [], d = this.defaultColCnt; d < this.hiddenList.length; d++)1 == this.hiddenList[d] && h.push(d - this.defaultColCnt); (A = s - this.colGroup.bodyColList.length - h.length - 1) < 0 && (A = 0), this.body_table.style.width = A + "px", this.hasFooter && (this.foot_table.style.width = A + "px") } else this.body_table.style.width = s + "px", this.hasFooter && (this.foot_table.style.width = s + "px"); this.hasFooter && (this.foot_table.style.width = s + "px") } var p = [], u = [], c = 0, g = -1, f = 0; if (l || this.options.scrollByColumn || r.D.isIE(8)) { var m = parseInt(document.getElementById(this.id + "_scrollY_div").style.width, 10) - 1; if (c = (f = this.resizeObj && this.resizeObj.clientWidth ? this.resizeObj.clientWidth : this.render.clientWidth) - 1 - this.fixedWidth - this.fixedWidthRight, r.D.isChrome() && (c += 1), -1 != m && (c -= m), l) { this.options.scrollByColumn = !1; var y = f - 1 - m; y < this.gridWidth && (this.head_table.style.width = f - 1 - m + "px", this.body_table.style.width = f - 1 - m + "px", this.hasFooter && (this.foot_table.style.width = f - 1 - m + "px")) } } var b = this.getFixedRightColumnLastIndex(), w = l, v = -1; for (d = this.colWidthList.length - 1; d >= b; d--)this.hiddenList[d] || (this.colGroup.bodyColList[d].style.width = this.colWidthList[d] + "px"); for (d = b - 1; d >= 0; d--) { var C = 0, I = parseInt(this.colWidthList[d], 10) || 0; if (this.hiddenList[d] && (I = 0), l && w) if (s > c + I) s -= I, I = 0; else { var _ = I; y < this.gridWidth && (I -= s - c), s -= _, w = !1, v = d } else s > I ? s -= I : (s > 0 && n <= c && (g = d, this.options.scrollByColumn && (C = s)), I = s, s = 0), d < i && !this.hiddenList[d] && (I = parseInt(this.colWidthList[d], 10) || 0); var x = 0, S = 0; if (this.isIE6or7 && 0 != I && (1 == this.hgap[this.options.headerTrClass + "_" + d] ? 0 : 1, x = 1 == this.hgap[this.options.bodyTrClass + "_" + d] ? 0 : 1, this.hasFooter && (S = 1 == this.hgap[this.options.footerTrClass + "_" + d] ? 0 : 1)), r.D.isIE(8) && 0 == this.defaultColCnt && 0 == d && 0 == I && (I = 1, g >= 0 && (p[g] = p[g] - 1, this.colGroup.bodyColList[g].style.width = p[g] + "px", this.hasFooter && (u[g] = u[g] - 1, this.colGroup.footerColList[g].style.width = u[g] + "px"))), this.options.scrollByColumn) { var D = this.colWidthList[d]; 1 == I && r.D.isIE(8) && 0 == this.defaultColCnt && 0 == d && (D = 1), 0 == I && (D = 0), C > 0 && (D = C), v === d && (D = 0), (0 == D || 1 == D || D == this.colWidthList[d] || C > 0 || v === d) && (this.colGroup.bodyColList[d].style.width = D - x + "px", p[d] = D - x, this.hasFooter && (this.colGroup.footerColList[d].style.width = D - S + "px", u[d] = D - S)) } else this.hiddenList[d] && (I = 0), this.colGroup.bodyColList[d].style.width = I - x + "px", p[d] = I - x, this.hasFooter && (this.colGroup.footerColList[d].style.width = I - S + "px", u[d] = I - S) } m = this.getElementById(this.id + "_scrollY_div").offsetWidth; if (this.isWebKit && -1 == this.options.className.indexOf("w2gridViewItemTable") && 0 === m && "allColumn" === this.options.autoFit && !this.options.autoFitMinWidth) { var R = this.render.getBoundingClientRect().width, L = !0; this.head_table.getBoundingClientRect().width <= 0 && (L = !1); for (d = b - 1; d >= 0; d--) { var T = R - (L ? this.head_table.getBoundingClientRect().width : this.body_table.getBoundingClientRect().width), k = 1; if (!(T >= 0)) break; if (!this.hiddenList[d]) { if (T < 2) break; var A = parseInt(this.colGroup.bodyColList[d].style.width); this.colGroup.bodyColList[d].style.width = A + k + "px", p[d] = A + k, (T = R - (L ? this.head_table.getBoundingClientRect().width : this.body_table.getBoundingClientRect().width)) < 1 && (k = -1, this.colGroup.bodyColList[d].style.width = A + k + "px", p[d] = A + k), this.hasFooter && (this.colGroup.footerColList[d].style.width = A + k + "px", u[d] = A + k) } } } this.setColIndexInfo(p, u), this._setGridBorder(), (this.groupbyZoneStatus.groupbyZoneRender || this.options.useFilterList) && (this.resizeGroupbyZone(), this.resizeGridList())
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.redrawTable = function() {
					try {
						if (this.isWebKit) if ("native" === this.options.drawType) { var t = this.colGroup.bodyColList[0], e = t.offsetWidth, i = t.id; t.style.width = e + 1 + "px", r.D.setTimeout((function() { document.getElementById(i).style.width = e + "px" }), { key: this.id + "_redrawTable", delay: 20 }) } else {
							null == this._redrawTable_transform && (this._redrawTable_transform = this.body_table.style.webkitTransform), this.body_table.style.webkitTransform = "rotateZ(0deg)"; var o = this.uuid; r.D.setTimeout((function() { var t = WebSquare.idCache[o]; t.body_table.style.webkitTransform = t._redrawTable_transform, delete t._redrawTable_transform }), { key: this.id + "_redrawTable", delay: 20 })
						}
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.setColIndexInfo = function(t, e) { try { if (void 0 === this.colGroup || null == this.colGroup) { this.colGroup = {}, this.colGroup.bodyColList = this.getElementById(this.id + "_body_table").getElementsByTagName("col"); var i = this.getElementById(this.id + "_foot_table"); this.colGroup.footerColList = i ? i.getElementsByTagName("col") : null } this.colIndexInfo = {}; var o = this.getVisibleColRange(this.colGroup.bodyColList, t), s = this.getVisibleTds(this.colIndexes.bodyColInfo, o); if (this.colIndexInfo.body = { colInfo: this.colIndexes.bodyColInfo, visibleTds: s.visibleTds, invisibleTds: s.invisibleTds, visibilityArr: s.visibilityArr, firstCoveredColIndex: o.firstCoveredColIndex }, this.isIE6or7) { var r = this.getVisibleTds(this.colIndexes.headerColInfo, o); if (this.colIndexInfo.header = { colInfo: this.colIndexes.headerColInfo, visibleTds: r.visibleTds, invisibleTds: r.invisibleTds, visibilityArr: r.visibilityArr, firstCoveredColIndex: o.firstCoveredColIndex }, this.hasFooter) { var n = this.getVisibleColRange(this.colGroup.footerColList, e), l = this.getVisibleTds(this.colIndexes.footerColInfo, n); this.colIndexInfo.footer = { colInfo: this.colIndexes.footerColInfo, visibleTds: l.visibleTds, invisibleTds: l.invisibleTds, visibilityArr: l.visibilityArr, firstCoveredColIndex: n.firstCoveredColIndex } } if (this.hasSubtotal) for (var h in this.colIndexInfo.subtotal = {}, this.subtotalRowHash) { var d = this.getVisibleTds(this.colIndexes.subtotalColInfo[h], o); this.colIndexInfo.subtotal[h] = { colInfo: this.colIndexes.subtotalColInfo[h], visibleTds: d.visibleTds, invisibleTds: d.invisibleTds, visibilityArr: d.visibilityArr, firstCoveredColIndex: o.firstCoveredColIndex } } } this.options.lazyDrawHiddenColumn && this.hideInvisibleTds() } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.hideInvisibleTds = (h = !0, function() { try { if (h) { if (h = !1, this.groupbyStatus.grouped) { this.options.lazyDrawHiddenColumn = !1; var t = WebSquare.language.getMessage("Grid_warning6", this.id) || this.id + " groupby가 활성화되어서 lazyDrawHiddenColumn 속성이 비활성화 되었습니다."; return void $l(t) } for (var e = this.defaultColCnt; e < this.colIndexes.bodyColInfo.rowSpanArr.length; e++)if (this.colIndexes.bodyColInfo.rowSpanArr[e] >= 2) { this.options.lazyDrawHiddenColumn = !1; var i = WebSquare.language.getMessage("Grid_warning7", this.id) || this.id + " : rowSpan이 있기 때문에 lazyDrawHiddenColumn 속성이 비활성화 되었습니다."; return void $l(i) } } var o = this.colIndexInfo.body.visibilityArr, s = []; for (e = 0; e < this.drawedRowLength; e++)if ("none" != this.dataRowList[e].style.display) for (var r = 0, n = 0, l = this.defaultColCnt; l < o.length; l++) { this.colIndexes.bodyColInfo.trIndexArr[l] > r && (n = 0, r++); var d = this._getColumnMoveIndex(l - this.defaultColCnt), p = this.data_td_list[d + e * this.oneRowDataLength], u = this.colIndexes.bodyColInfo.colSpanArr[l] || 1; o[l] ? (this.initVisibilityArr[l] || (this.drawCellData(e, e + this.rowIndex, d), this.applyCellStyleOptions(e + this.rowIndex, d), s[l] = !0), p.style.display = "", u + n > 1 ? (p.setAttribute("colSpan", u + n), p.setAttribute("data-lazydrawtd", "true")) : (p.removeAttribute("colSpan"), p.removeAttribute("data-lazydrawtd")), n = 0) : (p.style.display = "none", n += u) } for (e = 0; e < s.length; e++)s[e] && (this.initVisibilityArr[e] = !0) } catch (t) { a.w.printStackTrace(t, null, this) } }), u.prototype.getVisibleColRange = function(t, e) { try { for (var i = this.render.clientWidth, o = [], s = 0, r = -1, n = -1, l = e ? e.length : t.length, h = 0; h < l; h++) { var d = e ? e[h] : parseInt(t[h].style.width); if ((s += d) > i) { r >= 0 ? (d < 3 ? o.push([r, h]) : o.push([r, h + 1]), n = h + 1, r = -1) : (o.push([h, h + 1]), n = h + 1); break } d < 3 ? -1 != r && (o.push([r, h]), r = -1) : -1 == r && (r = h) } return -1 != r && r < h && o.push([r, h]), o.firstCoveredColIndex = -1 !== n ? n : l, -1 == n && (n = l), o } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getVisibleTds = function(t, e) {
					try {
						for (var i = [], o = [], s = [], r = 0; r < t.colIndexArr.length; r++) { for (var n = t.colIndexArr[r], l = t.colSpanArr[r] || 1, h = 0; h < e.length; h++)if (e[h][0] <= n && n < e[h][1] || e[h][0] <= n + l - 1 && n + l - 1 < e[h][1] || n <= e[h][0] && e[h][0] < n + l || n <= e[h][1] - 1 && e[h][1] - 1 < n + l) { i[i.length] = r, s[s.length] = !0; break } h == e.length && (o[o.length] = r, s[s.length] = !1) } return { visibleTds: i, invisibleTds: o, visibilityArr: s }
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype._setGridBorder = function() { try { var t = r.D.getDataPrefix("colIndex"); if (r.D.isIE(8)) { if (0 == this.defaultColCnt) { var e = this.colGroup.bodyColList[0].style.width, i = "1px" == e || "0px" == e ? "0px" : ""; if (!this.leftMostTds) { this.leftMostTds = []; for (var o = this.getElementById(this.id + "_head_table").getElementsByTagName("th"), s = this.hasFooter ? this.getElementById(this.id + "_foot_table").getElementsByTagName("td") : [], n = 0; n < o.length; n++)0 == o[n].getAttribute(t) && this.leftMostTds.push(o[n]); for (n = 0; n < s.length; n++)0 == s[n].getAttribute(t) && this.leftMostTds.push(s[n]) } for (n = 0; n < this.leftMostTds.length; n++)this.leftMostTds[n].style.borderLeftWidth = i, this.leftMostTds[n].style.borderRightWidth = i; if (this.all_data_td_list.length > 0) { if (!this.leftMostIndexArr) { this.leftMostIndexArr = []; for (n = 0; n < this.oneRowDataLength; n++)0 == this.all_data_td_list[n].getAttribute(t) && this.leftMostIndexArr.push(n) } for (n = 0; n < this.leftMostIndexArr.length; n++)for (var l = 0; l < this.drawedRowLength; l++) { (h = this.all_data_td_list[this.leftMostIndexArr[n] + l * this.oneRowDataLength]).style.borderLeftWidth = i, h.style.borderRightWidth = i } } if (this.hasSubtotal && this.drawedSubtotal) for (n = 0; n < this.drawedSubtotal.length; n++)for (l = 0; l < this.drawedSubtotal[n].length; l++) { var h; 0 == (h = this.drawedSubtotal[n][l].cells[0]).cellIndex && (h.style.borderLeftWidth = i, h.style.borderRightWidth = i) } } if (!this._setGridBorderNoRefresh) { var d = (u = this.getElementById(this.id + "_dataLayer")).style.display, p = document.activeElement; u.style.display = "none", u.offsetHeight, u.style.display = d, document.activeElement != p && this.hasClass(p, this.options.bodyTdClass) && p.focus() } } if (this.isIE6or7 && (this.colIndexInfo || this.setColIndexInfo(), this.colGroup && (this._setBorderFolding(this.all_data_td_list, this.colIndexInfo.body, this.drawedRowLength), this.headerTds || (this.headerTds = this.getElementById(this.id + "_head_table").getElementsByTagName("th")), this._setBorderFolding(this.headerTds, this.colIndexInfo.header)), this.hasFooter && (this.footerTds || (this.footerTds = this.getElementById(this.id + "_foot_table").getElementsByTagName("td")), this._setBorderFolding(this.footerTds, this.colIndexInfo.footer)), this.hasSubtotal && this._setSubtotalBorder(), !this._setGridBorderNoRefresh)) { var u, c = (u = this.getElementById(this.id + "_dataLayer")).style.filter; p = document.activeElement; u.style.filter = "alpha(opacity=99)", u.style.filter = c, document.activeElement != p && this.hasClass(p, this.options.bodyTdClass) && p.focus() } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._setBorderFolding = function(t, e, i) { try { if (this.groupbyStatus.grouped) return; if (!t || 0 == i) return; i = i || 1; for (var o = e.firstCoveredColIndex, s = this.oneRowDataLength + this.defaultColCnt, r = 0, n = e.visibilityArr.length; r < n; r++) { var l = e.colInfo.colIndexArr[r], h = e.visibilityArr[r], d = "0px" === t[r].style.borderWidth; if (i > 1 && (d = d || "0px" === t[r + s].style.borderWidth), l < o && !h && !d) for (var p = 0; p < i; p++)t[r + p * s].style.borderWidth = "0px"; else if ((l >= o || h) && d) for (p = 0; p < i; p++)t[r + p * s].style.borderWidth = "", t[r + p * s].style.borderStyle = "" } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._setSubtotalBorder = function() {
					try {
						if (!this.drawedSubtotal) return; for (var t = {}, e = 0; e < this.drawedSubtotal.length; e++) {
							var i = this.drawedSubtotal[e]; if (!t[i.targetID]) {
								t[i.targetID] = !0; for (var o = this.colIndexInfo.subtotal[i.targetID], s = o.firstCoveredColIndex, r = 0, n = 0; n < i.length; n++)for (var l = i[n], h = 0; h < l.cells.length; h++, r++) {
									var d = o.colInfo.colIndexArr[r], p = o.visibilityArr[r], u = "0px" === l.cells[h].style.borderWidth
									; if (d < s && !p && !u) for (var c = e; c < this.drawedSubtotal.length; c++)this.drawedSubtotal[c].targetID == i.targetID && (this.drawedSubtotal[c][n].cells[h].style.borderWidth = "0px"); else if ((d >= s || p) && u) for (c = e; c < this.drawedSubtotal.length; c++)this.drawedSubtotal[c].targetID == i.targetID && (this.drawedSubtotal[c][n].cells[h].style.borderWidth = "")
								}
							}
						}
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.handleWheel = function(t) { try { if (this.options.groupbyZone || this.options.useFilterList) for (var e = this.event.getTargetIterator(t, this.render); e.next();)if (e.match("w2grid_groupbyZone_scrollView") || e.match("w2grid_customFilter_scrollView")) return void d.B.stopPropagation(t); var i = d.B.getMouseWheelDelta(t), o = t.wheelDeltaY, s = t.wheelDeltaX, n = Math.floor(this.options.wheelRows * Math.abs(i)); if ("wheelDeltaX" in t && Math.abs(s) > Math.abs(o)) return this.getElementById(this.id + "_scrollX_right").scrollLeft -= s, void d.B.stopEvent(t); var l = this.getElementById(this.id + "_scrollY_div"); if (this.scrollEvent = !0, i > 0) { if (0 == l.scrollTop) return void (this.options.wheelStop && d.B.stopEvent(t)); l.scrollTop = this.oneRowScrollHeight * (this._getScrollRowIndex(this.rowIndex) - n) } else if (i < 0) { var h = this.getElementById(this.id + "_scrollY_div"), p = this._getEpsilon(), u = h.scrollHeight - h.clientHeight, c = Math.min(Math.round(h.scrollTop) + p, u); if (this.rowIndex < 0 || 0 == h.clientHeight || c == u) return void (this.options.wheelStop && d.B.stopEvent(t)); l.scrollTop = this.oneRowScrollHeight * (this._getScrollRowIndex(this.rowIndex) + n) } r.D.isMobile() && this.moveYScroll(0), d.B.stopEvent(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.handleColumnResize = function(t) { try { if (2 == t.button) return; var e, i, o, s, n, l, h = r.D.getDataPrefix("colIndex"), p = r.D.getDataPrefix("header_id"); if ("drag" !== this.resizeStatus) { for (var u = this.event.getTargetIterator(t, this.render), c = null; u.next();) { var g = u.getElement(); if ("TH" != g.tagName && "TD" != g.tagName || (c = g), "NOBR" == g.tagName || "SPAN" == g.tagName && g.className.indexOf("w2grid_span") > -1) { c = null; break } } if (null != c) { e = d.B.getMouseX(t), i = WebSquare.style.getAbsoluteLeft(c), o = parseInt(c.getAttribute("colSpan") || 1, 10), s = parseInt(c.getAttribute(h), 0), n = null != WebSquare.BootLoader.fullViewRatio ? WebSquare.BootLoader.fullViewRatio : 1; var f = WebSquare.style.getComputedStyle(document.body, "zoom"); 1 == n && f && (n = parseFloat(f)), e /= n, l = i; var m = s, y = c.getAttribute(p); "_headerRowNumber" != y && "_headerRowStatus" != y && (m = this._getRealColIndex("head", y) + this.defaultColCnt), m = this._getMouseColumnIndex({ colIndex: s, offsetX: e, offsetLeft: l, colSpan: o }), "col-resize" === this.resizeStatus && !1 === this.isColumnResizable(m) && (this.resizeStatus = "init") } } switch (this.resizeStatus) { case "init": this.getElementById(this.id + "_head_table").style.cursor = "", this.getElementById(this.id + "_head_table").cursor = ""; break; case "col-resize": this.getElementById(this.id + "_head_table").style.cursor = "col-resize", this.getElementById(this.id + "_head_table").cursor = "col-resize"; break; case "drag": return this.resizeStatus = "drag", this.handleResizeLine(t), void (r.D.isMobile() && d.B.stopEvent(t)) }if (null != this.columnMoveTarget) return; if (null == c) return void (this.resizeStatus = "init"); if (e - l < (w = .3 * this.colWidthList[s] > 10 ? 10 : parseInt(.3 * this.colWidthList[s], 10)) && 0 != s) { if ("init" === this.resizeStatus || "col-resize" === this.resizeStatus) return void (this.isColumnResizable(s) && (this.resizeStatus = "col-resize")) } else this.resizeStatus = "drag" !== this.resizeStatus ? "init" : this.resizeStatus; if ("_headerRowNumber" != y && "_headerRowStatus" != y) for (var b = 0; b < o; b++) { if (1 == this.options.columnMove) { c.getAttribute(p); s = this._getRealColIndex("head", y) + this.defaultColCnt } var w, v = parseInt(this.colGroup.bodyColList[s + b].style.width, 10); if ((l += v) - (w = .3 * v > 10 ? 10 : parseInt(.3 * v, 10)) < e && e < l + w) return void ("init" !== this.resizeStatus && "col-resize" !== this.resizeStatus || this.isColumnResizable(s) && (this.resizeStatus = "col-resize")); this.resizeStatus = "drag" !== this.resizeStatus ? "init" : this.resizeStatus } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.doColumnResize = function(t) {
					try {
						if (2 == t.button) return
							; if (r.D.isMobile() && this.handleColumnResize(t), !this.options.columnMove && !this.options.groupbyZone && "init" == this.resizeStatus || "drag" == this.resizeStatus) return; var e = this.event.getTargetIterator(t, this.render), i = null; for (this.resize_colIndex = null, this.resize_colId = null; e.next();)e.match(this.options.headerTdClass) && (i = e.getElement()); if (null == i) return; this.startResizeX = d.B.getScreenX(t); var o = r.D.getDataPrefix("header_id"), s = r.D.getDataPrefix("colindex"), n = r.D.getDataPrefix("value"), l = i.getAttribute(o); if ("col-resize" == this.resizeStatus) { d.B.preventDefault(t), this.resizeStarted = !0, this.resizeStatus = "drag"; var h = d.B.getMouseX(t), p = WebSquare.style.getAbsoluteLeft(i), u = parseInt(i.getAttribute("colSpan") || 1, 10), c = this._getRealColIndex("head", l) + this.defaultColCnt; "_headerRowNumber" != l && "_headerRowStatus" != l || (c = parseInt(i.getAttribute(s), 10)); var g = p; this.resizeColIndex = this._getMouseColumnIndex({ colIndex: c, offsetX: h, offsetLeft: g, colSpan: u }) } else if (this.options.columnMove && (0 === this.getHeaderRowIndex(l) || this.options.allColumnMove)) { this.resizeStatus = "drag"; var f = null, m = this.htmlInfo.head.rowArr[0], y = !0; if (0 != parseInt(this.options.stopColumnMoveRow, 10)) for (var b = 0; b < m.length; b++)if (m[b].id == l) { y = !1; break } if (this.options.allColumnMove) for (b = 1; b < this.htmlInfo.head.rowArr.length; b++)if (parseInt(this.options.stopColumnMoveRow, 10) != b) for (var w = 0; w < this.htmlInfo.head.rowArr[b].length; w++)if (this.htmlInfo.head.rowArr[b][w].id == l) { y = !1, f = l, l = this.htmlInfo.head.rowArr[0][w].id; break } if (y) return; this.resizeStauts = "init", "_headerRowNumber" != l && "_headerRowStatus" != l && (null != f && (this.realColumnMoveTarget = this.getHeaderIndex(f)), this.columnMoveTarget = this.getHeaderIndex(l), this.columnMoveTargetId = l, this.getElementById(this.id + "_head_table").style.cursor = "pointer", this.addClass("w2noselect"), r.D.emptySelection()) } else if (this.options.groupbyZone && (this.resizeStatus = "drag", "_headerRowNumber" != l && "_headerRowStatus" != l)) { if (this.groupbyZoneStatus.clickedHeaderInfo = {}, this.groupbyZoneStatus.clickedHeaderInfo.index = this._getRealHeaderColIndex(l), this.groupbyZoneStatus.clickedHeaderInfo.value = i.getAttribute(n), this.groupbyZoneStatus.clickedHeaderInfo.headerID = l, null == this.groupbyStatus.sortIndexArr || null == this.groupbyStatus.sortOrderArr || this.options.groupbyFilterIcon) this.showGroupbyHeaderGhost(t, l); else { this.resizeStatus = "init"; var v = !1, C = {}; C.render = i, C.parentRender = this.render.getElementsByTagName("div")[0], C.headerID = i.getAttribute(o), C.headerIndex = this.getHeaderIndex(C.headerID); for (b = 0; b < this.groupbyStatus.sortIndexArr.length; b++)if (C.headerIndex == this.groupbyStatus.sortIndexArr[b]) { v = !0; break } v ? this.groupbyFilterList ? this.toggleGroupbyFilterList(C) : this.createGroupbyFilterList(C) : (this.hideGroupbyFilterList(), this.showGroupbyHeaderGhost(t, l)) } this.getElementById(this.id + "_head_table").style.cursor = "pointer", this.addClass("w2noselect"), r.D.emptySelection() } this.handleResizeLine(t)
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.endColumnResize = function(t) {
					try {
						if (2 == t.button) return; if ("drag" !== this.resizeStatus && (this.resizeStatus = "init"), this.options.columnMove && null != this.columnMoveTarget) { var e = this.event.getTargetIterator(t, this.render), i = null; if (this.event.isMe(t, this.render)) for (; e.next();)e.match(this.options.headerTdClass) && (e.match(this.options.headerTdClass + "_rowNumber") || e.match(this.options.headerTdClass + "_rowStatus") || (i = e.getElement()), e.stop()); var o = this.resize_colId; if (null != i) { var s = r.D.getDataPrefix("header_id"); o = i.getAttribute(s) || this.resize_colId } this.moveColumnByHeaderId(this.columnMoveTargetId, o), this.resizeStatus = "init", this.resizeStarted = !1, this.columnMoveTarget = null, this.realColumnMoveTarget = null, this.handleResizeLine(t), r.D.emptySelection(), !1 === this.options.noSelect && !1 === this.options.preventCopy && this.removeClass("w2noselect") } else if (null != this.groupbyZoneStatus.clickedHeaderInfo) {
							for (e = this.event.getTargetIterator(t, this.render); e.next();)if (e.match("w2grid_groupbyZone")) {
								e.getElement(),
								null == this.groupbyStatus.sortIndexArr && (this.groupbyStatus.sortIndexArr = []), null == this.groupbyStatus.sortOrderArr && (this.groupbyStatus.sortOrderArr = []); for (var n = 0; n < this.groupbyStatus.sortIndexArr.length; n++)if (this.groupbyZoneStatus.clickedHeaderInfo.index == this.groupbyStatus.sortIndexArr[n]) return this.groupbyZoneStatus.clickedHeaderInfo = null, void (this.resizeStarted = !1); if (-1 != this.options.groupbyMaxCount && this.options.groupbyMaxCount <= this.groupbyStatus.sortIndexArr.length) return p.k.printLog("groupby max column count has been exceeded.[" + this.id + "]"), this.groupbyZoneStatus.clickedHeaderInfo = null, void (this.resizeStarted = !1); this.groupbyStatus.sortIndexArr.push(this.groupbyZoneStatus.clickedHeaderInfo.index), this.groupbyStatus.sortOrderArr.push(1); var l = {}; if (l.sortIndex = this.groupbyStatus.sortIndexArr, l.sortOrder = this.groupbyStatus.sortOrderArr, null != this.groupbyStatus.filter && (l.filter = this.groupbyStatus.filter), !1 === d.B.fireEvent(this, "ongroupby", l)) { var h = this.getColCnt() + this.defaultColCnt; l.rowNumHeader = { colSpan: h, inputType: "expression", expression: " toggle() + depthStr() + ' [ ' + count() + ' 건 ] ' ", align: "left" }, l.footerVisible = !1, l.rowNumFooter = { colSpan: h }, this.groupby(l) } this.groupbyFilterList && this.hideGroupbyFilterList(); break
							} this.groupbyZoneStatus.clickedHeaderInfo = null, this.resizeStatus = "init", this.handleResizeLine(t), r.D.emptySelection(), !1 === this.options.noSelect && !1 === this.options.preventCopy && this.removeClass("w2noselect")
						} else if ("drag" === this.resizeStatus) { this.endResizeX = d.B.getScreenX(t); for (var u = this.resizeColIndex; 1 == this.hiddenList[u] && !(--u < 0);); if (u >= 0 && this.isColumnResizable(u)) { var c = this.colWidthList[u], g = this.getElementById(this.id + "_dataLayer").offsetWidth, f = c + this.endResizeX - this.startResizeX, m = 0; if (this.options.fixedColumn > 0) { var y = this.getFixedColumnLastIndex(); if (y >= u) { for (n = 0; n < y; n++)this.hiddenList[n] || (m += n == u ? f : this.colWidthList[n]); var b = 30; null == this.colWidthList[y] && (b = 1), m > g - b && (f = f - (m - g) - b - 1) } } var w = this.cellInfoHash[this.getColumnID(this.columnOrder[u - this.defaultColCnt])]; f = w && f < w.options.minWidth ? w.options.minWidth : f, this.setColumnWidth(u, f, !0), 0 != Math.abs(c - f) && d.B.fireEvent(this, "onaftercolumnresize", u - this.defaultColCnt, c, f) } this.resizeStatus = "init", this.resizeStarted = !1, this.columnMoveTarget = null, this.realColumnMoveTarget = null, this.handleResizeLine(t), r.D.emptySelection(), !1 === this.options.noSelect && !1 === this.options.preventCopy && this.removeClass("w2noselect") }
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.handleResizeLine = function(t) {
					try {
						var e = this.getElementById(this.id + "_resize_line"); if (this.resize_ghost || (this.resize_ghost = document.createElement("div"), this.resize_ghost.className = "w2grid_columnMove_ghost", this.resize_ghost.style.display = "none", document.body.appendChild(this.resize_ghost), this.resize_arrow = document.createElement("div"), this.resize_arrow.className = "w2grid_columnMove_arrow", this.resize_arrow.style.display = "none", document.body.appendChild(this.resize_arrow)), this.options.columnMove && null != this.columnMoveTarget) {
							for (var i = this.event.getTargetIterator(t, this.render), o = null; i.next();)i.match(this.options.headerTdClass) && (o = i.getElement()); if (null != o) {
								this.columnBlock || this.createBlockedHeaderInfo(); var s = this.columnMoveTargetId, n = this.getHeaderColIndex(s); n = this.columnBlock.hash[n - this.defaultColCnt], s = this.getHeaderColID(n + this.defaultColCnt); var l = r.D.getDataPrefix("header_id"), h = o.getAttribute(l), p = this.getHeaderColIndex(h); p = this.columnBlock.hash[p - this.defaultColCnt], h = this.getHeaderColID(p + this.defaultColCnt); var u = this.getHeaderIndex(s), c = this.getHeaderIndex(h); if (u < c) for (var g = this.columnBlock.info[p], f = g.length - 1; f >= 0; f--) { var m = this.getHeaderColID(g[f] + this.defaultColCnt, { firstRow: !0 }); if (m) { h = m, c = this.getHeaderIndex(h); break } } var y = this._getRealColIndex("head", h), b = this.htmlInfo.head.rowArr[0], w = !0; for (f = 0; f < b.length; f++)if (b[f].id == h) { w = !1; break }
								if (this.options.allColumnMove) for (f = 1; f < this.htmlInfo.head.rowArr.length; f++)for (var v = 0; v < this.htmlInfo.head.rowArr[f].length; v++)if (this.htmlInfo.head.rowArr[f][v].id == h) { w = !1, h = this.htmlInfo.head.rowArr[0][v].id, c = this.getHeaderIndex(h), y = this.colMoveHeaderIndexMap[h]; break } if (w) return; if ("_headerRowNumber" == h || "_headerRowStatus" == h || u == c) e.style.display = "none", this.resize_ghost.style.display = "none", this.resize_arrow.style.display = "none"; else { if (this.options.fixedColumnNoMove && (this.getFixedColumnLastIndex() > u + this.defaultColCnt || this.getFixedColumnLastIndex() > c + this.defaultColCnt)) return e.style.display = "none", this.resize_ghost.style.display = "none", this.resize_arrow.style.display = "none", void (!1 === this.isColumnResizable(this.resizeColIndex) && (this.getElementById(this.id + "_head_table").style.cursor = "", this.getElementById(this.id + "_head_table").cursor = "")); this.resize_colIndex = c, this.resize_colId = h; var C = null; for (f = 0; f < this.htmlInfo.body.rowArr.length; f++) { for (v = 0; v < this.htmlInfo.body.rowArr[f].length; v++)if (this.htmlInfo.body.rowArr[f][v]["@col"] == y) { C = this.bodyIdColIndexMap[this.htmlInfo.body.rowArr[f][v].col_id]; break } if (null !== C) break } var I = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")), _ = WebSquare.style.getAbsoluteTop(this.render), x = WebSquare.style.getAbsoluteLeft(this.render), S = I[c + this.defaultColCnt], D = S.offsetLeft, R = S.offsetWidth, L = D + (u < c ? R : 0); null != this.realColumnMoveTarget ? this.resize_ghost.innerHTML = I[this.realColumnMoveTarget + this.defaultColCnt].innerHTML : this.resize_ghost.innerHTML = I[this.columnMoveTarget + this.defaultColCnt].innerHTML, this.resize_ghost.style.display = "block", this.resize_ghost.style.top = _ + I[this.columnMoveTarget].offsetHeight + 5 + "px", this.resize_ghost.style.left = x + L + 5 + "px", !this.resize_ghost.firstChild || !this.resize_ghost.firstChild.tagName || "NOBR" === this.resize_ghost.firstChild.tagName.toUpperCase() || "SPAN" == this.resize_ghost.firstChild.tagName.toUpperCase() && this.resize_ghost.firstChild.className.indexOf("w2grid_span") > -1 ? this.resize_ghost.style.width = "auto" : this.resize_ghost.style.width = R + "px", this.resize_arrow.style.display = "block", this.resize_arrow.style.top = _ - this.resize_arrow.offsetHeight + "px", this.resize_arrow.style.left = x + L - parseInt(this.resize_arrow.offsetWidth / 2, 10) + 1 + "px", e.style.display = "block", e.style.zIndex = 9999, e.style.border = "1px solid #3a3f44", e.style.top = 0, e.style.left = L + "px", e.style.height = this.render.offsetHeight + "px", this.getElementById(this.id + "foot_table") && (e.style.height = this.render.offsetHeight - this.getElementById(this.id + "_foot_table").offsetHeight - this.getElementById(this.id + "_scrollX_div").offsetHeight + "px"), r.D.emptySelection() }
							}
						} else if (null != this.groupbyZoneStatus.clickedHeaderInfo) e.style.display = "none", this.resize_ghost.style.display = "none", this.resize_arrow.style.display = "none"; else if ("drag" == this.resizeStatus && this.resizeStarted && this.isColumnResizable(this.resizeColIndex)) { e.style.cssText = "position:absolute;top:10px; bottom:0px;border:0px dashed #222222; border-left-width:1px; cursor:col-resize;", e.style.display = "block", e.style.zIndex = 100, e.style.top = 0, e.style.height = this.render.offsetHeight + "px", this.getElementById(this.id + "foot_table") && (e.style.height = this.render.offsetHeight - this.getElementById(this.id + "_foot_table").offsetHeight - this.getElementById(this.id + "_scrollX_div").offsetHeight + "px"); var T = null != WebSquare.BootLoader.fullViewRatio ? WebSquare.BootLoader.fullViewRatio : 1, k = WebSquare.style.getComputedStyle(document.body, "zoom"); 1 == T && k && (T = parseFloat(k)), e.style.left = (d.B.getMouseX(t) - WebSquare.style.getAbsoluteLeft(this.render) * T) / T + "px", this.resize_ghost.style.display = "none" } else e.style.display = "none", this.resize_ghost.style.display = "none", this.resize_arrow.style.display = "none", !1 === this.isColumnResizable(this.resizeColIndex) && (this.getElementById(this.id + "_head_table").style.cursor = "", this.getElementById(this.id + "_head_table").cursor = "")
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.handleRowResize = function(t) {
					try { if ("started" == WebSquare.dragdrop.gDragManager.status) return void (this.rowResizeTarget && (this.rowResizeTarget.style.cursor = "", this.rowResizeTarget.cursor = "")); if (this.handleRowResizeLine(t), null != this.rowMoveTarget) return; for (var e = this.event.getTargetIterator(t, this.render), i = null; e.next();) { var o = e.getElement(); if ("TD" == o.tagName && (i = o), "TH" == o.tagName) { i = null; break } } if (null == i) return; i.style.cursor = "", i.cursor = ""; var s = d.B.getMouseY(t), n = WebSquare.style.getAbsoluteTop(i), l = r.D.getDataPrefix("tdIndex"), h = parseInt(i.getAttribute(l), 0), p = parseInt(h / this.realRowDataLength) + this.rowIndex; if (s - n < 10 && 0 != p) return i.style.cursor = "row-resize", i.cursor = "row-resize", this.rowResizeTarget && this.rowResizeTarget != i && (this.rowResizeTarget.style.cursor = "", this.rowResizeTarget.cursor = ""), void (this.rowResizeTarget = i) } catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.doRowResize = function(t) { try { if ("started" == WebSquare.dragdrop.gDragManager.status) return; var e = this.event.getTargetIterator(t, this.render), i = null; for (this.resize_rowIndex = null; e.next();)e.match(this.options.bodyTdClass) && (i = e.getElement()); if (null == i) return; if (this.startResizeY = d.B.getScreenY(t), "row-resize" == i.cursor) { d.B.preventDefault(t), this.rowResizeStarted = !0, this.rowResizeTarget = i; var o = r.D.getDataPrefix("tdIndex"), s = parseInt(i.getAttribute(o), 0), n = parseInt(s / this.realRowDataLength) + this.rowIndex; this.resizeRowIndex = n - 1 } this.handleRowResizeLine(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.endRowResize = function(t) { try { if (this.rowResizeStarted) { this.endResizeY = d.B.getScreenY(t); var e = this.resizeRowIndex || 0; if (e >= 0) { var i = this.rowResizeTarget.offsetHeight + this.endResizeY - this.startResizeY; i = i < 20 ? 20 : i, this.rowStyleArr[e] = "rowResizeStyle_" + e, this.rowStyleValueObj[this.rowStyleArr[e]] || (this.rowStyleValueObj[this.rowStyleArr[e]] = {}), this.rowStyleValueObj[this.rowStyleArr[e]].style = "height:" + i + "px;", this.applyRowStyleOptions(e), this.drawData(this.rowIndex, e + 1, "async") } if (this.rowResizeStarted = !1, this.rowResized = !0, this.rowMoveTarget = null, this.handleRowResizeLine(t), window.getSelection) window.getSelection().removeAllRanges(); else if (document.selection) try { document.selection.empty() } catch (t) { } } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.handleRowResizeLine = function(t) { try { var e = this.getElementById(this.id + "_resize_line"); this.resize_ghost || (this.resize_ghost = document.createElement("div"), this.resize_ghost.className = "w2grid_columnMove_ghost", this.resize_ghost.style.display = "none", document.body.appendChild(this.resize_ghost), this.resize_arrow = document.createElement("div"), this.resize_arrow.className = "w2grid_columnMove_arrow", this.resize_arrow.style.display = "none", document.body.appendChild(this.resize_arrow)), this.rowResizeStarted ? (e.style.cssText = "position:absolute;left:10px;right:0px;border:0px dashed #222222; border-top-width:1px;", e.style.display = "block", e.style.zIndex = 100, e.style.top = d.B.getMouseY(t) - WebSquare.style.getAbsoluteTop(this.render) + "px", e.style.width = this.render.offsetWidth + "px", e.style.left = 0, this.resize_ghost.style.display = "none") : (e.style.display = "none", this.resize_ghost.style.display = "none", this.resize_arrow.style.display = "none") } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._setColumnWidth = function(t, e) {
					try { if (this.autoFitColWidthList = null, this.hiddenList[t]) this.colWidthList[t] = e; else { var i = isNaN(this.colWidthList[t]) ? 0 : this.colWidthList[t]; this.colWidthList[t] = e, this.gridWidth += e - i, this.arrangeOverflowXScroll(), this.setOverflowX(), this.handleScrollX(); var o = t - this.defaultColCnt; if (o >= 0) { var s = this.getCellInfo(o); if ("textarea" == s.options.inputType) this.drawColumnData(o); else if (("text" == s.options.inputType || "secret" == s.options.inputType || "calendar" == s.options.inputType) && s.options.embeddedInput) { for (var r = 0, n = 0; n <= o; n++)if ((r += (s = this.getCellInfo(n)).options.colSpan - 0) - 1 == o) { o = n; break } this.embeddedWidthObj[o] && (this.embeddedWidthObj[o].isChanged = !0), this.drawColumnData(o) } } this.handlerResize_drawInitializer() } } catch (t) {
						a.w.printStackTrace(t, null, this)
					}
				}, u.prototype.setColumnVisible = function(t, e) { try { e = r.D.getBoolean(e); var i = this.getCellInfo(t); if (null == (t = this.getColumnIndex(t))) return; var o = this._getRealColIndex("body", i.options.col_id) + this.defaultColCnt; if (this.hiddenList[o] != e) return; for (var n = 0; n < this.getColumnCount(); n++) { var l = this.getCellInfo(n); "textarea" == l.options.inputType && "all" == l.options.displayType && (this.setScrollTop(0), this.setScrollLeft(0)) } if (this.options.fixedColumn > 0 && e && this.options.fixedColumn > t) { var h = 0, d = this.getFixedColumnLastIndex(); for (n = 0; n < d; n++)this.hiddenList[n] && n - this.defaultColCnt != t || (h += this.colWidthList[n]); if (h > this.getElementById(this.id + "_dataLayer").offsetWidth - 30) return void WebSquare.logger.printLog(this.id + " setColumnVisible error : not enough space to show the column.  ") } for (n = 0; n < i.options.colSpan; n++)this.hiddenList[o + n] = !e; this.gridWidth = 0; for (n = 0; n < this.colWidthList.length; n++)this.hiddenList[n] || (this.gridWidth += this.colWidthList[n]); if (0 === this.render.offsetHeight && 0 === this.render.offsetWidth && (this.resizeObj = { width: 0, height: 0, scrollLeft: 0, scrollTop: 0, clientWidth: 0 }, this.setRedrawStatus("stop"), this.delayedDraw({ rowIndex: -1 == this.rowIndex ? 0 : this.rowIndex })), "" != this.options.hiddenClass || "" != i.options.hiddenClass) { this.drawData(this.rowIndex, 0); var p = this.getColumnID(t), u = this.options.hiddenClass; "" != i.options.hiddenClass && (u = i.options.hiddenClass); var c = null != this.bodyToHeaderRelation[p] ? this.getHeaderLayer(this.bodyToHeaderRelation[p]) : null; e ? null != c && this.hasClass(c, u) && this.removeClass(c, u) : null == c || this.hasClass(c, u) || this.addClass(c, u) } if (this.options.lazyDrawHiddenColumn && e && this.initVisibilityArr && !this.initVisibilityArr[o]) { var g = this.colIndexInfo.body.colInfo.colIndexArr; for (n = 0; n < g.length; n++)if (g[n] == o) for (var f = 0; f <= this.lastIndex; f++)this.drawCellData(f, f + this.rowIndex, n - this.defaultColCnt), this.applyCellStyleOptions(f + this.rowIndex, n - this.defaultColCnt); this.initVisibilityArr[o] = !0 } "crosstab" == this.options.adaptive && this.hasClass("w2grid_adaptive_crosstab") && this.setAdaptiveColumnVisible(o, e), s.v.setTimer((function() { try { this.arrangeOverflowXScroll(), this.options.groupbyZone && this.options.groupbyFilterBox ? this.handlerResize_drawInitializer() : this.setOverflowX(), this.handleScrollX(), (this.options.autoFit || this.autofitColumn) && this._setAutoFit(), e && this._setRedrawTextAreaColumn() } catch (t) { a.w.printStackTrace(t, null, this) } }), { key: this.id + "_setColumnVisible", caller: this }) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setRowVisible = function(t, e, i) {
					try {
						if ((t = parseInt(t, 10)) < 0 || t >= this.getTotalRow() || isNaN(t)) return void p.k.printLog(this.id + " setRowVisible error : invalid rowIndex " + t); var o = r.D.getBoolean(e); if (this.hiddenRowObj.row[t] === !o || null == this.hiddenRowObj.row[t] && !0 === o) return; this.hiddenRowObj.row[t] = !o, this.hiddenRowObj.init = !0; var s = this.delayedDraw({ rowIndex: Math.max(this.rowIndex, 0) }); if (!1 === o ? (this.hiddenRowObj.length++, "all" === this.options.visibleRowNum || s || this.hiddenRowObj.extraRow < this.hiddenRowObj.length && this._addHiddenRow(this.drawedRowLength + this.hiddenRowObj.length - 1)) : (delete this.hiddenRowObj.row[t], this.hiddenRowObj.length--), s) return; r.D.setTimeout((function() {
							this.lastTopRowIndex = null, this.initHeightCompleted = !1; var t = this.getDataLength(); if (t - this.hiddenRowObj.length <= this.lastIndex + 1 && 0 !== this.rowIndex) return this.bScrollY = 0, this.setScrollTop(0), void this.drawData(0); var e = t - this._getVisibleLastIndex(this.lastIndex + 1); if (e < this.rowIndex) { var i = this.getLastFocusedCell(); return this.removeFocusedCell(), this.rowIndex = e, e < this.bScrollTop && (this.bScrollTop = e), this.setScrollYHeight({ restRowCnt: this._getScrollRowIndex(e), skipScrollEnd: !0 }), this.drawData(e), void (i.focusedRowIndex > -1 && null != i.focusedColIndex && !0 === this.getRowVisible(i.focusedRowIndex) && this.setFocusedCell(i.focusedRowIndex, i.focusedColIndex)) } this._applyRowVisible({ applyStyle: !0, refreshColumn: !0 }), this.setScrollYHeight(), this.dynamicMergeHTML(), this._setRedrawTextAreaColumn(!0)
						}), { key: this.id + "_setRowVisible", caller: this, delay: 100 })
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.clearRowVisible = function(t) { try { var e = this.hiddenRowObj.extraRow; if (this.hiddenRowObj.init && (this.lastTopRowIndex = null), this.hiddenRowObj = { length: 0, extraRow: e, row: {}, init: !1 }, this._refreshRowVisible({ lastIndex: this.lastIndex, noDraw: !0 }), t && !0 === t.noDraw) return; 0 !== this.rowIndex ? (this.bScrollY = 0, this.setScrollTop(0), this.drawData(0), this.setScrollYHeight()) : (this.setScrollYHeight(), this.dynamicMergeHTML(), this.applyStyleOptions(this.lastIndex)) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getRowVisible = function(t) { try { return !(null == t || t < 0 || t > this.getTotalRow()) && !0 !== this.hiddenRowObj.row[t] } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._getRowVisible = function(t) { try { return !(null == t || t < 0 || t > this.getTotalRow()) && (!(this.hiddenRowObj.length > 0) || this.getRowVisible(this.dataList.getRealRowIndex(t))) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._getHiddenRowCount = function(t) { try { var e = this.hiddenRowObj.length; if (this.isDrillDown && isNaN(t) && (t = 0), this.hiddenRowObj.length > 0 && (t || this.isDrillDown)) { e = 0; for (var i = this.getDataLength(), o = t; o < i; o++)this._getRowVisible(o) || e++ } return e } catch (t) { return a.w.printStackTrace(t, null, this), 0 } }, u.prototype._getVisibleRowIndex = function(t) { try { if (this._getHiddenRowCount() <= 0) return t; var e = this.getDataLength(); if (t >= e) return e; for (var i = t, o = 0; i >= 0 && o < e;)this._getRowVisible(o) && i--, i >= 0 && o++; return o } catch (e) { return a.w.printStackTrace(e, null, this), t } }, u.prototype._getVisibleTrRowIndex = function(t, e) { try { if (this._getHiddenRowCount() <= 0) return t; for (var i = this.getDataLength(), o = 0, s = this.drawedRowLength + this.hiddenRowObj.extraRow - 1, r = t, n = e; r >= 0 && n < i && s > o; n++)this._getRowVisible(n) && r--, r >= 0 && o++; return o } catch (e) { return a.w.printStackTrace(e, null, this), t } }, u.prototype._getScrollRowIndex = function(t) { try { if (this._getHiddenRowCount() <= 0) return t; if (t <= 0) return 0; for (var e = 0, i = this._getScrollMaxRowIndex(), o = t - 1; o >= 0 && i > e; o--)this._getRowVisible(o) && e++; return e } catch (e) { return a.w.printStackTrace(e, null, this), t } }, u.prototype._getScrollMaxRowIndex = function() { try { var t = parseInt(document.getElementById(this.id + "_size_y").style.height, 10) - document.getElementById(this.id + "_scrollY_div").offsetHeight; return Math.floor((t + this._getEpsilon()) / this.oneRowScrollHeight) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._getEpsilon = function() { try { var t = Math.min(2, Math.round(this.oneRowScrollHeight / 10)), e = null != WebSquare.BootLoader.fullViewRatio ? WebSquare.BootLoader.fullViewRatio : 1; return e < 1 && (t = Math.min(Math.round(t / e), Math.round(this.oneRowScrollHeight / 2.4))), t } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._getVisibleLastIndex = function(t) { try { if (this._getHiddenRowCount() <= 0) return t; for (var e = t, i = this.getDataLength(), o = 0, s = i - 1; s >= 0 && e > 0; s--)this._getRowVisible(s) && e--, o++; return o } catch (e) { return a.w.printStackTrace(e, null, this), t } }, u.prototype._getTrIndex = function(t) { try { var e = t; return this.rowIndex >= 0 && (this.options.fixedRow > 0 && this.options.fixedRow > t || this.options.lastFixedRow > 0 && t > this.lastIndex - this.options.lastFixedRow || (e -= this.rowIndex)), e } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._getTdElem = function(t, e) { try { for (var i = 0, o = this.rowIndex; o < t && this.hiddenRowObj.length > 0; o++)this._getRowVisible(o) || i++; var s = this._getTrIndex(t); if (s < 0 || s - i >= this.drawedRowLength) return; return this.data_td_list[s * this.oneRowDataLength + e] } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._addHiddenRow = function(t) {
					try {
						var e = []; 0 == this.drawedRowLength && this.hasSubtotal && (e = e.concat(this.createSubtotalRows(-1))); for (var i = [], o = 0; o < this.oneRowLength; o++) { var s = this.tempTr.rows[o].cloneNode(!0); i[o] = s, e.push(s) } this.addBodyRow(t, i), this.hasSubtotal && (e = e.concat(this.createSubtotalRows(t))); var r = this.getElementById(this.id + "_body_table"), n = this.getElementById(this.id + "_body_tbody"); 0 == this.drawedRowLength ? r.style.borderWidth = "0px" : r.style.borderWidth = ""
							; for (o = 0; o < e.length; o++)n.appendChild(e[o]); this._setRowDisplay(t, "none"), this.hiddenRowObj.extraRow++
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype._applyRowVisible = function(t) { try { if (void 0 !== t && null != t || (t = {}), this.delayedDraw({ rowIndex: Math.max(this.rowIndex, 0) })) return; var e = 0, i = !0, o = this.getDataLength() + this._getLastSubtotalCount(), s = this.lastIndex; s = "" === this.options.visibleRowNum ? Math.min(this.drawedRowLength, o - this.rowIndex) - 1 : "all" === this.options.visibleRowNum ? this.drawedRowLength : Math.min(parseInt(this.options.visibleRowNum, 10), o) - 1; var r = o - this._getVisibleLastIndex(s + 1), n = this.rowIndex; this.subtotalHidden(); for (var l = !1, h = { skipSubtotal: !0, refreshColumn: t.refreshColumn }, d = 0, p = s, u = 0; u <= s; u++) { var c = u + this.rowIndex; if (!0 === t.drawRow && (this.options.fixedRow > 0 && this.options.fixedRow > u ? (c = u, this.fastDrawRowData(u, c, h)) : this.options.lastFixedRow > 0 && u > this.lastIndex - this.options.lastFixedRow || this.fastDrawRowData(u, c, h)), this._getRowVisible(u + this.rowIndex) ? (this._setRowDisplay(u, ""), i = !1, l = !0) : (this._setRowDisplay(u, "none"), e++, i && n < r && n++), this.hasSubtotal && l) this.options.initFixedHeightByRowNum > -1 && (m = { maxCount: s - u + e }), (y = this.drawSubtotalRow(u + 1, c, m)) > 0 && (l = !1, this.options.initFixedHeightByRowNum > -1 && (u >= (s -= y) && (e -= u - s), d += y)); p = u } var g = this.hiddenRowObj.extraRow + d, f = 0; for (u = 0; u < g && s >= 0; u++) { var m, y, b = u + p + 1; c = b + this.rowIndex; if (this._getRowVisible(c) && e > 0 && c < o ? (this._setRowDisplay(b, ""), this.fastDrawRowData(b, c, h), e--, i = !1, l = !0) : (this._setRowDisplay(b, "none"), i && n < r && n++, e <= 0 && (l = n >= r), !0 === t.drawRow && this.fastDrawRowData(b, c, h)), this.hasSubtotal && b + this.rowIndex < o && l) this.options.initFixedHeightByRowNum > -1 && (m = { maxCount: e }), (y = this.drawSubtotalRow(b + 1, c, m)) > 0 && (l = !1, this.options.initFixedHeightByRowNum > -1 && (f += y, e -= y)) } n !== this.rowIndex && !0 !== t.noDraw ? this.drawData(n) : "" === this.options.visibleRowNum ? (!0 === t.applyStyle && this.applyStyleOptions(s), this.cutGridBottom()) : this.lastIndex = s - f } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setCellVisible = function(t, e, i) { try { if (!0 !== i && !1 !== i) return; e = this.getColumnIndex(e); var o, s = !0 === this.hiddenCellObj[t + "_" + e], n = !1; if (!0 === i && s ? (this.hiddenCellObj[t + "_" + e] = !1, o = !0, this.hiddenCellObj.length--) : !1 !== i || s || (this.hiddenCellObj[t + "_" + e] = !0, o = !0, this.hiddenCellObj.length++, this.hiddenCellObj.init || (n = !0), this.hiddenCellObj.init = !0), !0 === o) { var l = this._getTdElem(t, e); null != l && (l.style.display = !0 === i ? "" : "none") } n && ("" !== this.options.visibleRowNum && "native" !== this.options.drawType && (this.options.visibleRowNum = ""), this.setDataTable()), "native" !== this.options.drawType && r.D.setTimeout(this._setCellVisibleRefresh, { key: this.id + "_setCellVisibleRefresh", caller: this, delay: 100 }) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._setCellVisibleRefresh = function() { try { if ("native" === this.options.drawType) return; this.lastTopRowIndex = null; var t = this.rowIndex, e = Math.max(this.getDataLength() - this.drawedRowLength, 0); this.rowIndex = e, this.subtotalHidden(); var i = this.completiveDrawData(0, { extraRowByCellHidden: !0 }); if (this.lastTopRowIndex = e + i, 0 === e && 0 === i) { 0 !== (o = this.getElementById(this.id + "_size_y")).offsetHeight && (o.style.height = "0px", this.handlerResize_drawInitializer()) } else { var o = this.getElementById(this.id + "_size_y"), s = this.getElementById(this.id + "_scrollY_div"), r = o.offsetHeight; if (r < 1e6 && (r = parseInt(o.style.height, 10)), o.style.height = s.offsetHeight + this.oneRowScrollHeight * this.lastTopRowIndex + "px", t = Math.min(t, this.lastTopRowIndex), this.hasSubtotal && this.struct.subtotalArr && this.struct.subtotalArr.length > 0) this.lastTopRowIndex += this.struct.subtotalArr.length, this.drawData(t); else { var n = this.oneRowScrollHeight * t; t !== this.rowIndex ? this.drawData(t) : s.scrollTop !== n && (this.bScrollY = n, s.scrollTop = n), this.handlerResize_drawInitializer() } } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getCellVisible = function(t, e) { try { e = this.getColumnIndex(e); return !0 !== this.hiddenCellObj[t + "_" + e] } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.clearCellVisible = function() {
					try {
						for (var t in this.hiddenCellObj) if (!0 === this.hiddenCellObj[t]) { var e = t.split("_"), i = Number(e[0]), o = Number(e[1]), s = this._getTdElem(i, o); null != s && (s.style.display = "") } this.hiddenCellObj = { length: 0, init: !1 }, this.cutGridBottom(this.lastIndex)
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype._moveCellVisible = function(t, e, i) { try { if (!(this.hiddenCellObj.length > 0)) return; void 0 !== i && null != i || (i = {}); var s = []; t.sort((function(t, e) { return t - e })); for (var r = {}, n = 0; n < t.length; n++)r[t[n]] = !0; var l = this.getRowCount(); for (n = 0; n < l; n++)!0 === i.remove && !0 === r[n] || s.push(n); !0 === i.insert && (s = s.slice(0, e).concat(t).concat(s.slice(e))); var h = {}; for (n = 0; n < s.length; n++)s[n] !== n && (h[s[n]] = n); var d = o.x.extend({}, this.hiddenCellObj), p = this.getColumnCount(); for (var u in h) { var c = Number(u), g = h[c]; if (c !== g) for (var f = 0; f < p; f++)this.setCellVisible(g, f, !d[c + "_" + f]) } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._refreshRowVisible = function(t) { try { this._applyRowVisible(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setScrollLeft = function(t) { t = parseInt(t, 10); try { this.getElementById(this.id + "_scrollX_right").scrollLeft = t } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setScrollTop = function(t) { t = parseInt(t, 10); try { this.scrollEvent = !0, this.getElementById(this.id + "_scrollY_div").scrollTop = t } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getScrollLeft = function() { try { return this.getElementById(this.id + "_scrollX_right").scrollLeft } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getScrollTop = function() { try { return this.getElementById(this.id + "_scrollY_div").scrollTop } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setGridStyle = function(t) { try { if (!t) return; if ("string" == typeof t) { t = t.match(/"\s*N\s*"\s*:\s*"\s*w2:gridView\s*"/) ? JSON.parse(t) : WebSquare.xml.parse(t) } t instanceof WebSquare.Elem && (t = t._element), !0 === WebSquare.convertPageXML && s.v.isXML(t) && (t = WebSquare.xmljs.xml2json(t).E[0]), !0 === s.v.isXML(t) && 9 == t.nodeType && (t = t.documentElement); var e = this.getParent(); e && e.parentControl && "wframe" == e.parentControl.options.pluginName && (e = e.parentControl); var i, o = this.scope_obj, r = this.parentFrame; this.options.groupbyFilterBox && this.options.customFilterBox && this.groupbyFilterBox_history.length > 0 && (i = this.groupbyFilterBox_history[this.groupbyFilterBox_select.getSelectedIndex()].customFilterListFilterInfo), this.remove(), this.__removed_object__ = !0; var n = WebSquare.controlFactory.create(null, null, t, o, r); n.options && isNaN(n.options.fixedRightColumn) && (n.options.fixedRightColumn = 0), n.writeTo(e), n.activate(), n.onComplete(), n.options.groupbyFilterBox && n.options.customFilterBox && (n.refreshGroupbyFilterBox(), n.applyFilterHistory(), i ? (n.customFilterList.customFilterListFilterInfo = JSON.parse(i, (function(t, e) { try { var i = new Function("return " + e)(); return "function" == typeof i || "object" == typeof i && i.constructor === RegExp ? i : "object" == typeof i && "func" === i.type && "string" == typeof i.key ? (i.key = new Function("return " + i.key)(), i) : e } catch (t) { return e } })), n.groupbyFilterBox_history[n.groupbyFilterBox_select.getSelectedIndex()].customFilterListFilterInfo = i) : n.customFilterList && (n.customFilterList.customFilterListFilterInfo = {})); var l = n.options._sortStatus; if (l) { for (var h = JSON.parse(l), d = [], p = [], u = [], c = 0; c < h.length; c++) { var g = h[c]; d.push(g.colID), p.push(g.sortOrder), u.push(g.dataType) } n.dataList.setFilter({ type: "sort", sortIndex: d.join(" "), sortOrder: p.join(" "), dataType: u.join(" "), focuseMode: n.options.filterFocusMode, ignoreEmptyStringOnSort: n.options.ignoreEmptyStringOnSort, setEmptyStringFirstOnSort: n.options.setEmptyStringFirstOnSort, setEmptyStringSortableOnSort: n.options.setEmptyStringSortableOnSort }), n.drawHeaderSortImages() } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getGridStyle = function() { try { return "json" === this.element._elementType ? WebSquare.jsonUtil.serialize(this.element._element) : WebSquare.xml.serialize(this.element._element) } catch (t) { a.w.printStackTrace(t) } }, u.prototype.getCurrentGridStyle = function() {
					try {
						var t = this.element.cloneNode(!0); t.setAttribute("columnOrder", this.getColumnOrder()), t.setAttribute("fixedColumn", this.options.fixedColumn), t.setAttribute("fixedRow", this.options.fixedRow), t.setAttribute("fixedRightColumn", this.options.fixedRightColumn); for (var e = t.getChildNodes(), i = 0; i < e.length; i++) { if ("w2:header" == e[i].getTagName()) for (var o = e[i].getChildNodes(), s = {}, n = 0, l = this.htmlInfo.head.rowAttrArr.length, h = 0; h < o.length; h++)if ("w2:row" === o[h].getTagName()) { for (var d = o[h].getChildNodes(), p = [], u = 0; u < d.length; u++)"w2:column" == d[u].getTagName() && p.push(d[u]); for (var c = 0, g = 0, f = {}, m = 0; m < p.length; m++) { for (; null != s[i] && null != s[i][m + c + g];)g += s[i][m + c + g]; f[m + c - 0 + g] = m; var y = parseInt(p[m].getAttribute("colSpan"), 10) || 1, b = parseInt(p[m].getAttribute("rowSpan"), 10) || 1; if (b > 1) for (var w = n; w < n + b - 1; w++)null == s[w + 1] && (s[w + 1] = {}), null == s[w + 1][m - 0 + c + g] ? s[w + 1][m - 0 + c + g] = y : s[w + 1][m - 0 + c + g] += y; y > 1 && (c += y - 1) } if (n === l - 1) { var v = 0, C = 0; for (m = 0; m < p.length; m++) { for (; null != s[n] && null != s[n][this.columnOrder[m + C + v]];)C += s[n][this.columnOrder[m + C + v]]; var I = f[[this.columnOrder[m - 0 + v + C]]]; null == I && (I = 0); var _ = p[I]; (y = parseInt(_.getAttribute("colSpan"), 10)) > 1 && (v += y - 1), _.setAttribute("width", this.colWidthList[m + this.defaultColCnt + v + C]), this.hiddenList[m + this.defaultColCnt + v + C] ? _.setAttribute("hidden", "true") : _.setAttribute("hidden", "false") } } n++ } if ("w2:gBody" == e[i].getTagName()) for (o = e[i].getChildNodes(), h = 0; h < o.length; h++)if ("w2:row" === o[h].getTagName()) { var x = o[h].getChildNodes(), S = []; for (u = 0; u < x.length; u++)"w2:column" == x[u].getTagName() && S.push(x[u]); for (c = 0, f = {}, m = 0; m < S.length; m++) { f[m + c] = m, (y = parseInt(S[m].getAttribute("colSpan"), 10)) > 1 && (c += y - 1) } for (v = 0, m = 0; m < S.length; m++) { _ = S[f[[this.columnOrder[m + v]]]]; (y = parseInt(_.getAttribute("colSpan"), 10)) > 1 && (v += y - 1), _.setAttribute("width", this.colWidthList[m + this.defaultColCnt + v]), r.D.isChrome() ? _.setAttribute("hidden", this.hiddenList[m + this.defaultColCnt + v]) : this.hiddenList[m + this.defaultColCnt + v] ? _.setAttribute("hidden", "true") : _.setAttribute("hidden", "false"); var D = _.getAttribute("col_id"); D && (_.setAttribute("id", D), _.removeAttribute("col_id")) } } } var R = this.getSortableStatus(); return R && R.length > 0 && t.setAttribute("_sortStatus", JSON.stringify(R)), t.serialize()
					} catch (t) { a.w.printStackTrace(t) }
				}, u.prototype.setTableStruct = function() {
					try {
						if (this.headerXml = WebSquare.Elem.api.getElementsByTagName(this.element, "header", s.v._XML_NAMESPACE.W2)[0], this.bodyXml = WebSquare.Elem.api.getElementsByTagName(this.element, "gBody", s.v._XML_NAMESPACE.W2)[0], this.struct = { head: this.xml2JSON(this.headerXml), body: this.xml2JSON(this.bodyXml) }, this.updateStruct(this.struct.head.rowArr), this.updateStruct(this.struct.body.rowArr), this.changeRowID(this.struct.head.rowAttrArr), this.changeRowID(this.struct.body.rowAttrArr), this.footerXml = WebSquare.Elem.api.getElementsByTagName(this.element, "footer", s.v._XML_NAMESPACE.W2)[0], this.footerXml && (this.hasFooter = !0, this.struct.foot = this.xml2JSON(this.footerXml), this.updateStruct(this.struct.foot.rowArr)), this.subtotalXmlArr = WebSquare.Elem.api.getElementsByTagName(this.element, "subTotal", s.v._XML_NAMESPACE.W2), this.subtotalXmlArr.length > 0) { this.options.showLastRow = !1, this.hasSubtotal = !0, this.drawedSubtotal = [], this.drawedSubtotal.drawedRowLength = 0, this.struct.subtotalArr = []; for (var t = 0; t < this.subtotalXmlArr.length; t++) { var e = this.xml2JSON(this.subtotalXmlArr[t]); this.struct.subtotalArr.push(e), this.struct.subtotalArr[e.attr.id] = e, this.updateStruct(e.rowArr) } } if (this.setCss(), this.setColArr(), this.htmlInfo = { head: this.getHeaderHtmlInfo(), body: this.getBodyHtmlInfo() }, this.footerXml && (this.htmlInfo.foot = this.getFooterHtmlInfo()), this.subtotalXmlArr.length > 0) { this.htmlInfo.subtotalArr = [], this.subtotalStrList = {}; for (t = 0; t < this.struct.subtotalArr.length; t++) { e = this.getSubtotalHtmlInfo(this.struct.subtotalArr[t]); this.htmlInfo.subtotalArr.push(e), this.htmlInfo.subtotalArr[e.attr.id] = e, this.subtotalStrList[e.attr.targetColumnID] = e } }
						this.captionXml = WebSquare.Elem.api.getElementsByTagName(this.element, "caption", s.v._XML_NAMESPACE.W2)[0]; var i = this.getColCnt(); this.columnOrder = []; for (t = 0; t < i; t++)this.columnOrder.push(t)
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.updateStruct = function(t) { try { for (var e = 0, i = [], o = this.getColCnt(), s = 0; s < t.length; s++) { for (var r = [], n = 0; n < o; n++)r.push(null); i.push(r) } for (s = 0; s < t.length; s++)for (n = 0; n < t[s].length; n++) { var l; for (l = 0; l < i[s].length && null !== i[s][l]; l++); var h = t[s][n]; h["@col"] = l; for (var d = h.colSpan || h.colspan || 1, p = h.rowSpan || h.rowspan || 1, u = 0; u < p; u++)for (var c = 0; c < d; c++)i[s + u][l + c] = e; e++ } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.changeRowID = function(t) { try { for (var e = 0; e < t.length; e++) { var i = t[e]; null != i.id && (i["data-tr-id"] = i.id, delete i.id) } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._getRealColIndex = function(t, e) { try { for (var i = 0; i < this.htmlInfo[t].rowArr.length; i++)for (var o = 0; o < this.htmlInfo[t].rowArr[i].length; o++)if (this.htmlInfo[t].rowArr[i][o].col_id == e) return this.htmlInfo[t].rowArr[i][o]["@col"]; return null } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._getRealHeaderColIndex = function(t) { try { return this.getColumnIndex(this.headerToBodyRelation[t]) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._getDataColIndex = function(t) { try { return this._dataList.getColumnIndex(this.getColumnID(t)) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._moveColumn = function(t, e, i, o, s, r) { try { e = e || "td"; for (var n = [], l = 0; l < t[i].childNodes.length; l++)t[i].childNodes[l].nodeName.toLowerCase() == e && n.push(t[i].childNodes[l]); var h = n[o]; h.parentNode.removeChild(h); var d = []; for (l = 0; l < t[i].childNodes.length; l++)t[i].childNodes[l].nodeName.toLowerCase() == e && d.push(t[i].childNodes[l]); if (r < d.length) { var p = d[r]; p.parentNode.insertBefore(h, p) } else t[s].appendChild(h) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.moveBodyColumn = function(t, e, i, o) { try { var s = this.htmlInfo.body.rowArr[t].splice(e, 1); this.htmlInfo.body.rowArr[i].splice(o, 0, s[0]), this.updateStruct(this.htmlInfo.body.rowArr), e += 0 == t ? this.defaultColCnt : 0, o += 0 == i ? this.defaultColCnt : 0; var r = this.getElementById(this.id + "_body_tbody"), n = 0; this.hasSubtotal && this.drawedSubtotal && this.drawedSubtotal.length > 0 && (n = this.drawedSubtotal[0].length); for (var l = 0; l < this.drawedRowLength; l++) { for (var h = [], d = 0; d < this.oneRowLength; d++)h.push(r.rows[l * (this.oneRowLength + n) + d + n]); this._moveColumn(h, "td", t, e, i, o); for (d = 0; d < n; d++)if (0 === t && 0 === i) { var p = d > 0 ? this.defaultColCnt : 0; this._moveColumn([r.rows[l * (this.oneRowLength + n) + d]], "td", 0, e - p, 0, o - p) } } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.moveHeadColumn = function(t, e, i, o) { try { var s = this.htmlInfo.head.rowArr[t].splice(e, 1); this.htmlInfo.head.rowArr[i].splice(o, 0, s[0]), this.updateStruct(this.htmlInfo.head.rowArr), e += 0 == t ? this.defaultColCnt : 0, o += 0 == i ? this.defaultColCnt : 0; var r = this.getElementById(this.id + "_head_table"); this._moveColumn(r.rows, "th", t, e, i, o) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._moveFooterColumn = function(t, e, i, o) { try { var s = this.htmlInfo.foot.rowArr[t].splice(e, 1); this.htmlInfo.foot.rowArr[i].splice(o, 0, s[0]), this.updateStruct(this.htmlInfo.foot.rowArr), e += 0 == t ? this.defaultColCnt : 0, o += 0 == i ? this.defaultColCnt : 0; var r = document.getElementById(this.id + "_foot_table").getElementsByTagName("tbody")[0]; this._moveColumn(r.rows, "td", t, e, i, o) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.moveFooterColumn = function(t, e) {
					try {
						var i, o, s = parseInt(t, 10), r = []; "string" == typeof t && isNaN(s) ? (o = "id", i = t) : (o = "@col", i = this.colIndexes.footerColInfo.colIndexArr[s + this.defaultColCnt] - this.defaultColCnt); for (var n = 0; n < this.htmlInfo.foot.rowArr.length; n++)for (var l = 0; l < this.htmlInfo.foot.rowArr[n].length; l++)this.htmlInfo.foot.rowArr[n][l][o] == i && r.push({ row: n, col: l }); var h, d, p = parseInt(e, 10); "string" == typeof e && isNaN(p) ? (d = "id", h = e) : (d = "@col", h = this.colIndexes.footerColInfo.colIndexArr[p + this.defaultColCnt] - this.defaultColCnt); for (n = 0; n < r.length; n++) {
							var u = null
							; for (l = 0; l < this.htmlInfo.foot.rowArr[r[n].row].length; l++)if (this.htmlInfo.foot.rowArr[r[n].row][l][d] == h) { u = l; break } null !== u ? this._moveFooterColumn(r[n].row, r[n].col, r[n].row, u) : this._moveFooterColumn(r[n].row, r[n].col, r[n].row, p)
						}
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.moveColumnByHeaderId = function(t, e) { try { if (!t || !e || t === e) return !1; var i = this.getHeaderColIndex(t), o = this.getHeaderColIndex(e); if (isNaN(i) || isNaN(o)) return !1; var s = this.columnBlock.hash[i - this.defaultColCnt], r = this.columnBlock.hash[o - this.defaultColCnt]; if (s === r) return !1; var n = this.getFixedColumnLastIndex(); if (this.options.fixedColumnNoMove && (n > s || n > r)) return !1; for (var l = -1, h = -1, p = 0; p < this.columnOrder.length; p++) { var u = this.columnOrder[p]; if (u === s && (l = p), u === r && (h = p), l > -1 && h > -1) break } var c = this.headerToBodyRelation[t], g = this.headerToBodyRelation[e]; if (!1 === d.B.fireEvent(this, "onbeforecolumnmove", { startColumnID: c, startColumnIndex: l, endColumnID: g, endColumnIndex: h })) return !1; this.columnBlock || this.createBlockedHeaderInfo(); var f = this.getColumnOrder(), m = -1, y = -1; for (p = 0; p < f.length; p++) { var b = f[p]; if (b === s ? m = p : b === r && (y = p), -1 !== m && -1 !== y) break } var w = this.columnBlock.info[s], v = this.columnBlock.info[r], C = f.slice(0); C.splice(m, w.length); var I = y + (m < y ? v.length - w.length : 0), _ = C.slice(0, I).concat(w).concat(C.slice(I)), x = this.setColumnOrder(_); return d.B.fireEvent(this, "onaftercolumnmove", { startColumnID: c, startColumnIndex: l, endColumnID: g, endColumnIndex: h }), x } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.moveColumn = function(t, e) {
					try {
						if (t == e) return; if (this.options.fixedColumnNoMove && (this.getFixedColumnLastIndex() > t + this.defaultColCnt || this.getFixedColumnLastIndex() > e + this.defaultColCnt)) return; var i = this.getHeaderID(t), o = this._getRealColIndex("head", i) + this.defaultColCnt, s = this.headerToBodyRelation[i]; if (!s || this.colMoveBolockedHeaderObj[i]) return; var r = this.colMoveIndexMap[s], n = this._getRealColIndex("body", s) + this.defaultColCnt, l = this.getHeaderID(e), h = this.headerToBodyRelation[l]; if (!h || this.colMoveBolockedHeaderObj[l]) return; var p = this._getRealColIndex("head", l) + this.defaultColCnt, u = this.colMoveIndexMap[h], c = this.colIndexes.bodyColInfo.colIndexArr[u + this.defaultColCnt]; if (!1 === d.B.fireEvent(this, "onbeforecolumnmove", { startColumnID: s, startColumnIndex: r, endColumnID: h, endColumnIndex: u })) return !1; for (var g = [], f = n - this.defaultColCnt, m = 0; m < this.htmlInfo.body.rowArr.length; m++)for (var y = 0; y < this.htmlInfo.body.rowArr[m].length; y++)this.htmlInfo.body.rowArr[m][y]["@col"] == f && g.push({ row: m, col: y }); var b = c - this.defaultColCnt; for (m = 0; m < g.length; m++) { var w = null; for (y = 0; y < this.htmlInfo.body.rowArr[g[m].row].length; y++)if (this.htmlInfo.body.rowArr[g[m].row][y]["@col"] == b) { w = y; break } null !== w ? this.moveBodyColumn(g[m].row, g[m].col, g[m].row, w) : this.moveBodyColumn(g[m].row, g[m].col, g[m].row, u) } g = []; var v = o - this.defaultColCnt; for (m = 0; m < this.htmlInfo.head.rowArr.length; m++)for (y = 0; y < this.htmlInfo.head.rowArr[m].length; y++)this.htmlInfo.head.rowArr[m][y]["@col"] == v && g.push({ row: m, col: y }); var C = p - this.defaultColCnt; for (m = 0; m < g.length; m++) { for (w = null, y = 0; y < this.htmlInfo.head.rowArr[g[m].row].length; y++)if (this.htmlInfo.head.rowArr[g[m].row][y]["@col"] == C) { w = y; break } null !== w ? this.moveHeadColumn(g[m].row, g[m].col, g[m].row, w) : this.moveHeadColumn(g[m].row, g[m].col, g[m].row, e) } this.hasFooter && this.options.columnMoveWithFooter && this.moveFooterColumn(t, e); var I = function(t, e, i) { var o = t.splice(e, 1); t.splice(i, 0, o[0]) }; if (null != this.initVisibilityArr) for (m = 0; m < this.htmlInfo.body.rowArr.length; m++)I(this.initVisibilityArr, n + m * this.getColCnt(), c + m * this.getColCnt()); for (var _ in I(this.columnOrder, n - this.defaultColCnt, c - this.defaultColCnt), I(this.colIndexInfo.body.colInfo.colIndexMatch, n, c), I(this.colWidthList, n, c), I(this.hiddenList, o, p), this.colMoveIndexMap) this.colMoveIndexMap[_] == r ? this.colMoveIndexMap[_] = u : r < u ? r < this.colMoveIndexMap[_] && this.colMoveIndexMap[_] <= u && (this.colMoveIndexMap[_] -= 1) : r > u && r > this.colMoveIndexMap[_] && this.colMoveIndexMap[_] >= u && (this.colMoveIndexMap[_] += 1)
							; for (var _ in this.colMoveHeaderIndexMap) this.colMoveHeaderIndexMap[_] == r ? this.colMoveHeaderIndexMap[_] = u : r < u ? r < this.colMoveHeaderIndexMap[_] && this.colMoveHeaderIndexMap[_] <= u && (this.colMoveHeaderIndexMap[_] -= 1) : r > u && r > this.colMoveHeaderIndexMap[_] && this.colMoveHeaderIndexMap[_] >= u && (this.colMoveHeaderIndexMap[_] += 1); this.arrangeOverflowXScroll(), this._handleScrollX(), d.B.fireEvent(this, "onaftercolumnmove", { startColumnID: s, startColumnIndex: r, endColumnID: h, endColumnIndex: u })
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.resetMoveColumn = function() { try { for (var t = this.getColCnt(), e = [], i = 0; i < t; i++)e.push(i); this.setColumnOrder(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setColumnOrder = function(t) { try { if (!r.D.isEmptyObject(this.cellMergeInfo)) return void p.k.printLog("warning : setColumnOrder refused due to mergeCells. [" + this.id + "]"); t = t.slice(); if (!this.render || 0 === this.render.offsetHeight && 0 === this.render.offsetWidth) return this.resizeObj = { width: 0, height: 0 }, this.setRedrawStatus("stop"), void this.delayedDraw({ newColumnOrder: t }); var e = this.getColCnt(), i = []; "string" == typeof t && (t = t.split(",")); for (var o = 0; o < t.length; o++) { if (null != this.bodyIdColIndexMap[t[o]] && (t[o] = this.bodyIdColIndexMap[t[o]]), t[o] = Number(t[o]), "number" != typeof t[o]) return void $l(this.id + ".setColumnOrder : wrong column order array."); i[t[o]] = !0 } if (e > t.length) { for (o = 0; o < t.length; o++)t[o] = this.colIndexes.headerColInfo.colIndexArr[t[o] + this.defaultColCnt] - this.defaultColCnt; for (o = 0; o < t.length; o++) { var s = this.getCellInfo(t[o]).options.colSpan; if (s > 1) for (var n = 1; n < s; n++)t.splice(o + n, 0, t[o] + n) } for (o = 0; o < t.length; o++)i[t[o]] = !0 } for (o = t.length - 1; o >= 0; o--)for (n = o - 1; n >= 0; n--)t[o] === t[n] && t.splice(o, 1); for (o = 0; o < e; o++)i[o] || t.push(o); if (e != t.length) return $l(this.id + ".setColumnOrder : wrong column order array."), !1; var l = []; for (o = 0; o < t.length; o++)for (n = 0; n < this.columnOrder.length; n++)if (this.columnOrder[n] == t[o]) { l[o] = n; break } if (!0 === this.checkRefreshAdaptive() && this.removeAdaptive(), this.columnOrder = l.slice(0), this.drawedRowLength <= 0 && this.drawDataTable(), this._moveColumnByOrder(this.id + "_body_tbody", this.htmlInfo.body.rowArr), this._moveColumnByOrder(this.id + "_head_table", this.htmlInfo.head.rowArr), this.hasFooter && this.options.columnMoveWithFooter) { var h = document.getElementById(this.id + "_foot_table").getElementsByTagName("tbody")[0]; this._moveColumnByOrder(h.getAttribute("id"), this.htmlInfo.foot.rowArr) } if (null != this.initVisibilityArr) { var d = []; for (o = 0; o < this.initVisibilityArr.length - this.defaultColCnt; o++) { var u = Math.floor(o / this.columnOrder.length), c = o % this.columnOrder.length, g = u * this.columnOrder.length + this.columnOrder[c] + this.defaultColCnt; d.push(this.initVisibilityArr[g]) } for (o = 0; o < d.length; o++)this.initVisibilityArr[o + this.defaultColCnt] = d[o] } this._swapItem(this.colIndexInfo.body.colInfo.colIndexMatch, this.columnOrder, this.defaultColCnt), this._swapItem(this.colWidthList, this.columnOrder, this.defaultColCnt), this.initialColWidthList = this.colWidthList.slice(), this._swapItem(this.hiddenList, this.columnOrder, this.defaultColCnt), "allColumn" === this.options.autoFit && this._swapItem(this.autoFitColWidthList, this.columnOrder, this.defaultColCnt); for (o = 0; o < this.tdIdList.length; o++)for (n = 0; n < t.length; n++)if (o == t[n]) { this.colMoveIndexMap[this.tdIdList[o]] = n, this.colMoveHeaderIndexMap[this.thIdList[o]] = n; break } return this.columnOrder = t.slice(0), this.arrangeOverflowXScroll(), this._handleScrollX(), !0 === this.checkRefreshAdaptive() && this.addAdaptive(), !0 } catch (t) { return a.w.printStackTrace(t, null, this), !1 } }, u.prototype._moveColumnByOrder = function(t, e) {
					try {
						var i = document.getElementById(t), o = [], s = {}, n = e.length; (isNaN(n) || n <= 0) && (n = 1); for (var l = 0; l < n; l++) {
							if (!(I = i.rows[l])) break; var h = 0; 0 === l && (h = this.defaultColCnt); for (var d = {}, p = 0, u = 0, c = h; c < I.childNodes.length; c++) {
								for (; null != s[l] && null != s[l][c + p + u];)u += s[l][c + p + u]; d[c + p - h + u] = c; var g = parseInt(I.childNodes[c].getAttribute("colSpan"), 10) || 1
									; this.options.lazyDrawHiddenColumn && "true" == I.childNodes[c].getAttribute("data-lazydrawtd") && (g = 1); var f = parseInt(I.childNodes[c].getAttribute("rowSpan"), 10) || 1; if (f > 1) for (var m = l; m < l + f - 1; m++)null == s[m + 1] && (s[m + 1] = {}), null == s[m + 1][c - h + p + u] ? s[m + 1][c - h + p + u] = g : s[m + 1][c - h + p + u] += g; g > 1 && (p += g - 1)
							} var y = 0, b = 0; o[l] = []; for (c = h; c < I.childNodes.length; c++) { for (; null != s[l] && null != s[l][this.columnOrder[c + b + y]];)b += s[l][this.columnOrder[c + b + y]]; var w = d[[this.columnOrder[c - h + y + b]]]; null == w && (w = 0), o[l].push(w - h); var v = I.childNodes[w]; g = parseInt(v.getAttribute("colSpan"), 10); this.options.lazyDrawHiddenColumn && "true" == v.getAttribute("data-lazydrawtd") && (g = 1), g > 1 && (y += g - 1) }
						} for (l = 0; l < i.rows.length; l++) { h = 0; var C = l % n; 0 === C && (h = this.defaultColCnt); var I = i.rows[l]; r.D.isIEAllVersion() && "11" == r.D.browserVersion() && l >= (this.lastIndex + 1) * this.oneRowLength && (I.style.backgroundColor = ""); var _ = []; for (c = 0; c < o[C].length; c++)_.push(I.childNodes[o[C][c] + h]); for (c = 0; c < _.length; c++)I.appendChild(_[c]) } for (l = 0; l < n; l++)this._swapItem(e[l], o[l], 0); this.updateStruct(e)
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype._swapItem = function(t, e, i) { try { for (var o = [], s = null == i ? 0 : i, r = 0; r < e.length; r++)o.push(t[e[r] + s]); for (r = 0; r < o.length; r++)t[r + s] = o[r] } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getColumnOrder = function(t) { try { if (t) { for (var e = [], i = this.colIndexInfo.body.colInfo.colIndexMatch, o = this.defaultColCnt; o < i.length; o++) { if (0 == i[o].length) return void $l(this.id + ".getColumnOrder : use getColumnOrder(false). cannot express column order by name."); for (var s = this.tdIdList[i[o][0] - this.defaultColCnt], r = !1, n = 0; n < e.length; n++)if (e[n] === s) { r = !0; break } r || e.push(s) } return e } return this.columnOrder.slice(0) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._getDisplayColumnIndex = function(t) { try { for (var e = parseInt(t, 10), i = 0; i < this.columnOrder.length; i++)if (e === this.columnOrder[i]) return i; return t } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._getColumnMoveIndex = function(t) { try { if (t < 0 || isNaN(t)) return t; for (var e = this.colIndexInfo.body.colInfo.colIndexArr[t + this.defaultColCnt], i = this.colIndexInfo.body.colInfo.trIndexArr[t + this.defaultColCnt], o = this.colIndexInfo.body.colInfo.colIndexMatch[e], s = 0; s < o.length; s++) { var r = o[s]; if (r >= t + this.defaultColCnt) break; var n = this.colIndexInfo.body.colInfo.rowSpanArr[r]; n > 1 && (i = i - n + 1) } return o[i] - this.defaultColCnt } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.handleGroupbyZoneClick = function(t) { try { for (var e = r.D.getDataPrefix("header_id"), i = r.D.getDataPrefix("col_id"), o = this.event.getTargetIterator(t, this.render); o.next() && (!this.options.groupbyZoneSearch || !o.match("w2grid_groupbyZone_search"));) { if (o.match("w2grid_groupbyZone_column")) { var s = o.getElement(), n = {}; n.render = s, n.parentRender = this.render.getElementsByTagName("div")[0], n.headerID = s.getAttribute(e), n.headerIndex = this._getColumnMoveIndex(this.getHeaderIndex(n.headerID)), n.dataIndex = this._getDataColIndex(this._getRealHeaderColIndex(n.headerID)), this.toggleGroupbyFilterList(n), d.B.stopEvent(t); break } if (o.match("w2grid_groupbyZone_column_closeButtonImg")) { s = o.getElement(); this.hideGroupbyFilterList(), this.ungroupColumn(s.getAttribute(i)); break } if (o.match("w2grid_groupbyZone")) { this.hideGroupbyFilterList(), d.B.stopEvent(t); break } } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.toggleGroupbyFilterList = function(t) { try { var e = t.render.tagName, i = t.headerIndex; "number" == typeof this.groupbyZoneStatus.beforeOpenedColIndex ? (this.groupbyFilterList.saveState(this.groupbyZoneStatus.beforeOpenedColIndex.toString()), i == this.groupbyZoneStatus.beforeOpenedColIndex && e == this.groupbyZoneStatus.beforeOpenedColTagName ? "block" == this.groupbyFilterList.render.style.display ? this.hideGroupbyFilterList() : this.showGroupbyFilterList(t, !0) : this.showGroupbyFilterList(t, !0, !0)) : this.createGroupbyFilterList(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.applyFilterListFormat = function(t, e) {
					try {
						if (this.options.displayValueOnUseFilterList) for (var i = 0; i < t.length; i++)null != t[i].id3 && (this.groupbyStatus.grouped ? this.groupbyFilterList.setCellDataNM(i, "id2", t[i].id3) : this.customFilterList.setCellDataNM(i, "id2", t[i].id3)); else if (this.options.useFilterListFormat) { var o = this.headerToBodyRelation[e], s = this.getCellInfo(o), r = 0, n = this.headerInfoHash[e]; if (n && n.options.hideCustomFilter && (r = 1), s.options.displayFormat || s.options.displayFormatter || s.options.ioFormat) for (i = 2 - r; i < t.length; i++) { var l = s.formatter.format(t[i].id2); this.groupbyStatus.grouped ? this.groupbyFilterList.setCellDataNM(i, "id2", l) : this.customFilterList.setCellDataNM(i, "id2", l) } }
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.createGroupbyFilterList = function(t) {
					try {
						var e = t.render, i = t.parentRender, o = t.headerIndex, s = t.headerID; if (!this.groupbyFilterList) {
							this.groupbyStatus.filter = {}; "<w2:list xmlns:w2=\"http://www.inswave.com/websquare\" tagName='div' style='position:absolute; z-index:11; padding:0px; display:block;' class='w2grid_groupbyZone_list' virtualized='true' labelCheck='true'>", "    <w2:listRow tagName='div' style='height: 20px; display:block; border-top: 0px; border-left:0px; border-right:0px;' class='w2grid_groupbyZone_list_listRow' check_id='id1' >", "        <w2:listColumn id='id1' inputType='checkbox' style='' class='w2grid_groupbyZone_list_listColumn_checkbox'/>", "        <w2:listColumn id='id2' check_id='id1' inputType='text' style='' class='w2grid_groupbyZone_list_listColumn_text'/>", "    </w2:listRow>", "</w2:list>"; var n = WebSquare.xml.parse("<w2:list xmlns:w2=\"http://www.inswave.com/websquare\" tagName='div' style='position:absolute; z-index:11; padding:0px; display:block;' class='w2grid_groupbyZone_list' virtualized='true' labelCheck='true'>    <w2:listRow tagName='div' style='height: 20px; display:block; border-top: 0px; border-left:0px; border-right:0px;' class='w2grid_groupbyZone_list_listRow' check_id='id1' >        <w2:listColumn id='id1' inputType='checkbox' style='' class='w2grid_groupbyZone_list_listColumn_checkbox'/>        <w2:listColumn id='id2' check_id='id1' inputType='text' style='' class='w2grid_groupbyZone_list_listColumn_text'/>    </w2:listRow></w2:list>", !0).documentElement; this.groupbyFilterList = new WebSquare.uiplugin.list(this.id + "_groupbyZone_list", "", n), this.groupbyFilterList.filterHistory = { column: [], filteredRowIndexArr: [] }; var l = this; this.groupbyFilterList._handleClickEvent = this.groupbyFilterList.handleClickEvent, this.groupbyFilterList.handleClickEvent = function(t) {
								try {
									this._handleClickEvent(t), d.B.stopPropagation(t); var e = d.B.getTarget(t), i = e; if ((e.className.match("w2grid_groupbyZone_list_listColumn_checkbox") || e.className.match("w2grid_groupbyZone_list_listColumn_text")) && (i = e.parentElement), !i.className.match("w2grid_groupbyZone_list_listRow")) return; var o = i.children[0], s = l.getHeaderID(this.headerIndex), n = l.getColumnID(this.headerIndex), h = r.D.getDataPrefix("unique_id"), p = i.getAttribute(h), u = this.getAllData(), c = o.checked, g = !1, f = !1, m = !1; if (u[0].customerFilter && u[0][h] == p) { if (c) return l.hideGroupbyFilterList(), l.firstOpenCustomFilter[s] ? (l._dataList.filterManager.headerID = s, l._dataList.filterManager.targetColID = n, void l.setCustomFilterExpression()) : (l.firstOpenCustomFilter[s] || (l.firstOpenCustomFilter[s] = !0), void (l.options.groupbyFilterIcon ? l._showCustomFilter(s) : l.showCustomFilter(s))); for (var y in l.customFilterStatusObj[s] = !1, l.dataList.removeColumnFilter(n), l.customFilterStatusObj) if (l.customFilterStatusObj[y]) return; g = !0, f = !0, m = !0; for (var b = 1; b < u.length; b++)u[b].id1 = !0 } else if (u[1].gridCheckedAll && u[1][h] == p) { f = !0, c && (m = !0); for (b = 2; b < u.length; b++)u[b].id1 = c } if (!g && !m && u.length - 2 > 0) {
										l.groupbyStatus.filter[n] = []; for (b = 2; b < u.length; b++)u[b].id1 && l.groupbyStatus.filter[n].push(u[b].id2); l.groupbyStatus.filter[n] = l.changeItemValue("value", n, l.groupbyStatus.filter[n]); var w = /[\^\$\.\[\]\{\}\+\(\)\|\*\\\?]/g; for (b = 0; b < l.groupbyStatus.filter[n].length; b++) {
											var v = l.groupbyStatus.filter[n][b]
											; "string" == typeof v && (l.groupbyStatus.filter[n][b] = v.replace(w, (function(t) { return l.replacechar(t) })))
										}
									} if (f) { if (m && this.filterHistory.column[0] === n) this.filterHistory.column.shift(), this.filterHistory.filteredRowIndexArr.shift(), delete l.groupbyStatus.filter[n]; else if (!m && this.filterHistory.column[0] !== n && u.length - 2 > 0) { for (b = 1; b < this.filterHistory.column.length; b++)if (this.filterHistory.column[b] === n) { l.dataList.removeColumnFilter(n, { noRefresh: !0, noRefreshAfter: !0 }); break } this.filterHistory.column.unshift(n), this.filterHistory.filteredRowIndexArr.unshift(l._dataList.filteredRowIndexArr.slice(0)) } } else { var C = u.length - 2; if (C > l.groupbyStatus.filter[n].length) { if (u[1].id1 = !1, this.filterHistory.column[0] !== n) { for (var b = 1; b < this.filterHistory.column.length; b++)if (this.filterHistory.column[b] === n) { l.dataList.removeColumnFilter(n, { noRefresh: !0, noRefreshAfter: !0 }); break } this.filterHistory.column.unshift(n), this.filterHistory.filteredRowIndexArr.unshift(l._dataList.filteredRowIndexArr.slice(0)) } } else l.groupbyStatus.filter[n].length == C && (u[1].id1 = !0, delete l.groupbyStatus.filter[n], this.filterHistory.column[0] === n && (this.filterHistory.column.shift(), this.filterHistory.filteredRowIndexArr.shift())) } this.setFirstRowIndex(this.firstListIndex, !0); var I = {}; if (I.sortIndex = l.groupbyStatus.sortIndexArr, I.sortOrder = l.groupbyStatus.sortOrderArr, null != l.groupbyStatus.filter && (I.filter = l.groupbyStatus.filter, l.groupbyStatus.filter[n] && 2 * l.groupbyStatus.filter[n].length > u.length)) { var _ = [], x = "*"; for (b = 2; b < u.length; b++)if (!u[b].id1) { if (u[b].id2 === l.filterEmptyStr) { x = "+"; continue } _.push(u[b].id2) } var S = l.getCellInfo(n); (S.itemsetObj || S.itemArr) && (_ = l.changeItemValue("value", n, _)); var D = "^\\n*(?:(?!^"; for (w = /[\^\$\.\[\]\{\}\+\(\)\|\*\\\?]/g, b = 0; b < _.length; b++) { var R = _[b]; "string" == typeof R && (R = R.replace(w, (function(t) { return l.replacechar(t) }))), D += R += "$)(?!^" } D += "$).)" + x + "\\n*$", I.filterRegExp = {}, I.filterRegExp[n] = new RegExp(D, "gi") } if (I.noRefreshAfter = !0, !1 === d.B.fireEvent(l, "ongroupby", I)) { var L = l.getColCnt() + l.defaultColCnt; I.rowNumHeader = { colSpan: L, inputType: "expression", expression: " toggle() + depthStr() + ' [ ' + count() + ' 건 ] ' ", align: "left" }, I.footerVisible = !1, I.rowNumFooter = { colSpan: L }, l.groupby(I) } l.options.groupbyFilterBox && (this.isChanged = !0)
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, this.groupbyFilterList.writeTo(this), this.groupbyFilterList.activate()
						} if (!0 === t.noDraw) return; var h = e.clientWidth, p = WebSquare.style.getRelativeTop(e, i) + e.offsetHeight, u = WebSquare.style.getRelativeLeft(e, i); this.groupbyFilterList.setPosition(u, p), this.groupbyFilterList.render.style.width = h + "px"; var c = this.render.offsetHeight - p; this.groupbyFilterList.options.visibleRowNum = Math.floor(c / 21); var g = this.getGroupbyDepthInfo(t); if (this.groupbyFilterList.setJSON(g), this.applyFilterListFormat(g, s), this.groupbyFilterList.currentHeaderID = s, this.groupbyFilterList.headerIndex = o, WebSquare.style.show(this.groupbyFilterList.render), r.D.getBoolean(this.headerInfoHash[s].options.autoFitFilterList) || r.D.getBoolean(this.options.autoFitFilterList)) { var f = this.groupbyFilterList.getMaxItemWidth(); f > h && (this.groupbyFilterList.render.style.width = f + "px") } this.groupbyFilterList.focus(), this.groupbyZoneStatus.beforeOpenedColIndex = o, this.groupbyZoneStatus.beforeOpenedColTagName = e.tagName
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.showGroupbyFilterList = function(t, e, i) {
					try {
						var o = t.render, s = t.parentRender, n = t.headerIndex, l = t.headerID; if (this.groupbyFilterList.currentHeaderID = t.headerID, this.groupbyFilterList.headerIndex = n, this.groupbyZoneStatus.beforeOpenedColIndex = n, this.groupbyZoneStatus.beforeOpenedColTagName = o.tagName, WebSquare.style.show(this.groupbyFilterList.render), this.groupbyFilterList.focus(), e) {
							var h, d = WebSquare.style.getRelativeTop(o, s) + o.offsetHeight, p = WebSquare.style.getRelativeLeft(o, s), u = this.render.offsetHeight - d; this.groupbyFilterList.options.visibleRowNum = Math.floor(u / 21); var c = this.getGroupbyDepthInfo(t); this.groupbyFilterList.setJSON(c),
								!0 === i && this.groupbyFilterList.loadState(n), r.D.getBoolean(this.headerInfoHash[l].options.autoFitFilterList) || r.D.getBoolean(this.options.autoFitFilterList) ? (h = this.groupbyFilterList.getMaxItemWidth(), o.clientWidth > h && (h = o.clientWidth)) : h = o.clientWidth, this.groupbyFilterList.setPosition(p, d), this.groupbyFilterList.render.style.width = h + "px", this.applyFilterListFormat(c, l)
						} else if (!0 === i) { this.groupbyFilterList.loadState(n); c = this.getGroupbyDepthInfo(t); this.applyFilterListFormat(c, l) }
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.hideGroupbyFilterList = function() { try { this.groupbyFilterList && (WebSquare.style.hide(this.groupbyFilterList.render), this.groupbyFilterList.isChanged && this.options.groupbyFilterBox && (this.refreshGroupbyFilterBox(), this.groupbyFilterList.isChanged = !1)) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getGroupbyDepthInfo = function(t) { try { var e, i = t.headerIndex, o = this.getColumnID(i), s = t.headerID; e = this.groupbyFilterList.filterHistory.column[0] === o ? this.groupbyFilterList.filterHistory.filteredRowIndexArr[0] : this._dataList.filteredRowIndexArr; var r = this.dataList.getColData(o, e), n = this.getCellInfo(o), l = this.getUniqueValueOfArray(r), h = this.options.useFilterEmptyValue ? this.options.useFilterEmptyValue.split(",") : []; h.push(""); var d, p, u = this.changeItemValue("label", o, l.slice(0)), c = this.customFilterStatusObj[s] || !1, g = WebSquare.language.getMessage("Grid_Customized_Filter") || "사용자필터", f = WebSquare.language.getMessage("Grid_checked_all") || "전체선택", m = []; m.push({ id1: c, id2: g, customerFilter: !0 }), m.push({ id1: !c, id2: f, gridCheckedAll: !0 }), !c && this.groupbyStatus.filter && o in this.groupbyStatus.filter && (p = (d = this.groupbyStatus.filter[o]).slice(0)); for (var y = /[\^\$\.\[\]\{\}\+\(\)\|\*\\\?]/g, b = this, w = 0; w < u.length; w++) { var v = {}; if (p) { var C = !1, I = n.itemArr ? n.itemHash[u[w]] : u[w]; "string" == typeof I && (I = I.replace(y, (function(t) { return b.replacechar(t) }))); for (var _ = p.length - 1; _ > -1; _--) { if (I == p[_]) { C = !0, p.splice(_, 1); break } if ("string" == typeof p[_]) { for (var x = !1, S = 0; S < h.length; S++)if (h[S] == p[_]) { x = !0; break } if (x && (u[w] == this.options.useFilterEmptyMsg || u[w] == this.filterEmptyStr)) { C = !0; break } } } v.id1 = C } else v.id1 = !c; v.id2 = u[w], this.options.displayValueOnUseFilterList && (v.id3 = l[w]), m.push(v) } if (d) { var D = !0, R = m; for (w = 2; w < R.length; w++)if (!R[w].id1) { D = !1; break } m[1].id1 = !!D } return this._dataList.getDataLength() || (m[1].id1 = !1), m } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.showGroupbyZone = function() { try { if ((this.options.groupbyZone || this.clearGrouping) && this.groupbyZoneStatus.groupbyZoneRender) { if (this.groupbyZoneStatus.groupbyZoneRender.offsetHeight > 0) return; if (WebSquare.style.show(this.groupbyZoneStatus.groupbyZoneRender), this.dom[this.id + "_main_div"].style.top = this.groupbyZoneStatus.groupbyZoneRender.offsetHeight + "px", this.isIE6) try { this.dom[this.id + "_main_div"].style.height = this.dom[this.id + "_main_div"].offsetHeight - this.groupbyZoneStatus.groupbyZoneRender.offsetHeight } catch (t) { } this.setDataTable(), this.drawData(this.rowIndex, 0) } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.hideGroupbyZone = function() { try { if ((this.options.groupbyZone || this.clearGrouping) && this.groupbyZoneStatus.groupbyZoneRender) { if (0 == this.groupbyZoneStatus.groupbyZoneRender.offsetHeight) return; if (this.dom[this.id + "_main_div"].style.top = "0px", this.isIE6) try { this.dom[this.id + "_main_div"].style.height = this.dom[this.id + "_main_div"].offsetHeight + this.groupbyZoneStatus.groupbyZoneRender.offsetHeight } catch (t) { } WebSquare.style.hide(this.groupbyZoneStatus.groupbyZoneRender), this.setDataTable(), this.drawData(this.rowIndex, 0) } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.showGroupbyZoneMessage = function() { try { if ((this.options.groupbyZone || this.clearGrouping) && this.options.groupbyZoneMessage) { var t = this.groupbyZoneStatus.groupbyZoneMessageRender; t && WebSquare.style.show(t) } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.hideGroupbyZoneMessage = function() {
					try {
						if (this.options.groupbyZone && this.options.groupbyZoneMessage) {
							var t = this.groupbyZoneStatus.groupbyZoneMessageRender; t && WebSquare.style.hide(t)
						}
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.syncWithGroupbyZone = function() { try { if (this.groupbyStatus.grouped && this.options.groupbyZone) { this.clearGroupbyZone(); for (var t = r.D.getDataPrefix("header_id"), e = r.D.getDataPrefix("col_id"), i = this.groupbyStatus.sortIndexArr, o = 0; o < i.length; o++) { var s = i[o], n = this.getHeaderID(this._getDisplayColumnIndex(s)), l = this.getColumnID(s), h = document.createElement("div"); h.setAttribute(t, n), h.className = "w2grid_groupbyZone_column"; var d = document.createElement("div"); d.className = "w2grid_groupbyZone_column_closeButtonDiv"; var p = document.createElement("div"); p.className = "w2grid_groupbyZone_column_closeButtonImg", p.setAttribute(e, l); var u = document.createElement("div"); u.className = "w2grid_groupbyZone_column_labelDiv"; var c = document.createElement("span"), g = "textContent" in c ? "textContent" : "innerText"; c[g] = this.getHeaderValue(n).replace(/<(\/)?br(\\s)*(\/)?>/gi, " "), c.setAttribute("title", c[g]), u.appendChild(c), d.appendChild(p), h.appendChild(u), h.appendChild(d), this.groupbyZoneStatus.groupbyZoneRender.appendChild(h), c.className = "w2grid_groupbyZone_column_value" } } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.clearGroupbyZone = function() { try { if ((this.groupbyStatus.grouped || this.clearGrouping) && this.options.groupbyZone) { for (var t = this.groupbyZoneStatus.groupbyZoneRender, e = t.childNodes, i = [], o = 0; o < e.length; o++)null != e[o].className.match("w2grid_groupbyZone_column") && i.push(e[o]); for (o = 0; o < i.length; o++)t.removeChild(i[o]) } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.handleChangeGroupDepth = function(t) { try { for (var e = r.D.getDataPrefix("header_id"), i = this.event.getTargetIterator(t); i.next();)if (i.match("w2grid_groupbyZone_column")) { this.addClass("w2noselect"), r.D.emptySelection(); var o = i.getElement().getAttribute(e), s = this.getHeaderIndex(o), n = this.getHeaderValue(o), l = this; return void WebSquare.dragdrop.gDragManager.activate(t, null, { id: this.id + "_drag", className: "w2grid_groupbyZone_column_drag", contents: n, delay: 15, applyMousePosition: !0, onDrop: function(t, i, o, a, r, n, h) { var d, p = null; for (this.isMobile ? (p = new WebSquare.targetIterator(document.elementFromPoint(h.changedTouches[0].clientX, h.changedTouches[0].clientY)), h.preventDefault()) : p = l.event.getTargetIterator(h); p.next();) { if (p.match("w2grid_groupbyZone_column")) { d = l.getHeaderIndex(p.getElement().getAttribute(e)); break } if (p.match("w2grid_groupbyZone")) { var u = l.groupbyStatus.sortIndexArr; d = u[u.length - 1]; break } if (p.match(null, null, "body")) return } s != d && (!1 === l.options.noSelect && !1 === l.options.preventCopy && l.removeClass("w2noselect"), l.hideGroupbyFilterList(), l.changeGroupDepth(s, d)) } }) } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.createContextMenu = function(t, e) {
					try {
						if ("object" == typeof e && !0 === e.hideSystemMenu) return; "<w2:list xmlns:w2=\"http://www.inswave.com/websquare\" tagName='div' style='' class='w2grid_contextMenu'>", "    <w2:listRow tagName='div' style='height: 20px; display:block; border-top: 0px; border-left:0px; border-right:0px;' class='w2grid_contextMenu_row'>", "        <w2:listColumn id='col1' inputType='text' style='' class='w2grid_contextMenu_column'/>", "    </w2:listRow>", "</w2:list>"; var i = WebSquare.xml.parse("<w2:list xmlns:w2=\"http://www.inswave.com/websquare\" tagName='div' style='' class='w2grid_contextMenu'>    <w2:listRow tagName='div' style='height: 20px; display:block; border-top: 0px; border-left:0px; border-right:0px;' class='w2grid_contextMenu_row'>        <w2:listColumn id='col1' inputType='text' style='' class='w2grid_contextMenu_column'/>    </w2:listRow></w2:list>", !0).documentElement; this.contextMenu = new WebSquare.uiplugin.list(this.id + "_contextMenu_list", "", i), this.contextMenu.writeTo(WebSquare.getBody()), this.contextMenu.activate(); var o = this; this.contextMenu.event.addListener(this.contextMenu.render, "onclick", (function(t) {
							try {
								d.B.stopPropagation(t)
								; for (var e, i, s = o.event.getTargetIterator(t, this.render), r = o.contextMenu; s.next();) { if (s.match("w2grid_contextMenu_column")) { e = s.getElement().parentNode; break } if (s.match("w2grid_contextMenu_row")) { e = s.getElement(); break } if (s.match("w2grid_contextMenu")) break } for (var n = 0; n < r.getLength(); n++)if (e == r.render.childNodes[n]) { i = n; break } o.callSelectedAPI(r.getRowData(n).col1, r.info), o.hideContextMenu(); var l = o.contextMenu.getAllData()[i], h = { row: r.info.rowIndex, col: r.info.colIndex, focusedCell: r.info.focusedCell, userMenuId: l.userMenuId, isSystemMenu: l.isSystemMenu, systemMenu: l.systemMenu }; r.info = null, d.B.fireEvent(o, "oncontextclick", h.row, h.col, h.userMenuId, h.isSystemMenu, h.systemMenu, h.focusedCell)
							} catch (t) { a.w.printStackTrace(t, null, this) }
						})); var s = this.getContextMenuData(t); if (e && e.hideSystemMenu && "object" == typeof e.hideSystemMenu && e.hideSystemMenu.indexOf) for (var r = 0; r < s.length; r++) { var n = s[r].systemMenu; e.hideSystemMenu.indexOf(n) > -1 && (s.splice(r, 1), r--) } if (e && e.appendMenu && "object" == typeof e.appendMenu && e.appendMenu.length) for (r = 0; r < e.appendMenu.length; r++) { var l = e.appendMenu[r]; l.col1 = l.label, l.isSystemMenu = !1, s.push(l) } if (s.length > 0) { this.showContextMenu(t, s); for (r = 0; r < s.length; r++) { var h = s[r]; h.className && (this.contextMenu.render.children[r].className = this.contextMenu.render.children[r].className + " " + h.className) } }
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.getContextMenuData = function(t) { try { var e = [], i = !0; if (this.groupbyStatus.grouped) for (var o = WebSquare.language.getMessage("Grid_ungroup") || "선택 컬럼 그룹 해제", s = 0; s < this.groupbyStatus.sortIndexArr.length; s++)if (t.focusedCell && t.focusedCell.length > 1) { for (var r = 0; r < t.focusedCell.length; r++)if (this.groupbyStatus.sortIndexArr[s] == t.focusedCell[r].focusedColIndex) { e.push({ col1: o, isSystemMenu: !0, systemMenu: "Ungroup" }), i = !1; break } if (!i) break } else if (this.groupbyStatus.sortIndexArr[s] == t.colIndex) { e.push({ col1: o, isSystemMenu: !0, systemMenu: "Ungroup" }), i = !1; break } if (i) { var n = WebSquare.language.getMessage("Grid_group") || "선택 컬럼 그룹"; e.push({ col1: n, isSystemMenu: !0, systemMenu: "Group" }) } var l = WebSquare.language.getMessage("Grid_column_hide") || "선택 컬럼 숨기기"; if (e.push({ col1: l, isSystemMenu: !0, systemMenu: "ColumnHide" }), 0 == this.options.fixedColumn || this.options.fixedColumn - 1 < t.colIndex) { var h = WebSquare.language.getMessage("Grid_column_fix") || "선택 컬럼 틀고정"; e.push({ col1: h, isSystemMenu: !0, systemMenu: "ColumnFix" }) } if (this.options.fixedColumn > 0) { var d = WebSquare.language.getMessage("Grid_column_unfix") || "전체 컬럼 틀고정 취소"; e.push({ col1: d, isSystemMenu: !0, systemMenu: "ColumnUnfixAll" }) } var p = WebSquare.language.getMessage("Grid_column_adjustWidth") || "선택 컬럼 크기 자동 맞추기", u = WebSquare.language.getMessage("Grid_column_showAll") || "전체 컬럼 숨기기 해제"; e.push({ col1: p, isSystemMenu: !0, systemMenu: "ColumnAdjustWidth" }); for (s = 0; s < this.hiddenList.length; s++)if (this.hiddenList[s]) { e.push({ col1: u, isSystemMenu: !0, systemMenu: "ColumnShowAll" }); break } var c = WebSquare.language.getMessage("Grid_column_adjustAuto") || "전체 컬럼 크기 자동 맞추기"; e.push({ col1: c, isSystemMenu: !0, systemMenu: "ColumnAdjustAuto" }); var g = WebSquare.language.getMessage("Grid_column_adjustAuto_none") || "컬럼 크기 자동 맞추기 해제"; if (e.push({ col1: g, isSystemMenu: !0, systemMenu: "ColumnAdjustAutoNone" }), this.groupbyStatus.grouped) { var f = WebSquare.language.getMessage("Grid_fold_all") || "전체 그룹 접기", m = WebSquare.language.getMessage("Grid_unfold_all") || "전체 그룹 펼치기", y = WebSquare.language.getMessage("Grid_ungroup_all") || "전체 그룹 해제"; e.push({ col1: f, isSystemMenu: !0, systemMenu: "FoldAll" }), e.push({ col1: m, isSystemMenu: !0, systemMenu: "UnfoldAll" }), e.push({ col1: y, isSystemMenu: !0, systemMenu: "UngroupAll" }) } return e } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.showContextMenu = function(t, e) {
					try {
						e || (e = this.getContextMenuData(t), this.contextMenu.setPosition(0, 0)); var i = e.length * (this.options.contextMenuRowHeight + 1); this.contextMenu.show(), this.contextMenu.setSize(null, i), this.contextMenu.setJSON(e); var o = d.B.getMouseX(t.event), s = d.B.getMouseY(t.event), r = document.body.scrollTop
							; r < document.documentElement.scrollTop && (r = document.documentElement.scrollTop); var n = (s - r) * WebSquare.style.getScale(), l = document.documentElement.clientHeight - n, h = Math.max(l, n), p = WebSquare.style.getSize(this.contextMenu.render, "outerheight"); (h < p && e.length > 0 || l < p && n > p) && (s -= p), document.documentElement.clientWidth < o + this.contextMenu.render.offsetWidth && (o -= this.contextMenu.render.offsetWidth) < 0 && (o = WebSquare.style.getAbsoluteLeft(this.render)), this.contextMenu.setPosition(o, s), this.contextMenu.info = t
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.hideContextMenu = function() { try { this.contextMenu && this.contextMenu.hide() } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.callSelectedAPI = function(t, e) { try { var i = WebSquare.language.getMessage("Grid_column_hide") || "선택 컬럼 숨기기", s = WebSquare.language.getMessage("Grid_column_showAll") || "전체 컬럼 숨기기 해제", r = WebSquare.language.getMessage("Grid_column_fix") || "선택 컬럼 틀고정", n = WebSquare.language.getMessage("Grid_column_unfix") || "전체 컬럼 틀고정 취소", l = WebSquare.language.getMessage("Grid_column_adjustWidth") || "선택 컬럼 크기 자동 맞추기", h = WebSquare.language.getMessage("Grid_column_adjustAuto") || "전체 컬럼 크기 자동 맞추기", p = WebSquare.language.getMessage("Grid_column_adjustAuto_none") || "컬럼 크기 자동 맞추기 해제", u = WebSquare.language.getMessage("Grid_fold_all") || "전체 그룹 접기", c = WebSquare.language.getMessage("Grid_unfold_all") || "전체 그룹 펼치기", g = WebSquare.language.getMessage("Grid_ungroup_all") || "전체 그룹 해제", f = WebSquare.language.getMessage("Grid_ungroup") || "선택 컬럼 그룹 해제", m = WebSquare.language.getMessage("Grid_group") || "선택 컬럼 그룹", y = e.focusedCell || [], b = []; if (y.length > 0) { for (var w = 0; w < e.focusedCell.length; w++)b.push(e.focusedCell[w].colIndex); b.sort((function(t, e) { return t - e })); for (w = 0; w < b.length - 1;)b[w] === b[w + 1] ? b.splice(w, 1) : w++ } switch (t) { case i: if (-1 === e.colIndex) break; if (b.length > 1) for (w = 0; w < b.length; w++)this.setColumnVisible(b[w], !1), this.groupbyStatus.grouped && this.ungroupColumn(b[w]); else this.setColumnVisible(e.colIndex, !1), this.groupbyStatus.grouped && this.ungroupColumn(e.colIndex); break; case s: for (w = 0; w < this.hiddenList.length; w++)this.hiddenList[w] && this.setColumnVisible(this.columnOrder[w - this.defaultColCnt], !0); break; case r: if (-1 === e.colIndex) break; if (b.length > 1) for (w = 0; w < b.length; w++)this.setFixedColumn(parseInt(b[w], 10) + 1); else this.setFixedColumn(parseInt(e.colIndex, 10) + 1); break; case n: if (-1 === e.colIndex) break; this.setFixedColumn(0); break; case l: if (-1 === e.colIndex) break; if (!this.autofitColumn) { var v = { type: "selectedColumn", colIndex: e.colIndex }; this.setAutoFit(v) } break; case h: v = { type: "allColumn" }; this.setAutoFit(v); break; case p: this.clearAutoFit(); break; case u: if (-1 === e.colIndex) break; this.groupbyStatus.grouped && this.foldAll(); break; case c: if (-1 === e.colIndex) break; this.groupbyStatus.grouped && this.unfoldAll(); break; case g: if (-1 === e.colIndex) break; this.groupbyStatus.grouped && this.clearGroupby(); break; case f: if (-1 === e.colIndex) break; if (b.length > 1) for (w = 0; w < b.length; w++)this.ungroupColumn(b[w]); else this.ungroupColumn(e.colIndex); break; case m: if (-1 === e.colIndex) break; if (this.groupbyStatus.grouped) { if ((v = {}).sortIndex = this.groupbyStatus.sortIndexArr, v.sortOrder = this.groupbyStatus.sortOrderArr, b.length > 1) for (w = 0; w < b.length; w++)v.sortIndex.push(b[w]), v.sortOrder.push(1); else v.sortIndex.push(e.colIndex), v.sortOrder.push(1); !1 === d.B.fireEvent(this, "ongroupby", v) && ((v = o.x.extend({}, this.groupbyDisplayOptions)).sortIndex = this.groupbyStatus.sortIndexArr, v.sortOrder = this.groupbyStatus.sortOrderArr, this.groupby(v, !0)) } else { v = {}; if (b.length > 1) { v.sortIndex = b, v.sortOrder = []; for (w = 0; w < b.length; w++)v.sortOrder.push(1) } else v.sortIndex = [e.colIndex], v.sortOrder = [1]; if (!1 === d.B.fireEvent(this, "ongroupby", v)) { var C = this.getColCnt() + this.defaultColCnt; v.rowNumHeader = { colSpan: C, inputType: "expression", expression: " toggle() + depthStr() + ' [ ' + count() + ' 건 ] ' ", align: "left" }, v.rowNumFooter = { colSpan: C }, this.groupby(v, !0) } } } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.createCustomFilterList = function(t, e) {
					try {
						var i
						; !0 !== e && (i = this.headerToBodyRelation[t]); var o = this.options.filterListRowHeight + 1, s = this.options.filterListVisibleRowNum || this.options.customFilterListVisibleRowNum, n = this.getElementById(this.id + "_head_table"); this._dataLayerHeight = this.dataLayerHeight ? this.dataLayerHeight : this.getElementById(this.id + "_body_table").parentNode.offsetHeight, this._dataLayerHeight = this._dataLayerHeight - n.offsetHeight; var l = 0; this.options.useFilterSearch ? (l = Math.min(parseInt(this._dataLayerHeight / o), s), this.customFilterScrollViewRenderHeight = l * o) : this.customFilterScrollViewRenderHeight = s * o; "<w2:scrollView xmlns:w2=\"http://www.inswave.com/websquare\" style='position:absolute; z-index:11;' class='w2grid_customFilter_scrollView'>", "</w2:scrollView>"; var h = WebSquare.xml.parse("<w2:scrollView xmlns:w2=\"http://www.inswave.com/websquare\" style='position:absolute; z-index:11;' class='w2grid_customFilter_scrollView'></w2:scrollView>", !0).documentElement; WebSquare.xml.setAttribute(h, "bounce", !1), WebSquare.xml.setAttribute(h, "horizontalScroll", !1), WebSquare.xml.setAttribute(h, "paging", !1), WebSquare.xml.setAttribute(h, "scrollType", "auto"), WebSquare.xml.setAttribute(h, "showHorizontalScroll", !1), WebSquare.xml.setAttribute(h, "showVerticalScroll", !1), WebSquare.xml.setAttribute(h, "verticalScroll", !1), this.customFilterScrollView = new WebSquare.uiplugin.scrollView(this.id + "_customFilter_scrollView", "", h); var p = ""; if (this.options.useFilterSearch) p += "<w2:list xmlns:w2=\"http://www.inswave.com/websquare\" tagName='div' style='position:absolute; z-index:11; padding:0px; display:block;' class='w2grid_customFilter_list' placeholder='" + (WebSquare.language.getMessage("Grid_filter_search") || "검색") + "' virtualized='true' visibleRowNum='" + (l - 1) + "' useSearch='true' wheelRows='1' _listRowHeight='" + o + "'>"; else p += "<w2:list xmlns:w2=\"http://www.inswave.com/websquare\" tagName='div' style='position:absolute; z-index:11; padding:0px; display:block;' class='w2grid_customFilter_list'>"; p += "    <w2:listRow tagName='div' style='height: " + this.options.filterListRowHeight + "px; display:block; border-top: 0px; border-left:0px; border-right:0px;' class='w2grid_customFilter_list_listRow'>", p += "        <w2:listColumn id='id1' inputType='checkbox' style='' class='w2grid_customFilter_list_listColumn_checkbox'/>", p += "        <w2:listColumn id='id2' inputType='text' style='' class='w2grid_customFilter_list_listColumn_text'/>", p += "    </w2:listRow>", p += "</w2:list>"; var u = WebSquare.xml.parse(p, !0).documentElement; this.customFilterList = new WebSquare.uiplugin.list(this.id + "_customFilter_list", "", u), this.customFilterList.filterHistory = { column: [], filteredRowIndexArr: [] }, this.customFilterScrollView.addControl(this.customFilterList), this.customFilterScrollView.writeTo(this), this.customFilterScrollView.activate(); var c = this; if (this.customFilterScrollView.event.addListener(this.customFilterScrollView.render, "onclick", this.customFilterScrollView.event.bindAsEventListener(this.customFilterList, (function(t) {
							try {
								d.B.stopPropagation(t); var e = d.B.getTarget(t); if (e.className.match("w2list_input")) return; var i, o = e.parentNode, s = 0; if (this.options.virtualized ? (i = this.getElementById(this.id + "_items_main").childNodes, s = this.firstListIndex) : i = this.render.childNodes, e.className.match("w2grid_customFilter_list_listRow")) { e = (o = e).firstChild; for (var r = 0; r < this.getLength(); r++)if (o == i[r]) { this.setCellData(r + s, "id1", !e.checked); break } } if (e.className.match("w2grid_customFilter_list_listColumn_text") && (i[0] != o || this.options.virtualized && s > 0)) { e = o.firstChild; for (r = 0; r < this.getLength(); r++)if (o == i[r]) { this.setCellData(r + s, "id1", !e.checked); break } } var n = this.currentHeaderID, l = c.headerToBodyRelation[n], h = c._dataList.getColumnIndex(l), p = c.headerInfoHash[n], u = 0; if (p && p.options.hideCustomFilter && (u = 1), 1 !== u && o == i[0] && 0 === s) {
									if (e.className.match("w2grid_customFilter_list_listColumn_checkbox")) {
										if (e.checked) {
											if (c.firstOpenCustomFilter[n]) {
												c.headerID = n, c.targetColID = l, c.options.useFilterSearch && c.setAutoCompleteItem(l, n),
												c.setCustomFilterExpression(); for (r = 1; r < this.getLength(); r++)this.setCellData(r, "id1", !1); if (c.options.useFilterSearch) { var g = c.getCustomFilterListJSON({ colID: l, headerID: n }); c._setFilterListHeight(n, g.length) } return
											} return c.hideCustomFilterList(), c.firstOpenCustomFilter[n] || (c.firstOpenCustomFilter[n] = !0), void c._showCustomFilter(n)
										} if (c.customFilterStatusObj[n] = !1, delete this.customFilterListFilterInfo[l], c.dataList.removeColumnFilter(l), c.options.useFilterSearch) { (g = c.getCustomFilterListJSON({ colID: l, headerID: n }))[0].id1 = !1; for (r = 1 - u; r < g.length; r++)g[r].id1 = !0 } for (r = 1; r < this.getLength(); r++)this.setCellData(r, "id1", !0); c.options.useFilterSearch && (this.setJSON(g), c._setFilterListHeight(n, g.length))
									} else if (e.className.match("w2grid_customFilter_list_listColumn_text")) return void c._showCustomFilter(n)
								} else if (1 !== u && this.setCellData(0, "id1", !1), c.customFilterStatusObj[n] = !1, delete this.customFilterListFilterInfo[l], o == i[1 - u - s]) { var f = e.checked; if (e.className.match("w2grid_customFilter_list_listColumn_text")) f = !i[1 - u].firstChild.checked; for (r = 1 - u; r < this.getLength(); r++)this.setCellData(r, "id1", f) } var m = [], y = [], b = [], w = this.getLength(); for (r = 2 - u; r < w; r++)this.getCellData(r, "id1") ? y.push(r) : b.push(r); var v = y.length > b.length, C = (c._dataList.getFilterList(), this.getLength() - 2 + u), I = v ? b : y, _ = "*"; for (r = 0; r < I.length; r++) { var x = this.getCellData(I[r], "id2"); v && x === c.filterEmptyStr ? _ = "+" : m.push(x) } m = c.changeItemValue("value", l, m); var S = /[\^\$\.\[\]\{\}\+\(\)\|\*\\\?]/g; for (r = 0; r < m.length; r++) { var D = m[r]; "string" == typeof D && (m[r] = D.replace(S, (function(t) { return c.replacechar(t) }))) } var R = ""; 0 == y.length ? R += "/^[a-z0-9_-]{3,16}$/" : R += v ? "^\\n*(?:(?!^" + m.join("$)(?!^") + "$).)" + _ + "\\n*$" : "^" + m.join("$|^") + "$"; var L, T = c.getCellInfo(l), k = ""; if (T && (k = c.getColumnOption(T.options.col_id, "dataType")), L = "number" == k ? new RegExp(R) : new RegExp(R, "gi"), d.B.fireEvent(c._dataList, "onbeforecolumnfilterchange"), y.length < C && (WebSquare.DataCollection.stopBroadCast = !0), c.dataList.removeColumnFilter(l, { noRefreshAfter: !0 }), this.filterHistory.column[0] !== l && (this.filterHistory.column.unshift(l), this.filterHistory.filteredRowIndexArr.unshift(c._dataList.filteredRowIndexArr.slice(0))), y.length < C) { if (WebSquare.DataCollection.stopBroadCast = !1, v) { this.customFilterListFilterInfo[l] = []; for (r = 0; r < y.length; r++)this.customFilterListFilterInfo[l].push(this.getCellData(y[r], "id2")); (T.itemsetObj || T.itemArr) && (this.customFilterListFilterInfo[l] = c.changeItemValue("value", l, this.customFilterListFilterInfo[l])); for (r = 0; r < this.customFilterListFilterInfo[l].length; r++) { var A = this.customFilterListFilterInfo[l][r]; A === c.filterEmptyStr ? this.customFilterListFilterInfo[l][r] = "" : "string" == typeof A && (A = A.replace(S, (function(t) { return c.replacechar(t) })), this.customFilterListFilterInfo[l][r] = A) } } else this.customFilterListFilterInfo[l] = m; c.dataList.setColumnFilter({ type: "regExp", colIndex: h, key: L, condition: "and", columnfilterchangeFire: !1, noRefreshAfter: !0 }) } else delete this.customFilterListFilterInfo[l]; var F = c.getElementById(c.id + "_" + n + "_filter"); 1 !== u && this.getCellData(0, "id1") || WebSquare.style.removeClass(F, "w2grid_customFilter_filter"); var E = !0, M = (C = this.getLength() - 2 + u, this.getAllData()); for (r = 2 - u; r < M.length; r++)if (!M[r].id1) { E = !1; break } E ? (this.setCellData(1 - u, "id1", !0), this.filterHistory.column.shift(), this.filterHistory.filteredRowIndexArr.shift()) : (this.setCellData(1 - u, "id1", !1), WebSquare.style.addClass(F, "w2grid_customFilter_filter")), d.B.fireEvent(c._dataList, "onaftercolumnfilterchange"), c.options.groupbyFilterBox && (this.isChanged = !0)
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}))), this.options.useFilterSearch && (this.customFilterList.find = function() {
							this.search = "contain"; var t = this.dom.input.value, e = [], i = this.currentHeaderID, o = c.headerToBodyRelation[i], s = c._dataList.getColumnIndex(o), a = c.headerInfoHash[i], r = 0; a && a.options.hideCustomFilter && (r = 1); for (var n = 0; n < 2 - r; n++)e.push({ id1: n - r == 1, id2: m[n].id2 }); if ("" != t) {
								c.itemValueObj = {}, c.customFilterStatusObj[i] = !1, c.firstOpenCustomFilter[i] = !1
								; var l = e.length; c.dataList.removeColumnFilter(o), delete this.customFilterListFilterInfo[o]; for (O = c.getCustomFilterListJSON({ colID: o, headerID: i }), n = 2 - r; n < O.length; n++) { var h = !1, p = O[n].id2 + ""; "contain" == this.search ? h = this.myhelper.containWith(p, t) : "start" == this.search ? h = this.myhelper.startWith(p, t) : "none" == this.search && (h = p == t), h && e.push({ id1: !0, id2: O[n].id2 }) } l === e.length && e.splice(1 - r, 1), this.setJSON(e), c._setFilterListHeight(i, O.length, e.length); var u = [], g = [], f = [], y = this.getLength(); for (n = 2 - r; n < y; n++)this.getCellData(n, "id1") ? g.push(n) : f.push(n); if (0 != g.length || 0 != f.length) { var b = g.length > f.length; 0 === f.length && (b = !1); var w = b ? f : g, v = "*"; for (n = 0; n < w.length; n++) { var C = this.getCellData(w[n], "id2"); b && C === c.filterEmptyStr ? v = "+" : u.push(C) } u = c.changeItemValue("value", o, u); var I = /[\^\$\.\[\]\{\}\+\(\)\|\*\\\?]/g; for (n = 0; n < u.length; n++) { var _ = u[n]; "string" == typeof _ && (u[n] = _.replace(I, (function(t) { return c.replacechar(t) }))) } var x = ""; 0 == g.length ? x += "/^[a-z0-9_-]{3,16}$/" : x += b ? "^\\n*(?:(?!^" + u.join("$)(?!^") + "$).)" + v + "\\n*$" : "^" + u.join("$|^") + "$"; var S, D = c.getCellInfo(o), R = ""; D && (R = c.getColumnOption(D.options.col_id, "dataType")), S = "number" == R ? new RegExp(x) : new RegExp(x, "gi"), d.B.fireEvent(c._dataList, "onbeforecolumnfilterchange"); var L = this.getLength() - 2 + r; if (g.length < L && (WebSquare.DataCollection.stopBroadCast = !0), c.dataList.removeColumnFilter(o, { noRefreshAfter: !0 }), this.filterHistory.column[0] !== o && (this.filterHistory.column.unshift(o), this.filterHistory.filteredRowIndexArr.unshift(c._dataList.filteredRowIndexArr.slice(0))), g.length <= L) { if (WebSquare.DataCollection.stopBroadCast = !1, b) { this.customFilterListFilterInfo[o] = []; for (n = 0; n < g.length; n++)this.customFilterListFilterInfo[o].push(this.getCellData(g[n], "id2")); (D.itemsetObj || D.itemArr) && (this.customFilterListFilterInfo[o] = c.changeItemValue("value", o, this.customFilterListFilterInfo[o])); for (n = 0; n < this.customFilterListFilterInfo[o].length; n++) { var T = this.customFilterListFilterInfo[o][n]; T === c.filterEmptyStr ? this.customFilterListFilterInfo[o][n] = "" : "string" == typeof T && (T = T.replace(I, (function(t) { return c.replacechar(t) })), this.customFilterListFilterInfo[o][n] = T) } } else this.customFilterListFilterInfo[o] = u; c.dataList.setColumnFilter({ type: "regExp", colIndex: s, key: S, condition: "and", columnfilterchangeFire: !1, noRefreshAfter: !0 }) } else delete this.customFilterListFilterInfo[o]; M = c.getElementById(c.id + "_" + i + "_filter"); 1 !== r && this.getCellData(0, "id1") || WebSquare.style.removeClass(M, "w2grid_customFilter_filter"); var k = !0, A = (L = this.getLength() - 2 + r, this.getAllData()); for (n = 2 - r; n < A.length; n++)if (!A[n].id1) { k = !1; break } k ? (this.setCellData(1 - r, "id1", !0), this.filterHistory.column.shift(), this.filterHistory.filteredRowIndexArr.shift(), this.listRowObjArr.length !== m.length && WebSquare.style.addClass(M, "w2grid_customFilter_filter")) : (this.setCellData(1 - r, "id1", !1), WebSquare.style.addClass(M, "w2grid_customFilter_filter")), d.B.fireEvent(c._dataList, "onaftercolumnfilterchange"), c.options.groupbyFilterBox && (this.isChanged = !0) }
							} else { for (var F = c._dataList.getFilterList(), E = !1, n = 0; n < F.length; n++)if (F[n] && F[n].colIndex === s && "func" !== F[n].type) { E = !0; break } if (this.listRowObjArr.length !== m.length && E) { c.itemValueObj = {}, c.customFilterStatusObj[i] = !1, delete this.customFilterListFilterInfo[o], c.firstOpenCustomFilter[i] = !1, c.dataList.removeColumnFilter(o); var M = c.getElementById(c.id + "_" + i + "_filter"); 1 !== r && this.getCellData(0, "id1") || WebSquare.style.removeClass(M, "w2grid_customFilter_filter"); for (var O = c.getCustomFilterListJSON({ colID: o, headerID: i }), n = 2 - r; n < O.length; n++)e.push({ id1: !0, id2: O[n].id2 }); this.setJSON(e), c._setFilterListHeight(i, e.length) } }
						}, this.customFilterList._inputKeyDown = this.customFilterList.inputKeyDown, this.customFilterList.inputKeyDown = function(t, e) { var i = this; this.mytime = setTimeout((function(t) { i.find() }), 100, t) }), !0 === e) return; var g, f, m = this.getCustomFilterListJSON({
							colID: i, headerID: t
						}), y = this.getElementById(this.id + "_" + t), b = (this.options.useFilterSearch ? m.length + 1 : m.length) * o - 1, w = b, v = WebSquare.style.getSize(this.customFilterScrollView.render, "outerHeight") - WebSquare.style.getSize(this.customFilterScrollView.render, "height"), C = WebSquare.style.getRelativeTop(y, this.render) + y.offsetHeight + 1, I = WebSquare.style.getRelativeLeft(y, this.render), _ = Math.min(this.customFilterScrollViewRenderHeight, b, this._dataLayerHeight - v); if (this.options.useFilterSearch && (b = _), r.D.getBoolean(this.headerInfoHash[t].options.autoFitFilterList) || r.D.getBoolean(this.options.autoFitFilterList)) { this.customFilterList.setJSON(m), this.applyFilterListFormat(m, t), g = this.customFilterList.getMaxItemWidth(), y.clientWidth > g && (g = y.clientWidth), f = g, this.options.useFilterSearch ? w > _ && (g += this.getElementById(this.id + "_size_y").clientWidth, f += this.getElementById(this.id + "_size_y").clientWidth) : _ >= b || (f += this.getElementById(this.id + "_size_y").clientWidth); var x = this.getElementById(this.id + "_customFilter_scrollView_container"); WebSquare.style.setStyle(x, "overflow-x", "hidden") } else { var S = parseInt(this.headerInfoHash[t].options.filterListWidth); f = g = S > 0 ? S : this.options.filterListWidth > 0 ? this.options.filterListWidth : y.clientWidth, this.options.useFilterSearch || _ >= b || (g -= this.getElementById(this.id + "_size_y").clientWidth), this.customFilterList.setJSON(m), this.applyFilterListFormat(m, t) } if (this.customFilterScrollView.setPosition(I, C - 1), this.customFilterScrollView.setSize(f, _), this.customFilterList.setSize(g, b), this.options.useFilterSearch) { this.removeFocusedCell(), this.customFilterList.oldSearchedData = ""; var D = this.customFilterList.getElementById(this.customFilterList.id + "_input"), R = WebSquare.style.getSize(D, "innerwidth") - WebSquare.style.getSize(D, "width"); this.customFilterList.dom.input.style.width = g - parseInt(this.customFilterList.getElementById(this.customFilterList.id + "_scroll_main").style.width) - R + "px", this.customFilterList.dom.input.focus() } this.customFilterList.currentHeaderID = t, this.customFilterList.customFilterListFilterInfo = {}, this.customFilterList.customFilterListAction = !1, this.customFilterList.customUserFilterListAction = !1, WebSquare.style.show(this.customFilterScrollView.render)
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype._setFilterListHeight = function(t, e, i) { try { var o, s, n = this.getElementById(this.id + "_" + t), l = this.options.filterListRowHeight + 1, h = i || e, d = (this.options.useFilterSearch ? h + 1 : h) * l - 1, p = d, u = WebSquare.style.getSize(this.customFilterScrollView.render, "outerHeight") - WebSquare.style.getSize(this.customFilterScrollView.render, "height"), c = Math.min(this.customFilterScrollViewRenderHeight, d, this._dataLayerHeight - u); if (this.options.useFilterSearch && (d = c), r.D.getBoolean(this.headerInfoHash[t].options.autoFitFilterList) || r.D.getBoolean(this.options.autoFitFilterList)) { o = this.customFilterList.getMaxItemWidth(), n.clientWidth > o && (o = n.clientWidth), s = o, this.options.useFilterSearch ? p > c && (o += this.getElementById(this.id + "_size_y").clientWidth, s += this.getElementById(this.id + "_size_y").clientWidth) : this.customFilterScrollViewRenderHeight >= d || (s += this.getElementById(this.id + "_size_y").clientWidth); var g = this.getElementById(this.id + "_customFilter_scrollView_container"); WebSquare.style.setStyle(g, "overflow-x", "hidden") } else { var f = parseInt(this.headerInfoHash[t].options.filterListWidth); s = o = f > 0 ? f : this.options.filterListWidth > 0 ? this.options.filterListWidth : n.clientWidth, this.options.useFilterSearch || c > d || (o -= this.getElementById(this.id + "_size_y").clientWidth) } if (this.customFilterScrollView.setSize(s, c), this.customFilterList.setSize(o, d), this.options.useFilterSearch) { var m = this.customFilterList.getElementById(this.customFilterList.id + "_input"), y = WebSquare.style.getSize(m, "innerwidth") - WebSquare.style.getSize(m, "width"); this.customFilterList.dom.input.style.width = o - parseInt(this.customFilterList.getElementById(this.customFilterList.id + "_scroll_main").style.width) - y + "px" } } catch (t) { a.w.printStackTrace(t, null, this) } },
				u.prototype.toggleCustomFilterList = function(t) { try { this.customFilterScrollView && this.customFilterList && ("none" == this.customFilterScrollView.render.style.display || this.customFilterList.currentHeaderID != t ? this.moveCustomFilterList(t) : this.hideCustomFilterList()) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.showCustomFilterList = function(t, e) { try { if (this.customFilterScrollView && this.customFilterList) { if (e) { var i, o; WebSquare.style.show(this.customFilterScrollView.render); var s = this.getElementById(this.id + "_" + t.headerID), n = this.options.filterListRowHeight + 1, l = (this.options.useFilterSearch ? t.dataLength + 1 : t.dataLength) * n - 1, h = l, d = WebSquare.style.getSize(this.customFilterScrollView.render, "outerHeight") - WebSquare.style.getSize(this.customFilterScrollView.render, "height"), p = this.options.filterListVisibleRowNum || this.options.customFilterListVisibleRowNum; if (this.options.useFilterSearch) { var u = Math.min(parseInt(this._dataLayerHeight / n), p); this.customFilterScrollViewRenderHeight = u * n } else this.customFilterScrollViewRenderHeight = p * n; var c = WebSquare.style.getRelativeTop(s, this.render) + s.offsetHeight + 1, g = WebSquare.style.getRelativeLeft(s, this.render), f = this.getElementById(this.id + "_head_table"), m = this.dataLayerHeight - f.offsetHeight, y = Math.min(this.customFilterScrollViewRenderHeight, l, m - d); if (this.options.useFilterSearch && (l = y), r.D.getBoolean(this.headerInfoHash[t.headerID].options.autoFitFilterList) || r.D.getBoolean(this.options.autoFitFilterList)) { i = this.customFilterList.getMaxItemWidth(), s.clientWidth > i && (i = s.clientWidth), o = i, this.options.useFilterSearch ? h > y && (i += this.getElementById(this.id + "_size_y").clientWidth, o += this.getElementById(this.id + "_size_y").clientWidth) : this.customFilterScrollViewRenderHeight >= l || (o += this.getElementById(this.id + "_size_y").clientWidth); var b = this.getElementById(this.id + "_customFilter_scrollView_container"); WebSquare.style.setStyle(b, "overflow-x", "hidden") } else { var w = parseInt(this.headerInfoHash[t.headerID].options.filterListWidth); o = i = w > 0 ? w : this.options.filterListWidth > 0 ? this.options.filterListWidth : s.clientWidth, this.options.useFilterSearch || y >= l || (i -= this.getElementById(this.id + "_size_y").clientWidth) } this.customFilterScrollView.setPosition(g, c - 1), this.customFilterScrollView.setSize(o, y), this.customFilterList.setSize(i, l) } if (this.customFilterList.currentHeaderID = t.headerID, this.options.useFilterSearch) { this.removeFocusedCell(), this.customFilterList.dom.input.value = "", this.customFilterList.oldSearchedData = ""; var v = this.customFilterList.getElementById(this.customFilterList.id + "_input"), C = WebSquare.style.getSize(v, "innerwidth") - WebSquare.style.getSize(v, "width"); this.customFilterList.dom.input.style.width = i - parseInt(this.customFilterList.getElementById(this.customFilterList.id + "_scroll_main").style.width) - C + "px", this.customFilterList.dom.input.focus() } WebSquare.style.show(this.customFilterScrollView.render) } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.moveCustomFilterList = function(t) { try { if (this.customFilterScrollView && this.customFilterList) { var e = this.headerToBodyRelation[t], i = this.getCustomFilterListJSON({ colID: e, headerID: t }); this.customFilterList.setJSON(i), this.applyFilterListFormat(i, t), this.customFilterList.currentHeaderID = t, this.showCustomFilterList({ headerID: t, dataLength: i.length }, !0) } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.hideCustomFilterList = function() { try { this.customFilterScrollView && this.customFilterList && (WebSquare.style.hide(this.customFilterScrollView.render), this.customFilterList.isChanged && this.options.groupbyFilterBox && (this.refreshGroupbyFilterBox(), this.customFilterList.isChanged = !1)) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.getCustomFilterListJSON = function(t) {
					try {
						var e; if (this.customFilterList.filterHistory.column[0] !== t.colID || this.options.showAllFilterList) if (this.options.useFilterSearch) {
							var i = this._dataList.getFilterList(); if (i.length > 0) { var o = !1; 1 == i.length && this.getColumnID(i[0].colIndex) === t.colID && (o = !0) }
							e = o ? this._dataList.filterManager.allRowIndexArr : this._dataList.filteredRowIndexArr
						} else this.options.showAllFilterList ? (this.customFilterList.customFilterListFilterInfo, e = this._dataList.filterManager.firstFiltering ? this._dataList.filteredRowIndexArr : this._dataList.filterManager.allRowIndexArr) : e = this._dataList.filteredRowIndexArr; else e = this.customFilterList.filterHistory.filteredRowIndexArr[0]; var s = this.dataList.getColData(t.colID, e), r = this.getCellInfo(t.colID), n = this.getUniqueValueOfArray(s), l = this.options.useFilterEmptyValue ? this.options.useFilterEmptyValue.split(",") : []; l.push(""); var h, d, p = this.changeItemValue("label", t.colID, n.slice(0)), u = this.customFilterStatusObj[t.headerID] || !1, c = WebSquare.language.getMessage("Grid_Customized_Filter") || "사용자필터", g = WebSquare.language.getMessage("Grid_checked_all") || "전체선택", f = [{ id1: u, id2: c }, { id1: !u, id2: g }]; !u && this.customFilterList.customFilterListFilterInfo && t.colID in this.customFilterList.customFilterListFilterInfo && (d = (h = this.customFilterList.customFilterListFilterInfo[t.colID]).slice(0)); for (var m = /[\^\$\.\[\]\{\}\+\(\)\|\*\\\?]/g, y = this, b = 0; b < p.length; b++) { var w = {}; if (d) { var v = !1, C = r.itemArr ? r.itemHash[p[b]] : p[b]; "string" == typeof C && (C = C.replace(m, (function(t) { return y.replacechar(t) }))); for (var I = d.length - 1; I > -1; I--) { if (C == d[I]) { v = !0, d.splice(I, 1); break } if ("string" == typeof d[I]) { for (var _ = !1, x = 0; x < l.length; x++)if (l[x] == d[I]) { _ = !0; break } if (_ && (p[b] == this.options.useFilterEmptyMsg || p[b] == this.filterEmptyStr)) { v = !0; break } } } w.id1 = v } else w.id1 = !u; w.id2 = p[b], this.options.displayValueOnUseFilterList && (w.id3 = n[b]), f.push(w) } var S = 0, D = this.headerInfoHash[t.headerID]; if (D && D.options.hideCustomFilter && (f.shift(), S = 1), h) { var R = !0, L = f; for (b = 2 - S; b < L.length; b++)if (!L[b].id1) { R = !1; break } f[1 - S].id1 = !!R } return this._dataList.getDataLength() || (f[1 - S].id1 = !1), f
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.changeItemValue = function(t, e, i, o) {
					try {
						var s, n = [], l = !1, h = this.getCellInfo(e); if (h.itemHash = {}, !1 === o || (s = h.options.filterDisplayMode ? h.options.filterDisplayMode : "label"), h.itemsetObj && "" != h.itemsetObj.nodeset && h.itemsetObj.nodeset.wq_replaceAll(" ", "").indexOf("data:") >= 0 && (!h.itemArr || h.itemArr.length < 1)) { h.itemArr = []; var d = h.itemsetObj.nodeset.replace("data:", ""), p = this.modelControl.getDataComp(d), u = function(t, e) { var i = t, o = h.options.delimiter ? h.options.delimiter : ""; switch (s) { case "value delim label": i = e + o + i; break; case "label delim value": i = i + o + e; break; case "value": i = e }return i }; if (p && WebSquare.idCache[p.uuid]) switch (p.initializeType) { case "linkedDataList": for (var c = [], g = {}, f = p.getAllNoFilteredData(), m = 0; m < p._dataList.getDataLength(); m++) { var y = f[m * p.cellIdList.length + p.bodyIdColIndexMap[h.itemsetObj.label]], b = f[m * p.cellIdList.length + p.bodyIdColIndexMap[h.itemsetObj.value]]; r.D.isNumber(b) && (b += ""), g[y] != b && (g[y] = b, c.push({ orgLabel: y, label: u(y, b), value: b })) } h.itemArr = c; break; case "dataList": for (c = [], g = {}, m = 0; m < p.getDataLength(); m++) { y = p.getCellData(m, h.itemsetObj.label), b = p.getCellData(m, h.itemsetObj.value); r.D.isNumber(b) && (b += ""), g[y] != b && (g[y] = b, c.push({ orgLabel: y, label: u(y, b), value: b })) } h.itemArr = c; break; case "dataMap": for (c = [], g = {}, m = 0; m < p.getCount(); m++) { y = p.get(h.itemsetObj.label), b = p.get(h.itemsetObj.value); r.D.isNumber(b) && (b += ""), g[y] != b && (g[y] = b, c.push({ orgLabel: y, label: u(y, b), value: b })) } h.itemArr = c } } if (h.itemArr) { var w = "label" == t ? "value" : "label"; "label" == t && !1 === o && h.itemArr.length > 0 && h.itemArr[0].orgLabel && (t = "orgLabel"); var v = h.itemArr.slice(0); for (m = 0; m < i.length; m++) { var C = i[m]; r.D.isNumber(C) && (C += ""); for (var I = v.length - 1; I > -1; I--) { var _ = v[I]; if (_[w] == C) { n.push(_[t]), v.splice(I, 1), "label" == t && (h.itemHash[_[t]] = _[w]); break } if ("label" == t || "orgLabel" == t) { if (!C || this.useFilterEmptyValueInfo[C]) { l || (l = !0, n.push(this.filterEmptyStr)); break } } else if ("value" == t && C == this.filterEmptyStr) { for (var x in this.useFilterEmptyValueInfo) n.push(x); break } } } } else for (m = 0; m < i.length; m++) {
							if ("label" == t) {
								if (!i[m] && 0 !== i[m] || this.useFilterEmptyValueInfo[i[m]]) {
									l || (l = !0, n.push(this.filterEmptyStr))
									; continue
								}
							} else if ("value" == t && i[m] == this.filterEmptyStr) { for (var x in this.useFilterEmptyValueInfo) n.push(x); continue } n.push(i[m]), h.itemHash[i[m]] = i[m]
						} return n
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.resizeGridList = function() { try { var t, e; if (this.groupbyFilterList) return; if (!this.customFilterList) return; t = this.customFilterList, e = this.customFilterScrollView; var i = document.getElementById(this.id + "_" + t.currentHeaderID); if (i) { var o = i.clientWidth, s = e.render.clientHeight, n = WebSquare.style.getRelativeTop(i, this.render) + i.offsetHeight + 1, l = WebSquare.style.getRelativeLeft(i, this.render); (r.D.getBoolean(this.getHeaderInfo(t.currentHeaderID).options.autoFitFilterList) || r.D.getBoolean(this.options.autoFitFilterList)) && (this.customFilterList ? s < t.render.clientHeight ? (o = Math.max(o, this.customFilterList.getMaxItemWidth()), o += this.getElementById(this.id + "_size_y").clientWidth) : o = Math.max(o, this.customFilterList.getMaxItemWidth()) : this.groupbyFilterList && (o = Math.max(o, this.groupbyFilterList.getMaxItemWidth()))), e.setPosition(l, n), t.setSize(o, null), e.setSize(o, s) } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.showGroupbyHeaderGhost = function(t, e) { try { var i = this.getHeaderValue(e); WebSquare.dragdrop.gDragManager.activate(t, null, { id: this.id + "_drag", className: "w2grid_groupbyZone_header_drag", contents: i, delay: 15, applyMousePosition: !0, onDrop: function(t, e, i, o, s, a, r) { } }) } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setAdaptiveColumnVisible = function(t, e) {
					try {
						if (this.hiddenAdaptiveList[t] == !e || t >= this.hiddenAdaptiveList.length) return; var i = this; function a(t) { var e = i.getColumnID(t), o = null != i.bodyToHeaderRelation[e] ? i.getHeaderLayer(i.bodyToHeaderRelation[e]) : null; return null != o ? o : a(t - 1) } var o = a(t), s = document.getElementsByClassName(this.id + "_columnstyle_" + (t - this.defaultColCnt) + "_"), n = this.getColumnStyleValue(t - this.defaultColCnt, "height"); if (null == this.oldOptions.headerColBorder && null != o && (this.oldOptions.headerColBorder = WebSquare.style.getStyle(o, "border-top")), null == this.oldOptions.headerPaddingTop && null != o && (this.oldOptions.headerPaddingTop = WebSquare.style.getStyle(o, "padding-top")), null == this.oldOptions.headerPaddingBottom && null != o && (this.oldOptions.headerPaddingBottom = WebSquare.style.getStyle(o, "padding-bottom")), s.length > 0 && "" != this.oldOptions.bodyColBorder && (this.oldOptions.bodyColBorder = WebSquare.style.getStyle(s[0], "border-top")), this.hasSubtotal) for (var l = 0, h = 0, d = this.drawedSubtotal[0][0].childNodes, p = 0; p < d.length && ((v = parseInt(d[p].getAttribute("colSpan"))) || (v = 1), !(h <= t && t < h + v)); p++)h += v, l++; if (this.hasFooter) { var u = 0, c = 0, g = this.htmlInfo.foot.rowArr; for (p = 0; p < g.length; p++)for (var f = g[p], m = 0; m < f.length; m++) { var y = f[m]; if ((v = parseInt(y.colSpan)) || (v = 1), c <= t - this.defaultColCnt && t - this.defaultColCnt < c + v) break; c += v, u++ } } if (e) {
							o.style.height = n, o.style.removeProperty("padding"), o.style.borderTop = this.oldOptions.headerColBorder; for (p = 0; p < s.length; p++)s[p].style.height = n, s[p].style.removeProperty("padding"), s[p].style.borderTop = this.oldOptions.bodyColBorder; if (this.setAdaptiveColumnStyle(t, "height", n), this.setAdaptiveColumnStyle(t, "padding", ""), this.setAdaptiveColumnStyle(t, "border-top", this.oldOptions.bodyColBorder), this.hasFooter) for (p = 0; p < g.length; p++) { y = g[p][u]; var b = parseInt(this.getFooterStyle(y.id, "height")) + parseInt(o.offsetHeight); !(v = parseInt(y.colSpan)) || parseInt(this.getFooterStyle(y.id, "height")) <= 0 ? (this.setFooterStyle(y.id, "height", o.style.height), this.setFooterStyle(y.id, "padding", o.style.padding), this.setFooterStyle(y.id, "borderTop", o.style.borderTop)) : this.setFooterStyle(y.id, "height", b + "px") } if (this.hasSubtotal) for (p = 0; p < this.drawedSubtotal.length; p++)for (m = 0; m < this.drawedSubtotal[p].length; m++) { var w = this.drawedSubtotal[p][m].childNodes; b = parseInt(w[l].style.height) + parseInt(o.offsetHeight); !(v = parseInt(w[l].getAttribute("colSpan"))) || parseInt(w[l].style.height) <= 0 ? (w[l].style.height = o.style.height, w[l].style.padding = o.style.padding, w[l].style.borderTop = o.style.borderTop) : w[l].style.height = b + "px" }
						} else { if (this.hasFooter) for (p = 0; p < g.length; p++) { y = g[p][u], b = parseInt(this.getFooterStyle(y.id, "height")) - parseInt(o.offsetHeight); !(v = parseInt(y.colSpan)) || b <= 0 ? (this.setFooterStyle(y.id, "height", "0px"), this.setFooterStyle(y.id, "padding", "0px"), this.setFooterStyle(y.id, "borderTop", "0px")) : this.setFooterStyle(y.id, "height", b + "px") } if (this.hasSubtotal) for (p = 0; p < this.drawedSubtotal.length; p++)for (m = 0; m < this.drawedSubtotal[p].length; m++) { var v; w = this.drawedSubtotal[p][m].childNodes, b = parseInt(w[l].style.height) - parseInt(o.offsetHeight); !(v = parseInt(w[l].getAttribute("colSpan"))) || b <= 0 ? (w[l].style.height = "0px", w[l].style.padding = "0px", w[l].style.borderTop = "0px") : w[l].style.height = b + "px" } var C = parseInt(o.colSpan, 10), I = !1; if (C > 1) for (var _ = r.D.getDataPrefix("header_id"), x = this.headerToBodyRelation[o.getAttribute(_)], S = this.getColumnIndex(x), D = S; D < S + C; D++)this.hiddenList[D] || (I = !0); (C < 2 || !I) && (o.style.height = "0px", o.style.padding = "0px", o.style.borderTop = "0px"); for (p = 0; p < s.length; p++)s[p].style.height = "0px", s[p].style.padding = "0px", s[p].style.borderTop = "0px"; this.setAdaptiveColumnStyle(t, "height", "0px"), this.setAdaptiveColumnStyle(t, "padding", "0px"), this.setAdaptiveColumnStyle(t, "border-top", "0px") } parseInt(o.colSpan, 10) > 1 && this.setAdaptiveGridHeaderHeight(), this.hiddenAdaptiveList[t] = !e
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.applyFilterHistory = function() { try { if (this.getElementById(this.id + "_groupbyFilterBox_apply").checked = this.groupbyFilterBox_history.length > 0, !0 === this.getElementById(this.id + "_groupbyFilterBox_apply").checked) { var t = this.groupbyFilterBox_select.getSelectedIndex(), e = this.groupbyFilterBox_history[t]; if (e.groupbyOptions) this.groupby(JSON.parse(e.groupbyOptions, (function(t, e) { try { var i = new Function("return " + e)(); return "function" == typeof i || "object" == typeof i && i.constructor === RegExp ? i : e } catch (t) { return e } }))), this.customFilterList && (this.customFilterList.filterHistory = { column: [], filteredRowIndexArr: [] }), e.customFilterStatusObj ? this.customFilterStatusObj = JSON.parse(e.customFilterStatusObj) : this.customFilterStatusObj = {}; else { for (var i in this.groupbyStatus.grouped && this.clearGroupby(), this._dataList.clearFilter(e.filterOption.length > 0), this._dataList.sortStatusInfo = {}, this._dataList.sortStatusArr = [], this.headerInfoHash) { var o = this.getElementById(this.id + "_" + i + "_filter"); o && WebSquare.style.removeClass(o, "w2grid_customFilter_filter") } this.refreshCustomFilterHistory(t), this._dataList.broadcast({ gridView: ["clearHeaderSort"] }), this._dataList.broadcast({ gridView: ["notifyMultisort"] }) } } } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype._refreshCustomFilterHistory = function(t, e, i) {
					try {
						for (var o = t ? JSON.parse(t, (function(t, e) { try { var i = new Function("return " + e)(); return "function" == typeof i || "object" == typeof i && i.constructor === RegExp ? i : "object" == typeof i && "func" === i.type && "string" == typeof i.key ? (i.key = new Function("return " + i.key)(), i) : e } catch (t) { return e } })) : [], s = "", r = "", n = 0; n < o.length; n++) { var l = o[n]; l.noRefresh = n < o.length - 1, l.keepTop = !1, l.internal = !0; var h = ""; for (var d in l.bodyIdColIndexMap) l.bodyIdColIndexMap[d] === l.colIndex && (h = d); "sort" !== l.type && (s = ',"' + h + '"' + s, r = ",[" + this._dataList.filteredRowIndexArr.join(",") + "]" + r), this._dataList.setFilter(l); var p = this.bodyToHeaderRelation[this._dataList.cellIdList[l.colIndex]], u = this.getElementById(this.id + "_" + p + "_filter"); u && WebSquare.style.addClass(u, "w2grid_customFilter_filter") } s = s.slice(1) + "],", r = r.slice(1) + "]}", this.customFilterList || this.createCustomFilterList(null, !0); var c = '{"column":[' + s + '"filteredRowIndexArr":[' + r; this.customFilterList.filterHistory = JSON.parse(c), this.customFilterList.customFilterListFilterInfo = e ? JSON.parse(e, (function(t, e) { try { var i = new Function("return " + e)(); return "function" == typeof i || "object" == typeof i && i.constructor === RegExp ? i : "object" == typeof i && "func" === i.type && "string" == typeof i.key ? (i.key = new Function("return " + i.key)(), i) : e } catch (t) { return e } })) : {}, this.groupbyFilterList && (this.groupbyFilterList.filterHistory = {
							column: [],
							filteredRowIndexArr: []
						}), this.customFilterStatusObj = i ? JSON.parse(i) : {}, this.groupbyStatus.grouped || this.drawHeaderSortImages()
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype.refreshCustomFilterHistory = function(t) { try { for (var e = this.groupbyFilterBox_history[this.groupbyFilterBox_select.getSelectedIndex()], i = "", o = "", s = 0; s < e.filterOption.length; s++) { var r = e.filterOption[s]; r.noRefresh = s < e.filterOption.length - 1, r.keepTop = !1, r.internal = !0; var n = ""; for (var l in r.bodyIdColIndexMap) r.bodyIdColIndexMap[l] === r.colIndex && (n = l); "sort" !== r.type && (i = ',"' + n + '"' + i, o = ",[" + this._dataList.filteredRowIndexArr.join(",") + "]" + o), this._dataList.setFilter(r); var h = this.bodyToHeaderRelation[this._dataList.cellIdList[r.colIndex]], d = this.getElementById(this.id + "_" + h + "_filter"); d && WebSquare.style.addClass(d, "w2grid_customFilter_filter") } i = i.slice(1) + "],", o = o.slice(1) + "]}", this.customFilterList || this.createCustomFilterList(null, !0); var p = '{"column":[' + i + '"filteredRowIndexArr":[' + o; this.customFilterList.filterHistory = JSON.parse(p), e.customFilterListFilterInfo ? this.customFilterList.customFilterListFilterInfo = JSON.parse(e.customFilterListFilterInfo, (function(t, e) { try { var i = new Function("return " + e)(); return "function" == typeof i || "object" == typeof i && i.constructor === RegExp ? i : "object" == typeof i && "func" === i.type && "string" == typeof i.key ? (i.key = new Function("return " + i.key)(), i) : e } catch (t) { return e } })) : this.customFilterList.customFilterListFilterInfo = {}, this.groupbyFilterList && (this.groupbyFilterList.filterHistory = { column: [], filteredRowIndexArr: [] }), e.customFilterStatusObj ? this.customFilterStatusObj = JSON.parse(e.customFilterStatusObj) : this.customFilterStatusObj = {} } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.clearFilterHistory = function() { try { this.getElementById(this.id + "_groupbyFilterBox_apply").checked = !1, this.groupbyFilterBox_history = [], this.groupbyFilterBox_select.removeAll(), this.groupbyStatus.grouped ? this.clearGroupby() : this._dataList.clearFilter() } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.refreshGroupbyFilterBox = function() {
					try {
						var t = this._dataList.getFilterList(), e = "", i = !(!this.options.customFilterBox || !this.groupbyStatus.groupbyOptions), o = i ? "[Groupby] " : ""; if (!this.options.customFilterBox && !this.groupbyStatus.groupbyOptions) return; e += o, e += "("; for (var s, n = null, l = "", h = !0, d = o, p = !1, u = this.options.groupbyFilterBoxLabelSize, c = 0; c < t.length; c++) { var g = "regExp" === (S = t[c]).type, f = "func" === S.type && S.param; if (g || f) { h || (e += " " + S.condition + " ", d += S.condition), e += "("; var m = this._dataList.cellIdList[S.colIndex], y = this.getHeaderValue(this.bodyToHeaderRelation[m]) || m; if (g) { var b = this.dataList.getColData(m, this._dataList.filteredRowIndexArr); if ((L = this.getUniqueValueOfArray(b)).length <= 0) { if (r.D.isNullReg(S.key)) { n = m, l = y; break } continue } for (var w = 0, v = 0; v < L.length; v++) { var C = L[v]; this.useFilterEmptyValueInfo[C] && (C = this.filterEmptyStr), w > 0 && (w < u && (e += " OR "), d += "OR"), w < u && (e += y + " = " + C), d += m + "=" + C, w++ } w > u && (e += " OR ... (" + (w - u) + " omitted)") } else if (f) for (v = 0; v < S.param.length; v++) { null != (A = S.param[v]).radio && (e += 1 === A.radio ? " OR " : " AND ", d += 1 === A.radio ? " OR " : " AND "); var I = "string" == typeof A.auto ? A.auto.replace(/[\\](?![\\])/g, "") : A.auto; e += y + " " + this.selectboxItemSet[A.select - 1] + " " + I, d += m + " " + this.selectboxItemSet[A.select - 1] + " " + A.auto } e += ")", h = !1 } } if (e += ")", n && (e = o + "(" + l + " = NULL)", d = o + n + "_NULL_"), "()" !== e && e !== o + "()" || (e = o + "ALL", d = o + "_ALL_", p = !0), !p && this.options.groupbyFilterBoxFormatter) {
							var _ = r.D.getGlobalFunction(this.options.groupbyFilterBoxFormatter, this.scope_id); if ("function" == typeof _) {
								var x = []; if (d === o + n + "_NULL_") x.push({ header: l, filter: [] }); else for (c = 0; c < t.length; c++) {
									var S; g = "regExp" === (S = t[c]).type, f = "func" === S.type && S.param; if (g || f) {
										m = this._dataList.cellIdList[S.colIndex]; var D = this.getHeaderValue(this.bodyToHeaderRelation[m]) || m; if (g) {
											var R = { header: D, filter: [] }, L = (b = this.dataList.getColData(m, this._dataList.filteredRowIndexArr), this.getUniqueValueOfArray(b)), T = []; for (v = 0; v < L.length; v++) {
												C = L[v]
												; this.useFilterEmptyValueInfo[C] && (C = this.filterEmptyStr), T.push(C)
											} var k = this.getCellInfo(m); R.filter.push({ operator: "in", values: T, labels: k.itemsetObj || k.itemArr ? this.changeItemValue("label", m, L.slice(0)) : T }), x.push(R)
										} else if (f) { for (R = { header: D, filter: [] }, v = 0; v < S.param.length; v++) { var A = S.param[v], F = {}; null != A.radio && (F.gate = 1 === A.radio ? "or" : "and"), F.operator = this.selectboxItemSet[A.select - 1]; I = "string" == typeof A.auto ? A.auto.replace(/[\\](?![\\])/g, "") : A.auto; F.values = I; k = this.getCellInfo(m); F.labels = k.itemsetObj || k.itemArr ? this.changeItemValue("label", m, [I])[0] : I, R.filter.push(F) } S.param.length > 0 && x.push(R) }
									}
								} var E = _.call(this, x, i); null != E && !1 !== E && (e = E)
							}
						} if (!p && !1 === this.groupbyFilterBox_select.setValueNM(d)) this.groupbyFilterBox_select.addItem(d, e), this.groupbyFilterBox_select.setValueNM(d), d === o + "_ALL_" ? s = { filterOption: [], customFilterStatusObj: "{}" } : (s = { filterOption: t, customFilterStatusObj: JSON.stringify(this.customFilterStatusObj) }, this.groupbyStatus.grouped && this.groupbyStatus.filter ? s.customFilterListFilterInfo = JSON.stringify(this.groupbyStatus.filter, (function(t, e) { return "function" == typeof e || "object" == typeof e && e.constructor === RegExp ? e.toString() : e })) : this.customFilterList && this.customFilterList.customFilterListFilterInfo && (s.customFilterListFilterInfo = JSON.stringify(this.customFilterList.customFilterListFilterInfo, (function(t, e) { return "function" == typeof e || "object" == typeof e && e.constructor === RegExp ? e.toString() : e })))), this.groupbyStatus.groupbyOptions && (s.groupbyOptions = this.groupbyStatus.groupbyOptions), this.groupbyFilterBox_history.push(s); this.getElementById(this.id + "_groupbyFilterBox_apply").checked = !p
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, u.prototype._getMouseColumnIndex = function(t) { try { var e = t.colIndex, i = t.offsetX, o = t.offsetLeft, s = t.colSpan; if (i - o < (n = .3 * this.colWidthList[e] > 10 ? 10 : parseInt(.3 * this.colWidthList[e], 10)) && 0 != e) e--; else for (var r = 0; r < s; r++) { var n, l = parseInt(this.colGroup.bodyColList[e + r].style.width, 10); if ((o += l) - (n = .3 * l > 10 ? 10 : parseInt(.3 * l, 10)) < i && i < o + n) { e += r; break } } return e } catch (t) { return a.w.printStackTrace(t, null, this), e } }, u.prototype._useRole = function() { try { return !r.D.isMobile() } catch (t) { a.w.printStackTrace(t, null, this) } }, u.prototype.setAdaptive = function() { try { var t = this.options.adaptive, e = parseInt(this.options.adaptiveThreshold) || 480; for (var i in this.hideThresholdObj) { parseInt(this.hideThresholdObj[i]) >= parseInt(top.document.documentElement.clientWidth || top.document.body.clientWidth) ? this.setColumnVisible(i, !1) : this.setColumnVisible(i, !0) } "crosstab" == t && (r.D.isIE() && parseInt(s.v.browserVersion(), 10) < 10 || (parseInt(top.document.documentElement.clientWidth || top.document.body.clientWidth) <= e ? this.addAdaptive() : this.removeAdaptive())) } catch (t) { a.w.printStackTrace(t) } }, u.prototype.addAdaptive = function() {
					try {
						var t, e = this.options.adaptive; for (var i in "crosstab" == e && (t = this.hasFooter ? "w2grid_adaptive_crosstab w2grid_adaptive_crosstab_footer" : "w2grid_adaptive_crosstab"), this.hideThresholdObj) { parseInt(this.hideThresholdObj[i]) >= parseInt(top.document.documentElement.clientWidth || top.document.body.clientWidth) ? this.setColumnVisible(i, !1) : this.setColumnVisible(i, !0) } if (!this.hasClass(t)) { this.oldOptions.visibleRowNum = this.options.visibleRowNum, this.options.visibleRowNum = "all", this.adjustDraw(this.lastIndex), this.addClass(t), this.setAdaptiveGridBodyHeight(), this.setAdaptiveGridHeaderHeight(), this.hasSubtotal && this.setAdaptiveGridSubtotalHeight(); for (var o = this.defaultColCnt; o < this.hiddenList.length; o++)1 == this.hiddenList[o] && this.setAdaptiveColumnVisible(o, !1); this.event.hasEvent(this.id + "_body_tbody", "onscroll") || this.event.addListener(this.getElementById(this.id + "_body_tbody"), "onscroll", this.event.bindAsEventListener(this, this.tbodyMoveXScroll)) } if (this.options.adaptiveSlideHeader) {
							var s = this.getElementById(this.id + "_head_table"), n = this.getElementById(this.id + "_body_tbody"); this.slideHeadObj || (this.slideHeadObj = {}, this.slideHeadObj.render = s, this.slideHeadObj.headTableWidth = s.offsetWidth,
								this.slideHeadObj.hidden = !1), "absolute" != this.slideHeadObj.render.style.position ? n.scrollWidth > n.clientWidth + this.slideHeadObj.headTableWidth && (this.slideHeadObj.render.style.position = "absolute", this.options.adaptiveSlideHeaderOnScroll || ($(this.slideHeadObj.render.firstChild).animate({ width: "hide" }), this.slideHeadObj.hidden = !0)) : n.scrollWidth == n.clientWidth && (r.D.clearTimeout(this.id + "_adaptiveSlideHeader"), this.slideHeadObj.render.style.position = "", this.slideHeadObj.render.firstChild.style.display = "", this.slideHeadObj.hidden = !1)
						}
					} catch (t) { a.w.printStackTrace(t) }
				}, u.prototype.removeAdaptive = function() { try { var t; if ("crosstab" == this.options.adaptive && (t = this.hasFooter ? "w2grid_adaptive_crosstab w2grid_adaptive_crosstab_footer" : "w2grid_adaptive_crosstab"), this.options.adaptiveSlideHeader && this.slideHeadObj && (this.slideHeadObj.render.style.position = "", this.slideHeadObj.render.firstChild.style.display = "", this.slideHeadObj.hidden = !1), this.hasClass(t)) { this.options.visibleRowNum = this.oldOptions.visibleRowNum; for (var e = this.defaultColCnt; e < this.hiddenList.length; e++)1 == this.hiddenList[e] && this.setAdaptiveColumnVisible(e, !0); if (this.removeClass(t), this.removeAdaptiveGridBodyHeight(), this.removeAdaptiveGridHeaderHeight(), this.hasSubtotal && this.removeAdaptiveGridSubtotalHeight(), "" != this.options.visibleRowNum) { this.focusedCell = [], this.initializeDrawController(), this.dataRowList = [], this.drawedRowLength = 0, this.lastDisplayedRow = -1; for (var i = this.getElementById(this.id + "_body_tbody"); i.firstChild;)i.removeChild(i.firstChild); if (this.options.senseReader) { for (e = 0; e < this.adaptiveEmbeddedInputIdList.length; e++)delete this.dom[this.adaptiveEmbeddedInputIdList[e]]; this.adaptiveEmbeddedInputIdList = [] } this.drawDataTable(0) } this.event.removeEvent(this.id + "_body_tbody", "onscroll") } } catch (t) { a.w.printStackTrace(t) } }, u.prototype.doAdaptive = function() { try { if ("" != this.options.adaptive) return; this.options.adaptive = "crosstab", this.options.adaptiveThreshold = "9999999", this.setAdaptive(), this.adaptiveDoneBy = "doAdaptive" } catch (t) { a.w.printStackTrace(t) } }, u.prototype.undoAdaptive = function() { try { if ("doAdaptive" != this.adaptiveDoneBy) return; this.options.adaptive = "crosstab", this.options.adaptiveThreshold = "1", this.setAdaptive(), this.options.adaptive = "", this.options.adaptiveThreshold = "", this.adaptiveDoneBy = "" } catch (t) { a.w.printStackTrace(t) } }, u.prototype.checkRefreshAdaptive = function() { try { var t = !1; if (!(r.D.isIE() && parseInt(s.v.browserVersion(), 10) < 10)) { var e = WebSquare.BootLoader.fullViewed || !1, i = r.D.fullViewed || !1; if (!e && !i && this.checkAdaptiveGridType() && ("" != this.options.adaptive || 0 != Object.keys(this.hideThresholdObj).length)) { var o = this.options.adaptive, n = parseInt(this.options.adaptiveThreshold) || 480; "crosstab" == o && parseInt(top.document.documentElement.clientWidth || top.document.body.clientWidth) <= n && (t = !0) } } return t } catch (t) { a.w.printStackTrace(t) } }, u.prototype.refreshAdaptive = function(t) { try { if (!0 === this.checkRefreshAdaptive()) if (t && !0 === t.simple) { for (var e = this.defaultColCnt; e < this.hiddenList.length; e++)1 == this.hiddenList[e] && this.setAdaptiveColumnVisible(e, !0); for (var i in this.hasSubtotal && this.removeAdaptiveGridSubtotalHeight(), this.hideThresholdObj) { parseInt(this.hideThresholdObj[i]) >= parseInt(top.document.documentElement.clientWidth || top.document.body.clientWidth) ? this.setColumnVisible(i, !1) : this.setColumnVisible(i, !0) } this.hasSubtotal && this.setAdaptiveGridSubtotalHeight(); for (e = this.defaultColCnt; e < this.hiddenList.length; e++)1 == this.hiddenList[e] && this.setAdaptiveColumnVisible(e, !1) } else this.removeAdaptive(), this.addAdaptive() } catch (t) { a.w.printStackTrace(t) } }; var c = function() { }; c.prototype.setTableLayout = function() {
					try {
						this.initializeHead(), this.initializeFooter(), this.setDataLayerPosition(), this.arrangeOverflowXScroll(), this.handlerResize_drawInitializer(), this.setTrRowTable(), this.setTrSubtotalRowTable(), this.initialColWidthList = this.colWidthList.slice(), this.initialGridWidth = this.gridWidth, this._setAutoFit(),
						this.realRowDataLength = this.oneRowDataLength + this.defaultColCnt, this.associateHeaderBody(), this.options.columnMove && this.createBlockedHeaderInfo(), this.lastDisplayedRow = -1; for (var t = 0; t < this.oneRowDataLength; t++) { var e = this.cellInfoHash2[this.tdIdList[t]], i = new WebSquare.uiplugin.cellInfo(e, this); "textarea" == i.options.inputType && (this.isExistTextarea = !0), i.options.colMerge && (this.isColMerge = !0, r.D.getBoolean(this.options.colMergeAnd) && (this.isColMergeAnd = !0), i.options.upperColumn && (this.upperToLowerColumnRelation[i.options.upperColumn] || (this.upperToLowerColumnRelation[i.options.upperColumn] = []), this.upperToLowerColumnRelation[i.options.upperColumn].push(i.options.id))), null != i.options.maxLength && "" !== i.options.maxLength && (i.options.maxlength = i.options.maxLength), this.cellInfoHash[i.id] = i, this.cellIdList.push(i.id); var o = i.options.hideThreshold; void 0 !== o && (this.hideThresholdObj[i.id] = o) } this.drawFooter(), this.drawHeader(); for (var s = 0; s < this.thIdList.length; s++) { var n = this.headerInfoHash2[this.thIdList[s]]; if (n) { var l = new WebSquare.uiplugin.headerInfo(n, this); this.headerInfoHash[l.id] = l, this.colMoveHeaderIndexMap[l.id] = s } }
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, c.prototype.setDataLayerPosition = function() { try { var t = this.getElementById(this.id + "_dataLayer"); if (this.hasFooter) { var e = this.getElementById(this.id + "_foot_table").offsetHeight; e = 0 == e ? this.footerHeight : e, t.style.bottom = e + "px" } } catch (t) { a.w.printStackTrace(t, null, this) } }, c.prototype.arrangeOverflowXScroll = function(t) { try { this.fixedWidth = 0; for (var e = this.getFixedColumnLastIndex(), i = 0; i < e; i++)this.hiddenList[i] || (this.fixedWidth += this.colWidthList[i]); this.fixedWidth = parseInt(this.fixedWidth, 10) || 0, this.fixedWidthRight = 0; var o = this.getFixedRightColumnLastIndex(), s = this.colWidthList.length; for (i = s - 1; i >= o; i--)this.hiddenList[i] || (this.fixedWidthRight += this.colWidthList[i]); if (this.fixedWidthRight = parseInt(this.fixedWidthRight, 10) || 0, e > this.defaultColCnt || o < s) for (var r = this.getColumnCount(), n = this.data_td_list.length / r, l = 0; l < n + 1; l++) { var h; if (e > this.defaultColCnt) (h = this.data_td_list[l * r + (e - this.defaultColCnt)]) && this.addClass(h, "w2grid_fixedColumn"); if (o < s) (h = this.data_td_list[l * r + (o - this.defaultColCnt)]) && this.addClass(h, "w2grid_fixedRightColumn") } if (!0 !== t) { var d = this.getElementById(this.id + "_scrollX_div"), p = this.getElementById(this.id + "_scrollX_table"), u = 0 === d.offsetWidth ? 0 : d.offsetWidth - p.offsetWidth, c = this.getElementById(this.id + "_scrollX_left"), g = this.getElementById(this.id + "_scroll_size"), f = this.getElementById(this.id + "_scrollX_fixedRight"); c.style.width = this.fixedWidth + "px", g.style.width = this.gridWidth - this.fixedWidth - this.fixedWidthRight - u + "px", f.style.width = this.fixedWidthRight + "px" } } catch (t) { a.w.printStackTrace(t, null, this) } }, c.prototype.handlerResize_drawInitializer = function() {
					try {
						if (0 == this.render.offsetWidth || 0 == this.render.offsetHeight) return; if (this.setOverflowY(), this.setOverflowX(), this.setIE6Fix(), this.options.headFiller) { var t = this.getElementById(this.id + "_header_bg_td"), e = this.getElementById(this.id + "_dataLayer").offsetWidth - 1, i = this.getElementById(this.id + "_head_table").offsetHeight, o = e, s = i; for (t.style.width = e + "px"; t.offsetWidth != o;)t.offsetWidth > o ? e-- : e++, t.style.width = e + "px"; for (t.style.height = i + "px"; t.offsetHeight != s;)t.offsetHeight > s ? i-- : i++, t.style.height = i + "px" } if (this.options.groupbyZone) {
							var r = this.getElementById(this.id + "_main_div"), n = this.groupbyZoneStatus.groupbyZoneRender ? this.groupbyZoneStatus.groupbyZoneRender.offsetHeight : 0; if (this.isIE6or7 && (r.style.height = r.offsetHeight - n), this.options.groupbyFilterBox) {
								var l = this.getElementById(this.id + "_groupbyFilterBox_div"), h = this.getElementById(this.id + "_groupbyFilterBox_buttons"); if (this.isIE6or7) {
									r.style.height = r.offsetHeight - (this.scrollLayerWidthSize + l.offsetHeight) - 3 + "px", h.style.left = -h.offsetWidth; var d = this.scrollLayerWidthSize + l.offsetHeight + n, p = Math.ceil(d / this.oneRowScrollHeight), u = this.getElementById(this.id + "_scrollY_div")
										; this.lastIndex > -1 && this.lastIndex > p && u.offsetHeight < u.scrollHeight && this.cutGridBottom(this.lastIndex - p)
								} else "bottom" === this.options.groupbyFilterBoxLocation && (r.style.bottom = this.scrollLayerWidthSize + l.offsetHeight + "px", r.style.height = "")
							} else this.isIE6or7 && this.cutGridBottom(this.lastIndex - Math.ceil(n / this.oneRowScrollHeight))
						}
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, c.prototype.setIE6Fix = function() { try { var t = this.options.fixPrint && (r.D.isIE(9) || r.D.isIE(10) || s.v.browserCheck.ieAllVersion && "11" == document.documentMode || r.D.isFF()); if (this.isIE6or7 || r.D.isOpera() || t) { var e = this.getElementById(this.id + "_scrollX_div"), i = this.getElementById(this.id + "_scrollY_div"), o = this.getElementById(this.id + "_main_div"), n = this.render.offsetHeight - e.offsetHeight, l = this.render.offsetWidth - i.offsetWidth + 2; n = n < 0 ? 0 : n, l = l < 0 ? 0 : l, o.style.height = n + "px", o.style.width = l + "px"; var h, d = 0; if (this.hasFooter && (d = 0 == (d = this.getElementById(this.id + "_foot_table").offsetHeight) ? this.footerHeight : d), "" !== this.options.visibleRowNum) { var p = this.getElementById(this.id + "_body_table"); h = !this.defaultDataLayerHeight || p.offsetHeight > this.defaultDataLayerHeight ? p.offsetHeight + d : this.defaultDataLayerHeight + d } else h = n - d - 1; h = h < 0 ? 0 : h; var u = this.getElementById(this.id + "_dataLayer"); u.style.height = h + "px", this.dataLayerHeight = h; var c = this.getElementById(this.id + "_scrollX_right"); c.style.width = c.parentNode.offsetWidth + "px", t && (o.style.position = "relative", o.style.bottom = "", o.style.right = "", u.style.position = "relative", u.style.bottom = "") } } catch (t) { a.w.printStackTrace(t, null, this) } }, c.prototype._setOverflowXNative = function(t) { if ("native" === this.options.drawType) { var e = document.getElementById(this.id + "_scrollX_div"), i = document.getElementById(this.id + "_dataLayer"); if (!1 === t || this.options.fixedColumn <= 0 && this.options.fixedRightColumn <= 0) return e.style.visibility = "hidden", void (i.style.overflowX = "auto"); !0 === t && (e.style.visibility = "visible", i.style.overflowX = "hidden") } }, c.prototype.setOverflowX = function(t) { var e = !0; switch (void 0 !== t ? ("hidden" != t && "auto" != t && "scroll" != t && (t = "auto"), this.options.overflowX = t) : e = !1, t = this.isMobile ? "hidden" : this.options.overflowX) { case "auto": this.setOverflowXAuto(); break; case "hidden": this.setOverflowXHidden(); break; default: this.setOverflowXScroll() }this.isMobile && this.setIScrollX(), e && this.setIE6Fix() }, c.prototype.setOverflowXAuto = function() { var t = this.getElementById(this.id + "_scrollX_div"), e = this.getElementById(this.id + "_scrollX_left"), i = this.getElementById(this.id + "_scrollX_right"), o = e.offsetWidth; if (this.options.fixedRightColumn) { var s = this.getElementById(this.id + "_scrollX_fixedRight"); s && (o += s.offsetWidth) } i.firstChild.offsetWidth > t.offsetWidth - o ? this.setOverflowXScroll() : this.setOverflowXHidden() }, c.prototype.setOverflowXScroll = function() {
					try {
						var t = (l = this.getElementById(this.id + "_scrollX_div")).style.height; if (l.style.height = this.scrollLayerWidthSize + "px", this.options.scrollFocus) { var e = this.getElementById(this.id + "_scrollX_right"), i = this.getElementById(this.id + "_scrollX_left"); e.setAttribute("aria-hidden", "true"), e.firstChild.offsetWidth > l.offsetWidth - i.offsetWidth ? e.setAttribute("tabIndex", "0") : e.setAttribute("tabIndex", "-1") } var o = this.options.groupbyZone && this.options.groupbyFilterBox && "bottom" === this.options.groupbyFilterBoxLocation; if (-1 !== this.rowIndex && "0px" === t && !o && "native" !== this.options.drawType) if ("" !== this.options.visibleRowNum) { var s = parseInt(this.render.style.height, 10); this.setSize(null, s + this.scrollWidthSize) } else { this.dataLayerHeight -= this.scrollWidthSize; var r = this.dataRowList[(this.lastIndex + 1) * this.oneRowLength - 1]; r && r.offsetTop + r.offsetHeight > this.dataLayerHeight && (this._setRowDisplay(this.lastIndex, "none"), this.lastIndex = this.lastIndex - 1, this.maxRowLength = this.maxRowLength - 1, this.lastDisplayedRow = this.lastIndex, this.lastTopRowIndex = null, this.setScrollYHeight({ noDraw: !0 }), this.setOverflowYAuto()) } if (!this.isIE6or7) {
							var n = this.getElementById(this.id + "_main_div"), l = this.getElementById(this.id + "_scrollX_div"), h = parseInt(l.style.height, 10); if (n.style.bottom = h + "px", this.options.groupbyZone && this.options.groupbyFilterBox && "bottom" === this.options.groupbyFilterBoxLocation) { var d = this.getElementById(this.id + "_groupbyFilterBox_div"); n.style.bottom = this.scrollLayerWidthSize + d.offsetHeight + "px" }
						} if (o) (d = this.getElementById(this.id + "_groupbyFilterBox_div")).style.bottom = this.scrollLayerWidthSize + "px"
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, c.prototype.setOverflowXHidden = function() { try { var t = this.getElementById(this.id + "_scrollX_div"), e = t.style.height; if (t.style.height = "0px", this.options.scrollFocus) { var i = this.getElementById(this.id + "_scrollX_right"), o = this.getElementById(this.id + "_scrollX_left"); i.setAttribute("aria-hidden", "true"), i.firstChild.offsetWidth > t.offsetWidth - o.offsetWidth ? i.setAttribute("tabIndex", "0") : i.setAttribute("tabIndex", "-1") } "0px" != e && this.handleScrollX(); var s = this.options.groupbyZone && this.options.groupbyFilterBox && "bottom" === this.options.groupbyFilterBoxLocation; if (-1 !== this.rowIndex && "0px" !== e && !s && "native" !== this.options.drawType) if ("" !== this.options.visibleRowNum) { var r = parseInt(this.render.style.height, 10); this.setSize(null, r - this.scrollWidthSize) } else { this.dataLayerHeight += this.scrollWidthSize, this.maxRowLength = this.maxRowLength + 1; var n = this.getDataLength(); this.maxRowLength >= n && (this.getElementById(this.id + "_size_y").style.height = "0px"), this.setOverflowYAuto(), this.drawData(this.rowIndex, this.lastIndex); for (var l = 0; l < this.tdIdList.length; l++) { var h = this.cellInfoHash[this.tdIdList[l]]; if (h.dataComp) { var d = this.modelControl.getDataComp(h.dataComp); "linkedDataList" === d.initializeType && d.syncWithParent() } } this.lastTopRowIndex = null } var p = this.getElementById(this.id + "_main_div"); if (this.isIE6 || (p.style.bottom = "0px"), s) this.getElementById(this.id + "_groupbyFilterBox_div").style.bottom = "0px" } catch (t) { a.w.printStackTrace(t, null, this) } }, c.prototype.setOverflowY = function(t) { if ("native" !== this.options.drawType) { var e = !0; switch (void 0 !== t ? ("hidden" != t && "auto" != t && "scroll" != t && (t = "auto"), this.options.overflowY = t) : e = !1, t = this.isMobile ? "hidden" : this.options.overflowY) { case "auto": this.setOverflowYAuto(); break; case "hidden": this.setOverflowYHidden(); break; default: this.setOverflowYScroll() }this.isMobile && this.setIScrollY(), e && this.setIE6Fix() } }, c.prototype.setOverflowYAuto = function() { if ("native" !== this.options.drawType) { var t = this.getElementById(this.id + "_scrollY_div"); t.offsetHeight < t.scrollHeight ? this.setOverflowYScroll() : this.setOverflowYHidden() } }, c.prototype.setOverflowYScroll = function() { var t = this.getElementById(this.id + "_scrollY_div"), e = this.getElementById(this.id + "_scrollX_div"), i = this.getElementById(this.id + "_main_div"), o = parseInt(t.style.width, 10); if (t.style.width = this.scrollLayerWidthSize + "px", t.style.overflowY = "scroll", this.isIE6) { var s = this.render.offsetWidth - this.scrollWidthSize; e.style.width = (s > 0 ? s : 0) + "px", t.style.height = this.render.offsetHeight + "px" } else i.style.right = this.scrollWidthSize - 1 + "px", e.style.right = this.scrollWidthSize + "px"; this.options.groupbyZone && this.options.groupbyFilterBox && (this.getElementById(this.id + "_groupbyFilterBox_div").style.right = i.style.right); 0 == o && this._setAutoFit(), this.options.scrollFocus && (t.setAttribute("aria-hidden", "true"), t.offsetHeight < t.scrollHeight ? t.setAttribute("tabIndex", "0") : t.setAttribute("tabIndex", "-1")) }, c.prototype.setOverflowYHidden = function() {
					var t = this.getElementById(this.id + "_scrollY_div"), e = parseInt(t.style.width, 10); t.style.width = "0px", t.style.overflowY = "hidden"; var i = this.getElementById(this.id + "_main_div"); this.isIE6 || (i.style.right = "0px", this.getElementById(this.id + "_scrollX_div").style.right = "0px"); this.options.groupbyZone && this.options.groupbyFilterBox && (this.getElementById(this.id + "_groupbyFilterBox_div").style.right = i.style.right); 0 != e && this._setAutoFit(), this.options.scrollFocus && (t.setAttribute("aria-hidden", "true"),
						t.offsetHeight < t.scrollHeight ? t.setAttribute("tabIndex", "0") : t.setAttribute("tabIndex", "-1"))
				}, c.prototype.setTrRowTable = function() { try { this.tempDiv = document.createElement("div"), this.tempDiv.style.width = "0px", this.tempDiv.style.height = "0px", this.tempDiv.style.overflow = "hidden", this.tempDiv.innerHTML = "<table id='tempTable' style='table-layout:fixed; border-collapse:collapse; border-spacing:0px;'>" + this.getTableHtml(this.htmlInfo.body, "tbody", "td", this.options.bodyTdClass) + "</table>", this.tempTr = this.tempDiv.getElementsByTagName("table")[0]; var t = this.tempTr.getElementsByTagName("td"); this.aria_labelledby = []; for (var e = 0; e < t.length; e++)this.options.autoScope && 0 == e && t[e].setAttribute("scope", "row"), this.aria_labelledby[e] = t[e].getAttribute("aria-labelledby"), t[e].innerHTML = ""; this.tempDiv.id = this.id, this.tempDiv.className = this.options.className + " w2grid", this.render.parentNode.appendChild(this.tempDiv); var i, o = this.tempDiv.getElementsByTagName("tbody")[0], s = o.getElementsByTagName("tr")[0]; 0 == (i = s ? s.offsetHeight : o.offsetHeight) ? (i = -1 != this.options.defaultCellHeight ? this.options.defaultCellHeight : 20, this._visibleRowNumFixResetFlag = !0) : this._visibleRowNumFixResetFlag = !1, this.oneRowHeight = i + (r.D.isIE(6) || r.D.isIE(7) ? 1 : 0), this.options.scrollRowHeight && (this.oneRowScrollHeight = this.oneRowHeight), this.render.parentNode.removeChild(this.tempDiv) } catch (t) { a.w.printStackTrace(t, null, this) } }, c.prototype.setTrSubtotalRowTable = function() { try { for (var t in this.subtotalTableList = {}, this.subtotalStrList) { var e = document.createElement("div"); e.style.width = "0px", e.style.height = "0px", e.style.overflow = "hidden", this.subtotalClassList && this.subtotalStrList[t].attr ? e.innerHTML = "<table id='tempTable' style='width:100%;table-layout:fixed; border-collapse:collapse; border-spacing:0px;'>" + this.getTableHtml(this.subtotalStrList[t], "tbody", "td", this.subtotalStrList[t].attr.subtotalClass) + "</table>" : e.innerHTML = "<table id='tempTable' style='width:100%;table-layout:fixed; border-collapse:collapse; border-spacing:0px;'>" + this.getTableHtml(this.subtotalStrList[t], "tbody", "td", this.options.subtotalTdClass) + "</table>"; for (var i = e.getElementsByTagName("table")[0], o = i.getElementsByTagName("td"), s = r.D.getDataPrefix("or_wd"), n = 0; n < o.length; n++) { var l = o[n], h = l.getAttribute("width"); h && (l.removeAttribute("width"), l.setAttribute(s, h)) } this.subtotalTableList[t] = i } } catch (t) { a.w.printStackTrace(t, null, this) } }, c.prototype._setAutoFit = function(t) {
					if (0 != this.render.offsetWidth && 0 != this.render.offsetHeight) {
						this.autofitDone = !0; var e = (t = t || {}).type ? t.type : this.options.autoFit; "none" !== e && e || (e = "clear"); var i = t.exceptCol, o = t.exceptWidth || 0, s = this.options.autoFitFixYScroll ? this.scrollLayerWidthSize : parseInt(this.getElementById(this.id + "_scrollY_div").style.width, 10), a = this.render.clientWidth; r.D.isIEAllVersion() && (a = this.render.clientWidth || parseInt(this.render.style.width, 10) || parseInt(WebSquare.style.getComputedStyle(this.render, "width"), 10)), this.autofit_clientWidth = a; for (var n = 0, l = this.colWidthList.length - 1; l >= 0; l--)if (0 == this.hiddenList[l]) { n = l; break } if ("selectedColumn" == e && !this.autofitColumn) { if (this.gridWidth >= a) return; this.autofitColumn = !0; var h = this.defaultColCnt + t.colIndex; this.gridWidth -= this.colWidthList[h], this.autofitColumnIndexArr.push(h), this.colWidthList[h] = "*", this.autofitColumnWidthArr[h] = "*" } if (this.autofitColumn) {
							var d = a, p = this.autofitColumnIndexArr.slice(); s > 0 && (d -= s); for (l = p.length - 1; l >= 0; l--) { var u = p[l]; 1 != this.hiddenList[u] && u !== i || p.splice(l, 1) } var c = 0, g = []; for (l = 0; l < this.colWidthList.length; l++)if (1 != this.hiddenList[l]) if (l === i) this._setColumnWidth(l, o), d -= o; else if (l < this.autofitColumnWidthArr.length && this.autofitColumnWidthArr[l]) { var f = this.autofitColumnWidthArr[l].substring(0, this.autofitColumnWidthArr[l].indexOf("*")); f.length > 0 ? g.push(parseInt(f, 10)) : 0 == f.length && g.push(1) } else d -= this.colWidthList[l]; var m = function(t) { if (!t.length) return 0; for (var e, i = t.length - 1, o = t[i]; i;)for (var s = t[--i]; e = s % o; s = o, o = e); return o }(g)
								; for (l = 0; l < g.length; l++)g[l] = g[l] / m, c += g[l]; var y = Math.floor(d / c), b = d - y * c; for (l = 0; l < p.length; l++) { var w = this.options.autoFitMinWidth || 0, v = y * g[l]; g[l] = Math.max(v, w) } if (b > 0) if (1 == p.length) g = [d]; else { var C = g.slice(); for (l = b; l > 0; l--) { for (var I = {}, _ = 0; _ < g.length; _++)if (1 != this.hiddenList[p[_]]) { var x = Math.abs((C[_] - (g[_] + 1)) * (this.gridWidth / C[_])); (null == I.distortion || I.distortion > x) && (I.distortion = x, I.index = _) } g[I.index]++ } } for (var S = 0; S < g.length; S++)this._setColumnWidth(p[S], g[S])
						} if ("lastColumn" == e) { this.autoFitGridWidth || (this.autoFitGridWidth = this.gridWidth, this.orgLastWidth = this.colWidthList[n], this.orgLastVisibleCol = n), "number" == typeof i && i != n && (this.autoFitGridWidth += o - this.colWidthList[i], this._setColumnWidth(i, o)); var D = a - s - this.gridWidth + this.colWidthList[n]; D > this.orgLastWidth ? this._setColumnWidth(n, D) : this._setColumnWidth(n, this.orgLastWidth) } else if ("allColumn" == e) { if (!this.autofitColumn) { var R = this.autoFitColWidthList || this.colWidthList, L = a - s, T = {}; if (this.options.keepDefaultColumnWidth) for (l = 0; l < this.defaultColCnt; l++)T[l] = !0; for (l = this.defaultColCnt; l < R.length; l++)!1 === this.isColumnResizable(l) && (this.hiddenList[l] || (T[l] = !0)); w = parseInt(t.minWidth ? t.minWidth : this.options.autoFitMinWidth, 10); for (var k in !isNaN(w) && w > L && (L = w), L -= o, T) L -= this.colWidthList[k]; var A = 0; for (l = 0; l < R.length; l++)A += this.hiddenList[l] || l === i || T[l] ? 0 : R[l]; var F = 0, E = A ? L / A : 0, M = []; if (E) { for (l = 0; l < R.length; l++)if (l == i) this.colWidthList[l] = o; else if (T[l]); else { M[l] = E * R[l]; var O = Math.round(M[l]); this.colWidthList[l] = O, F += this.hiddenList[l] ? 0 : O } var N = L - F, B = N > 0 ? 1 : -1; for (l = 0; l < N * B; l++) { var G = {}; for (_ = 0; _ < R.length; _++)if (!this.hiddenList[_] && _ != i && !T[_]) { x = Math.abs(M[_] - (this.colWidthList[_] + B)) * (F / this.colWidthList[_]); (null == G.value || G.value > x) && (G.value = x, G.index = _) } this.colWidthList[G.index] += B, F += B } if (this.hiddenList[0] && r.D.isIE(8)) for (l = 0; l < this.colWidthList.length; l++)if (!this.hiddenList[l]) { this.colWidthList[l] = this.colWidthList[l] - 2; break } } for (var k in this.autoFitColWidthList || (this.autoFitColWidthList = this.colWidthList.slice(0)), this.gridWidth = F + o, T) this.gridWidth += this.colWidthList[k]; this.arrangeOverflowXScroll(); var H = ""; this.options.autoFitMinWidth || (H = "hidden"), this.setOverflowX(H), this.scrollXPreventEndEdit = !0, this.handleScrollX(), this.scrollXPreventEndEdit = !1, this.handlerResize_drawInitializer() } for (l = 0; l < this.oneRowDataLength; l++) { var W = this.getCellInfo(l); "text" != W.options.inputType && "secret" != W.options.inputType && "calendar" != W.options.inputType || !W.options.embeddedInput || !this.options.autoResizeEmbeddedInput && "calendar" != W.options.inputType || this.hiddenList[l] || (this.embeddedWidthObj[l] && (this.embeddedWidthObj[l].isChanged = !0), this.drawColumnData(l)) } } else "clear" == e && "number" == typeof i && (this.autoFitGridWidth || (this.autoFitGridWidth = this.gridWidth), this.autoFitGridWidth += o - this.colWidthList[i], this._setColumnWidth(i, o))
					}
				}, c.prototype.setAutoFit = function(t) { try { t && (this.options.autoFit = t.type), this._setAutoFit(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, c.prototype.clearAutoFit = function(t) { try { this.options.autoFit = "", -1 === this.initialColWidthList.indexOf("*") && (this.autofitColumn = !1, this.autofitColumnIndexArr = [], this.autofitColumnWidthArr = [], this.autoFitColWidthList = null, this.gridWidth = this.initialGridWidth, this.colWidthList = this.initialColWidthList.slice(), this.arrangeOverflowXScroll(), this.setOverflowX("auto"), this.handleScrollX()) } catch (t) { a.w.printStackTrace(t, null, this) } }, c.prototype.autoFitFunc = function() { this.autofit_clientWidth === this.render.clientWidth ? s.v.clearTimer(this.id + "_autofit") : s.v.setTimer(this._setAutoFit, { key: this.id + "_autofit", caller: this, delay: 100 }) }, c.prototype.setIScrollX = function() {
					try {
						var t = this.getElementById(this.id + "_iScrollX"); if (!t) return; var e = this.getElementById(this.id + "_scrollX_right"); if (e.offsetWidth >= e.firstChild.offsetWidth) return void (t.style.visibility = "hidden")
							; var i = this.getElementById(this.id + "_dataLayer"), o = parseInt(this.getElementById(this.id + "_scrollX_left").style.width, 10), s = e.firstChild.offsetWidth - e.offsetWidth, r = parseInt(e.offsetWidth * e.offsetWidth / e.firstChild.offsetWidth, 10); t.style.width = (r < 30 ? 30 : r) + "px", t.style.left = o + e.scrollLeft / s * (i.offsetWidth - o - t.offsetWidth) + "px", t.style.visibility = ""
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, c.prototype.setIScrollY = function() { try { var t = this.getElementById(this.id + "_iScrollY"); if (!t) return; var e = this.getDataLength(), i = this.rowIndex, o = this.getElementById(this.id + "_size_y").parentNode.offsetHeight; if (0 == o && (o = parseInt(this.getStyleValue("height"))), -1 == i || 0 == i && i + this.lastIndex + 1 == e) { var s = !this.hasSubtotal; if (this.hasSubtotal && this.drawedSubtotal.length > 0) { var r = this.drawedSubtotal[this.drawedSubtotal.length - 1]; if (r.rowIndex == e - 1) "none" != r[r.length - 1].style.display && (s = !0) } if (s) return void (t.style.visibility = "hidden") } var n = this.getElementById(this.id + "_scrollY_div"), l = n.firstChild.offsetHeight, h = this.getElementById(this.id + "_dataLayer"), d = l - h.offsetHeight, p = parseInt(h.offsetHeight * h.offsetHeight / l, 10); t.style.height = (p < 30 ? 30 : p) + "px", t.style.top = n.scrollTop / d * (h.offsetHeight - t.offsetHeight) + "px", t.style.visibility = "" } catch (t) { a.w.printStackTrace(t, null, this) } }, c.prototype.createBlockedHeaderInfo = function() { try { this.columnBlock = { info: {}, hash: {} }; for (var t = [], e = this.getColCnt(), i = 0; i < e; i++)t.push(1); for (var o in this.struct) { var s; if ("subtotalArr" === o) s = this.struct[o][0].rowArr; else { if (!this.struct[o] || !this.struct[o].rowArr) continue; s = this.struct[o].rowArr } for (var r = 0; r < s.length; r++)for (var n = 0, l = 0; l < s[r].length; l++) { var h = parseInt(s[r][l].colSpan, 10) || 1; for (i = 1; i < h; i++)t[n + i] = 0; n += h } } var d = 0; for (i = 0; i < t.length; i++) { var p = t[i]; 1 === p ? (this.columnBlock.info[i] = [i], this.columnBlock.hash[i] = i, d = i) : 0 === p && (this.columnBlock.info[d].push(i), this.columnBlock.hash[i] = d) } } catch (t) { a.w.printStackTrace(t, null, this) } }; var g = function() { }; g.prototype.initializeEvent = function() {
					try {
						if (this.otherClickEvent(), this.checkResize(), this.event.addListener(this.render, "ondblclick", this.event.bindAsEventListener(this, this.handleDblClickEvent)), this.event.addListener(this.render, "onclick", this.event.bindAsEventListener(this, this.handleClickEvent)), r.D.isIEAllVersion()) { if (r.D.isIEAllVersion()) { if (this.event.addListener(this.render, "oncopy", this.event.bindAsEventListener(this, (function(t) { this.options.preventCopy || this.editedCell || "native" === this.options.copyType || d.B.preventDefault(t) }))), this.event.addListener(this.render, "oncut", this.event.bindAsEventListener(this, (function(t) { this.options.preventCopy || this.editedCell || "native" === this.options.copyType || d.B.preventDefault(t) }))), this.event.addListener(this.render, "onpaste", this.event.bindAsEventListener(this, (function(t) { this.options.preventPaste && !this.editedCell && "native" !== this.options.copyType && d.B.preventDefault(t) }))), !0 === this.options.noSelect) document.getElementById(this.id + "_main_div").onselectstart = function(t) { if (r.D.isIEAllVersion() && t && t.srcElement) { var e = t.srcElement; if ("INPUT" === e.tagName || "TEXTAREA" === e.tagName) return !0 } return !1 }; else !0 === this.options.preventCopy && (this.render.onselectstart = function() { return !1 }) } } else s.v.browserCheck.safari ? (this.event.addListener(WebSquare.getBody().render, "onbeforecopy", this.event.bindAsEventListener(this, this.handleBeforeCopyEvent)), this.event.addListener(WebSquare.getBody().render, "oncopy", this.event.bindAsEventListener(this, this.handleCopyEvent)), this.event.addListener(WebSquare.getBody().render, "onbeforecut", this.event.bindAsEventListener(this, this.handleBeforeCutEvent)), this.event.addListener(WebSquare.getBody().render, "oncut", this.event.bindAsEventListener(this, this.handleCutEvent)), this.event.addListener(this.render, "onpaste", this.event.bindAsEventListener(this, this.handlePasteEvent))) : s.v.browserCheck.chrome || (this.event.addListener(this.render, "oncopy", this.event.bindAsEventListener(this, this.handleCopyEvent)),
							this.event.addListener(this.render, "oncut", this.event.bindAsEventListener(this, this.handleCutEvent)), this.event.addListener(this.render, "onpaste", this.event.bindAsEventListener(this, this.handlePasteEvent))); this.isMobile || (this.event.addListener(this.getElementById(this.id + "_head_table"), "onmouseover", this.event.bindAsEventListener(this, this.gridDataLayerOut)), this.event.addListener(this.getElementById(this.id + "_scrollX_div"), "onmouseover", this.event.bindAsEventListener(this, this.gridDataLayerOut)), this.event.addListener(this.getElementById(this.id + "_scrollY_div"), "onmouseover", this.event.bindAsEventListener(this, this.gridDataLayerOut)), this.event.addListener(this.getElementById(this.id + "_dataLayer"), "onmouseover", this.event.bindAsEventListener(this, this.gridOver)), this.options.useMoreButton && this.event.addListener(this.getElementById(this.id + "_grid_more_button"), "onclick", this.event.bindAsEventListener(this, (function(t) { WebSquare.event.fireEvent(this, "onscrollend") }))), this.hasFooter && this.event.addListener(this.getElementById(this.id + "_foot_table"), "onmouseover", this.event.bindAsEventListener(this, this.gridOver))); var t = this.isHammerEnabled(); if (this.event.addListener(this.getElementById(this.id + "_dataLayer"), "oncontextmenu", this.event.bindAsEventListener(this, this.clickRightButtonCell)), t || this.event.addListener(this.render, "onmouseout", this.event.bindAsEventListener(this, this.gridOut)), this.event.addListener(this.render, "onkeydown", this.event.bindAsEventListener(this, this.handleKeyDownEvent)), this.event.addListener(this.render, "onkeyup", this.event.bindAsEventListener(this, this.handleKeyUpEvent)), r.D.isOpera() && this.event.addListener(this.render, "onkeypress", (function(t) { 9 != t.keyCode && 27 != t.keyCode || d.B.preventDefault(t) })), this.options.dataDragDrop || this.options.dataDragDropSelf) if (1 == this.isMobile) { if (t) { var e = Promise.resolve(); "undefined" != typeof Hammer && null != Hammer || (e = inquires("externalJS/hammer.min.js")); var i = this.uuid; e.then((function(t, e) { var o = WebSquare.idCache[i]; o._manager = new Hammer.Manager(o.getElementById(o.id + "_dataLayer")), o._manager.add(new Hammer.Press({ time: o.options.hammerPressTime })), o._manager.on("press", o.event.bindAsEventListener(o, (function(t) { o.handleDragEvent(t) }))), o._bindPressEvent = !0 })) } } else this.event.addListener(this.render, "onmousedown", this.event.bindAsEventListener(this, this.handleDragEvent)), this._bindDrag = !0; else this.options.dataDragDrop || this.options.dataDragDropSelf || !this.options.dataDragSelect || this.isMobile || this.event.addListener(this.getElementById(this.id + "_dataLayer"), "onmousedown", this.event.bindAsEventListener(this, this.handleDragSelectEvent)); if (s.v.setTimer((function() { this.event.addListener(this.render, "onmousedown", this.event.bindAsEventListener(this, (function(t) { var e = WebSquare.getBody().getLayerListener(); if (e.layers[this.id]) { for (var i = e.layers[this.id].component, o = {}; i.parentControl;)for (var s in i = i.parentControl, e.useOtherComponentId) e.useOtherComponentId[s] == i.id && (o[s] = !0); WebSquare.getBody().getLayerListener().hideAll(o) } this.parentControl && this.parentControl.options && ("gridItemTable" == this.parentControl.options.pluginName || "gridViewItemTable" == this.parentControl.options.pluginName) || d.B.stopPropagation(t) }))) }), { key: this.id + "initializeEvent", caller: this, delay: 100 }), this.isMobile ? (this.iScroll = {}, this.event.addListener(this.render, "ontouchstart", this.event.bindAsEventListener(this, this.handleTouchStart)), this.event.addListener(this.render, "ontouchmove", this.event.bindAsEventListener(this, this.handleTouchMove)), this.event.addListener(this.render, "ontouchend", this.event.bindAsEventListener(this, this.handleTouchEnd))) : window.navigator.msPointerEnabled && -1 != window.navigator.userAgent.toLowerCase().indexOf("touch") ? (this.iScroll = {}, this.render.style.touchAction = "none", this.event.addListener(this.render, "onMSPointerDown", this.event.bindAsEventListener(this, this.handleTouchStart)),
								this.event.addListener(this.render, "onMSPointerMove", this.event.bindAsEventListener(this, this.handleTouchMove)), this.event.addListener(this.render, "onMSPointerUp", this.event.bindAsEventListener(this, this.handleTouchEnd))) : this.options.senseReader ? (this.options.useStartEndDiv && (this.event.addListener(this.getElementById(this.id + "_gridstart_div"), "onfocus", this.event.bindAsEventListener(this, this.handleStartDivFocus)), this.event.addListener(this.getElementById(this.id + "_gridstart_div"), "onkeydown", this.event.bindAsEventListener(this, this.handleStartDivKeyDown)), this.event.addListener(this.getElementById(this.id + "_gridend_div"), "onfocus", this.event.bindAsEventListener(this, this.handleEndDivFocus)), this.event.addListener(this.getElementById(this.id + "_gridend_div"), "onkeyup", this.event.bindAsEventListener(this, this.handleEndDivKeyUp))), this.options.scrollFocus ? this.event.addListener(this.getElementById(this.id + "_scrollY_div"), "onkeydown", this.event.bindAsEventListener(this, this.handleScrollDivKeyDown)) : this.options.useStartEndDiv && this.event.addListener(this.getElementById(this.id + "_gridend_div"), "onkeydown", this.event.bindAsEventListener(this, this.handleEndDivKeyDown))) : this.options.scrollFocus && this.event.addListener(this.getElementById(this.id + "_scrollY_div"), "onkeydown", this.event.bindAsEventListener(this, this.handleScrollDivKeyDown)), t && !this._bindPressEvent) try { e = Promise.resolve(); "undefined" != typeof Hammer && null != Hammer || (e = inquires("externalJS/hammer.min.js")); i = this.uuid; e.then((function(t, e) { var o = WebSquare.idCache[i]; o._manager = new Hammer.Manager(o.render), o._manager.add(new Hammer.Press({ time: o.options.hammerPressTime })), o._manager.on("press", o.event.bindAsEventListener(o, (function(t) { if (!o._bindPressEvent) { for (var e = d.B.getTarget(t), i = -1; e && "BODY" != e.tagName;) { if ("TD" == e.tagName && o.hasClass(e, o.options.bodyTdClass)) { i = o.getElemRowIndex(e); break } e = e.parentNode } o.removeFocusedCell(), o._dataList.setRowPosition(i), o.handleDblClickEvent(t), d.B.fireEvent(o, "ondblclick", t) } }))) })) } catch (t) { a.w.printStackTrace(t, null, this) } if ("native" === this.options.drawType || !0 === this.options.scrollXNative) { var o = document.getElementById(this.id + "_dataLayer"); i = this.uuid; o && (o.onscroll = function(t) { var e = WebSquare.idCache[i]; e._endEdit(); var o = document.getElementById(e.id + "_dataLayer"), s = o.scrollTop, a = o.offsetHeight, r = o.scrollLeft; e._nativeScrollInfo || (e._nativeScrollInfo = { x: 0, y: 0 }); var n = r - e._nativeScrollInfo.x, l = s - e._nativeScrollInfo.y; if (Math.abs(l) > 0 && "native" === e.options.drawType) { if (WebSquare.util.isIEAllVersion()) for (var h = document.getElementById(e.id + "_head_table").getElementsByTagName("th"), p = s + "px", u = 0; u < h.length; u++) { var c = h[u]; "relative" != c.style.position && (c.style.position = "relative"), c.style.top = p } a + s >= o.scrollHeight && d.B.fireEvent(e, "onscrollend"), d.B.fireEvent(e, "onscrolly", t) } Math.abs(n) > 0 && !0 === e.options.scrollXNative && d.B.fireEvent(e, "onscrollx", t), e._nativeScrollInfo = { x: r, y: s } }) } this.initializeLayoutEvents(), n.s.addCheckResize(this.uuid, "checkResize")
					} catch (t) { a.w.printStackTrace(t, null, this) }
				}, g.prototype.handleStartDivFocus = function(t) { (this.focusedCellLinkIndex = -1, this.focusedCellLinkLength = 0, this.applyFocusedCellOut(), this.focusedCell = [], "true" !== this.options.keepScrollForSenseReader) && (this.addGridScroll(0 - this.rowIndex), 0 != this.getElementById(this.id + "_scrollY_div").scrollTop && this.addGridScroll(0 - this.rowIndex)) }, g.prototype.handleEndDivFocus = function(t) { this.focusedCellLinkIndex = -1, this.focusedCellLinkLength = 0, this.applyFocusedCellOut(), this.focusedCell = [] }, g.prototype.handleScrollDivKeyDown = function(t) {
					if (t.shiftKey && 9 == t.keyCode) { for (var e = this.getRowCount() - 1, i = this.getRightMostFocusableColIndex(e); e >= 0 && null == i;)e -= 1, i = this.getRightMostFocusableColIndex(e); if (null !== i) { var o = this.getCellInfo(i); if ("radio" === o.options.inputType) { var s = 0, a = this.getCheckedIndex(o.colID)[0]; a > 0 && (s = a), this._setFocusedCell(s, i, !1, { tabDirection: "left" }), d.B.stopEvent(t) } } } else switch (t.keyCode) {
						case 38: case 40: case 9:
							d.B.stopPropagation(t)
					}
				}, g.prototype.handleStartDivKeyDown = function(t) { t.shiftKey || 9 != t.keyCode || this._lastHeaderElementId || this._setFirsCellFocus(t) }, g.prototype.handleEndDivKeyDown = function(t) { if (t.shiftKey && 9 == t.keyCode) { if ("none" === this.options.focusMode) return; var e = this.getElementById(this.id + "_size_y").parentNode.offsetHeight, i = parseInt(this.getElementById(this.id + "_size_y").style.height, 10); if (0 == i) return; var o = i - e, s = this.getElementById(this.id + "_scrollY_div").scrollTop, a = this._getEpsilon(); if (s < o && (s = Math.min(Math.round(s) + a, o)), o != s) { for (var r = 0, n = 0; n < this.getRowCount(); n++)r += this.getHasSubtotalCount(n); this.addGridScroll(this.getRowCount() - this.rowIndex - this.lastIndex - 1 + r) } for (var l = this.getRowCount() - 1, h = this.getRightMostFocusableColIndex(l); l >= 0 && null == h;)l -= 1, h = this.getRightMostFocusableColIndex(l); null != h && (this._setFocusedCell(l, h, !1, { tabDirection: "left" }), d.B.stopEvent(t)) } }, g.prototype.handleEndDivKeyUp = function(t) { 38 == t.keyCode && "all" != this.options.visibleRowNum && (this.getElementById(this.id + "_scrollY_div").scrollTop = 0) }, g.prototype.handleTdFocus = function(t) { var e, i = d.B.getTarget(t), o = this.getLastFocusedCell(), s = r.D.getDataPrefix("tdIndex"), a = r.D.getDataPrefix("col_id"); if ("TD" == i.tagName && o.focusedTd != i && !this.focusedByApi) { var n, l, h, p, u, c, g = parseInt(i.getAttribute(s)), f = parseInt(g / this.realRowDataLength) + this.rowIndex, m = i.getAttribute(a); if (this.options.preventDuplicateFocusedCell && "linear" === this.options.focusFlow && (e = null != this.editedCell)) { var y = this.getCellInfo(this.editedCell.colID); n = y.editRowIndex, l = this._dataList.getColumnIndex(y.id), h = this.getColumnIndex(y.id), p = this.getRealRowIndex(n), u = this._dataList.dataArr[p * this._dataList.getColumnCount() + l], c = y.comp && y.comp.selectedIndex } if (this._setFocusedCell(f, m), e) { var b = this._dataList.dataArr[p * this._dataList.getColumnCount() + l]; if (0 === u && (u = "0"), 0 === b && (b = "0"), u != b) { var w = { oldValue: u, newValue: b, rowIndex: n, colIndex: h }; isNaN(c) || (w.oldSelectedIndex = c, w.newSelectedIndex = y && y.comp && y.comp.selectedIndex), d.B.fireEvent(this, "onviewchange", w) } } } this.focusedByApi = !1 }, g.prototype.handleDragSelectEvent = function(t) { if (!this._bindDrag) for (var e = this.body_table.offsetHeight, i = this.event.getTargetIterator(t); i.next();)if (i.match(this.options.bodyTdClass, null, "td")) { var o = this, s = i.getElement(); return void WebSquare.dragdrop.gDragManager.activate(t, this.render, { id: this.id + "_dragSelect", delay: 15, handleStart: function(t) { r.D.isIEAllVersion() && (r.D.emptySelection(), d.B.preventDefault(t)); var e, i, a, n, l, h, p = null != o.editedCell; if (p && (e = o.editedCell.editRowIndex, i = o._dataList.getColumnIndex(o.editedCell.id), a = o.getColumnIndex(o.editedCell.id), n = o._grid.getRealRowIndex(e), l = o._dataList.dataArr[n * o._dataList.getColumnCount() + i]), o.__setFocusedCell(t, s, { editMode: !1 }), p && l != (h = o._dataList.dataArr[n * o._dataList.getColumnCount() + i])) { var u = { oldValue: l, newValue: h, rowIndex: e, colIndex: a }; d.B.fireEvent(o, "onviewchange", u) } }, handleUpdate: function(t, i, s, a, r) { for (var n = null, l = null, h = o.event.getTargetIterator(r); h.next();) { if (h.match("w2grid")) { n = h.getElement().id; break } h.match(o.options.bodyTdClass, null, "td") && (l = h.getElement()) } var p = o.focusedCell[0]; o.options.dataDragSelectAutoScroll && p.focusedColIndex > -1 && o.dragSelectAutoScroll(d.B.getMouseY(r), e, d.B.getMouseX(r)), null != n && null != l && o.id == n && p.focusedColIndex > -1 && (l.className.indexOf("_rowNum") >= 0 || l.className.indexOf("_rowStatus") >= 0 || o.__setFocusedCell({ shiftKey: !0 }, l, { editMode: !1 })) }, handleFinish: function() { o.dragSelectAutoScrollFinish() } }) } }, g.prototype.handleDragEvent = function(t) {
					if ((!this.options.rowResize || !this.rowResizeStarted) && (!this.isDrillDown || this.drillDownDragDrop) && !this.editedCell && (0 != this.options.dataDragDrop || 0 != this.options.dataDragDropSelf)) for (var e = r.D.getDataPrefix("tdIndex"), i = r.D.getDataPrefix("col_id"), o = r.D.getDataPrefix("colindex"), a = r.D.getDataPrefix("index"), n = this.event.getTargetIterator(t); n.next();)if (n.match(null, null, "td")) {
						var l = n.getElement(), h = [], p = l.getAttribute(e); if (null == p) return
							; var u = this.rowIndex + parseInt(parseInt(p) / (this.oneRowDataLength + this.defaultColCnt)); "" == this.options.dragDisplayColumn ? h.push(l.getAttribute(i)) : h = this.options.dragDisplayColumn.split(","); for (var c = [], g = 0; g < h.length; g++) { var f; f = null == h[g] || null == h[g] ? (u + 1).toString() : this._getCellDisplayData(u, h[g].wq_trim()), c.push(f) } if (c = c.join(","), this.isMobile) { for (var m = d.B.getTarget(t); m && "TD" != m.tagName && "TH" != m.tagName && "DIV" != m.tagName;)m = m.parentNode; this.__setFocusedCell(t, m) } var y = this, b = {
								id: this.id + "_drag", component: y, className: "w2grid_drag", contents: c, delay: 15, applyMousePosition: !0, showNoData: !0, handleStart: function(t) { d.B.fireEvent(y, "ondatadragstart", u) }, onDragover: function(t, e, i, o, s, a, n) { if (t && e) { var l = null; for (l = y.isMobile ? new WebSquare.targetIterator(document.elementFromPoint(n.changedTouches[0].clientX, n.changedTouches[0].clientY)) : y.event.getTargetIterator(n); l.next();)if (l.match("w2grid") || l.match("w2grid_tooltip")) { if (l.match("w2grid_tooltip")) l.getElement().style.display = "none", l = new WebSquare.targetIterator(document.elementFromPoint(d.B.getClientX(n), d.B.getClientY(n))); var h = r.D.getComponentById(l.getElement().id); y.id != h.id && d.B.fireEvent(h, "ondatadragover", y.id, u), l.stop() } } }, onDrop: function(t, n, l, h, p, c, g) {
									var f, m = null, b = null, w = null, v = null, C = {}, I = null, _ = null; for (v = y.isMobile ? new WebSquare.targetIterator(document.elementFromPoint(g.changedTouches[0].clientX, g.changedTouches[0].clientY)) : y.event.getTargetIterator(g); v.next();) { if (v.match(null, null, "body")) return; if (v.match("w2grid")) { m = v.getElement().id; break } if (v.match("w2grid_tooltip")) v.getElement().style.display = "none", v = new WebSquare.targetIterator(document.elementFromPoint(d.B.getClientX(g), d.B.getClientY(g))); if (null == w && v.match(null, null, "td")) { var x = v.getElement(); w = parseInt(x.getAttribute(e), 10), "number" != typeof (f = parseInt(x.getAttribute(o), 10)) && (f = void 0) } if (v.match("w2treeview") || v.match("w2treeview_virtual") || v.match("w2input") || v.match("w2textarea") || y.options.dataDragDropClass && v.match(y.options.dataDragDropClass)) { I = v.getElement().id; break } (v.match("w2treeview_node") || v.match("treeview_virtual_node")) && (_ = v.getElement().getAttribute(a)) } if ((!y.options.dataDragDropSelf || y.id === m) && (!y.options.dataDragDropOther || y.id != m) && (null != m && (b = (m = r.D.getComponentById(m)).getDataLength(), null != w && (b = m.rowIndex + parseInt(w / (m.oneRowDataLength + m.defaultColCnt)))), null != I && (I = r.D.getComponentById(I)), m || I)) {
										var S, D, R = m && "" == m.options.dragEndFunction && "" == y.options.dragStartFunction; if (y.focusedCell.length > 1 && (y.options.dataDragDropClass || R)) { V = [], W = []; for (var L = 0; L < y.focusedCell.length; L++) { var T = y.focusedCell[L].focusedRowIndex; W.push(T) } W.sort((function(t, e) { return t - e })); for (L = 0; L < W.length; L++)for (var k = y.dataList.getRowArray(W[L]).data, A = 0; A < k.length; A++)V.push(k[A]) } else S = y.dataList.getRowArray(u).data; var F = t.getAttribute(i), E = y.getColumnIndex(F); if ("" != y.options.dragStartFunction) { var M = r.D.getGlobalFunction(y.options.dragStartFunction, y.scope_id); if ("function" == typeof M) if (y.drillDownDragDrop) { var O, N; y.getRowCount() <= b ? (O = void 0, N = void 0) : (O = y.getRealRowIndex(b), N = y.dataList.getRowData(b)); var B = [j = y.getRealRowIndex(u)].concat(y.drilldown.getRecursiveRowIndex(j)), G = []; for (L = 0; L < B.length; L++)G = G.concat(y.dataList.getRowData(y.getDisplayRowIndex(B[L]))); if (!M.call(y, { parentRowIndex: O, parentRowData: N, beforeRemoveData: G, beforeRemoveRowIndex: B })) return } else { var H = { fromColumnId: F, fromColumnIndex: E }; null == D && (D = y.dataList.getRowXML(u)), D = M.call(y, u, D, H) } } else if (m && y.id !== m.id && y.drillDownDragDrop) { var W = [j = y.getRealRowIndex(u)].concat(y.drilldown.getRecursiveRowIndex(j)), V = []; for (L = 0; L < W.length; L++)V = V.concat(y.dataList.getRowData(y.getDisplayRowIndex(W[L]))) } if (m && "" != m.options.dragEndFunction) {
											var q = r.D.getGlobalFunction(m.options.dragEndFunction, m.scope_id); if ("function" == typeof q) if (y.drillDownDragDrop) {
												if (y.id == m.id) {
													if (y.isDrillDown && b != u) {
														var j = y.getRealRowIndex(u); if (y.getRowCount() <= b) y.drilldown.bodyDrop = !0,
															X = (K = y.getRealRowIndex(b - 1)) + y.drilldown.getRecursiveRowCount(K); else X = y.getRealRowIndex(b) + 1; var P = [j].concat(y.drilldown.getRecursiveRowIndex(j)), z = y.drilldown.moveNode(j, X), U = [z.insertedRowIndex].concat(y.drilldown.getRecursiveRowIndex(z.insertedRowIndex)); C = { removedData: z.detachedData, removedRowIndex: P, insertedData: z.insertedData, insertedRowIndex: U, fromRowIndex: j, toRowIndex: U[0] }, q.call(y, X, y.dataList.getRowXML(u), C)
													}
												} else if (m.drillDownDragDrop && m.isDrillDown) { j = y.getRealRowIndex(u); if (m.getRowCount() <= b) m.drilldown.bodyDrop = !0, X = (K = m.getRealRowIndex(b - 1)) + m.drilldown.getRecursiveRowCount(K); else X = m.getRealRowIndex(b); for (B = [j].concat(y.drilldown.getRecursiveRowIndex(j)), G = [], L = 0; L < B.length; L++)G = G.concat(y.dataList.getRowData(y.getDisplayRowIndex(B[L]))); D = y.dataList.getRowXML(u), C = { removedData: B, removedRowIndex: P, fromRowIndex: j, toRowIndex: X }, q.call(y, X, D, C) && y._dataList.removeRow(j) }
											} else { H = { fromColumnId: F, fromColumnIndex: E, toColumnId: "number" == typeof f ? m.getColumnID(f) : void 0, toColumnIndex: f }; !0 !== s.v.isXML(D) && (D = y.dataList.getRowXML(u)), q.call(y, b, D, H) && y.dataList.removeRow(u) }
										} else if (m) { if (y.isDrillDown) if (y.id == m.id && b != u) { if (y.drillDownDragDrop) { j = y.getRealRowIndex(u); if (y.getRowCount() <= b) y.drilldown.bodyDrop = !0, X = (K = y.getRealRowIndex(b - 1)) + y.drilldown.getRecursiveRowCount(K); else X = y.getRealRowIndex(b) + 1; return void y.drilldown.moveNode(j, X) } } else if (m.drillDownDragDrop && m.isDrillDown) { var X, K; j = y.getRealRowIndex(u); if (m.getRowCount() <= b) m.drilldown.bodyDrop = !0, X = (K = m.getRealRowIndex(b - 1)) + m.drilldown.getRecursiveRowCount(K); else X = m.getRealRowIndex(b) + 1; for (G = [], L = (B = [j].concat(y.drilldown.getRecursiveRowIndex(j))).length - 1; L >= 0; L--)G = G.concat(y.dataList.getRowData(y.getDisplayRowIndex(B[L]))); return m.drilldown.appendNode(X, G), void y.dataList.removeRow(j) } var Z = m._dataList.getBroadcast(); if (m._dataList.setBroadcast(!1), V && W) { var Y = -1; if (y.id == m.id) for (L = 0; L < W.length; L++)W[L] < b && Y++; Y = Math.max(0, Y); var $ = m.dataList.getRealRowIndex(b), J = {}; if (y.options.dataDragDropStatus) for (var Q = 0; Q < W.length; Q++)J[Q] = y.dataList.getRowStatus(W[Q]); y.dataList.removeRows(W), void 0 === $ && ($ = b, Y = 0); var tt = $ - Y; y.id == m.id && (tt = Math.min(tt, y.getRowCount())), m._dataList.insertData(tt, V); var et = 0; if (y.options.dataDragDropStatus) { for (var it in J) { var ot = tt + et, st = y._dataList.options.depthColumn ? ot : y._dataList.getRealRowIndex(ot); y._dataList._setRowStatus(st, J[it]), et++ } y.setFocusedMultiCell(tt, 0, tt + et - 1, 0) } y.id === m.id ? y._moveCellVisible(W, tt, { remove: !0, insert: !0 }) : (y._moveCellVisible(W, tt, { remove: !0 }), m._moveCellVisible(W, tt, { insert: !0 })) } else { var at = y.dataList.getRowStatus(u); if (y.dataList.removeRow(u), !0 === s.v.isXML(D) ? m.dataList.setRowXML(b, D) : m.dataList.setRowData(b, S), y.options.dataDragDropStatus) { st = y._dataList.options.depthColumn ? b : y._dataList.getRealRowIndex(b); y._dataList._setRowStatus(st, at), y.setFocusedCell(st, 0) } y.id === m.id ? y._moveCellVisible([u], b, { remove: !0, insert: !0 }) : (y._moveCellVisible(W, tt, { remove: !0 }), m._moveCellVisible(W, tt, { insert: !0 })) } !1 !== Z && m._dataList.setBroadcast(!0, !0, { gridView: [{ keepTop: !0 }] }), y.id != m.id ? (y.removeFocusedCell(), d.B.fireEvent(m, "ondatadrop", { fromId: y.id, fromRowIndex: u, toRowIndex: b })) : d.B.fireEvent(m, "ondatadropself", { id: y.id, fromRowIndex: u, toRowIndex: b }), t.blur() } else if (I) { var rt; null != _ && (rt = I.tree.findNodeByIndex(_), _ = parseInt(_, 10)), d.B.fireEvent(I, "ondropfromgrid", { dataListId: y._dataList.id, fromId: y.id, fromRowIndex: u, value: this.contents, dropNode: rt, toRowIndex: _, rowIndexArr: W || [u] }), y.removeFocusedCell(), t.blur() }
									}
								}
							}; return this.isMobile && (b.passive = !1, b.showGhostOnActivate = !0, b.ghostRightTop = !0, b.delay = 0), void WebSquare.dragdrop.gDragManager.activate(t, l, b)
					}
				}, g.prototype.dragSelectAutoScroll = function(t, e, i) { try { this._dragSelectAutoScrollStartTime = new Date, r.D.setInterval((function(t, e, i) { this._dragSelectAutoScroll(t, e, i) }), { key: this.id + "_dragSelectAutoScroll", caller: this, delay: this.options.dataDragSelectAutoScrollPeriod, args: [t, e, i] }) } catch (t) { a.w.printStackTrace(t, null, this) } },
					g.prototype._dragSelectAutoScroll = function(t, e, i) { try { var o = 0, s = this.getRowCount(), n = null == this.lastTopRowIndex ? s - this.lastIndex : this.lastTopRowIndex, l = WebSquare.style.getAbsoluteTop(this.render), h = l + e, d = 1; if (t > h ? o = t - h : l > t && (o = l - t, d = -1), 0 !== o) { var p = new Date - this._dragSelectAutoScrollStartTime, u = Math.floor(p / this.options.dataDragSelectAutoScrollLevel), c = Math.pow(2, u), g = Math.ceil(o * this.options.dataDragSelectAutoScrollDPI / 100) * c * d, f = Math.max(Math.min(this.rowIndex + g, n - 1), 0); this.rowIndex !== f && (this.scrollEvent = !1, this.checkScrollEnd = !0, this.rowIndex = f, this.fastDrawData(0, { scroll: !0 }), this._dragSelectAutoScrollFlag = !0, document.getElementById(this.id + "_scrollY_div").scrollTop = this.oneRowScrollHeight * this._getScrollRowIndex(f)) } for (var m = 0, y = WebSquare.style.getAbsoluteLeft(this.render), b = y + this.render.offsetWidth, w = 0; w < this.defaultColCnt; w++)y += this.colWidthList[w]; d = 1; if (i > b ? m = i - b : y > i && (m = y - i, d = -1), 0 !== m) { var v = r.D.getDataPrefix("tdIndex"), C = this.focusedCell[0], I = this.getLastFocusedCell().focusedTd, _ = parseInt(I.getAttribute(v)), x = parseInt(_ / this.realRowDataLength), S = C.focusedRowIndex, D = C.focusedColIndex, R = x + this.rowIndex, L = _ % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength); L = d < 0 ? Math.max(0, L - 1) : Math.min(this.oneRowDataLength - 1, L + 1), this._applyFocusedMultiCell(S, D, R, L), d < 0 ? this.fixScrollLeftDirection() : this.fixScrollRightDirection() } } catch (t) { a.w.printStackTrace(t, null, this) } }, g.prototype.dragSelectAutoScrollFinish = function() { try { if (r.D.clearInterval(this.id + "_dragSelectAutoScroll"), !0 !== this._dragSelectAutoScrollFlag) return; this._dragSelectAutoScrollFlag = !1, this._dragSelectAutoScrollStartTime = 0; var t = r.D.getDataPrefix("tdIndex"); s.v.setTimer((function() { var e = this.focusedCell[0], i = this.getLastFocusedCell().focusedTd, o = parseInt(i.getAttribute(t)), s = parseInt(o / this.realRowDataLength), a = e.focusedRowIndex, r = e.focusedColIndex, n = s + this.rowIndex, l = o % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength), h = null == this.lastTopRowIndex ? this.getRowCount() - this.lastIndex : this.lastTopRowIndex, d = a <= n ? 1 : -1, p = Math.max(Math.min(this.rowIndex + d, h), 0); this.drawData(p, 0), this._applyFocusedMultiCell(a, r, n, l) }), { key: this.id + "__dragSelectAutoScroll_drawData", caller: this, delay: this.options.dataDragSelectAutoScrollDelay }) } catch (t) { a.w.printStackTrace(t, null, this) } }, g.prototype.otherClickEvent = function() { try { this.isMobile ? (this.event.addListener(document.documentElement, "ontouchstart", this.event.bindAsEventListener(this, this.handleClickEventDocument)), this.options.tooltipDisplay && this.hideTooltip()) : WebSquare.getBody().getLayerListener().addListener({ component: this, event: {}, otherClick: this.handleClickEventDocument, frameClick: this.handleClickEventFrame }) } catch (t) { } }, g.prototype.handleClickEventFrame = function(t) { try { this.editedCell && this._fireOnviewchange(this.editedCell.id, "handleEndEdit", [t, !1, !0]), this.options.tooltipDisplay && this.isMobile && this.hideTooltip(), this.hideContextMenu(), this.groupbyFilterList && this.hideGroupbyFilterList(), this.options.focusAutoRemove && this.removeFocusedCell() } catch (t) { a.w.printStackTrace(t) } }, g.prototype.handleClickEventDocument = function(t) { this.lastEvent = t, this.isHammerEnabled() && this.hideTooltip(), this.event.isMe(t, this.render) || this.isMine(t) ? this.handleClickEventDocumentAfter(t) : (this.editedCell ? this._fireOnviewchange(this.editedCell.id, "handleEndEdit", [t, !1, { otherClick: !0 }], { beforeFunc: function(t, e) { t.handleClickEventDocumentAfter(e); var i = WebSquare.getBody(); i.layerListener.handleMouseDownEventDocument.call(i, e), i = null }, beforeFuncArgs: [this, t] }) : this.handleClickEventDocumentAfter(t), this.options.tooltipDisplay && this.isMobile && (this.hideTooltip(), t.srcElement.id == this.id + "_tooltip" && d.B.stopEvent(t))) }, g.prototype.handleClickEventDocumentAfter = function(t) {
						if (this.contextMenu) { var e = d.B.getTarget(t); e && e.className.match("contextMenu") || this.hideContextMenu() } if (this.groupbyFilterList || this.customFilterScrollView) {
							var i = this.event.getTargetIterator(t, this.render), o = !0
							; if (this.customFilterScrollView && this.customFilterScrollView.render && "none" == this.customFilterScrollView.render.style.display) o = !1; else for (; i.next();)if (i.match("gridHeaderTDDefault") || i.match("w2grid_groupbyZone_scrollView") || i.match("w2grid_groupbyZone_column") || i.match("w2grid_customFilter_scrollView") || i.match("w2grid_customFilter_column")) { o = !1; break } o && this.hideCustomFilterList()
						} if (this.options.groupbyZone && this.options.groupbyFilterBox) for (i = this.event.getTargetIterator(t, this.render), o = !0; i.next();)if (i.match("w2grid_filterBox_select_tbody") || i.match("w2grid_filterBox_itemTable")) { o = !1; break } if (this.groupbyFilterList) { for (i = this.event.getTargetIterator(t, this.render), o = !0; i.next();)if (i.match("w2grid_groupbyZone_list") || i.match("w2grid_groupbyZone_column") || i.match("gridHeaderTDDefault")) { o = !1; break } o && this.hideGroupbyFilterList() } this.options.focusAutoRemove && this.removeFocusedCell()
					}, g.prototype.isMine = function(t) { try { for (var e = d.B.getTarget(t); null != e;) { if (e.id && e.id.indexOf && e.id.indexOf("G_" + this.id + "__") >= 0) return !0; e = e.parentNode } return !1 } catch (t) { a.w.printStackTrace(t) } }, g.prototype.handleResize = function() { try { var t = this.render.offsetWidth, e = this.render.offsetHeight; if (t > 0 && e > 0) if (this.delayedDrawObj) this.resizeObj = { width: t, height: e, scrollLeft: this.resizeObj.scrollLeft, scrollTop: this.resizeObj.scrollTop, clientWidth: this.resizeObj.clientWidth }, this.setRedrawStatus("draw"); else { var i = t - this.resizeObj.width, o = e - this.resizeObj.height, n = !1, l = this.hiddenCellObj.length > 0; if (o > 0) { if (this.options.adaptive) { var h = parseInt(this.options.adaptiveThreshold) || 480; if (!(r.D.isIE() && parseInt(s.v.browserVersion(), 10) < 10) && parseInt(top.document.documentElement.clientWidth || top.document.body.clientWidth) <= h) return } this._setGridHeightBefore(), n = !0; var d = this.getDataLength(), p = this.drawedRowLength; this.lastTopRowIndex = null, this.setDataTable(), this.setScrollYHeight(); var u = this._getVisibleLastIndex(this.lastIndex + 1); if (d <= 0); else if (this.rowIndex + u - 1 + this.drawedRowLength - p < d) { var c = d - this.drawedRowLength + 1, g = this.rowIndex; this.rowIndex + 1 > c && c >= -1 && (g = c >= 0 ? c : 0), l ? (this.rowIndex = g, this._setCellVisibleRefresh()) : this.drawData(g) } else { var f; if ((g = d - this.drawedRowLength > 0 ? d - this.drawedRowLength : 0) == this.rowIndex) f = u - 1; else this.scrollEvent = !1, this.checkScrollEnd = !0, this.getElementById(this.id + "_scrollY_div").scrollTop = this.oneRowScrollHeight * this._getScrollRowIndex(g); l ? (this.rowIndex = g, this._setCellVisibleRefresh()) : this.drawData(g, f) } this._setGridHeightAfter() } else if (o < 0 && "all" != this.options.visibleRowNum) { this._setGridHeightBefore(), this._setGridHeightAfter(), n = !0; var m = this.getElementById(this.id + "_body_table"); this.dataLayerHeight = m.parentNode.offsetHeight; var y = Number(this.options.visibleRowNum), b = this.getVisibleRowNum(); l ? this._setCellVisibleRefresh() : (!isNaN(y) && y > 0 && y >= b || (this.lastTopRowIndex = null, this.cutGridBottom(this.lastIndex)), this.setScrollYHeight()) } 0 != i && (n = !0, this.resizeObj.clientWidth = this.render.clientWidth, this.setScrollYHeight(), this.options.autoFit || this.setOverflowX(), this._handleScrollX(), this.options.autoFit && this.autoFitFunc(), l && this._setCellVisibleRefresh()), n && this.groupbyZoneStatus.groupbyZoneRender && this.resizeGroupbyZone() } else this.setRedrawStatus("stop"); this.groupbyZoneStatus.groupbyZoneRender && !this.adjustGroupbyZone && (this.adjustGroupbyZone = !0, this.resizeGroupbyZone()), this.resizeObj = { width: t, height: e, scrollLeft: this.resizeObj.scrollLeft, scrollTop: this.resizeObj.scrollTop, clientWidth: this.resizeObj.clientWidth }, this.resizeObj.width > 0 && this.resizeObj.height > 0 && (this.resizeObj.scrollLeft = this.getElementById(this.id + "_scrollX_right").scrollLeft, this.resizeObj.scrollTop = this.getElementById(this.id + "_scrollY_div").scrollTop) } catch (t) { a.w.printStackTrace(t, null, this) } }, g.prototype.resizeGroupbyZone = function() {
						if (this.groupbyZoneStatus.groupbyZoneRender) {
							var t = this.resizeObj.clientWidth - this.groupbyZoneStatus.groupbyZoneBorder, e = this.dom[this.id + "_scrollY_div"].offsetWidth; 0 != e && (t -= e), t += "px",
								this.groupbyZoneStatus.groupbyZoneRender.style.width != t && (this.groupbyZoneStatus.groupbyZoneRender.style.width = t)
						}
					}, g.prototype.checkPercent = function() { var t = WebSquare.WebSquareparser.getAttribute(this.element, "style"); if (t.indexOf("%") > 0) for (var e = t.split(";"), i = 0; i < t.length; i++)if (e[i].indexOf("%") && e[i].indexOf("height") || e[i].indexOf("%") && e[i].indexOf("width")) { this.checkResize(); break } }, g.prototype.checkResize = function() { try { if (this.render) { var t = !0; if (WebSquare.getBody().modalStack && WebSquare.getBody().modalStack.length > 0 && this.getDisabled()) { for (var e = this.parentControl; e && (!e.options || !("floatingLayer" == e.options.pluginName || "wframe" === e.options.pluginName && e._isWframePopup));)e = e.parentControl; null == e && (t = !1) } t && !this.startedDisplayNone && this.handleResize() } } catch (t) { a.w.printStackTrace(t, null, this) } }, g.prototype.handleDblClickEvent = function(t) { for (var e = this.event.getTargetIterator(t, this.render); e.next();) { if (e.match(this.options.bodyTdClass) || WebSquare.idToUUID[e.getElement().getAttribute("id")]) { this.bodyDblClick(t, e.getElement()); break } if (e.match(this.options.headerTdClass)) { this.headerDdlClick(t, e.getElement()); break } if (this.hasFooter && e.match(this.options.footerTdClass)) { this.footerDblClick(t, e.getElement()); break } if (this.hasSubtotal) { if (this.subtotalClassList) { for (var i = !1, o = 0; o < this.subtotalClassList.length; o++)if (this.subtotalClassList[o].length > 0 && e.match(this.subtotalClassList[o])) { this.subtotalDblClick(t, e.getElement()), i = !0; break } if (i) break } else if (e.match(this.options.subtotalTdClass)) { this.subtotalDblClick(t, e.getElement()); break } } else e.match("w2grid_customFilter_sortable_open") && (d.B.stopEvent(t), e.stop()) } }, g.prototype.handleClickEvent = function(t) { if (this.lastEvent = t, d.B.fireEvent(this, "onclick", t), !(this.isMobile && this.iScroll && this.iScroll.moveDirection && this.iScroll.moveDistance > 10)) { var e, i, o, s, a, r, n, l = this.event.getTargetIterator(t, this.render), h = null != this.editedCell; h && (e = this.editedCell.editRowIndex, i = this._dataList.getColumnIndex(this.editedCell.id), n = this.getCellInfo(this.editedCell.id), o = this.getColumnIndex(this.editedCell.id), s = this._grid.getRealRowIndex(e), a = this._dataList.dataArr[s * this._dataList.getColumnCount() + i], r = n.comp && n.comp.selectedIndex); for (var p = function(t, e) { var i = !1; if (e.subtotalClassList) for (var o = 0; o < e.subtotalClassList.length; o++)if (e.subtotalClassList[o].length > 0 && t.match(e.subtotalClassList[o])) { i = !0; break } return i }; l.next();) { if (l.match(this.options.bodyTdClass)) { this.bodyClick(t, l.getElement()); break } if (l.match(this.options.headerTdClass)) { this.headerClick(t, l.getElement()), h && null == this.editedCell && (e = this.getDisplayRowIndex(s)); break } if (this.hasFooter && l.match(this.options.footerTdClass)) { this.footerClick(t, l.getElement()); break } if (this.hasSubtotal && (l.match(this.options.subtotalTdClass) || p(l, this))) { this.subtotalClick(t, l.getElement()); break } if (this.isMine(t)); else { if (l.match(this.options.headerTableClass)) break; if (l.getElement().getAttribute("id") == this.id + "_dataLayer") { null != this.editedCell && this.editedCell.handleEndEdit(), d.B.fireEvent(this, "onblankclick", t); break } } } if (h) { var u = this._dataList.dataArr[s * this._dataList.getColumnCount() + i]; if (0 === a && (a = "0"), 0 === u && (u = "0"), a != u) { var c = { oldValue: a, newValue: u, rowIndex: e, colIndex: o }; isNaN(r) || (c.oldSelectedIndex = r, c.newSelectedIndex = n && n.comp && n.comp.selectedIndex), d.B.fireEvent(this, "onviewchange", c) } } } }, g.prototype.gridDataLayerOut = function(t) { this.overElem && (this.options.rowMouseOver && this.removeRowOverStyle(this.overElem.parentNode), this.bodyOut(t, this.overElem), this.overElem = null) }, g.prototype.gridHeaderOver = function(t) { this.overElem && (this.options.rowMouseOver && this.removeRowOverStyle(this.overElem.parentNode), this.bodyOut(t, this.overElem), this.overElem = null) }, g.prototype.gridOver = function(t) {
						for (var e = r.D.getDataPrefix("colIndex"), i = r.D.getDataPrefix("col_id"), o = d.B.getTarget(t); o && ("TD" != o.tagName || null == o.getAttribute(e) || !(this.hasClass(o, this.options.bodyTdClass) || this.hasClass(o, this.options.subtotalTdClass) || this.hasClass(o, this.options.footerTdClass)));) { if ("TD" == o.tagName && null != o.getAttribute(e) && this.subtotalClassList) { for (var s = !1, a = 0; a < this.subtotalClassList.length; a++)if (this.subtotalClassList[a].length > 0 && this.hasClass(o, this.subtotalClassList[a])) { s = !0; break } if (s) break } if (this.options.tooltipHeader && "TH" == o.tagName && null != o.getAttribute(e)) break; if ("DIV" == o.tagName && o.getAttribute("id") == this.id + "_dataLayer") break; if ("TABLE" == o.tagName && o.getAttribute("id") == this.id + "_foot_table") break; if ("TH" == o.tagName && this.hasClass(o, this.options.headerTdClass)) break; o = o.parentNode } if (o.id == this.id + "_dataLayer") this.overElem && (this.removeRowOverStyle(this.overElem.parentNode), this.bodyOut(t, this.overElem), this.overElem = null); else if (o.id == this.id + "_foot_table") this.overElem && (this.bodyOut(t, this.overElem), this.overElem = null); else if (o && "TD" == o.tagName) { if (this.overElem != o && -1 == o.className.indexOf(this.options.headerTdClass)) { this.bodyOut(t, this.overElem), (this.options.tooltipDisplay || this.options.rowStatusTooltipDisplay) && this.bodyOver(t, o), this.options.rowMouseOver && (this.overElem && "TD" == this.overElem.tagName && this.removeRowOverStyle(this.overElem.parentNode), this.hasClass(o, "w2grid_groupby") || this.addRowOverStyle(o.parentNode)), this.overElem = o; var n = {}; o.getAttribute(i) && (n.rowIndex = this._getGroupbyDisplayRowIndex(this.getElemRowIndex(o)), n.colIndex = this.getColumnIndex(o.getAttribute(i))), d.B.fireEvent(this, "onbodymouseover", n) } } else o && "TH" == o.tagName && this.overElem != o && (this.bodyOut(t, this.overElem), (this.options.tooltipHeader || this.options.headerTooltipDisplay) && this.headerOver(t, o), this.options.rowMouseOver && this.overElem && "TD" == this.overElem.tagName && this.removeRowOverStyle(this.overElem.parentNode), this.overElem = o)
					}, g.prototype.gridOver1 = function(t) { var e = d.B.getTarget(t); ("NOBR" == e.tagName || "SPAN" == e.tagName && e.className.indexOf("w2grid_span") > -1) && (e = e.parentNode), void 0 !== e.tagName && "TD" == e.tagName && (this.options.rowMouseOver && (this.overElem && this.removeRowOverStyle(this.overElem.parentNode), this.addRowOverStyle(e.parentNode)), this.overElem = e) }, g.prototype.gridOver2 = function(t) { var e = d.B.getTarget(t); ("NOBR" == e.tagName || "SPAN" == e.tagName && e.className.indexOf("w2grid_span") > -1) && (e = e.parentNode), void 0 !== e.tagName && "TD" == e.tagName && (this.options.rowMouseOver && (this.overElem, this.addRowOverStyle(e.parentNode)), this.overElem = e) }, g.prototype.handlePasteEvent = function(t) {
						try {
							var e = this.options.preventPasteColumn, i = e ? e.split(",") : []; if (this.options.preventPaste && !this.editedCell || d.B.getTarget(t) && d.B.getTarget(t).getAttribute("class") && d.B.getTarget(t).getAttribute("class").indexOf("w2grid_head_input") > -1) return; if (!1 === d.B.fireEvent(this, "oncustompaste", t)) return; var o, n, l, h = r.D.isIEAllVersion() ? window.clipboardData : t.clipboardData, p = h.getData("Text"); if (1 == this.options.ctrlShiftKey && (o = h.getData("Nofocus")), "\r\n" == p.slice(-2) ? p = p.slice(0, p.length - 2) : "\n" == p.slice(-1) && (p = p.slice(0, p.length - 1)), this.options.customPasteFormatter) if ("string" == typeof this.options.customPasteFormatter) { var u = r.D.getGlobalFunction(this.options.customPasteFormatter.wq_trim(), this.scope_id); if ("function" == typeof u) { var c = u.call(this, p); p = c || p } } else $l("customPasteFormatter의 type은 string이어야 합니다."); if ("native" === this.options.copyType ? n = [[p]] : (1 == this.options.ctrlShiftKey && (l = Papa.parse(o, { delimiter: "\t" }).data), n = Papa.parse(p, { delimiter: "\t" }).data), r.D.isIEAllVersion("6 7") && '"' === p.slice(0, 1) && '"' === p.slice(-1) && -1 == p.slice(1, -1).indexOf("\t") && (n = [[p.slice(1, p.length - 1)]]), !n || null == n || "undefined" == n) return; if (this.focusedCell.length > 0) {
								for (var g, f = this.getColumnOrder(), m = this.htmlInfo.body.rowAttrArr.length, y = this.getDataLength() * m, b = 0, w = f.length, v = 0, C = null, I = 0, _ = 0; _ < this.focusedCell.length; _++) {
									var x = this.focusedCell[_], S = x.focusedRowIndex, D = x.focusedColIndex, R = this.getLocationRowCol(S, D); S = R.rowIndex, D = R.colIndex, I += R.rowSize * R.colSize - 1, y > S && (y = S), b < S + R.rowSize - 1 && (b = S + R.rowSize - 1), w > D && (w = D), v < D + R.colSize - 1 && (v = D + R.colSize - 1), y == S && w == D && (C = x)
								} var L = 0; for (_ = this.defaultColCnt + w; _ < this.defaultColCnt + v; _++)1 == this.hiddenList[_] && (L += 1); if (this.focusedCell.length > 1 && this.focusedCell.length + I != (b - y + 1) * (v - w - L + 1)) return; var T = !1; if (I > 0 && (T = !0), g = { focusedRange: { minRow: y, maxRow: b, minCol: w, maxCol: v }, startCell: C }, C.focusedRowIndex >= 0 && C.focusedColIndex >= 0) {
									var k = C.focusedTd; if (k) { var A = r.D.getDataPrefix("col_id"), F = r.D.getDataPrefix("colMerged"), E = k.getAttribute(A); if (null == E || "" == E.wq_trim()) return; if ("1" == k.getAttribute(F)) return } else { var M = this.getCellInfo(C.focusedColIndex); if (M && (M.options.colMerge || M.options.colMergeAnd)) return } var O = y, N = w, B = this.getOriginalRowCol(y, w), G = (D = B.colIndex, S = B.rowIndex, this.getTotalRow()), H = (this.getTotalCol(), G * m), W = f.length; if (this.options.checkBlankRowOnPaste) for (_ = n.length - 1; _ > -1; _--) { for (var V = !0, q = 0; q < n[0].length; q++)if ("" != n[_][q].wq_trim()) { V = !1; break } V && n.splice(_, 1) } if (!1 === d.B.fireEvent(this, "onbeforepaste", { rowIndex: this._getGroupbyDisplayRowIndex(S), colIndex: D, data: n.slice(0) })) return; this.isPaste = !0; var j, P = this, z = function(t) { for (var e = P.defaultColCnt + t; e < P.hiddenList.length; e++)if (0 == P.hiddenList[e]) return e - P.defaultColCnt }, U = this.uuid, X = !1, K = function(t) {
										var e = WebSquare.idCache[U], o = e.options.checkReadOnlyOnPasteEnable, s = o ? o.split(",") : []; if (O + n.length > H && !r.D.getBoolean(P.options.preventAddRowOnPaste) && "focus" !== P.options.pasteOption) { var a = Math.ceil((O + n.length - H) / m), h = Array(P._dataList.getTotalCol() * a); if ("" != P.depthColumn) for (var p = P._dataList.getCellInfo(P.depthColumn).options.defaultValue, u = 0; u < a; u++)h[u * P._dataList.getTotalCol() + P._dataList.getColumnIndex(P.depthColumn)] = p; if (P.options.setDefaultValueOnPaste) { var c = P._dataList.getTotalCol(); for (u = 0; u < c; u++)for (var g = P._dataList.getCellInfo(u).options.defaultValue, f = 0; f < a; f++)h[f * c + P._dataList.getColumnIndex(u)] = g } if (P.options.checkReadOnlyOnPaste) { var C = !0, I = !1; for (u = 0; u < n.length; u++) { var _ = N, x = O + u; for (f = 0; f < n[0].length && !(null == _ || _ >= W); f++) { var S = (k = P.getOriginalRowCol(x, _)).colIndex, D = k.rowIndex; I = !1; for (var R = 0; R < s.length; R++)if (s[R] == e.getColumnID(S)) { I = !0; break } if (!P.___getEditReadOnly(D, S) || P.___getEditReadOnly(D, S) && I) { C = !1; break } _ = z(_ + 1) } } if (C) return } if (P.options.checkDisabledOnPaste) { var L = !0; for (u = 0; u < n.length; u++)for (_ = N, x = O + u, f = 0; f < n[0].length && !(null == _ || _ >= W); f++) { var k; S = (k = P.getOriginalRowCol(x, _)).colIndex, D = k.rowIndex; if (!P._getEditDisabled(D, S)) { L = !1; break } _ = z(_ + 1) } if (L) return } if (h.length > 0) { X = !0, P._dataList.setData(h, !0); u = 0; for (var A = a, F = new Array(a); u < A; u++)F[u] = "C"; j = F.length, P._dataList.rowStatusArr = P._dataList.rowStatusArr.slice(0, G).concat(F) } } var E = function(o, a, h) {
											for (var p = function(t, e, i, o) { var s = P.data_td_list[e + (t - P.rowIndex) * P.oneRowDataLength]; if (t < P.rowIndex && (s = null), !(P.groupbyStatus.grouped && s && P.hasClass(s, "w2grid_groupby"))) { var a = P.getCellInfo(e), r = P._getRealColIndex("body", a.options.col_id) + P.defaultColCnt; if (!a.options.blockSelect && !P.hiddenList[r]) { if (1 == P.options.ctrlShiftKey) if ("true" != (l[o].length > 1 ? l[o][e] : l[o])) return; var n = { focusedTd: s, focusedRowIndex: t, focusedColIndex: e }; P.options.groupbyDisplayRowIndex && (n.groupbyDisplayRowIndex = P._getGroupbyDisplayRowIndex(t)), i ? P.focusedCell.push(n) : P.focusedCell.unshift(n), null != s && P.applyFocusedCellIn(s, i) } } }, u = o, c = 0; c < n.length; c++) {
												for (var g = a, f = 0; f < n[c].length && !(null == g || g >= W); f++) {
													var y = P.getOriginalRowCol(u, g), b = y.colIndex, w = y.rowIndex; if (y.noLeftTop) y.leftCell && (g = z(g + y.colSize)); else {
														1 == P.options.ctrlShiftKey ? p(w, b, !0, c) : p(w, b, !0); for (var v = !1, C = 0; C < s.length; C++)if (s[C] == e.getColumnID(b)) { v = !0; break } if (P.options.checkReadOnlyOnPaste && P.___getEditReadOnly(w, b) && !v) g = z(g + y.colSize); else if (P.options.checkDisabledOnPaste && P._getEditDisabled(w, b)) g = z(g + y.colSize); else {
															var I = !1; for (C = 0; C < i.length; C++)if (i[C] == e.getColumnID(b)) {
																g = z(g + y.colSize), I = !0; break
															} if (!I && !(r.D.getBoolean(P.options.preventAddRowOnPaste) && P.dataList.getRowCount() * m - 1 < w || "focus" === P.options.pasteOption && (g > t.focusedRange.maxCol || g < t.focusedRange.minCol || u > t.focusedRange.maxRow || u < t.focusedRange.minRow))) {
																var _, x = b, S = P.tdIdList[x], D = P._dataList.getColumnIndex(S), R = P._dataList.dataArr[P.getRealRowIndex(w) * P._dataList.getColumnCount() + D], L = n[c][f]; 1 == P.options.ctrlShiftKey && (_ = l[c][f]); var T = P.getCellInfo(x), k = !(!P.isDrillDown || !P._dataList.options.depthColumn) ? P.getRealRowIndex(w) : w; if ("number" != T.options.dataType && "float" != T.options.dataType || "." !== (L = L.wq_trim()) && "-" !== L && "+" !== L) {
																	if ((T.options.selectedDataOnPaste || P.options.selectByLabel) && ("autoComplete" === T.options.inputType || "select" === T.options.inputType)) { var A, F = T.getItemArray(), E = T.dataComp; if (T.existGridViewItemsetNode || "gridViewItemset" === T.options.itemTableType) { var M = T.itemsetObj.nodeset; M.indexOf("data:") >= 0 && (E = M.slice("data:".length)) } if (E && (A = T.mainGrid.modelControl.getDataComp(E)), A && (!F || 0 == F.length || 1 == F.length && (!0 === T.options.chooseOption || !0 === T.option.allOption) || 2 == F.length && !0 === T.options.chooseOption && !0 === T.option.allOption)) { var O = A.bodyIdColIndexMap[T.itemsetObj.label], N = A.bodyIdColIndexMap[T.itemsetObj.value], B = A.cellIdList.length, G = A.filteredRowIndexArr.length; if (F = [], A && "linkedDataList" === A.initializeType && null != A.conditionInfo && A.conditionInfo.filterInfo.useRef) for (var H = 0; H < A._dataList.getDataLength(); H++) { (V = {}).label = A._dataList.dataArr[H * B + O], V.value = A._dataList.dataArr[H * B + N], F[H] = V } else for (C = 0; C < G; C++) { var V = {}; "linkedDataList" != A.initializeType && A.dataArr ? (V.label = A.dataArr[A.filteredRowIndexArr[C] * B + O], V.value = A.dataArr[A.filteredRowIndexArr[C] * B + N]) : (V.label = A._dataList.dataArr[A.filteredRowIndexArr[C] * B + O], V.value = A._dataList.dataArr[A.filteredRowIndexArr[C] * B + N]), F[C] = V } } var q = !1; if (T.options.selectedDataOnPaste) if (0 === F.length) q = !0; else for (var U = 0; U < F.length; U++) { var K = F[U]; switch (T.options.selectedDataOnPaste) { case "true": case "both": K.value !== L && K.label !== L || (q = !0); break; case "value": K.value === L && (q = !0); break; case "label": K.label === L && (q = !0); break; default: q = !0 }if (q) break } if (!q && T.options.selectedDataOnPaste) { n.length <= j + c && 0 === f && X && P._drawRowStatus(k - P.rowIndex, k), g = z(g + y.colSize); continue } if (P.options.selectByLabel) for (U = 0; U < F.length; U++) { if ((K = F[U]).label === L) { L = K.value; break } } } var Z = T.comp && T.comp.selectedIndex; if ("true" === P.options.unformatOnPaste || "true" === T.options.unformatOnPaste) { if ("calendar" == T.options.inputType && "date" == T.options.dataType) { var Y = 0; "yearMonthDate" == T.options.calendarValueType ? Y = 8 : "yearMonth" == T.options.calendarValueType ? Y = 6 : "yearMonthDateHour" == T.options.calendarValueType ? Y = 10 : "yearMonthDateTime" == T.options.calendarValueType ? Y = 12 : "yearMonthDateTimeSec" == T.options.calendarValueType ? Y = 14 : "year" == T.options.calendarValueType && (Y = 4); var $ = new WebSquare.validator.validateInvoker; $.addCommand(new WebSquare.validator.allowCharCommand("0-9")), $.addCommand(new WebSquare.validator.maxLengthCommand(Y)), L = $.validateString(L) } var J = L, Q = T.formatter.masking, tt = T.formatter.type; L = J = void 0 === tt || null == tt || "number" != tt && "float" != tt ? void 0 !== tt && null != tt && "date" == tt ? WebSquare.text.unformatDate2(Q, J) : void 0 !== tt && null != tt && "time" == tt ? WebSquare.text.unformatTime(Q, J) : WebSquare.text.unformatText(Q, J) : WebSquare.text.unformatCurrency(Q, J) } if (T.options.maxLength) if ("float" == T.options.dataType) { L = new WebSquare.validator.maxFloatLengthCommand(T.options.maxLength, T.options.decimalDelimiter, T.options.delimiter).executeValidateString(L) } else { G = parseInt(T.options.maxLength); isNaN(G) || (L = L.slice(0, G)) } var et = T.options.allowChar; if (T.options.allowChar || "float" != T.options.dataType && "number" != T.options.dataType && "bigDecimal" != T.options.dataType || (et = "0-9+-" + T.options.decimalDelimiter), et && void 0 !== et && null != et && "" != et) { var it = new RegExp("[" + et + "]"), ot = !0; for (C = 0; C < L.length; C++) { if (null == L.charAt(C).match(it)) { ot = !1; break } } !1 === ot && (L = "") }
																	if (T.options.ignoreChar) L = new WebSquare.validator.ignoreCharCommand(T.options.ignoreChar).executeValidateString(L); if (("" !== T.options.escape ? T.options.escape : P.options.escape) + "" == "true" && (L = WebSquare.xml.decode(L)), "radio" === T.options.inputType && T.options.trueValue === L) for (var st = P.getCheckedIndex(x), at = 0; at < st.length; at++)P._dataList.setCellData(st[at], D, T.options.falseValue); if ("text" === T.options.inputType || "textImage" === T.options.inputType) { var rt = r.D.getGlobalFunction(T.options.customModelFormatter, P.scope_id); "function" == typeof rt ? (P.useCustomModelFormatter = !0, L = rt.call(P, L, L, T.editRowIndex, T.getColumnIndex(S))) : P.useCustomModelFormatter = !1 } if (1 == P.options.ctrlShiftKey ? "true" == _ && P._dataList.setCellData(k, D, L) : P._dataList.setCellData(k, D, L), !L && X && n.length <= j + c && P._drawRowStatus(k - P.rowIndex, k), R != L) { if (1 == P.options.ctrlShiftKey) var nt = { oldValue: R, newValue: "true" == _ ? L : R, rowIndex: w, colIndex: x }; else nt = { oldValue: R, newValue: L, rowIndex: w, colIndex: x }; isNaN(Z) || (nt.oldSelectedIndex = Z, nt.newSelectedIndex = T.comp && T.comp.selectedIndex), d.B.fireEvent(P, "onviewchange", nt) } g = z(g + y.colSize)
																}
															}
														}
													}
												} u += 1
											}
										}, M = y, B = w; if (n.length > 0 && !T) for (u = 1; u < n.length; u++)if (n[u].length !== n[0].length) { T = !0; break } if (P.applyFocusedCellOut(), P.focusedCell = [], T) E(y, w); else if (b - y + 1 >= n.length && v - w + 1 >= n[0].length) for (; M <= b - n.length + 1;) { for (B = w; B <= v - n[0].length + 1;) { M + n.length > b - n.length + 1 && B + n[0].length > v - n[0].length + 1 && !1, E(M, B), B += n[0].length } M += n.length } else if (b - y + 1 >= n.length) for (; M <= b - n.length + 1;) { M + n.length > b - n.length + 1 && !1, E(M, B), M += n.length } else if (v - w + 1 >= n[0].length) for (; B <= v - n[0].length + 1;) { B + n[0].length > v - n[0].length + 1 && !1, E(M, B), B += n[0].length } else E(y, w)
									}; if ("true" === this.options.showMessageOnPaste) { var Z = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + "/pasteMessage/@value"); WebSquare.layer.pasteMessageLoaded = !1, WebSquare.layer.showProcessMessage(Z, { type: "pasteMsg", scope: this.scope_id || "" }); var Y = function() { WebSquare.layer.pasteMessageLoaded ? (r.D.clearTimeout(P.id + "_pasteMessageLoaded"), K(), WebSquare.layer.hideProcessMessage({ type: "pasteMsg", scope: this.scope_id || "" }), d.B.fireEvent(P, "onafterpaste")) : r.D.setTimeout(Y, { delay: 500, key: P.id + "_pasteMessageLoaded" }) }; Y() } else K(g), d.B.fireEvent(this, "onafterpaste")
								}
							} this.isPaste = !1, d.B.preventDefault(t)
						} catch (t) { a.w.printStackTrace(t, null, this) }
					}, g.prototype.handleBeforeCopyEvent = function(t) { d.B.preventDefault(t) }, g.prototype.handleBeforeCutEvent = function(t) { d.B.preventDefault(t) }, g.prototype.handleCopyEvent = function(t) {
						try {
							if (!1 === d.B.fireEvent(this, "oncustomcopy", t)) return; var e = this.options.preventCopyColumn, i = e ? e.split(",") : []; if (this.options.preventCopy || "native" === this.options.copyType) return; if (s.v.browserCheck.safari) { for (var o = document.activeElement, n = !1; null != o;)o.id && o.id == this.id && (n = !0), o = o.parentNode; if (!n) return } var l = r.D.isIEAllVersion() ? window.clipboardData : t.clipboardData, h = this.options.copyAmount; if (h || (h = "cell"), "cell" == h && this.focusedCell.length > 0) {
								for (var p = [], u = this.getColumnOrder(), c = this.htmlInfo.body.rowAttrArr.length, g = this.getDataLength() * c, f = 0, m = u.length, y = 0, b = 0, w = 0; w < this.focusedCell.length; w++) { var v = this.focusedCell[w], C = v.focusedRowIndex, I = v.focusedColIndex, _ = this.getLocationRowCol(C, I); C = _.rowIndex, I = _.colIndex, b += _.colSize * _.rowSize - 1, g > C && (g = C), f < C + _.rowSize - 1 && (f = C + _.rowSize - 1), m > I && (m = I), y < I + _.colSize - 1 && (y = I + _.colSize - 1) } "row" == this.options.focusMode && 1 == this.options.rowCopy && (m = 0, y = u.length - 1); var x = 0; for (w = this.defaultColCnt + m; w < y + this.defaultColCnt; w++)1 == this.hiddenList[w] && (x += 1); if (this.focusedCell.length + b == (f - g + 1) * (y - m - x + 1) || 1 == this.options.ctrlShiftKey || "row" == this.options.focusMode && 1 == this.options.rowCopy && this.focusedCell.length == f - g + 1) if (this.isDrillDown) {
									var S = function(t) { var e = t[t.length - 1]; T = T < e ? e : T; for (var i = 0; i < t.length; i++) { var o = this.drilldown.getChildrenRowArr(t[i]); o.length > 0 && S.call(this, o) } }, D = this._dataList.getRealRowIndex(f), R = this.drilldown.getChildrenRowArr(D), L = this._dataList.getRealRowIndex(g), T = D
									; this.drilldown.isOpen(f) || S.call(this, R); for (w = L; w <= T; w++) { for (var k = [], A = m; A <= y; A++) { var F = (q = this.getOriginalRowCol(w, A)).colIndex, E = q.rowIndex; if ((!q.noLeftTop || q.leftCell) && 1 != this.hiddenList[A + this.defaultColCnt]) { for (var M = this.getCellInfo(F), O = !1, N = 0; N < i.length; N++)if (i[N] == M.colID) { O = !0; break } if (!O) { var B = "" !== M.options.escape ? M.options.escape : this.options.escape, G = this.drilldown.statusArr; if ("display" == M.options.copyOption) U = !1 === G[w] ? this._getDisplayData(E, this.getColumnID(F)) : this._getDisplayData(this.getRealRowIndex(E), this.getColumnID(F)); else { var H = this.getColumnID(F); U = this.dataList.getColData(H)[E] } q.noLeftTop && (U = ""), B + "" == "true" && (U = WebSquare.xml._encode(U + "")), (U || this.focusedCell.length > 1) && k.push(U) } } } p.push(k) }
								} else { var W = []; for (w = g; w <= f; w++) { k = []; var V = []; for (A = m; A <= y; A++) { var q; F = (q = this.getOriginalRowCol(w, A)).colIndex, E = q.rowIndex; if ((!q.noLeftTop || q.leftCell) && 1 != this.hiddenList[A + this.defaultColCnt]) { for (M = this.getCellInfo(F), O = !1, N = 0; N < i.length; N++)if (i[N] == M.colID) { O = !0; break } if (!O) { B = "" !== M.options.escape ? M.options.escape : this.options.escape; var j = this.data_td_list[F + (E - this.rowIndex) * this.oneRowDataLength].classList.contains("focusedTd"), P = this.data_td_list[F + (E - this.rowIndex) * this.oneRowDataLength].classList.contains("focusedTr"); 1 == this.options.ctrlShiftKey && ("cell" == this.options.focusMode ? V.push(j) : "row" == this.options.focusMode && V.push(P)), U = "display" == M.options.copyOption ? this._getDisplayData(this.getRealRowIndex(E), this.getColumnID(F)) : this.dataList.getCellData(E, this.getColumnID(F)), q.noLeftTop && (U = ""), B + "" == "true" && (U = WebSquare.xml._encode(U + "")), (U || this.focusedCell.length > 1) && (1 == this.options.ctrlShiftKey ? ("row" == this.options.focusMode && P || "cell" == this.options.focusMode && j) && k.push(U) : k.push(U)) } } } p.push(k), 1 == this.options.ctrlShiftKey && W.push(V) } } else { var z = this.focusedCell[this.focusedCell.length - 1]; if (null != z) { var U; for (B = "" !== (M = this.getCellInfo(z.focusedColIndex)).options.escape ? M.options.escape : this.options.escape, w = 0; w < i.length; w++)if (i[w] == M.colID) return; U = "display" == M.options.copyOption ? this._getDisplayData(this.getRealRowIndex(z.focusedRowIndex), this.getColumnID(z.focusedColIndex)) : this.dataList._getCellData(z.focusedRowIndex, this.getColumnID(z.focusedColIndex)), B + "" == "true" && (U = WebSquare.xml._encode(U + "")), p.push([U]) } } var X = Papa.unparse(p, { delimiter: "\t" }); if (1 == this.options.ctrlShiftKey) { var K = Papa.unparse(W, { delimiter: "\t" }); l.setData("noFocus", K) } l.setData("Text", X)
							} d.B.preventDefault(t)
						} catch (t) { a.w.printStackTrace(t, null, this) }
					}, g.prototype.handleCutEvent = function(t, e) {
						try {
							if (!e) if (!1 === d.B.fireEvent(this, "oncustomcut", t)) return; var i = this.options.preventCopyColumn, o = i ? i.split(",") : []; if (this.options.preventCopy) return; if (s.v.browserCheck.safari) { for (var n = document.activeElement, l = !1; null != n;)n.id && n.id == this.id && (l = !0), n = n.parentNode; if (!l) return } var h = r.D.isIEAllVersion() ? window.clipboardData : t.clipboardData, p = this.options.copyAmount; if (p || (p = "cell"), "cell" == p && this.focusedCell.length > 0) {
								for (var u = [], c = this.getColumnOrder(), g = this.htmlInfo.body.rowAttrArr.length, f = this.getDataLength() * g, m = 0, y = c.length, b = 0, w = 0, v = 0; v < this.focusedCell.length; v++) { var C = this.focusedCell[v], I = C.focusedRowIndex, _ = C.focusedColIndex, x = this.getLocationRowCol(I, _); I = x.rowIndex, _ = x.colIndex, w += x.rowSize * x.colSize - 1, f > I && (f = I), m < I + x.rowSize - 1 && (m = I + x.rowSize - 1), y > _ && (y = _), b < _ + x.colSize - 1 && (b = _ + x.colSize - 1) } var S = 0; for (v = this.defaultColCnt + y; v < b + this.defaultColCnt; v++)1 == this.hiddenList[v] && (S += 1); if (this.focusedCell.length + w == (m - f + 1) * (b - y - S + 1)) for (v = f; v <= m; v++) {
									for (var D = [], R = y; R <= b; R++) {
										var L = this.getOriginalRowCol(v, R), T = L.colIndex, k = L.rowIndex, A = R + this.defaultColCnt; if (1 != this.hiddenList[A] && !(this.options.checkReadOnlyOnCut && this.___getEditReadOnly(k, T) || e && this.___getEditReadOnly(k, T) || this.options.checkDisabledOnCut && this._getEditDisabled(k, T) || e && this._getEditDisabled(k, T))) {
											for (var F = this.getCellInfo(T), E = !1, M = 0; M < o.length; M++)if (o[M] == F.colID) { E = !0; break } if (!E && !L.noLeftTop) {
												var O = "" !== F.options.escape ? F.options.escape : this.options.escape; if (V = "display" == F.options.copyOption ? this._getDisplayData(this.getRealRowIndex(k), this.getColumnID(T)) : this.dataList.getCellData(k, this.getColumnID(T)), O + "" == "true" && (V = WebSquare.xml._encode(V + "")), "" !== V) { var N = { oldValue: V, newValue: "", rowIndex: k, colIndex: T }; d.B.fireEvent(this, "onviewchange", N) } D.push(V), this.dataList.setCellData(k, this.getColumnID(T), "")
											}
										}
									} u.push(D)
								} else { var B = this.focusedCell[this.focusedCell.length - 1], G = B.focusedRowIndex, H = this.getColumnID(B.focusedColIndex), W = !1; if (this.options.checkReadOnlyOnCut && this.___getEditReadOnly(G, H) && (W = !0), this.options.checkDisabledOnCut && this._getEditDisabled(G, H) && (W = !0), null != B && !0 !== W) { var V; for (F = this.getCellInfo(H), v = 0; v < o.length; v++)if (o[v] == F.colID) return; O = "" !== F.options.escape ? F.options.escape : this.options.escape; if (V = "display" == F.options.copyOption ? this._getDisplayData(this.getRealRowIndex(G), H) : this.dataList.getCellData(G, H), O + "" == "true" && (V = WebSquare.xml._encode(V + "")), "" !== V) { N = { oldValue: V, newValue: "", rowIndex: G, colIndex: B.focusedColIndex }; d.B.fireEvent(this, "onviewchange", N) } this.dataList.setCellData(G, H, ""), u.push([V]) } } if (!e) { var q = Papa.unparse(u, { delimiter: "\t" }); h.setData("Text", q) }
							} d.B.preventDefault(t)
						} catch (t) { a.w.printStackTrace(t, null, this) }
					}, g.prototype.clickRightButtonCell = function(t) {
						for (var e = r.D.getDataPrefix("header_id"), i = r.D.getDataPrefix("colIndex"), o = r.D.getDataPrefix("tdIndex"), s = r.D.getDataPrefix("rowIndex"), a = d.B.getTarget(t); a && "TD" != a.tagName && "TH" != a.tagName && "DIV" != a.tagName;)a = a.parentNode; var n = a && this.hasClass(a, this.options.headerTdClass); if (a && this.hasClass(a, this.options.bodyTdClass) && (n = !1), n) d.B.preventDefault(t), d.B.fireEvent(this, "onheaderrightbuttonclick", a.getAttribute(e)); else { for (var l = a; l;) { if ("TH" === l.tagName && this.hasClass(l, this.options.headerTdClass)) { n = !0; break } if ("TD" === l.tagName && this.hasClass(l, this.options.bodyTdClass)) { n = !1; break } if ("DIV" === l.tagName && this.hasClass(l, "w2grid_dataLayer") && 0 === this.getRowCount()) { n = !1; break } l = l.parentNode } a = l } var h, p, u, c, g, f, m = null != this.editedCell; if (!n && m && (h = this.editedCell.editRowIndex, p = this._dataList.getColumnIndex(this.editedCell.id), _ = this.getCellInfo(this.editedCell.id), u = this.getColumnIndex(this.editedCell.id), c = this._grid.getRealRowIndex(h), g = this._dataList.dataArr[c * this._dataList.getColumnCount() + p], f = _.comp && _.comp.selectedIndex), n && this.options.useHeaderContextMenu) { var y = void 0, b = -1, w = parseInt(a.getAttribute(i), 10) - this.defaultColCnt; (T = {}).result = y, T.rowIndex = b, T.colIndex = w, T.event = t; var v = []; if (this.focusedCell) for (var C = 0; C < this.focusedCell.length; C++)v.push({ rowIndex: this._getGroupbyDisplayRowIndex(this.focusedCell[C].focusedRowIndex), colIndex: this.focusedCell[C].focusedColIndex }); T.focusedCell = v; var I = { isHeader: !0 }; I.headerId = a.getAttribute(e), (k = d.B.fireEvent(this, "oncontextopen", b, w, v, I)) ? this.createContextMenu(T, k) : this.contextMenu ? this.showContextMenu(T) : this.createContextMenu(T) } else if (a && "TD" == a.tagName && this.hasClass(a, this.options.bodyTdClass)) {
							var _; if (!1 === (y = this.__setFocusedCell(t, a, { allowContextMenuMultiCell: this.options.allowContextMenuMultiCell }))) { if (this.focusedCell.length > 0) for (C = 0; C < this.focusedCell.length; C++)this._applyFocusedCellOut(this.focusedCell[C]); var x = a.className, S = parseInt(a.getAttribute(o)), D = parseInt(S / this.realRowDataLength); null != x.match("rowNum") ? (b = D, w = "rowNum") : null != x.match("rowStatus") ? (b = D, w = "rowStatus") : null != x.match("groupby") ? (b = "groupby", w = -1) : null != x.match("Subtotal") && (b = "subtotal", w = "number" == typeof (w = parseInt(a.getAttribute(i), 10)) ? w : -1) } else a && (this.hasClass(a, "w2grid_textImage") || this.hasClass(a, "w2grid_textImage_image")) ? (b = parseInt(a.getAttribute(s), 10), w = parseInt(a.getAttribute(i), 10), this._setFocusedCell(b, w)) : n ? (b = parseInt(a.getAttribute(s), 10), w = parseInt(a.getAttribute(i), 10)) : (b = this.getFocusedRowIndex(), w = this.getFocusedColumnIndex()); if (!n && a && m) {
								var R = this._dataList.dataArr[c * this._dataList.getColumnCount() + p]; if (g != R) {
									var L = {
										oldValue: g, newValue: R, rowIndex: h, colIndex: u
									}; isNaN(f) || (L.oldSelectedIndex = f, L.newSelectedIndex = _ && _.comp && _.comp.selectedIndex), d.B.fireEvent(this, "onviewchange", L)
								}
							} if (this.options.senseReader) ("text" != (_ = this.getCellInfo(w)).options.inputType && "secret" != _.options.inputType || this.___getEditReadOnly(b, w) || this.options.contextMenu) && d.B.preventDefault(t); else d.B.preventDefault(t); if (d.B.fireEvent(this, "onrightbuttonclick", this._getGroupbyDisplayRowIndex(b), w, t), this.options.contextMenu) { (T = {}).result = y, T.rowIndex = b, T.colIndex = w; v = []; if (this.focusedCell) for (C = 0; C < this.focusedCell.length; C++)v.push({ rowIndex: this._getGroupbyDisplayRowIndex(this.focusedCell[C].focusedRowIndex), colIndex: this.focusedCell[C].focusedColIndex }); T.focusedCell = v, T.event = t, (k = d.B.fireEvent(this, "oncontextopen", this._getGroupbyDisplayRowIndex(b), w, v)) ? this.createContextMenu(T, k) : this.contextMenu ? this.showContextMenu(T) : this.createContextMenu(T) }
						} else if (a && "DIV" == a.tagName && this.hasClass(a, "w2grid_dataLayer") && 0 === this.getRowCount()) { var T, k; if (d.B.preventDefault(t), d.B.fireEvent(this, "onrightbuttonclick", -1, -1, t), this.options.contextMenu) (T = { result: !1, rowIndex: -1, colIndex: -1, focusedCell: null }).event = t, (k = d.B.fireEvent(this, "oncontextopen", -1, -1, null)) ? this.createContextMenu(T, k) : this.contextMenu ? this.showContextMenu(T) : this.createContextMenu(T) }
					}, g.prototype.fireImageClick = function(t, e) { var i = this.getCellInfo(e), o = this._getEditDisabled(t, e); if (this.options.useImageClick || 0 == o) { var s = r.D.getGlobalFunction(i.options.imageClickFunction, this.scope_id); "function" == typeof s && s.call(this, t, e, this.dataList._getCellData(t, e)) } }, g.prototype.gridOut = function(t) { var e = d.B.getTarget(t); if (this.overElem && (e.id == this.id + "_dataLayer" || e.id == this.overElem.id || "" == e.id)) { if (this.options.rowMouseOver && "TD" == this.overElem.tagName && this.removeRowOverStyle(this.overElem.parentNode), "TD" === this.overElem.tagName) { var i = r.D.getDataPrefix("col_id"), o = {}; this.overElem.getAttribute(i) && (o.rowIndex = this.getElemRowIndex(this.overElem), o.colIndex = this.getColumnIndex(this.overElem.getAttribute(i))), d.B.fireEvent(this, "onbodymouseout", o) } this.bodyOut(t, this.overElem), this.overElem = null } }, g.prototype.addRowOverStyle = function(t) {
						for (var e = r.D.getDataPrefix("trIndex"), i = r.D.getDataPrefix("tdIndex"), o = r.D.getDataPrefix("style_bak"); null != t && (1 != t.nodeType || null == t.getAttribute(e));)if (null == (t = t.parentNode) || t.id == this.id + "_foot_table") return; if (null != t) {
							for (var s = parseInt(t.getAttribute(e)); s > 0;)s--, t = r.D.prev(t); var a = r.D.first(t), n = parseInt(a.getAttribute(i)); if (!isNaN(n)) {
								n = parseInt(n / (this.oneRowDataLength + this.defaultColCnt), 10) * (this.oneRowDataLength + this.defaultColCnt); for (var l = this.options.rowMouseOverColor.wq_trim(), h = "" == this.options.selectedCellOverColor ? "" : this.options.selectedCellOverColor.wq_trim(), d = "" == this.options.selectedRowOverColor ? "" : this.options.selectedRowOverColor.wq_trim(), p = 0; p < this.realRowDataLength; p++) {
									var u = this.all_data_td_list[n + p], c = l; if ("" == h || "cell" != this.options.focusMode && "both" != this.options.focusMode) { if (!("" == d || "row" != this.options.focusMode && "both" != this.options.focusMode || "row" == this.options.focusMode && 1 == this.options.fixedColumnNoBGColor && p < this.options.fixedColumn)) for (g = parseInt(u.getAttribute(i)), f = parseInt(g / this.realRowDataLength) + this.rowIndex, y = 0; y < this.focusedCell.length; y++)if (f == this.focusedCell[y].focusedRowIndex) { c = d; break } } else for (var g = parseInt(u.getAttribute(i)), f = parseInt(g / this.realRowDataLength) + this.rowIndex, m = g % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength), y = 0; y < this.focusedCell.length; y++)if (f == this.focusedCell[y].focusedRowIndex && m == this.focusedCell[y].focusedColIndex) { c = h; break } if (!("row" == this.options.focusMode && 1 == this.options.fixedColumnNoBGColor && p < this.options.fixedColumn)) if (p < this.defaultColCnt) {
										var b = u.className; ("" == this.options.rowNumBackgroundColor && b.indexOf(this.options.bodyTdClass + "_rowNumber") >= 0 || b.indexOf(this.options.bodyTdClass + "_rowStatus") >= 0) && (u.style.backgroundColor = c)
									} else u.style.backgroundColor = c; u.removeAttribute(o)
								}
							}
						}
					}, g.prototype.removeRowOverStyle = function(t) { if (!(this.options.tooltipHeader && t && t.getElementsByTagName("TH").length > 0)) { for (var e = r.D.getDataPrefix("trIndex"), i = r.D.getDataPrefix("tdIndex"), o = r.D.getDataPrefix("or_bgColor"), s = r.D.getDataPrefix("style_bak"); null != t && (1 != t.nodeType || null == t.getAttribute(e));)if (null == (t = t.parentNode) || t.id == this.id + "_foot_table") return; if (null != t) { for (var a = parseInt(t.getAttribute(e)); a > 0;)a--, t = r.D.prev(t); var n = r.D.first(t), l = parseInt(n.getAttribute(i)); if (!isNaN(l)) { l = parseInt(l / (this.oneRowDataLength + this.defaultColCnt), 10) * (this.oneRowDataLength + this.defaultColCnt); for (var h = 0; h < this.realRowDataLength; h++) { var d = this.all_data_td_list[l + h]; if (h < this.defaultColCnt) { var p = d.className; if ("" == this.options.rowNumBackgroundColor && p.indexOf(this.options.bodyTdClass + "_rowNumber") >= 0) if ("row" == this.options.focusMode || "both" == this.options.focusMode) { for (var u = parseInt(d.getAttribute(i)), c = parseInt(u / this.realRowDataLength) + this.rowIndex, g = !1, f = 0; f < this.focusedCell.length; f++)if (c == this.focusedCell[f].focusedRowIndex) { g = !0; break } d.style.backgroundColor = g ? this.options.selectedRowColor.wq_trim() : "" } else d.style.backgroundColor = ""; else if (p.indexOf(this.options.bodyTdClass + "_rowStatus") >= 0) if ("row" == this.options.focusMode || "both" == this.options.focusMode) { for (u = parseInt(d.getAttribute(i)), c = parseInt(u / this.realRowDataLength) + this.rowIndex, g = !1, f = 0; f < this.focusedCell.length; f++)if (c == this.focusedCell[f].focusedRowIndex) { g = !0; break } d.style.backgroundColor = g ? this.options.selectedRowColor.wq_trim() : "" } else d.style.backgroundColor = "" } else d.style.backgroundColor = d.getAttribute(o) || ""; d.removeAttribute(s) } } } } }, g.prototype.handleKeyDownEvent = function(t) { if (!(this.parentControl && this.parentControl.options && "gridViewItemTable" === this.parentControl.options.pluginName || "gridItemTable" === this.parentControl.options.pluginName) && 0 != d.B.fireEvent(this, "onkeydown", t)) { this.lastEvent = t; var e = WebSquare.event.getTarget(t); if (this.headerFocus); else { var i, o; if (e && (e.className.match("w2grid_head_sort_div_main_btn") || e.className.match("w2grid_customFilter_open"))) for (var s = e; s;) { if ("TH" === s.tagName && this.hasClass(s, this.options.headerTdClass)) { var a = WebSquare.util.getDataPrefix("header_id"); i = s.getAttribute(a), e.className.match("w2grid_head_sort_div_main_btn") ? o = "sort" : e.className.match("w2grid_customFilter_open") && (o = "filter"); break } s = s.parentNode } if (!t.shiftKey && 9 == t.keyCode && i && this.options.senseReader && i === this._lastHeaderElementId && o === this._lastHeaderElementType) this._setFirsCellFocus(t); else { if (e && e.className.match("w2grid_start_div") && this.options.senseReader && "none" === this.options.focusMode) return; this.handleBodyKeyDown(t) } } } }, g.prototype.handleKeyUpEvent = function(t) { if (0 != d.B.fireEvent(this, "onkeyup", t)) { if (this.lastEvent = t, this.editedCell && this.editedCell._getEditedValue) { var e = this.editedCell.options.inputType; if ("custom" === e && !this.editedCell.internal && this.editedCell.editRowIndex) { var i = this.getRealRowIndex(this.editedCell.editRowIndex); e = this.editedCell.cellManagerHashByRowIndex[i].options.inputType } if ("text" === e || "textarea" === e || "calendar" === e || "textImage" === e || "secret" === e) { var o = t.charCode ? t.charCode : t.keyCode, s = { rowIndex: this.editedCell.editRowIndex, colIndex: this.getColumnIndex(this.editedCell.id), colID: this.getColumnID(this.editedCell.id), oldValue: this.editedCell.beforeEditValue || "", newValue: this.editedCell._getEditedValue(), inputType: e, keyCode: o }; d.B.fireEvent(this, "oneditkeyup", s) } } else null != this.beforeEditedCellInfo && d.B.fireEvent(this, "oneditkeyup", this.beforeEditedCellInfo); this.beforeEditedCellInfo = null } }, g.prototype.headerOver = function(t, e) {
						if (!(e.className.indexOf(this.options.headerTdClass + "_rowNumber") >= 0 || e.className.indexOf(this.options.headerTdClass + "_rowStatus") >= 0)) {
							var i = e.offsetWidth; if (!(i < 2) && e.firstChild) {
								var o = r.D.getDataPrefix("col_id"), s = e.getAttribute(o), n = null; if (s) {
									var l = this.getHeaderInfo(s), h = (f = this.getHeaderInputType(s),
										l.options.embeddedInput); if (h && "text" == f) { var d = this.getElemRowIndex(e), u = this.getColumnIndex(e.getAttribute(o)); h = !this._getEditDisabled(d, u) && !this.___getEditReadOnly(d, u) } if ("textImage" == f || ("autoComplete" == f || "calendar" == f) && "true" == l.options.viewTypeIconImage) if ("100%" == e.firstChild.style.width) n = e.getElementsByTagName("th")[0]; else { var c = this.event.getTargetIterator(t), g = "w2grid_textImage_image"; for ("true" === l.options.viewTypeIconImage && ("autoComplete" == f ? g = this.options.bodyTdClass + "_autoComplete_img" : "calendar" == f && (g = this.options.bodyTdClass + "_calendar_div_img")); c.next();)if (c.match(null, null, "th") && c.getElement().id) { n = this.hasClass(e, g) ? e.previousSibling : e, e = c.getElement(); break } }
								} else var f = "text"; if ("text" == f || "textarea" == f || "textImage" == f || "link" == f || "calendar" == f || "expression" == f || "select" == f && !h || "drilldown" == f || "autoComplete" == f || "checkcombobox" == f || "button" == f || this.options.showImageTooltip && "image" == f) {
									var m; "textarea" == f ? (m = e.cloneNode(!0)).firstChild.style.width = "" : m = n || e; var y = i, b = e.offsetHeight, w = WebSquare.style.getStyle(e, "text-overflow"), v = 20, C = b + 3; try { this.options.tooltipPositionX && (v = new Function("cellWidth", "cellHeight", "return " + this.options.tooltipPositionX)(y, b)), this.options.tooltipPositionY && (C = new Function("cellWidth", "cellHeight", "return " + this.options.tooltipPositionY)(y, b)) } catch (t) { p.k.printLog("tooltipPosistion 옵션 적용 중 오류 발생. 옵션 무시하고 기본값 적용.[" + this.id + "]"), a.w.printStackTrace(t, null, this) } this.options.tooltipShowAlwaysColumns; if (this.options.tooltipHeaderShowAlways) { var I = WebSquare.style.getAbsoluteLeft(e) + v, _ = WebSquare.style.getAbsoluteTop(e) + C, x = ""; if ("text" == f && h ? x = m.firstChild.value : "link" == f ? ("NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span"), x = m.firstChild.innerHTML) : x = "textImage" == f || ("autoComplete" == f || "calendar" == f) && "true" == l.options.viewTypeIconImage ? "NOBR" == n.firstChild.tagName || "SPAN" == n.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 ? m.firstChild.innerHTML : m.innerHTML : "image" == f ? m.firstChild.innerHTML : "drilldown" == f ? "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 ? e.firstChild.innerText.replace(/^\s*/, "") : e.innerText : "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 || "BUTTON" == e.firstChild.tagName ? m.firstChild.innerHTML : m.innerText.wq_trim(), this.options.tooltipFormatterHeader) try { if ("function" == typeof (A = r.D.getGlobalFunction(this.options.tooltipFormatterHeader, this.scope_id))) x = A(e.getAttribute(o), x) } catch (t) { a.w.printStackTrace(t, null, this) } "" != x && this.showTooltip(I, _, x, C) } else if ("ellipsis" == w) {
										this.toolTipRuler || (this.toolTipRuler = document.createElement("span"), this.toolTipRuler.style.position = "absolute", this.toolTipRuler.style.visibility = "hidden", this.toolTipRuler.style.left = "0px", this.toolTipRuler.style.top = "0px"), this.render.appendChild(this.toolTipRuler), this.toolTipRuler.className = m.className, "text" == f && h ? (this.toolTipRuler.innerHTML = "<div>" + m.firstChild.value + "</div>", this.toolTipRuler.style.fontSize = WebSquare.style.getStyle(m.firstChild, "font-size"), this.toolTipRuler.style.fontFamily = WebSquare.style.getStyle(m.firstChild, "font-family"), this.toolTipRuler.style.fontWeight = WebSquare.style.getStyle(m.firstChild, "font-weight")) : (this.toolTipRuler.innerHTML = m.innerHTML, this.toolTipRuler.style.fontSize = WebSquare.style.getStyle(m, "font-size"), this.toolTipRuler.style.fontFamily = WebSquare.style.getStyle(m, "font-family"), this.toolTipRuler.style.fontWeight = WebSquare.style.getStyle(m, "font-weight")); var S = this.toolTipRuler.firstChild.offsetWidth; if ("textImage" == f || ("autoComplete" == f || "calendar" == f) && "true" == l.options.viewTypeIconImage) var D = n.clientWidth; else D = e.clientWidth; if (3 != m.firstChild.nodeType) {
											var R = WebSquare.style.getStyle(this.toolTipRuler.firstChild, "padding-left"), L = WebSquare.style.getStyle(this.toolTipRuler.firstChild, "padding-right"); S -= parseInt(R || "0", 10),
												S -= parseInt(L || "0", 10), "textImage" == f || ("autoComplete" == f || "calendar" == f) && "true" == l.options.viewTypeIconImage ? (D -= parseInt(WebSquare.style.getStyle(n.firstChild, "padding-left"), 10), D -= parseInt(WebSquare.style.getStyle(n.firstChild, "padding-right"), 10), D -= parseInt(WebSquare.style.getStyle(n, "padding-left"), 10), D -= parseInt(WebSquare.style.getStyle(n, "padding-right"), 10)) : (D -= parseInt(WebSquare.style.getStyle(e.firstChild, "padding-left"), 10), D -= parseInt(WebSquare.style.getStyle(e.firstChild, "padding-right"), 10), D -= parseInt(WebSquare.style.getStyle(e, "padding-left"), 10), D -= parseInt(WebSquare.style.getStyle(e, "padding-right"), 10))
										} if (D < S || "image" == f || D == S && e.clientWidth < e.scrollWidth) { I = WebSquare.style.getAbsoluteLeft(e) + v, _ = WebSquare.style.getAbsoluteTop(e) + C, x = ""; if ("text" == f && h ? x = m.firstChild.value : "link" == f ? ("NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span"), x = m.firstChild.innerHTML) : x = "textImage" == f || ("autoComplete" == f || "calendar" == f) && "true" == l.options.viewTypeIconImage ? "NOBR" == n.firstChild.tagName || "SPAN" == n.firstChild.tagName && n.firstChild.className.indexOf("w2grid_span") > -1 ? m.firstChild.innerHTML : m.innerHTML : "image" == f ? m.firstChild.innerHTML : "drilldown" == f ? "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 ? e.firstChild.innerText.replace(/^\s*/, "") : e.innerText : "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 || "BUTTON" == e.firstChild.tagName ? m.firstChild.innerHTML : m.innerText.wq_trim(), this.render.removeChild(this.toolTipRuler), this.options.tooltipFormatterHeader) try { if ("function" == typeof (A = r.D.getGlobalFunction(this.options.tooltipFormatterHeader, this.scope_id))) x = A(e.getAttribute(o), x) } catch (t) { a.w.printStackTrace(t, null, this) } x.match('href=""') && (x = x.wq_replaceAll('href=""', "")), this.showTooltip(I, _, x, C) } else this.render.removeChild(this.toolTipRuler)
									} else { var T = e.firstChild.offsetWidth; if (!0 === this.options.showSortableImage) { var k = e.firstChild.getElementsByTagName(this.options.dataTag)[0]; k && ("NOBR" == k.tagName || "SPAN" == k.tagName && k.className.indexOf("w2grid_span") > -1) && (T = k.offsetWidth + parseInt(WebSquare.style.getStyle(e.firstChild, "margin-left"), 10)) } if (i + 3 < T) { I = WebSquare.style.getAbsoluteLeft(e) + v, _ = WebSquare.style.getAbsoluteTop(e) + C, x = ""; if ("text" == f && h ? x = m.firstChild.value : "link" == f ? ("NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span"), x = m.firstChild.innerHTML) : x = "image" == f ? m.firstChild.innerHTML : "drilldown" == f ? "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 ? e.firstChild.innerText.replace(/^\s*/, "") : e.innerText : "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 || "BUTTON" == e.firstChild.tagName ? m.firstChild.innerHTML : m.innerText.wq_trim(), this.options.tooltipFormatterHeader) try { var A; if ("function" == typeof (A = r.D.getGlobalFunction(this.options.tooltipFormatterHeader, this.scope_id))) x = A(e.getAttribute(o), x) } catch (t) { a.w.printStackTrace(t, null, this) } this.showTooltip(I, _, x, C) } }
								}
							}
						}
					}, g.prototype.bodyOver = function(t, e) {
						var i = r.D.getDataPrefix("col_id"); if (this.options.rowStatusTooltipDisplay && e.className.indexOf(this.options.bodyTdClass + "_rowStatus") >= 0) {
							var o = c = e.offsetWidth, s = "", n = 20, l = (_ = e.offsetHeight) + 3; try { this.options.tooltipPositionX && (n = new Function("cellWidth", "cellHeight", "return " + this.options.tooltipPositionX)(o, _)), this.options.tooltipPositionY && (l = new Function("cellWidth", "cellHeight", "return " + this.options.tooltipPositionY)(o, _)) } catch (t) { p.k.printLog("tooltipPosistion 옵션 적용 중 오류 발생. 옵션 무시하고 기본값 적용.[" + this.id + "]"), a.w.printStackTrace(t, null, this) } var h = WebSquare.style.getAbsoluteLeft(e) + n, d = WebSquare.style.getAbsoluteTop(e) + l, u = this.getElemRowIndex(e); switch (this.getRowStatus(u)) {
								case "C": s = WebSquare.language.getMessage("Grid_rowStatus_insert"); break; case "R":
									s = WebSquare.language.getMessage("Grid_rowStatus_initialValue"); break; case "U": s = WebSquare.language.getMessage("Grid_rowStatus_update"); break; case "D": s = WebSquare.language.getMessage("Grid_rowStatus_delete"); break; case "V": s = WebSquare.language.getMessage("Grid_rowStatus_D_After_C"); break; default: return
							}this.options.tooltipFormatter && (s = this._showTooltopFormatter(e.id, s, !0)), "" != s && this.showTooltip(h, d, s, l)
						} else {
							if (!this.options.tooltipDisplay) return; if (e.className.indexOf(this.options.bodyTdClass + "_rowNumber") >= 0 || e.className.indexOf(this.options.bodyTdClass + "_rowStatus") >= 0) return; var c; if ((c = e.offsetWidth) < 2 || !e.firstChild) return; var g = e.getAttribute(i); if (this.options.tooltipDisplayColumn && g && -1 === this.options.tooltipDisplayColumn.indexOf(g)) return; var f = null; if (g) { var m = this.getCellInfo(g); if (0 == m.internal && "custom" == m.options.inputType) { u = this.getRealRowIndex(this.getElemRowIndex(e)); m = m.cellManagerHashByRowIndex[u] ? m.cellManagerHashByRowIndex[u] : m } C = m.options.inputType; var y = m.options.embeddedInput; if (y && "text" == C) { u = this.getElemRowIndex(e); var b = this.getColumnIndex(e.getAttribute(i)); y = !this._getEditDisabled(u, b) && !this.___getEditReadOnly(u, b) } if ("textImage" == C || ("autoComplete" == C || "calendar" == C) && "true" == m.options.viewTypeIconImage) if ("100%" == e.firstChild.style.width) f = e.getElementsByTagName("td")[0]; else { var w = this.event.getTargetIterator(t), v = "w2grid_textImage_image"; for ("true" === m.options.viewTypeIconImage && ("autoComplete" == C ? v = this.mainGrid.options.bodyTdClass + "_autoComplete_img" : "calendar" == C && (v = this.mainGrid.options.bodyTdClass + "_calendar_div_img")); w.next();)if (w.match(null, null, "td") && w.getElement().id) { f = this.hasClass(e, v) ? e.previousSibling : e, e = w.getElement(); break } } } else var C = "text"; if ("checkbox" == C || "radio" == C || "text" == C || "textarea" == C || "textImage" == C || "link" == C || "calendar" == C || "expression" == C || "select" == C || "drilldown" == C || "autoComplete" == C || "checkcombobox" == C || "button" == C || this.options.showImageTooltip && "image" == C) {
								var I; "textarea" == C ? (I = e.cloneNode(!0)).firstChild.style.width = "" : I = f || e; o = c; var _ = e.offsetHeight, x = WebSquare.style.getStyle(e, "text-overflow"); n = 20, l = _ + 3; try { this.options.tooltipPositionX && (n = new Function("cellWidth", "cellHeight", "return " + this.options.tooltipPositionX)(o, _)), this.options.tooltipPositionY && (l = new Function("cellWidth", "cellHeight", "return " + this.options.tooltipPositionY)(o, _)) } catch (t) { p.k.printLog("tooltipPosistion 옵션 적용 중 오류 발생. 옵션 무시하고 기본값 적용.[" + this.id + "]"), a.w.printStackTrace(t, null, this) } var S = this.options.tooltipShowAlwaysColumns; if (this.options.tooltipShowAlways || g && S && S.indexOf(g) > -1) { h = WebSquare.style.getAbsoluteLeft(e) + n, d = WebSquare.style.getAbsoluteTop(e) + l, s = ""; if ("text" == C && y) s = I.firstChild.value; else if ("link" == C) s = "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 ? I.firstChild.firstChild.innerHTML : I.firstChild.innerHTML; else if ("textImage" == C || ("autoComplete" == C || "calendar" == C) && "true" == m.options.viewTypeIconImage) s = "NOBR" == f.firstChild.tagName || "SPAN" == f.firstChild.tagName && f.firstChild.className.indexOf("w2grid_span") > -1 ? I.firstChild.innerHTML : I.innerHTML; else if ("image" == C) s = I.firstChild.src; else if ("drilldown" == C) s = "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 ? e.firstChild.innerText.replace(/^\s*/, "") : e.innerText; else if ("select" == C && "ul" === m.options.tableRender) s = I.innerText.wq_trim(); else if ("select" == C && y) s = e.querySelector("select").value; else if ("checkbox" == C || "radio" == C) { (R = I.getElementsByTagName("label")[0]) && (s = R.innerText) } else s = "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 || "BUTTON" == e.firstChild.tagName ? I.firstChild.innerHTML : I.innerText.wq_trim(); if (this.options.tooltipFormatter) { var D = c < e.scrollWidth; s = this._showTooltopFormatter(e.id, s, D) } "" != s && this.showTooltip(h, d, s, l) } else if ("ellipsis" == x) {
									var R
									; if (("checkbox" == C || "radio" == C) && !(R = I.getElementsByTagName("label")[0])) return; if (this.toolTipRuler || (this.toolTipRuler = document.createElement("span"), this.toolTipRuler.style.position = "absolute", this.toolTipRuler.style.visibility = "hidden", this.toolTipRuler.style.left = "0px", this.toolTipRuler.style.top = "0px"), this.render.appendChild(this.toolTipRuler), this.toolTipRuler.className = I.className, "text" == C && y) this.toolTipRuler.innerHTML = "<div>" + I.firstChild.value + "</div>", this.toolTipRuler.style.fontSize = WebSquare.style.getStyle(I.firstChild, "font-size"), this.toolTipRuler.style.fontFamily = WebSquare.style.getStyle(I.firstChild, "font-family"), this.toolTipRuler.style.fontWeight = WebSquare.style.getStyle(I.firstChild, "font-weight"); else { if ("drilldown" == C && "line" == m.options.depthType) { var L = I.getElementsByTagName(this.options.dataTag)[0]; ("NOBR" == L.tagName || "SPAN" == L.tagName && L.className.indexOf("w2grid_span") > -1) && (this.toolTipRuler.innerHTML = L.outerHTML) } else this.toolTipRuler.innerHTML = "checkbox" == C || "radio" == C ? R.outerHTML : I.innerHTML; this.toolTipRuler.style.fontSize = WebSquare.style.getStyle(I, "font-size"), this.toolTipRuler.style.fontFamily = WebSquare.style.getStyle(I, "font-family"), this.toolTipRuler.style.fontWeight = WebSquare.style.getStyle(I, "font-weight") } var T = this.toolTipRuler.firstChild.offsetWidth; if (null != e.getBoundingClientRect && (T = this.toolTipRuler.firstChild.getBoundingClientRect().width), "textImage" == C || ("autoComplete" == C || "calendar" == C) && "true" == m.options.viewTypeIconImage) { var k = f.clientWidth; null != e.getBoundingClientRect && (k = f.getBoundingClientRect().width) } else { k = e.clientWidth; if (null != e.getBoundingClientRect) { var A = (WebSquare.style.getSize(e, "outerwidth") - WebSquare.style.getSize(e, "width")) / 2; k = e.getBoundingClientRect().width - A } "drilldown" == C && "line" == m.options.depthType ? k = e.clientWidth - e.firstChild.clientWidth : "checkbox" != C && "radio" != C || (k = e.clientWidth - WebSquare.style.getSize(e.firstChild, "outerMarginWidth")) } if (3 != I.firstChild.nodeType) { var F = WebSquare.style.getStyle(this.toolTipRuler.firstChild, "padding-left"), E = WebSquare.style.getStyle(this.toolTipRuler.firstChild, "padding-right"); T -= parseInt(F || "0", 10), T -= parseInt(E || "0", 10), "textImage" == C || ("autoComplete" == C || "calendar" == C) && "true" == m.options.viewTypeIconImage ? (k -= parseInt(WebSquare.style.getStyle(f.firstChild, "padding-left"), 10), k -= parseInt(WebSquare.style.getStyle(f.firstChild, "padding-right"), 10), k -= parseInt(WebSquare.style.getStyle(f, "padding-left"), 10), k -= parseInt(WebSquare.style.getStyle(f, "padding-right"), 10)) : (k -= parseInt(WebSquare.style.getStyle(e.firstChild, "padding-left"), 10), k -= parseInt(WebSquare.style.getStyle(e.firstChild, "padding-right"), 10), k -= parseInt(WebSquare.style.getStyle(e, "padding-left"), 10), k -= parseInt(WebSquare.style.getStyle(e, "padding-right"), 10)) } if (k < T || "image" == C || k == T && e.clientWidth < e.scrollWidth) { h = WebSquare.style.getAbsoluteLeft(e) + n, d = WebSquare.style.getAbsoluteTop(e) + l, s = ""; s = "text" == C && y ? I.firstChild.value : "link" == C ? "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.indexOf("w2grid_span") > -1 ? I.firstChild.firstChild.innerHTML : I.firstChild.innerHTML : "textImage" == C || ("autoComplete" == C || "calendar" == C) && "true" == m.options.viewTypeIconImage ? "NOBR" == f.firstChild.tagName || "SPAN" == f.firstChild.tagName && f.firstChild.className.indexOf("w2grid_span") > -1 ? I.firstChild.innerHTML : I.innerHTML : "image" == C ? I.firstChild.src : "drilldown" == C ? "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 ? e.firstChild.innerText.replace(/^\s*/, "") : e.innerText : "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 || "BUTTON" == e.firstChild.tagName ? I.firstChild.innerHTML : I.innerText.wq_trim(), this.render.removeChild(this.toolTipRuler), this.options.tooltipFormatter && (s = this._showTooltopFormatter(e.id, s, !0)), s.match('href=""') && (s = s.wq_replaceAll('href=""', "")), this.showTooltip(h, d, s, l) } else this.render.removeChild(this.toolTipRuler)
								} else {
									if (c + 3 < e.firstChild.offsetWidth) { h = WebSquare.style.getAbsoluteLeft(e) + n, d = WebSquare.style.getAbsoluteTop(e) + l, s = ""; s = "text" == C && y ? I.firstChild.value : "link" == C ? "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 ? I.firstChild.firstChild.innerHTML : I.firstChild.innerHTML : "image" == C ? I.firstChild.src : "drilldown" == C ? "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 ? e.firstChild.innerText.replace(/^\s*/, "") : e.innerText : "NOBR" == e.firstChild.tagName || "SPAN" == e.firstChild.tagName && e.firstChild.className.indexOf("w2grid_span") > -1 || "BUTTON" == e.firstChild.tagName ? I.firstChild.innerHTML : I.innerText.wq_trim(), this.options.tooltipFormatter && (s = this._showTooltopFormatter(e.id, s, !0)), this.showTooltip(h, d, s, l) }
								}
							}
						}
					}, g.prototype._showTooltopFormatter = function(t, e, i) { try { var o = document.getElementById(t), s = r.D.getDataPrefix("col_id"), n = r.D.getDataPrefix("colindex"), l = r.D.getDataPrefix("trindex"), h = r.D.getGlobalFunction(this.options.tooltipFormatter, this.scope_id); if ("function" == typeof h) { var d, p, u = "body"; this.hasClass(o, this.options.subtotalTdClass) ? (u = "subtotal", d = parseInt(o.parentNode.getAttribute(l), 10), p = parseInt(o.getAttribute(n), 10)) : this.hasClass(o, this.options.footerTdClass) ? (u = "footer", d = parseInt(o.parentNode.getAttribute("data-trindex"), 10), p = parseInt(o.getAttribute(n), 10)) : (d = this.getElemRowIndex(o), p = this.getColumnIndex(o.getAttribute(s))), e = h(d, p, e, i, u) } return e } catch (t) { a.w.printStackTrace(t, null, this) } }, g.prototype.bodyOut = function(t, e) { var i = this; (i.options.tooltipDisplay || i.options.headerTooltipDisplay || this.options.tooltipHeader || i.options.rowStatusTooltipDisplay) && e && i.hideTooltip() }, g.prototype.showTooltip = function(t, e, i, o) { if (null == this.editedCell) { try { var n = s.v.getConfiguration("/WebSquare/tooltipShowHideHandler/@value"); if (n) { var l = r.D.getGlobalFunction(n, this.scope_id), h = !0; if ("function" == typeof l && (h = l(this)), !h) return } } catch (t) { a.w.printStackTrace(t) } var p = document.body.scrollWidth; this.tooltip || (this.tooltip = new WebSquare.uiplugin.output(this.id + "_tooltip", { className: "w2grid_tooltip " + this.options.tooltipClass, style: "position:absolute;" + this.options.tooltipStyle }), this.tooltip.parentFrame = this.parentFrame, this.tooltip.writeTo(WebSquare.getBody()), this.tooltip.activate(), "click" === this.options.tooltipHide ? this.tooltip.render.onclick = function() { this.style.display = "none" } : this.tooltip.render.onmouseover = function() { this.style.display = "none" }), "click" === this.options.tooltipHide && (1 == WebSquare.getBody().hasClass("w2drag_activate") ? (this.tooltip.render.onclick = null, this.tooltip.render.onmouseover = function() { this.style.display = "none" }) : (this.tooltip.render.onclick = function() { this.style.display = "none" }, this.tooltip.render.onmouseover = null)), this.tooltip.setStyle("display", "block"), this.tooltip.setStyle("left", t + "px"), this.tooltip.setStyle("top", e + "px"), WebSquare.style.adjustZIndex(this.uuid, this.tooltip.uuid, "toolTip"), this.tooltip.render.innerHTML = i, d.B.fireEvent(this, "ontooltipshow"); var u = this.tooltip.render.offsetTop + this.tooltip.render.offsetHeight + 20, c = document.body.scrollHeight; if (null != WebSquare.BootLoader.fullViewRatio && (c = document.body.clientHeight + Math.abs(document.body.getBoundingClientRect().top)), u > c) { var g = e - (o + this.tooltip.render.offsetHeight); g < 0 && (g = 0), this.tooltip.setStyle("top", g + "px") } if (document.body.scrollWidth > p) { var f = t - (document.body.scrollWidth - p); f < 0 && (f = 0), this.tooltip.setStyle("left", f + "px") } this.options.tooltipDisplayTime > 0 && s.v.setTimer(this.hideTooltip, { key: this.id + "_tooltip_hide_timer", caller: this, delay: this.options.tooltipDisplayTime }) } }, g.prototype.hideTooltip = function() { this.tooltip && (this.options.tooltipDisplayTime > 0 && s.v.clearTimer(this.id + "_tooltip_hide_timer"), d.B.fireEvent(this, "ontooltiphide"), this.tooltip.setStyle("display", "none")) }, g.prototype.bodyClick = function(t, e) {
						try {
							var i = this.getLastFocusedCell().focusedTd
							; this.options.rowMouseOver && this.removeRowOverStyle(this.lastOverSrc, "grid_body_row_over", "grid_body_row"); var o = r.D.getDataPrefix("tdIndex"), s = r.D.getDataPrefix("col_id"), n = r.D.getDataPrefix("colIndex"), l = this.rowIndex, h = parseInt(e.getAttribute(o)), p = (T = parseInt(h / this.realRowDataLength)) + this.rowIndex, u = e.getAttribute(s), c = this._dataList.getRowPosition(), g = this.getColumnIndex(this._dataList.getColumnPosition()), f = T + l, m = h % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength); if (u && (R = this.getCellInfo(u)), "number" != typeof (F = this.dataList.getRealRowIndex(p))) return void (F && "header" == F.type && this.toggleGroup(F.groupId)); if (this.options.focusDefaultColumn) { var y = e.getAttribute("id") || "", b = "_headerRowNumber" === y.slice(0, "_headerRowNumber".length), w = "_headerRowStatus" === y.slice(0, "_headerRowStatus".length); if (b || w) return this.__setFocusedCell(t, e, { editMode: !1 }), void (w ? d.B.fireEvent(this, "onrowstatusclick", f) : d.B.fireEvent(this, "onrownumclick", f)) } if (null == u) return; this.moveDirection = null; var v = g - m, C = c - f; 0 == v && 0 == C ? this.moveDirection = "none" : (v > 0 || v < 0) && (C > 0 || C < 0) ? this.moveDirection = "both" : v > 0 || v < 0 ? this.moveDirection = "column" : (C > 0 || C < 0) && (this.moveDirection = "row"); var I = r.D.getDataPrefix("editModeEvent"), _ = e.getAttribute(I) || "", x = !1; if ("" != _ && "onsecondclick" == _.toLowerCase() || "" == _ && "onsecondclick" == this.options.editModeEvent.toLowerCase()) for (var S = 0; S < this.focusedCell.length; S++)this.focusedCell[S].focusedRowIndex == f && this.focusedCell[S].focusedColIndex == m && (x = !0); var D, R = this.getCellInfo(e); d.B.getTarget(t); if (!R.options.blockSelect && ("button" != R.options.inputType || this._getEditDisabled(f, m) || this.___getEditReadOnly(f, m))) { var L = !0; if (this.options.preventDuplicateFocusedCell && "linear" === this.options.focusFlow && "link" !== R.options.inputType && (L = !1), L) { if ("enter" === this.options.drilldownToggle && this.isMobile && this.isHammerEnabled()) if (1 == this.focusedCell.length) if ((R = this.getCellInfo(this.focusedCell[0].focusedColIndex)) && "drilldown" == R.options.inputType) { h = parseInt(e.getAttribute(o)); var T = parseInt(h / this.realRowDataLength), k = (u = parseInt(e.getAttribute(n)), f = this._getGroupbyDisplayRowIndex(T + l), m = h % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength), this.focusedCell[0].focusedColIndex), A = this.focusedCell[0].focusedRowIndex; if (f === A && m === k) { var F = this.dataList.getRealRowIndex(A); this.toggle(F) } } this.__setFocusedCell(t, e, { editMode: "none" == R.options.focusMode, dont_fixScroll: this.options.CellClickFixScrollX }) } R.options.embeddedInput && (this.focusedByApi = !1) } if (t.altKey && !0 === this.options.contextMenuAltClick) return void this.clickRightButtonCell(t); var E = !0; switch (D = r.D.isIE() ? t.srcElement : t.target, R.options.inputType) { case "radio": case "checkbox": if ("INPUT" != D.tagName) if (!this.options.checkOnCellClick || "LABEL" == D.tagName || this._getEditDisabled(f, m) || this.___getEditReadOnly(f, m)) E = !1; else { var M = e.getElementsByTagName("input")[0]; M && (M.checked = !M.checked) } case "drilldown": this.options.ignoreToggleOnDisabled && this._getEditDisabled(p, u) && (E = !1) }var O, N = !1, B = this.isHammerEnabled(); if (E && !(O = this.setCellClickEdit(e))) {
								_ = e.getAttribute(I) || R.options.editModeEvent || ""; var G = null != i && i === e, H = "" != _ && "onclick" == _.toLowerCase() || "" == _ && "onclick" == this.options.editModeEvent.toLowerCase() || x; if ((!B || G) && H) {
									if (!this._getEditDisabled(p, u)) {
										h = parseInt(e.getAttribute(o)), T = parseInt(h / this.realRowDataLength), u = parseInt(e.getAttribute(n)); var W = e.getAttribute(s); f = this._getGroupbyDisplayRowIndex(T + l), m = h % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength); if (this.hideTooltip(), !("button" === (R = this.getCellInfo(m)).options.inputType || !R.options.embeddedInput && ("checkbox" === R.options.inputType || "radio" === R.options.inputType) && this.options.preventMultipleClick)) {
											var V = !1
											; if (0 == R.internal && "custom" == R.options.inputType) ("button" === (q = R.cellManagerHashByRowIndex[this.getRealRowIndex(f)] ? R.cellManagerHashByRowIndex[this.getRealRowIndex(f)] : R).options.inputType || !q.options.embeddedInput && ("checkbox" === q.options.inputType || "radio" === q.options.inputType) && this.options.preventMultipleClick) && (V = !0); V || "drilldown" == R.options.inputType && this.options.ignoreCellClick && O || d.B.fireEvent(this, "oncellclick", f, m, W)
										} N = !0
									} this.setEditMode(e)
								}
							} if (!N && !this._getEditDisabled(p, u)) { h = parseInt(e.getAttribute(o)), T = parseInt(h / this.realRowDataLength), u = parseInt(e.getAttribute(n)), W = e.getAttribute(s), f = T + l, m = h % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength); if (B || this.options.tooltipDisplay && this.isMobile ? this.bodyOver(t, e) : this.hideTooltip(), !("button" === (R = this.getCellInfo(m)).options.inputType || !R.options.embeddedInput && ("checkbox" === R.options.inputType || "radio" === R.options.inputType && this.options.preventDuplicateFocusedCell) && this.options.preventMultipleClick && !(this.options.checkOnCellClick && "LABEL" != D.tagName))) { var q; if (0 == R.internal && "custom" == R.options.inputType) if ("button" === (q = R.cellManagerHashByRowIndex[this.getRealRowIndex(f)] ? R.cellManagerHashByRowIndex[this.getRealRowIndex(f)] : R).options.inputType || !q.options.embeddedInput && "checkbox" === q.options.inputType && this.options.preventMultipleClick) return; f = this._getGroupbyDisplayRowIndex(f), "drilldown" == R.options.inputType && this.options.ignoreCellClick ? O || d.B.fireEvent(this, "oncellclick", f, m, W) : ("radio" !== R.options.inputType && "checkbox" !== R.options.inputType || "LABEL" !== D.tagName) && d.B.fireEvent(this, "oncellclick", f, m, W) } }
						} catch (t) { a.w.printStackTrace(t, null, this) }
					}, g.prototype.bodyDblClick = function(t, e) { var i = r.D.getDataPrefix("tdIndex"), o = r.D.getDataPrefix("col_id"), s = r.D.getDataPrefix("editModeEvent"); if ("INPUT" == e.tagName) var a = this.getLastFocusedCell(), n = a.focusedRowIndex, l = a.focusedColIndex; else { var h = parseInt(e.getAttribute(i)); n = parseInt(h / this.realRowDataLength) + this.rowIndex, l = e.getAttribute(o) } if (null != l) { var p = e.getAttribute(s) || ""; if (("" != p && "ondblclick" == p.toLowerCase() || "" == p && "ondblclick" == this.options.editModeEvent.toLowerCase()) && this.setEditMode(e), !this._getEditDisabled(n, l)) { this.rollbackCommitFlag = !1; var u = this.isHammerEnabled(), c = this.getCellInfo(l); if (u || c.options.blockSelect) d.B.fireEvent(this, "oncelldblclick", this._getGroupbyDisplayRowIndex(n), this.getColumnIndex(l), this.getColumnID(l)); else { var g = this.getFocusedColumnIndex(); d.B.fireEvent(this, "oncelldblclick", this._getGroupbyDisplayRowIndex(this._getFocusedRowIndex()), g, this.getColumnID(g)) } this.rollbackCommitFlag = !0 } } }, g.prototype.headerClick = function(t, e) { this.focusedByApi = !1, this.options.tooltipHeader && this.hideTooltip(); var i = r.D.getDataPrefix("header_id"), o = r.D.getDataPrefix("sortable"), s = e.getAttribute(i); if (this.options.preventMultipleClick && this.headerInfoHash[s] && this.headerInfoHash[s].options && "checkbox" === this.headerInfoHash[s].options.inputType || 1 != this._getHeaderDisabled(s) && d.B.fireEvent(this, "onheaderclick", s), null != this.editedCell && this.editedCell.handleEndEdit(), 1 == this.noevent); else if (this.getDataLength() > 0 && "onclick" == this.options.sortEvent && (this.options.sortable || "true" == e.getAttribute(o)) && !this.groupbyStatus.grouped && (this.fireSortEvent(t, e), this.options.sortHeaderDiv)) { var a = e.getElementsByTagName("button"); if (a.length > 0) a[a.length - 1].focus(), 1 == this.options.senseReader && (this.focusedCell = [], this.addGridScroll(0 - this.rowIndex)) } this.noevent = !1 }, g.prototype.headerDdlClick = function(t, e) { var i = r.D.getDataPrefix("header_id"), o = r.D.getDataPrefix("sortable"); d.B.fireEvent(this, "onheaderdblclick", e.getAttribute(i)), this.getDataLength() > 0 && ("ondblclick" != this.options.sortEvent || !this.options.sortable && "true" != e.getAttribute(o) || this.groupbyStatus.grouped || this.fireSortEvent(t, e)), this.groupbyStatus.grouped && this.options.sortable || (this.noevent = !1) }, g.prototype.fireGroupByRangeSortEvent = function(t, e) {
						try { return } catch (t) {
							a.w.printStackTrace(t, null, this)
						}
					}, g.prototype.recursiveRangeSort = function(t, e, i) { try { return } catch (t) { a.w.printStackTrace(t, null, this) } }, g.prototype.fireSortEvent = function(t, e) { if (!e.disabled && !(e.className.indexOf(this.options.headerTdClass + "_rowNumber") >= 0 || e.className.indexOf(this.options.headerTdClass + "_rowStatus") >= 0)) { var i = r.D.getDataPrefix("header_id"), o = e.getAttribute(i); if ("false" !== this.getHeaderConfigValue(e, o, "sortable")) { var s = this.headerToBodyRelation[o], a = r.D.getDataPrefix("orderByColumn"), n = e.getAttribute(a); n && this.bodyIdColIndexMap[n] && (s = n); var l = !this.options.useCtrlOnMultisort || (t.ctrlKey || t.metaKey); this.options.preventMultisort && (l = !1); var h = this.cellInfoHash[s]; if ("gridView" != this.initializeType || "expression" != h.options.inputType || "true" == h.options.expressionSort) { if (null == this.headerSortStatusArr && (this.headerSortStatusArr = []), this.headerSortStatusArr[s]) { if (this.options.noSortInit ? -1 == this.headerSortStatusArr[s].sortOrder ? this.headerSortStatusArr[s].sortOrder = 1 : this.headerSortStatusArr[s].sortOrder = -1 : this.options.sortOrderReverse ? this.headerSortStatusArr[s].sortOrder = (this.headerSortStatusArr[s].sortOrder + 3) % 3 - 1 : this.headerSortStatusArr[s].sortOrder = (this.headerSortStatusArr[s].sortOrder - 3) % 3 + 1, !l) { var p = this.headerSortStatusArr[s]; this.clearHeaderSort(), this.headerSortStatusArr.push(p), this.headerSortStatusArr[s] = this.headerSortStatusArr[0] } } else { (p = {}).headerId = o, p.colID = s, this.options.sortOrderReverse ? p.sortOrder = -1 : p.sortOrder = 1; h = this.getCellInfo(s); var u = this.getColumnOption(h.options.col_id, "dataType"), c = this._dataList.getCellInfo(s).options.dataType; p.dataType = "number" == u || "bigDecimal" === u || "float" == u ? u : c, l ? (this.headerSortStatusArr.push(p), this.headerSortStatusArr[s] = this.headerSortStatusArr[this.headerSortStatusArr.length - 1]) : (this.clearHeaderSort(), this.headerSortStatusArr.push(p), this.headerSortStatusArr[s] = this.headerSortStatusArr[0]) } var g = [], f = [], m = (u = [], {}); if (m.headerId = o, m.bodyColId = s, m.sortOrder = this.headerSortStatusArr[s].sortOrder, 0 == this.headerSortStatusArr.length) this.dataList.clearSortFilter(); else { for (var y = this.headerSortStatusArr.length - 1; y >= 0; y--)if (0 == this.headerSortStatusArr[y].sortOrder) { var b = this.headerSortStatusArr[y].colID; if (this.setHeaderSortImage(o, 0, 0), this.headerSortStatusArr.splice(y, 1), delete this.headerSortStatusArr[b], 0 == this.headerSortStatusArr.length) return d.B.fireEvent(this, "onbeforesort", m), this.dataList.clearSort(), void d.B.fireEvent(this, "onsort", m) } else g.push(this.headerSortStatusArr[y].colID), f.push(this.headerSortStatusArr[y].sortOrder), u.push(this.headerSortStatusArr[y].dataType); if (g.reverse(), f.reverse(), u.reverse(), 0 == d.B.fireEvent(this, "onbeforesort", m)) return; this.dataList.setFilter({ type: "sort", sortIndex: g.join(" "), sortOrder: f.join(" "), dataType: u.join(" "), focuseMode: this.options.filterFocusMode, ignoreEmptyStringOnSort: this.options.ignoreEmptyStringOnSort, setEmptyStringFirstOnSort: this.options.setEmptyStringFirstOnSort, setEmptyStringSortableOnSort: this.options.setEmptyStringSortableOnSort }) } this.drawHeaderSortImages(), d.B.fireEvent(this, "onsort", m) } } } }, g.prototype.footerClick = function(t, e) { var i = r.D.getDataPrefix("footer_id"); d.B.fireEvent(this, "onfooterclick", e.getAttribute(i)), null != this.editedCell && this.editedCell.handleEndEdit() }, g.prototype.footerDblClick = function(t, e) { var i = r.D.getDataPrefix("footer_id"); d.B.fireEvent(this, "onfooterdblclick", e.getAttribute(i)), null != this.editedCell && this.editedCell.handleEndEdit() }, g.prototype.subtotalClick = function(t, e) {
						try {
							for (var i = e.getAttribute("id"), o = r.D.getDataPrefix("targetcolumnid"), s = e.parentNode.getAttribute(o), n = 0, l = -1, h = 0; h < this.subtotalRowHash[s].length; h++)if (this.subtotalRowHash[s][h] === e.parentNode) { l = parseInt(e.parentNode.getAttribute("data-subtotalrowindex"), 10); break } if (l > -1) { var p = this._dataList.getCellData(l, s); for (n = l - 1; this._dataList.getCellData(n, s) == p && n >= 0; n--); n++ } var u = { colID: i, startRowIndex: n, endRowIndex: l, element: e }; d.B.fireEvent(this, "onsubtotalclick", u),
								null != this.editedCell && this.editedCell.handleEndEdit()
						} catch (t) { a.w.printStackTrace(t, null, this) }
					}, g.prototype.subtotalDblClick = function(t, e) { try { for (var i = e.getAttribute("id"), o = r.D.getDataPrefix("targetcolumnid"), s = e.parentNode.getAttribute(o), n = 0, l = -1, h = 0; h < this.subtotalRowHash[s].length; h++)if (this.subtotalRowHash[s][h] === e.parentNode) { l = parseInt(e.parentNode.getAttribute("data-subtotalrowindex"), 10); break } if (l > -1) { var p = this._dataList.getCellData(l, s); for (n = l - 1; this._dataList.getCellData(n, s) == p && n >= 0; n--); n++ } var u = { colID: i, startRowIndex: n, endRowIndex: l, element: e }; d.B.fireEvent(this, "onsubtotaldblclick", u) } catch (t) { a.w.printStackTrace(t, null, this) } }, g.prototype.handleTouchStart = function(t) { !this.isHammerEnabled() && this.options.tooltipDisplay && this.isMobile && this.hideTooltip(), s.v.clearTimer(this.id + "_iScroll_slideX"); var e = t.touches && 1 == t.touches.length, i = window.navigator.msPointerEnabled && "touch" == t.pointerType; (e || i) && (this.iScrollAddMoveClass(), this.iScroll.moveDirection = null, this.iScroll.propagation = null, this.iScroll.prevTouches = [{ x: e ? t.touches[0].pageX : t.pageX, y: e ? t.touches[0].pageY : t.pageY }], s.v.setTimer((function() { this.iScrollRemoveMoveClass(), this.iScroll.prevTouches = [], this.iScroll.propagation = "pass" }), { key: this.id + "_iScroll", caller: this, delay: this.options.iScrollMoveEffectTime })) }, g.prototype.handleTouchMove = function(t) { if ("pass" != this.iScroll.propagation) { this.iScroll.addMoveClass && (this.iScrollAddMoveClass(), this.iScroll.addMoveClass = !1); var e = t.touches && 1 == t.touches.length, i = window.navigator.msPointerEnabled && "touch" == t.pointerType; if (e || i) { var o = this.scrollX_right, a = this.getElementById(this.id + "_scrollY_div"); this.iScroll.prevTouches.push({ x: e ? t.touches[0].pageX : t.pageX, y: e ? t.touches[0].pageY : t.pageY }); var r = this.iScroll.prevTouches = this.iScroll.prevTouches.splice(-2), n = r[0].x - r[1].x, l = r[0].y - r[1].y, h = this.iScroll.moveDirection; if (h || (h = this.iScroll.moveDirection = Math.abs(l) >= Math.abs(n) ? "Y" : "X", this.iScroll.moveDistance = Math.abs(l) >= Math.abs(n) ? Math.abs(l) : Math.abs(n)), this.options.scrollByColumnAdaptive && this.event.hasEvent(this.id + "_body_tbody", "onscroll") && "X" === h) return void d.B.stopEvent(t); var p = this.hasSubtotal && this.lastSubtotalRow && "none" == this.lastSubtotalRow.style.display; if ("X" == h && n < 0 && 0 == o.scrollLeft || "X" == h && n > 0 && o.scrollLeft >= o.firstChild.offsetWidth - o.offsetWidth || "Y" == h && l < 0 && 0 == a.scrollTop || "Y" == h && l > 0 && this.rowIndex + this.lastIndex + 1 == this.getDataLength() && !p || "Y" == h && this.hasClass("w2grid_adaptive_crosstab") || "Y" == h && 0 === this.getDataLength()) return void ("stop" == this.iScroll.propagation ? d.B.stopEvent(t) : (this.iScrollRemoveMoveClass(), this.iScroll.prevTouches = [], this.iScroll.propagation = "pass")); "X" == h ? this.moveXScroll(n) : this.moveYScroll(l), this.iScroll.propagation = "stop", d.B.stopEvent(t), s.v.setTimer((function() { this.iScrollRemoveMoveClass(), this.iScroll.addMoveClass = !0 }), { key: this.id + "_iScroll", caller: this, delay: this.options.iScrollMoveEffectTime }) } } }, g.prototype.handleTouchEnd = function(t) { if (this.isMobile || window.navigator.msPointerEnabled && this.iScroll.prevTouches && "touch" == t.pointerType) { s.v.clearTimer(this.id + "_iScroll"), this.iScroll.prevTouches = this.iScroll.prevTouches.splice(-2); var e = this.iScroll.prevTouches; if (e.length >= 2) { var i = e[0].x - e[1].x; if (this.options.scrollByColumnAdaptive && this.event.hasEvent(this.id + "_body_tbody", "onscroll") && "X" === this.iScroll.moveDirection) { var o = this.getElementById(this.id + "_body_tbody"), a = o.firstChild.offsetWidth, r = 0; return i > 0 ? r = Math.ceil(i / a) * a : i < 0 && (r = Math.floor(i / a) * a), void (o.scrollLeft = Math.floor((o.scrollLeft + r) / a) * a) } var n = new Date; this.slideX(i, n) } else this.iScrollRemoveMoveClass() } }, g.prototype.iScrollAddMoveClass = function() { var t = this.getElementById(this.id + "_iScrollX"), e = this.getElementById(this.id + "_iScrollY"); this.__addClass(t, "w2grid_iScrollX_move"), this.__addClass(e, "w2grid_iScrollY_move") }, g.prototype.iScrollRemoveMoveClass = function() {
						var t = this.getElementById(this.id + "_iScrollX"), e = this.getElementById(this.id + "_iScrollY")
						; this.__removeClass(t, "w2grid_iScrollX_move"), this.__removeClass(e, "w2grid_iScrollY_move")
					}, g.prototype.moveXScroll = function(t) { var e = this.getElementById(this.id + "_iScrollX"), i = this.getElementById(this.id + "_dataLayer"), o = this.getElementById(this.id + "_scrollX_left"), s = this.scrollX_right; s.scrollLeft += t; var a = parseInt(o.style.width, 10), r = s.firstChild.offsetWidth - s.offsetWidth, n = parseInt(s.offsetWidth * s.offsetWidth / s.firstChild.offsetWidth, 10); e.style.width = (n < 30 ? 30 : n) + "px", e.style.left = a + s.scrollLeft / r * (i.offsetWidth - a - e.offsetWidth) + "px", this.options.tooltipDisplay && this.isMobile && this.hideTooltip() }, g.prototype.slideX = function(t, e) { var i = new Date, o = parseInt(t / 3, 10); this.moveXScroll(o), t -= o, Math.abs(t) >= 0 && i - e < this.options.iScrollSlideTime ? (s.v.clearTimer(this.id + "_iScroll_slideX"), s.v.setTimer(this.slideX, { key: this.id + "_iScroll_slideX", caller: this, delay: this.options.iScrollSlidePeriod, args: [t, e] })) : this.iScrollRemoveMoveClass() }, g.prototype.moveYScroll = function(t) { t *= parseInt(this.options.touchScrollDelta, 10) || 5; var e = this.getElementById(this.id + "_iScrollY"), i = this.getElementById(this.id + "_scrollY_div"); i.scrollTop += t; var o = i.firstChild.offsetHeight, s = this.getElementById(this.id + "_dataLayer"), a = o - s.offsetHeight, r = parseInt(s.offsetHeight * s.offsetHeight / o, 10); e.style.height = (r < 30 ? 30 : r) + "px", e.style.top = i.scrollTop / a * (s.offsetHeight - e.offsetHeight) + "px", this.options.tooltipDisplay && this.isMobile && this.hideTooltip() }, g.prototype.tbodyMoveXScroll = function(t) { if (this.editedCell && this.editedCell.handleEndEdit(), !this.mobile && this.options.scrollByColumnAdaptive, this.options.adaptiveSlideHeader) { var e = this.options.adaptive, i = parseInt(this.options.adaptiveThreshold) || 480; if ("crosstab" == e && !(r.D.isIE() && parseInt(s.v.browserVersion(), 10) < 10) && parseInt(top.document.documentElement.clientWidth || top.document.body.clientWidth) <= i && this.slideHeadObj && "absolute" == this.slideHeadObj.render.style.position) { this.slideHeadObj.hidden && ($(this.slideHeadObj.render.firstChild).animate({ width: "show" }), this.slideHeadObj.hidden = !1); var o = this, a = function() { r.D.setTimeout((function() { null != WebSquare.userTimerHash[o.id + "_adaptiveSlideHeader"] ? (r.D.clearTimeout(o.id + "_adaptiveSlideHeader"), a()) : o.slideHeadObj.hidden || ($(o.slideHeadObj.render.firstChild).animate({ width: "hide" }), o.slideHeadObj.hidden = !0) }), { delay: 1e3, key: o.id + "_adaptiveSlideHeader" }) }; a() } } }; var f = function() { }; f.prototype.nonCharKeys = { 4: "insert", 33: "pageup", 34: "pagedown", 35: "end", 36: "home", 37: "left", 38: "up", 39: "right", 40: "down", 9: "tab", 13: "enter", 46: "del", 16: "shift", 17: "ctrl", 18: "alt", 21: "hanyoung", 25: "hanja", 91: "window", 20: "capslock", 112: "F1", 113: "F2", 114: "F3", 115: "F4", 116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "numlock", 145: "scrolllock" }, f.prototype.handleBodyKeyDown = function(t) {
						if (this.isKeyPressed = !0, this.editMode) {
							var e = this.editedCell.options.inputType; switch ("text" !== e && "textarea" !== e && "calendar" !== e && "textImage" !== e && "secret" !== e || (this.beforeEditedCellInfo = { rowIndex: this.editedCell.editRowIndex, colIndex: this.getColumnIndex(this.editedCell.id), colID: this.getColumnID(this.editedCell.id), oldValue: this.editedCell.beforeEditValue || "", newValue: this.editedCell._getEditedValue(), inputType: e, keyCode: t.charCode ? t.charCode : t.keyCode }), T = t.keyCode) {
								case 9: if (d.B.stopEvent(t), "down" == this.options.tabKeyMove) { if ("textarea" == this.editedCell.options.inputType && !t.ctrlKey) break; if (0 == this.editedCell.internal && "custom" == this.editedCell.options.inputType && "textarea" == (this.editedCell.cellManagerHashByRowIndex[this.editedCell.editRowIndex] ? this.editedCell.cellManagerHashByRowIndex[this.editedCell.editRowIndex] : this.editedCell).options.inputType) break; l = !1, "calendar" === e && (l = this.options.keyMoveEditMode && "down" == this.options.tabKeyMove); var i = this.editedCell.id } if (!1 !== this._fireOnviewchange(this.editedCell.id, "handleEndEdit", [t, l], { checkFunc: function(t) { return t + "" != "false" } })) {
									var o = !1; if ("down" === this.options.tabKeyMove) {
										var a = this.getLastFocusedCell().focusedColIndex
										; o = this.moveVertical(t, t.shiftKey ? "up" : "down", this.options.keyMoveEditMode, i); var n = this.getLastFocusedCell().focusedColIndex; "focusNextTabOrder" === o ? (this._fireOnviewchange(i, "_handleEndEdit_focus", [this.getInput(this.getCellInfo(i))]), this.focusNextTabOrder()) : (!o || a !== n && null != a && null != n) && this._fireOnviewchange(i, "_handleEndEdit_focus", [this.getInput(this.getCellInfo(i))])
									} else o = this.moveHorizontal(t, t.shiftKey ? "left" : "right", this.options.keyMoveEditMode); o || this._setFocusedCell(this.editMode)
								} break; case 13: if ("textarea" == this.editedCell.options.inputType && !t.ctrlKey) break; if (0 == this.editedCell.internal && "custom" == this.editedCell.options.inputType && "textarea" == (this.editedCell.cellManagerHashByRowIndex[this.editedCell.editRowIndex] ? this.editedCell.cellManagerHashByRowIndex[this.editedCell.editRowIndex] : this.editedCell).options.inputType) break; var l = !1; r.D.isIEAllVersion() && "calendar" === e && (l = this.options.keyMoveEditMode && "right" != this.options.enterKeyMove && "none" != this.options.enterKeyMove); i = this.editedCell.id; if (!1 !== this._fireOnviewchange(this.editedCell.id, "handleEndEdit", [t], { checkFunc: function(t) { return t + "" != "false" } })) if (l) { D = this; setTimeout((function() { var e = !1; if ("right" == D.options.enterKeyMove || "editRight" == D.options.enterKeyMove) e = D.moveHorizontal(t, t.shiftKey ? "left" : "right", this.options.keyMoveEditMode); else if ("none" != D.options.enterKeyMove && "edit" != D.options.enterKeyMove) { var o = D.getLastFocusedCell().focusedColIndex; e = D.moveVertical(t, t.shiftKey ? "up" : "down", D.options.keyMoveEditMode, i); var s = D.getLastFocusedCell().focusedColIndex; "focusNextTabOrder" === e ? (D._fireOnviewchange(i, "_handleEndEdit_focus", [D.getInput(D.getCellInfo(i))]), D.focusNextTabOrder()) : (!e || o !== s && null != o && null != s) && D._fireOnviewchange(i, "_handleEndEdit_focus", [D.getInput(D.getCellInfo(i))]) } e || D._setFocusedCell(D.editMode) }), 1) } else { o = !1; if ("right" == this.options.enterKeyMove || "editRight" == this.options.enterKeyMove) o = this.moveHorizontal(t, t.shiftKey ? "left" : "right", this.options.keyMoveEditMode); else if ("none" != this.options.enterKeyMove && "edit" != this.options.enterKeyMove) { a = this.getLastFocusedCell().focusedColIndex; o = this.moveVertical(t, t.shiftKey ? "up" : "down", this.options.keyMoveEditMode, i); n = this.getLastFocusedCell().focusedColIndex; "focusNextTabOrder" === o ? (this._fireOnviewchange(i, "_handleEndEdit_focus", [this.getInput(this.getCellInfo(i))]), this.focusNextTabOrder()) : (!o || a !== n && null != a && null != n) && this._fireOnviewchange(i, "_handleEndEdit_focus", [this.getInput(this.getCellInfo(i))]) } o || this._setFocusedCell(this.editMode) } break; case 27: this.editedCell.handleCancelEdit(t), this._setFocusedCell(), d.B.stopEvent(t); break; case 86: if ((t.ctrlKey || t.metaKey) && this.options.preventPaste && !this.editedCell) { d.B.stopEvent(t); break } default: var h = {}; h.rowIndex = this.editedCell.editRowIndex, h.colIndex = this._dataList.getColumnIndex(this.editedCell.id), h.colID = this.editedCell.id, h.keyCode = t.charCode ? t.charCode : t.keyCode, this.editedCell._getEditedValue && (this.editedCell.beforeEditValue = this.editedCell._getEditedValue()), d.B.fireEvent(this, "oneditkeydown", h)
							}
						} else {
							if (this.options.ignoreKeyCheckFunction) { var p = null, u = !1; try { if ("function" == typeof this.options.ignoreKeyCheckFunction ? p = this.options.ignoreKeyCheckFunction : "function" == typeof (p = r.D.getGlobalFunction(this.options.ignoreKeyCheckFunction, this.scope_id)) && (this.options.ignoreKeyCheckFunction = p), "function" == typeof p && (u = p.call(this, t)), u) return void d.B.preventDefault(t) } catch (t) { p = null } } var c = r.D.getDataPrefix("tdIndex"), g = (r.D.getDataPrefix("colIndex"), r.D.getDataPrefix("col_id")), f = r.D.getDataPrefix("directItemChoice"); if ("none" != this.options.focusMode && (-1 == this._getFocusedRowIndex() || null == this.getFocusedColumnIndex())) {
								if (13 == t.keyCode && document.activeElement == this.render && (this._setFocusedCell(), d.B.stopEvent(t)), "A" != d.B.getTarget(t).tagName) return; for (var m = this.event.getTargetIterator(t, this.render), y = !1; m.next();)if (m.match("gridBodyDefault")) {
									y = !0
									; var b = m.getElement(), w = parseInt(b.getAttribute(c)), v = parseInt(w / this.realRowDataLength), C = b.getAttribute(g), I = this.getColumnIndex(C); this.focusedCell.push({ focusedTd: b, focusedRowIndex: v, focusedColIndex: I }); var _ = b.getElementsByTagName("a"); if (-1 == this.focusedCellLinkIndex) for (var x = 0; x < _.length; x++)document.activeElement == _[x] && (this.focusedCellLinkIndex = x); this.focusedCellLinkLength = _.length; break
								} if (!y) return
							} var S = !1; if (s.v.browserCheck.safari && (t.ctrlKey || t.metaKey)) { this.tempEditableCell = document.activeElement, this.tempEditableCell.contentEditable = "true", this.tempEditableCell.style.textShadow = "0 0 0 " + WebSquare.style.getStyle(this.tempEditableCell, "color"), this.tempEditableCell.style.color = "transparent"; var D = this; s.v.setTimer((function() { D.tempEditableCell.contentEditable = "inherit", this.tempEditableCell.style.color = "", this.tempEditableCell.style.textShadow = "" }), { key: this.id + "_tempEditableCell_contentEditable", caller: this, delay: 500 }) } switch (t.keyCode) { case 37: case 39: if (this.options.moveKeyEditMode) { var R = 37 == t.keyCode ? "left" : "right"; return this.moveHorizontal({ byApi: !0 }, R, !0), void d.B.stopEvent(t) } case 38: case 40: if (this.skipScrollEndEvent = !1, this.skipScrollStartEvent = !1, this.options.moveKeyEditMode) { R = 38 == t.keyCode ? "up" : "down"; return this.moveVertical({}, R, !0), void d.B.stopEvent(t) } case 33: case 34: case 35: case 36: case 9: S = !0; break; case 13: if (this.options.senseReader && this.options.focusImage && this.getLastFocusedCell().focusedColIndex) if ((k = this.getCellInfo(this.getLastFocusedCell().focusedColIndex)) && "image" == k.options.inputType) for (m = this.event.getTargetIterator(t, this.render); m.next();)if (m.match("w2grid_image")) { var L = r.D.getGlobalFunction(k.options.imageClickFunction, this.scope_id); "function" == typeof L && L.call(this, this.getLastFocusedCell().focusedRowIndex, k.id, this.dataList.getCellData(this.getLastFocusedCell().focusedRowIndex, k.id)) } if (this.options.senseReader && null != this.getLastFocusedCell().focusedColIndex) if ((k = this.getCellInfo(this.getLastFocusedCell().focusedColIndex)) && "select" == k.options.inputType && "ul" == k.options.tableRender) return this.setEditHtml(t), void d.B.stopEvent(t); S = !0; break; default: S = !1 }if (1 == S && "false" == this.options.focusMove) { var T = t.charCode ? t.charCode : t.keyCode; if (!this.options.senseReader) return; if (9 != T) return } if (this.F2Mode) switch (t.keyCode) { case 8: case 46: case 35: case 36: case 37: case 38: case 39: case 40: return }switch (t.keyCode) {
								case 4: break; case 46: this.removeCellData(t), d.B.stopEvent(t); break; case 32: this.doDefaultAction(t); break; case 33: this.movePageUp(t), d.B.stopEvent(t); break; case 34: this.movePageDown(t), d.B.stopEvent(t); break; case 35: this.moveHorizontal(t, "end"), d.B.stopEvent(t); break; case 36: this.moveHorizontal(t, "home"), d.B.stopEvent(t); break; case 37: this.moveHorizontal(t, "left"), d.B.stopEvent(t); break; case 38: this.moveVertical(t, "up"), d.B.stopEvent(t); break; case 39: this.moveHorizontal(t, "right"), d.B.stopEvent(t); break; case 40: this.moveVertical(t, "down"), d.B.stopEvent(t); break; case 9: var k = this.getCellInfo(this.getLastFocusedCell().focusedColIndex); if (this.options.senseReader && k && "image" == k.options.inputType && this.options.focusImage && this.getLastFocusedCell().focusedColIndex) { d.B.stopPropagation(t); for (m = this.event.getTargetIterator(t, this.render); m.next();) { if (m.match("w2grid_image")) if (d.B.getTarget(t) == this.render) this.getLastFocusedCell().focusedTd.setAttribute("tabIndex", -1); else (this.moveHorizontal(t, t.shiftKey ? "left" : "right", this.options.keyMoveEditMode) || "linear" != this.options.focusFlow) && d.B.stopEvent(t) } } else if (d.B.getTarget(t) == this.render) this.getLastFocusedCell().focusedTd.setAttribute("tabIndex", -1); else { (("down" == this.options.tabKeyMove ? this.moveVertical(t, t.shiftKey ? "up" : "down", this.options.keyMoveEditMode) : "none" == this.options.tabKeyMove || this.moveHorizontal(t, t.shiftKey ? "left" : "right", this.options.keyMoveEditMode)) || "linear" != this.options.focusFlow) && d.B.stopEvent(t) } break; case 13: k = this.getCellInfo(this.focusedCell[0].focusedColIndex)
									; var A = this.focusedCell[0].focusedRowIndex, F = this.focusedCell[0].focusedColIndex, E = !0 === this.options.senseReader && WebSquare.util.isIEAllVersion() && (this.___getEditReadOnly(A, F) || this._getEditDisabled(A, F)); if ("enter" === this.options.drilldownToggle && 1 == this.focusedCell.length && k && "drilldown" == k.options.inputType) { var M = this.focusedCell[0].focusedRowIndex, O = this.dataList.getRealRowIndex(M); this.toggle(O); break } if (this.editMode || "autoComplete" !== k.options.inputType && "select" !== k.options.inputType || !k.options.directOpen) if ("edit" == this.options.enterKeyMove || "editRight" == this.options.enterKeyMove || "editDown" == this.options.enterKeyMove) this.setEditHtml(t); else if ("none" == this.options.enterKeyMove); else if ("right" == this.options.enterKeyMove) { if (!0 === this.options.senseReader) if (1 == this.focusedCell.length) if ("text" === k.options.inputType) if (!E) (N = this.getInput(k, this.focusedCell[0].focusedTd)) && N.blur(); E || this.moveHorizontal(t, t.shiftKey ? "left" : "right", this.options.keyMoveEditMode) } else { var N; if (!0 === this.options.senseReader) if (1 == this.focusedCell.length) if ("text" === k.options.inputType) if (!E) (N = this.getInput(k, this.focusedCell[0].focusedTd)) && N.blur(); E || this.moveVertical(t, t.shiftKey ? "up" : "down", this.options.keyMoveEditMode) } else "autoComplete" === k.options.inputType && (k.autoCompleteImageClicked = !0), this.setEditHtml(t); d.B.stopEvent(t); break; case 67: if ("native" === this.options.copyType) break; if (t.ctrlKey || t.metaKey) { if (r.D.isIEAllVersion()) this.handleCopyEvent({}); else if (!r.D.isIEAllVersion() && (s.v.browserCheck.moz || s.v.browserCheck.chrome && !this.options.preventCopy)) { var B = document.activeElement, G = document.createElement("textarea"), D = this, H = document.getElementsByTagName("body")[0]; G.oncopy = function(t) { D.handleCopyEvent(t), H.removeChild(this), document.activeElement != B && B.focus() }, G.textContent = "temp", H.appendChild(G), G.select(); try { document.execCommand("copy") } catch (t) { } } } else r.D.getBoolean(t.srcElement.getAttribute(f)) && (this.directItemChoiceKeyObj.select = t.keyCode), this.setEditHtml(t), this.options.directEdit && this._directEdit(t); break; case 88: if (t.ctrlKey || t.metaKey) { if (r.D.isIEAllVersion()) this.handleCutEvent({}); else if (!r.D.isIEAllVersion() && (s.v.browserCheck.moz || s.v.browserCheck.chrome)) { G = document.createElement("textarea"), D = this, H = document.getElementsByTagName("body")[0]; G.oncut = function(t) { D.handleCutEvent(t), H.removeChild(this) }, G.textContent = "temp", H.appendChild(G), G.select(); try { document.execCommand("cut") } catch (t) { } } } else r.D.getBoolean(t.srcElement.getAttribute(f)) && (this.directItemChoiceKeyObj.select = t.keyCode), this.setEditHtml(t), this.options.directEdit && this._directEdit(t); break; case 86: if (t.ctrlKey || t.metaKey) { if (this.options.preventPaste && !this.editedCell) { d.B.stopEvent(t); break } if (r.D.isIEAllVersion()) this.handlePasteEvent({}); else if (!r.D.isIEAllVersion() && (s.v.browserCheck.moz || s.v.browserCheck.chrome || s.v.browserCheck.safari)) { G = document.createElement("textarea"), D = this; G.style.opacity = "0", G.onpaste = function(t) { D.handlePasteEvent(t), H.removeChild(this) }, G.textContent = "temp", (H = document.getElementsByTagName("body")[0]).appendChild(G), G.select(); try { document.execCommand("paste") } catch (t) { } } } else { r.D.getBoolean(t.srcElement.getAttribute(f)) && (this.directItemChoiceKeyObj.select = t.keyCode), this.setEditHtml(t), this.options.directEdit && this._directEdit(t) } break; case 90: if (t.ctrlKey); else r.D.getBoolean(t.srcElement.getAttribute(f)) && (this.directItemChoiceKeyObj.select = t.keyCode), this.setEditHtml(t), this.options.directEdit && this._directEdit(t); break; case 27: "none" != this.options.focusMode && "linear" != this.options.focusFlow && (this.getLastFocusedCell().focusedTd.setAttribute("tabIndex", -1), this.render.focus()); break; case 16: case 17: case 18: case 21: case 229: case 25: case 91: case 20: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: break; case 65: if (this.options.useSelectAll && t.ctrlKey) { this.setFocusedMultiCell(0, 0, this.getRowCount() - 1, this.getColumnCount() - 1); break }
								default: if (!t.ctrlKey && !t.metaKey && !t.altKey) r.D.getBoolean(t.srcElement.getAttribute(f)) && (this.directItemChoiceKeyObj.select = t.keyCode), this.setEditHtml(t), this.options.directEdit && this._directEdit(t)
							}
						} this.isKeyPressed = !1
					}, f.prototype.handleOnfocus = function(t) { if (this.getDataLength() > 0 && (-1 == this._getFocusedRowIndex() || null == this.getFocusedColumnIndex())) { for (var e = null, i = this.colIndexInfo.body.colInfo.colIndexMatch, o = this.colIndexes.bodyColInfo.trIndexArr, s = o[this.defaultColCnt], a = 0; a < i.length; a++) { var r = i[a]; if (!this.hiddenList[a]) { for (var n = r.length - 1; n >= 0; n--) { var l = r[n] - this.defaultColCnt; if (o[r[n]] <= s) { if (this.options.readOnlyTabIgnore && this.___getEditReadOnly(0, l)) break; if (this.options.ignoreNonEditableCell && (this.___getEditReadOnly(0, l) || this._getEditDisabled(0, l))) break; e = l; break } } if (null !== e) break } } null !== e && this._setFocusedCell(0, e) } }, f.prototype.removeCellData = function(t) { this.handleCutEvent(t, !0) }, f.prototype.doDefaultAction = function(t) { if ("none" == this.options.focusMode) { for (var e = d.B.getTarget(t); e && "TD" != e.tagName;)e = e.parentNode; e && this.getCellInfo(e).doDefaultAction(t) } else this.getCellInfo(this.getLastFocusedCell().focusedColIndex).doDefaultAction(t) }, f.prototype.setEditHtml = function(t) { var e = d.B.getTarget(t); if (this.options.fastEditMode || "INPUT" == e.tagName || d.B.stopEvent(t), this.focusedCell.length > 0) { var i = this.focusedCell[this.focusedCell.length - 1]; null != i.focusedTd && this.setEditMode(i.focusedTd) } }, f.prototype.getFirstTdTrIndex = function(t) { for (var e = t.parentNode, i = r.D.getDataPrefix("trIndex"); "0" != e.getAttribute(i);)e = r.D.prev(e); return e }, f.prototype.fixScrollRightDirection = function() { var t = this.getLastFocusedCell(), e = this.getElementById(this.id + "_dataLayer").offsetWidth, i = this.getElementById(this.id + "_scrollX_right"); if (t && t.focusedTd) { if ("native" === this.options.drawType) { var o = document.getElementById(this.id + "_scrollX_div"); "hidden" === o.style.visibility || o.offsetWidth } var s = t.focusedTd.offsetLeft, a = t.focusedTd.offsetWidth + 1; r.D.isFF() && (a -= 1), r.D.isOpera() && (a += 2); var n = s + a - e; if (this.options.lazyDrawHiddenColumn) { var l = this.focusedCell[0].focusedTd; if ("none" == l.style.display || n > 0) if (this.options.scrollByColumn) { for (var h = e - this.fixedWidth, d = 0; d < this.columnOrder.length; d++)if (this.columnOrder[d] == t.focusedColIndex) { y = d + this.defaultColCnt; break } var p = -1, u = 0; r.D.isOpera() && (u = 2); for (var c = y; c >= 0; c--)if (!this.hiddenList[c] && (h -= this.colWidthList[c]) < 0) { p = c; break } c = 0; for (this.fixedWidth > 0 && (c = this.getFixedColumnLastIndex()); c <= p; c++)this.hiddenList[c] || (u += this.colWidthList[c]); this.scrollXPreventEndEdit = !0, i.scrollLeft = u, this._handleScrollX() } else { var g = r.D.getDataPrefix("colIndex"), f = parseInt(l.getAttribute(g), 10), m = 0; r.D.isOpera() && (m = 2); for (d = 0; d <= f; d++)this.hiddenList[d] || (m += this.colWidthList[d]); this.scrollXPreventEndEdit = !0, i.scrollLeft = m - e, this._handleScrollX() } } else if (n > 0) if (this.options.scrollByColumn) { h = e - this.fixedWidth; var y, b = t.focusedColIndex % this.columnOrder.length; for (d = 0; d < this.columnOrder.length; d++)if (this.columnOrder[d] == b) { y = d + this.defaultColCnt; break } for (p = -1, u = 0, c = y; c >= 0; c--)if (!this.hiddenList[c]) if (0 != this.colIndexes.bodyColInfo.colSpanArr.length) { if ((h -= this.colWidthList[c] * (this.colIndexes.bodyColInfo.colSpanArr[c] ? this.colIndexes.bodyColInfo.colSpanArr[c] : 1)) < 0) { p = c; break } } else if ((h -= this.colWidthList[c]) < 0) { p = c; break } c = 0; for (this.fixedWidth > 0 && (c = this.getFixedColumnLastIndex()); c <= p; c++)this.hiddenList[c] || (0 != this.colIndexes.bodyColInfo.colSpanArr.length ? u += this.colWidthList[c] * (this.colIndexes.bodyColInfo.colSpanArr[c] ? this.colIndexes.bodyColInfo.colSpanArr[c] : 1) : u += this.colWidthList[c]); this.scrollXPreventEndEdit = !0, i.scrollLeft = u, this._handleScrollX() } else this.scrollXPreventEndEdit = !0, i.scrollLeft = i.scrollLeft + n, this._handleScrollX() } }, f.prototype.fixScrollLeftDirection = function() {
						var t = this.getLastFocusedCell(); if (t && t.focusedTd) {
							if ("native" === this.options.drawType) { var e = document.getElementById(this.id + "_scrollX_div"); "hidden" === e.style.visibility || e.offsetWidth }
							var i = r.D.getDataPrefix("colIndex"), o = t.focusedTd.getAttribute(i); o = parseInt(o); for (var s = this.getElementById(this.id + "_scrollX_right"), a = 0, n = this.getFixedColumnLastIndex(); n < o; n++) { if (!this.hiddenList[n]) a += this.colWidthList[n] } s.scrollLeft > a && (this.scrollXPreventEndEdit = !0, s.scrollLeft = a, this._handleScrollX())
						}
					}, f.prototype.getLeftMostFocusableColIndex = function(t) { var e = this.colIndexInfo.body.colInfo.colIndexArr, i = null; if (t >= this.dataList.getRowCount() || t < 0) return i; for (var o = 0; o < e.length - this.defaultColCnt; o++) { var s = !1, a = this.getCellInfo(o); if (!0 !== a.options.skipKeyMove) { if (this.options.readOnlyTabIgnore && (s = this.___getEditReadOnly(t, o)), (this.options.ignoreNonEditableCell || this.options.senseReader) && (s = this.___getEditReadOnly(t, o) || this._getEditDisabled(t, o)), this.options.senseReader && "radio" == a.options.inputType && this.getCellData(t, o) != a.options.trueValue) { var r = this.getCheckedIndex(a.colID); r ? s = r[0] !== t : 0 != t && (s = !0) } if ((this.options.senseReader && this.___getEditReadOnly(t, o) || this._getEditDisabled(t, o)) && ("user" == a.options.inputType || "link" == a.options.inputType)) { var n = this.data_td_list[o + (t - this.rowIndex) * this.oneRowDataLength], l = n.getElementsByTagName("a"); 0 == l.length && (l = n.getElementsByTagName("input")), 0 != l.length && (s = !1) } if (this.isColMerge && this.cellInfoHash[this.tdIdList[o]].options.colMerge) { var h = this.dataList.getCellData(t - 1, o), d = this.upperGroupingTest(t, o); h == this.dataList.getCellData(t, o) && d && (s = !0) } if (this.hiddenRowObj.length > 0 && !this._getRowVisible(t) && (s = !0), this.getMerged(t, o) && !this.cellMergeInfo[t + "_" + o] && (s = !0), !this.hiddenList[o] && !s) { i = o; break } } } return i }, f.prototype.getRightMostFocusableColIndex = function(t) { var e = this.colIndexInfo.body.colInfo.colIndexArr, i = null; if (t >= this.getRowCount() || t < 0) return i; for (var o = e.length - 1 - this.defaultColCnt; o >= 0; o--) { var s = !1, a = this.getCellInfo(o); if (!0 !== a.options.skipKeyMove) { if (this.options.readOnlyTabIgnore && (s = this.___getEditReadOnly(t, o)), (this.options.ignoreNonEditableCell || this.options.senseReader) && (s = this.___getEditReadOnly(t, o) || this._getEditDisabled(t, o)), this.options.senseReader && "radio" == a.options.inputType && this.getCellData(t, o) != a.options.trueValue) { var r = this.getCheckedIndex(a.colID); r ? s = r[0] !== t : 0 != t && (s = !0) } if ((this.options.senseReader && this.___getEditReadOnly(t, o) || this._getEditDisabled(t, o)) && ("user" == a.options.inputType || "link" == a.options.inputType)) if (t < this.rowIndex) s = !0; else { var n = this.data_td_list[o + (t >= this.rowIndex ? t - this.rowIndex : t) * this.oneRowDataLength], l = n.getElementsByTagName("a"); 0 == l.length && (l = n.getElementsByTagName("input")), s = 0 == l.length } if (this.isColMerge && this.cellInfoHash[this.tdIdList[o]].options.colMerge) { var h = this._dataList.getCellData(t - 1, o), d = this.upperGroupingTest(t, o); h == this._dataList.getCellData(t, o) && d && (s = !0) } if (this.hiddenRowObj.length > 0 && !this._getRowVisible(t) && (s = !0), this.getMerged(t, o) && !this.cellMergeInfo[t + "_" + o] && (s = !0), !this.hiddenList[o + this.defaultColCnt] && !s) { i = o; break } } } return i }, f.prototype.moveHorizontal = function(t, e, i, o) {
						if ("false" == this.options.focusMove || "vertical" == this.options.focusMove) { o = t.charCode ? t.charCode : t.keyCode; if (!this.options.senseReader) return !1; if (9 != o) return !1 } var s, a = this.getLastFocusedCell(), n = a.focusedRowIndex, l = a.focusedColIndex, h = (this.colIndexInfo.body.colInfo.colIndexArr, this._getRealColIndex("body", this.tdIdList[l]) + this.defaultColCnt), p = this.colIndexInfo.body.colInfo.colIndexMatch, u = this.columnOrder, c = this.colIndexes.bodyColInfo.trIndexArr, g = c[l + this.defaultColCnt], f = !!t && 9 == t.keyCode, m = !!t && (9 == t.keyCode || 13 == t.keyCode), y = !!t && t.shiftKey, b = (e = e || "right", 0 == t || t && !0 === t.byApi); s = 1 == this.options.moveKeyEditModeAll && b ? !!o && (37 == o || 39 == o) : !!t && (37 <= t.keyCode && t.keyCode <= 40), a.bTrIndex && (g = a.bTrIndex); var w = null, v = n; if (this.options.focusMultiRow) {
							if ("left" == e) var C = h - 1, I = this.defaultColCnt - 1, _ = -1; else if ("right" == e) C = h + 1, I = p.length, _ = 1; else if ("home" == e) C = this.defaultColCnt, I = p.length, _ = 1; else C = p.length - 1, I = this.defaultColCnt - 1, _ = -1; for (var x = C; x != I; x += _) {
								var S = p[x]
								; if (!this.hiddenList[x]) { for (var D = S.length - 1; D >= 0; D--) { var R = S[D] - this.defaultColCnt; if (!(this.hiddenRowObj.length > 0) || this._getRowVisible(n)) if (!this.getMerged(n, R) || this.cellMergeInfo[n + "_" + R]) if (!0 !== (k = this.getCellInfo(R)).options.skipKeyMove) if (c[S[D]] <= g && ("left" != e && "right" != e || R != l)) { if ((this.options.readOnlyTabIgnore || this.options.senseReader) && this.___getEditReadOnly(n, R)) break; if (m && (this.options.ignoreNonEditableCell || this.options.senseReader) && (this.___getEditReadOnly(n, R) || this._getEditDisabled(n, R))) break; if (this.isColMerge && this.cellInfoHash[this.tdIdList[R]].options.colMerge) { var L = this.dataList.getCellData(n - 1, R), T = this.upperGroupingTest(n, R); if (L == this.dataList.getCellData(n, R) && T) break } w = R; break } } if (null !== w) break }
							}
						} else { var k = this.getCellInfo(l), A = !1; this.options.senseReader && "user" == k.options.inputType && this.___getEditReadOnly(n, l) ? A = !0 : (this.focusedCellLinkIndex = -1, this.focusedCellLinkLength = 0); var F = this.getLocationRowCol(n, l), E = F.rowIndex, M = F.colIndex, O = this.htmlInfo.body.rowAttrArr.length; a.bMovedRow && (E = a.bMovedRow); var N = E % O; if ("left" == e) if (A && this.focusedCellLinkIndex > 0) C = M, I = u.length, _ = 1; else C = M - 1, I = -1, _ = -1; else if ("right" == e) if (A && this.focusedCellLinkIndex + 1 < this.focusedCellLinkLength) C = M, I = u.length, _ = 1; else { this.focusedCellLinkIndex = -1, this.focusedCellLinkLength = 0; C = M + F.colSize, I = u.length, _ = 1 } else if ("home" == e) { C = 0, I = u.length, _ = 1; E -= N } else { C = u.length - 1, I = 0, _ = -1; E = E + O - N - 1 } for (x = C; ; x += _) { if (x == I) if ("left" == e && N > 0) x = u.length - 1, E--; else { if (!("right" == e && N < O - 1)) break; x = 0, E++ } var B = this.getOriginalRowCol(E, x); if (!B.noLeftTop) { _ > 0 && (_ = B.colSize); R = B.colIndex; if (!this.hiddenList[x + this.defaultColCnt]) if (!(this.hiddenRowObj.length > 0) || this._getRowVisible(n)) if (!this.getMerged(n, R) || this.cellMergeInfo[n + "_" + R]) if (!(k = this.getCellInfo(R)).options.blockSelect && !0 !== k.options.skipKeyMove) { if (this.options.senseReader && "radio" == k.options.inputType && this.getCellData(n, R) != k.options.trueValue && 0 != n) { if (this.getCheckedIndex(k.colID)) continue; if (0 != n) continue } if ("left" != e && "right" != e || (A || R != l)) { var G = !1; if (f && this.___getEditReadOnly(n, R) && (this.options.readOnlyTabIgnore || this.options.senseReader)) { if ("user" != k.options.inputType && "link" != k.options.inputType || !this.options.senseReader) continue; var H = this.data_td_list[R + (v - this.rowIndex) * this.oneRowDataLength], W = H.getElementsByTagName("a"); if (0 == W.length && (W = H.getElementsByTagName("input")), "right" == e) for (var V = 0; V < W.length; V++) { if (document.activeElement == W[V]) { this.focusedCellLinkIndex = V; break } this.focusedCellLinkIndex = -1 } else if ("left" == e) for (V = W.length - 1; V > -1; V--) { if (document.activeElement == W[V]) { this.focusedCellLinkIndex = V; break } this.focusedCellLinkIndex = -1 } if (!W[0]) continue; ("right" == e && this.focusedCellLinkIndex != W.length - 1 || "left" == e && 0 != this.focusedCellLinkIndex) && (G = !0) } if ((m || s) && (this.options.ignoreNonEditableCell || this.options.senseReader) && (this.___getEditReadOnly(n, R) || this._getEditDisabled(n, R)) && (!f || 1 != G)) continue; if (this.isColMerge && this.cellInfoHash[this.tdIdList[R]].options.colMerge) { L = this.dataList.getCellData(n - 1, R), T = this.upperGroupingTest(n, R); if (L == this.dataList.getCellData(n, R) && T) continue } w = R; break } if (null !== w) break } } } } if (null === w && (this.focusedCellLinkIndex = -1, this.focusedCellLinkLength = 0), null !== w) { if (i && (this.___getEditReadOnly(v, w) || this._getEditDisabled(v, w)) && (i = !1), i && (this.options.keyMoveEditMode || this.options.moveKeyEditMode || this.options.moveKeyEditModeAll)) { k = this.getCellInfo(w); r.D.getBoolean(k.options.skipKeyMoveEditMode) && (i = !1) } return this._setFocusedCell(n, w, i, { tabDirection: e }), (a = this.getLastFocusedCell()).bTrIndex = g, a.bMovedRow = E, !0 } if ("linear" == this.options.focusFlow) {
							if (n > 0 && y) {
								var q = this.getRightMostFocusableColIndex(n - 1); if (1 == this.options.senseReader && "all" != this.options.visibleRowNum && null == q) for (; n >= 0 && null == q;) {
									this._setGridBorderNoRefresh = !0; var j = -1; this.hasSubtotal && (j -= this.getHasSubtotalCount(n - 1)), "true" !== this.options.keepScrollForSenseReader && this.addGridScroll(j), this._setGridBorderNoRefresh = !1,
										1 == this.options.senseReader && "all" != this.options.visibleRowNum && (q = this.getRightMostFocusableColIndex(n - 1)), null == q && (n -= 1)
								} else for (; n >= 0 && null == q;)n -= 1, q = this.getRightMostFocusableColIndex(n - 1); if (null == q) return this.editedCell && this.editedCell.handleEndEdit(t), !1; if (1 == this.options.senseReader && "all" != this.options.visibleRowNum && (this.focusedCellLinkIndex = -1, this.focusedCellLinkLength = 0), n - 1 < this.rowIndex) { this._setGridBorderNoRefresh = !0; j = -1; this.hasSubtotal && (j -= this.getHasSubtotalCount(n - 1)), this.addGridScroll(j), this._setGridBorderNoRefresh = !1, 1 == this.options.senseReader && null != q && "all" != this.options.visibleRowNum && (q = this.getRightMostFocusableColIndex(n - 1)) } return "custom" == (k = this.getCellInfo(q)).options.inputType && n - 1 >= 0 && (v = n - 1), i && (this.___getEditReadOnly(v, q) || this._getEditDisabled(v, q)) && (i = !1), i && this.isKeyPressed && (this.options.keyMoveEditMode || this.options.moveKeyEditMode || this.options.moveKeyEditModeAll) && r.D.getBoolean(k.options.skipKeyMoveEditMode) && (i = !1), this._setGridBorderNoRefresh = !0, this._setFocusedCell(n - 1, q, i, { tabDirection: e }), this._setGridBorderNoRefresh = !1, !0
							} if ("left" == e && n > 0 && !y) { for (var P = this.getRightMostFocusableColIndex(n - 1); n > 0 && null == P;)n -= 1, P = this.getRightMostFocusableColIndex(n - 1); if (null == P) return this.editedCell && this.editedCell.handleEndEdit(t), !1; if (n - 1 > 0 && n == this.rowIndex) { this._setGridBorderNoRefresh = !0; j = -1; this.addGridScroll(j), this._setGridBorderNoRefresh = !1 } if (i && (this.___getEditReadOnly(v, P) || this._getEditDisabled(v, P)) && (i = !1), i && this.isKeyPressed && (this.options.keyMoveEditMode || this.options.moveKeyEditMode || this.options.moveKeyEditModeAll)) { k = this.getCellInfo(P); r.D.getBoolean(k.options.skipKeyMoveEditMode) && (i = !1) } return this._setGridBorderNoRefresh = !0, this._setFocusedCell(n - 1, P, i, { tabDirection: e }), this._setGridBorderNoRefresh = !1, !0 } if ("right" != e || y) { if ("left" === e && 0 === n && f && l - 1 == 0) { !0 === (k = this.getCellInfo(l - 1)).options.skipKeyMove && d.B.preventDefault(t) } } else { if (n < this.getDataLength() - this._getVisibleLastIndex(1)) { for (P = this.getLeftMostFocusableColIndex(n + 1); n != this.dataList.getRowCount() && null == P;)n += 1, P = this.getLeftMostFocusableColIndex(n + 1); if (null == P) return this.editedCell && this.editedCell.handleEndEdit(t), 1 == this.options.moveKeyEditModeAll && n == this.dataList.getRowCount() && document.getElementById(this.id + "_gridend_div").focus(), !1; var z = this._getVisibleLastIndex(this.lastIndex + 1); if (n + 1 > this.rowIndex + z - 1) { this._setGridBorderNoRefresh = !0; j = 1; this.hasSubtotal && (j += this.getHasSubtotalCount(n + 1)), 1 == this.options.senseReader && "all" != this.options.visibleRowNum && (j += n - (this.rowIndex + z - 1), this.focusedCellLinkIndex = -1, this.focusedCellLinkLength = 0), this.addGridScroll(j), this._setGridBorderNoRefresh = !1 } if (i) "custom" == (k = this.getCellInfo(P)).options.inputType && (v = n + 1), (this.___getEditReadOnly(v, P) || this._getEditDisabled(v, P)) && (i = !1); if (i && this.isKeyPressed && (this.options.keyMoveEditMode || this.options.moveKeyEditMode || this.options.moveKeyEditModeAll)) { var k = this.getCellInfo(P); r.D.getBoolean(k.options.skipKeyMoveEditMode) && (i = !1) } return this._setGridBorderNoRefresh = !0, this._setFocusedCell(n + 1, P, i, { tabDirection: e }), this._setGridBorderNoRefresh = !1, !0 } f && !0 === (k = this.getCellInfo(l + 1)).options.skipKeyMove && d.B.preventDefault(t) }
						} if (f && null != WebSquare.tabOrder[this.id]) if (0 === h && 0 === n && "left" == e) { if (null != WebSquare.tabOrder[this.id].preTabID && (U = r.D.getPreTabbableComp(this.id))) return U.focus(), !0 } else if (h === p.length - 1 && n === this.getDataLength() - this._getVisibleLastIndex(1) && "right" == e) { var U; if (null != WebSquare.tabOrder[this.id].nextTabID) if (U = r.D.getNextTabbableComp(this.id)) return U.focus(), !0 } return this.editedCell ? (this._setGridBorderNoRefresh = !0, this.editedCell.handleEndEdit(t), this._setGridBorderNoRefresh = !1) : this.options.moveKeyEditMode && (this._setGridBorderNoRefresh = !0, this._setFocusedCell(n, l, !1), this._setGridBorderNoRefresh = !1), this.moveDirection = null, !1
					}, f.prototype.moveVertical = function(t, e, i) {
						if (this.moveDirection = "row",
							"false" == this.options.focusMove || "horizontal" == this.options.focusMove) return !1; var o = this.getLastFocusedCell(), s = o.focusedRowIndex, a = o.focusedColIndex, n = this.defaultColCnt, l = this.colIndexInfo.body.colInfo.colIndexArr, h = this.colIndexes.bodyColInfo.trIndexArr, p = this.colIndexes.bodyColInfo.colSpanArr, u = this.colIndexes.bodyColInfo.rowSpanArr, c = l[a + n], g = h[a + n], f = p[a + n], m = u[a + n], y = a, b = s, w = !!t && 13 == t.keyCode, v = !!t && 9 == t.keyCode, C = this.getDataLength() - this._getVisibleLastIndex(1), I = !1; if (f && o.bColIndex && (c = o.bColIndex), "up" == e) var _ = 0 == g ? this.oneRowDataLength - 1 : a - 1, x = -1, S = -1; else _ = g + m == this.oneRowLength ? 0 : a + 1, x = this.oneRowDataLength, S = 1; for (var D = !1, R = _; R != x; R += S) { var L = l[R + n], T = L + (p[R + n] ? p[R + n] : 1) - 1, k = this._getArrayIndexOf(this.columnOrder, l[R + n] - n) + n; if (L <= c && c <= T && (!this.hiddenList[k] || D)) { if (y = R, k = this._getArrayIndexOf(this.columnOrder, y + 1) + this.defaultColCnt, b == C && "down" == e && this.hiddenList[k]) { D = !0, c++; continue } if (k = this._getArrayIndexOf(this.columnOrder, y - 1) + this.defaultColCnt, 0 == b && "up" == e && this.hiddenList[k]) { D = !0, c--; continue } if ("up" == e) { for (var A = s; A >= 0; A--)if (b = 0 == g ? A - 1 : A, (!(this.hiddenRowObj.length > 0) || this._getRowVisible(b)) && (!this.getMerged(b, y) || this.cellMergeInfo[b + "_" + y])) { if (this.hiddenCellObj.length > 0 && !1 === this.getCellVisible(b, y)) for (; !1 === this.getCellVisible(b, y);) { if (0 === (M = h[y + this.defaultColCnt]) && b > 0) { b--; for (var F = !1, E = y + 1 + n; E < l.length; E++)if (l[E] === a + n && h[E] === this.oneRowLength - 1) { y = E - n, F = !0; break } if (!F) break } else if (M > 0) { for (F = !1, E = y + n; E >= 0; E--)if (l[E] === a + n && h[E] === M - 1) { y = E - n, F = !0; break } if (!F) break } } if (!this.options.ignoreNonEditableCell && !this.options.senseReader || !this.___getEditReadOnly(b, y) && !this._getEditDisabled(b, y)) break; if (!v && !w && this.options.ignoreNonEditableCell && this.options.ignoreNonEditableCellTabEnter && !this.options.senseReader && !this._getEditDisabled(b, y)) break } } else for (A = s; A <= C; A++)if (b = g + m == this.oneRowLength ? A + 1 : A, (!(this.hiddenRowObj.length > 0) || this._getRowVisible(b)) && (!this.getMerged(b, y) || this.cellMergeInfo[b + "_" + y])) { if (this.hiddenCellObj.length > 0) for (; !1 === this.getCellVisible(b, y);) { var M; if ((M = h[y + this.defaultColCnt]) >= this.oneRowLength - 1 && b <= C) { b++; for (F = !1, E = n; E < l.length; E++)if (l[E] === a + n && 0 === h[E]) { y = E - n, F = !0; break } if (!F) break } else if (M < this.oneRowLength - 1) { for (F = !1, E = y + 1 + n; E < l.length; E++)if (l[E] === a + n && h[E] === M + 1) { y = E - n, F = !0; break } if (!F) break } } if (!this.options.ignoreNonEditableCell && !this.options.senseReader || !this.___getEditReadOnly(b, y) && !this._getEditDisabled(b, y)) break; if (!v && !w && this.options.ignoreNonEditableCell && this.options.ignoreNonEditableCellTabEnter && !this.options.senseReader && !this._getEditDisabled(b, y)) break } break } } if (0 <= b && b <= C && (s != b || a != y)) { if (d.B.stopEvent(t), i && (this.___getEditReadOnly(b, y) || this._getEditDisabled(b, y)) && (i = !1), i && this.isKeyPressed && (this.options.keyMoveEditMode || this.options.moveKeyEditMode || this.options.moveKeyEditModeAll)) { var O = this.getCellInfo(y); r.D.getBoolean(O.options.skipKeyMoveEditMode) && (i = !1) } return !!this.setFocusedCell2(b, y, i, { tabDirection: e }) && ((o = this.getLastFocusedCell()).bColIndex = c, !0) } if ("linear" == this.options.focusFlow) {
								var N = !1; if ((-1 == b && "up" == e && 0 == a || b == C + 1 && "down" == e && null == l[a + n + 1]) && (N = !0), !N && (-1 == b || b == C + 1)) {
									var B = this.getLastFocusedCell().focusedTd; if ("text" == (O = this.getCellInfo(B)).options.inputType && O.options.embeddedInput) { var G = this.getInput(O, B); this.showFakeInput(G), this.fakeInput.setValue(G.getValue()), this.F2Mode = !1, G.select() } else {
										var H = !1; if ("up" == e && -1 == b && y - 1 > -1) for (var W = y - 1; null != l[W + n]; W--) { for (var V = C; V > -1; V--) { if (!this.options.ignoreNonEditableCell && !this.options.senseReader || !this.___getEditReadOnly(V, W) && !this._getEditDisabled(V, W)) { b = V, y = W, H = !0; break } if (!v && !w && this.options.ignoreNonEditableCell && this.options.ignoreNonEditableCellTabEnter && !this.options.senseReader && !this._getEditDisabled(V, W)) { b = V, y = W, H = !0; break } } if (H) break } else if ("down" == e && b == C + 1) for (W = y + 1; null != l[W + n]; W++) {
											for (V = 0; V <= C; V++) {
												if (!this.options.ignoreNonEditableCell && !this.options.senseReader || !this.___getEditReadOnly(V, W) && !this._getEditDisabled(V, W)) { b = V, y = W, H = !0; break } if (!v && !w && this.options.ignoreNonEditableCell && this.options.ignoreNonEditableCellTabEnter && !this.options.senseReader && !this._getEditDisabled(V, W)) { b = V, y = W, H = !0; break }
											} if (H) break
										} if (H) { if (d.B.stopEvent(t), i && (this.___getEditReadOnly(b, y) || this._getEditDisabled(b, y)) && (i = !1), i && this.isKeyPressed && (this.options.keyMoveEditMode || this.options.moveKeyEditMode || this.options.moveKeyEditModeAll)) { O = this.getCellInfo(y); r.D.getBoolean(O.options.skipKeyMoveEditMode) && (i = !1) } return !!this.setFocusedCell2(b, y, i, { tabDirection: e }) && ((o = this.getLastFocusedCell()).bColIndex = c, !0) } v && WebSquare.tabOrder[this.id] && WebSquare.tabOrder[this.id].nextTabID && (I = !0)
									}
								}
							} return this.editedCell ? this.editedCell.handleEndEdit(t) : this.options.moveKeyEditMode && (this._setGridBorderNoRefresh = !0, this._setFocusedCell(s, a, !1), this._setGridBorderNoRefresh = !1), this.moveDirection = null, !0 === I && "focusNextTabOrder"
					}, f.prototype.moveEnd = function(t) { if ("false" != this.options.focusMove && "vertical" != this.options.focusMove) { for (var e = r.D.getDataPrefix("colIndex"); this._moveRight(t);); for (var i = !1; !i;) { for (var o = !0, s = this.getLastFocusedCell(), a = parseInt(s.focusedTd.getAttribute(e)), n = parseInt(s.focusedTd.getAttribute("colSpan") || 1), l = 0; l < n; l++)if (0 == this.hiddenList[a + l]) { o = !1; break } 1 == o ? this._moveLeft(t) : i = !0 } this.fixScrollRightDirection() } }, f.prototype.moveHome = function(t) { if ("false" != this.options.focusMove && "vertical" != this.options.focusMove) { for (var e = r.D.getDataPrefix("colIndex"); this._moveLeft(t);); for (var i = !1; !i;) { for (var o = !0, s = this.getLastFocusedCell(), a = parseInt(s.focusedTd.getAttribute(e)), n = parseInt(s.focusedTd.getAttribute("colSpan") || 1), l = 0; l < n; l++)if (0 == this.hiddenList[a + l]) { o = !1; break } 1 == o ? this._moveRight(t) : i = !0 } this.fixScrollLeftDirection() } }, f.prototype.movePageUp = function(t) { if ("false" != this.options.focusMove && "horizontal" != this.options.focusMove && !(this.rowIndex <= 0)) { var e = this.getLastFocusedCell(), i = e.focusedRowIndex; if (!(i < 0)) { i -= this.rowIndex; var o = e.focusedColIndex; this._applyFocusedCellOut(e), this.focusedCell && this.focusedCell.pop(); var s, a = this._getScrollRowIndex(this.rowIndex); return (s = a < this.lastIndex ? -1 : this._getVisibleRowIndex(a - this.lastIndex)) >= 0 ? (this.setTopRowIndex(s), this._setFocusedCell(i + this.rowIndex, o)) : (this.setTopRowIndex(0), this._setFocusedCell(0, o)), !0 } } }, f.prototype.movePageDown = function(t) { if ("false" != this.options.focusMove && "horizontal" != this.options.focusMove && !(null != this.lastTopRowIndex && this.rowIndex >= this.lastTopRowIndex)) { var e = this.getLastFocusedCell(), i = e.focusedRowIndex; if (!(i < 0)) { i -= this.rowIndex; var o = e.focusedColIndex; this._applyFocusedCellOut(e); var s = this.rowIndex + this.lastIndex, a = this.getDataLength(), r = a - this._getVisibleLastIndex(1), n = a - this._getVisibleLastIndex(this.lastIndex + 1); return s <= n ? (this.setTopRowIndex(s), this._setFocusedCell(Math.min(i + this.rowIndex, r), o)) : (this.setTopRowIndex(n), this._setFocusedCell(r, o)), !0 } } }, f.prototype.findTd = function(t, e, i) { for (var o = 0, s = r.D.getDataPrefix("colIndex"); null != t;) { for (var a = r.D.first(t); null != a;) { var n = parseInt(a.getAttribute(s)); if (n <= e && e <= n + a.colSpan - 1 && o <= i && i <= o + a.rowSpan - 1) return a; if (n > e) break; a = r.D.next(a) } if (t = r.D.next(t), o > i) break; o++ } }, f.prototype.pasteFromClipboard = function() {
						for (var t = this.parseClipboardExcel(), e = this._getFocusedRowIndex(), i = this.getFocusedColumnIndex(), o = [], s = 0; s < t.length; s++) { o.push([]); for (var a = 0; a < t[0].length; a++)o[s][a] = this.dataList._getCellData(s + e, this.getColumnID(a + i)) } for (s = 0; s < t.length; s++)for (a = 0; a < t[0].length; a++) { var r = t[s][a]; try { r = r.wq_trim(); var n = this.getCellInfo(a + i), l = this.mainGrid.getColumnOption(n.options.col_id, "dataType"); "number" == l && (r = r.replace(/[^(\-0-9)]/g, "")) } catch (t) { } 1 != this.___getEditReadOnly(s + e, a + i) && 1 != this._getEditDisabled(s + e, a + i, !0) && this.dataList.__setCellData(s + e, this.getColumnID(a + i), r) } var h = this; WebSquare.historyManager.set("grid", "grid1", {
							focusRowIndex: e,
							focusColIndex: i, data2d: o
						}, { onRestore: function(t) { for (var o = t.data2d, s = 0; s < o.length; s++)for (var a = 0; a < o[0].length; a++) { var r = o[s][a]; h.dataList.__setCellData(s + e, this.getColumnID(a + i), r) } } })
					}, f.prototype.parseClipboardExcel = function() { for (var t = [], e = window.clipboardData.getData("Text").split("\n"), i = 0; i < e.length - 1; i++) { var o = e[i].split("\t"); t.push(o) } return t }, f.prototype.copyToClipboard = function() { var t = this.options.copyAmount; if (t || ("cell" == this.options.focusMode ? t = "cell" : "both" != this.options.focusMode && "row" != this.options.focusMode || (t = "row")), "cell" == t) { for (var e = this.getDataLength(), i = this.getTotalCol(), o = [], s = 0; s < this.focusedCell.length; s++) { var a = (p = this.focusedCell[s]).focusedRowIndex, r = p.focusedColIndex; null == o[a] && (o[a] = []), o[a][r] = p, e > a && (e = a), i > r && (i = r) } var n = []; for (s = e; s < o.length; s++) { var l = []; if (void 0 !== (u = o[s])) for (var h = i; h < u.length; h++) { o[s][h] ? l.push(this.dataList._getCellData(s, this.getColumnID(h))) : l.push("") } n.push(l.join("\t")) } window.clipboardData.setData("Text", n.join("\n")) } else if ("row" == t) { var d = []; for (s = 0; s < this.focusedCell.length; s++) { var p; d[(p = this.focusedCell[s]).focusedRowIndex] = 1 } var u = []; for (var a in d) u.push(a); function t(t, e) { return parseInt(t) > parseInt(e) ? 1 : -1 } u.sort(t); for (o = [], s = 0; s < u.length; s++) { a = u[s]; var c = this.getRowData(a); o.push(c.join("\t")) } window.clipboardData.setData("Text", o.join("\n")) } }, f.prototype.getEditCursorEnable = function(t, e) { try { if (!t) return !1; var i = d.B.getTarget(t); if (!i) return !1; var o = i.tagName.toUpperCase(); if (("INPUT" == o || "TEXTAREA" == o) && null != i.value) { if (r.D.isIEAllVersion("6 7 8")) { var s = document.selection.createRange(); if (s.text.length > 0) return !0; s.moveStart("character", -i.value.length); var n = s.text.length; if ("left" === e) { if (n > 0) return !0 } else if ("right" === e && n < i.value.length) return !0; return !1 } if (null != i.selectionStart && i.selectionStart != i.selectionEnd) return !0; if ("left" === e) { if (i.selectionEnd > 0) return !0 } else if ("right" === e && i.selectionEnd < i.value.length) return !0 } return !1 } catch (t) { return a.w.printStackTrace(t, null, this), !1 } }, f.prototype._moveKeyEdit = function(t, e, i) { try { if (void 0 !== i && null != i || (i = {}), !(this.options.moveKeyEditModeAll || !0 === i.oldMode && this.options.moveKeyEditMode)) return; var o = this.uuid, s = WebSquare.idCache[t]; s["_" + e] = s[e]; var r = i.itemTable, n = i.skipVertical, l = i.skipHorizontal, h = this.options.moveKeyEditModeAll || !0 === i.oldMode && this.options.arrowMove; s[e] = function(t, i) { this["_" + e] && this["_" + e](t, i); var s = WebSquare.idCache[o], a = !1; if (s && s.editedCell) { var p = s.getCellInfo(s.editedCell.colID); (s.options.keyMoveEditMode || s.options.moveKeyEditMode || s.options.moveKeyEditModeAll) && p.options.skipKeyMoveEditMode && (a = !0) } var u = { 37: "left", 38: "up", 39: "right", 40: "down" }[t.keyCode]; if (u) switch (u) { case "left": case "right": if (!0 !== l && (r || 0 == this.getValue().length || h && !s.getEditCursorEnable(t, u))) s._fireOnviewchange(s.editedCell.id, "handleEndEdit", [t], { checkFunc: function(t) { return t + "" != "false" } }) + "" != "false" && s.moveHorizontal({ byApi: !0 }, u, !0, t.keyCode), d.B.stopEvent(t); break; case "up": case "down": if (!0 !== n && (!r || 0 == this.getItemCount() || this._keyIndex < 0 || this._keyIndex === this.getItemCount())) { if (s._fireOnviewchange(s.editedCell.id, "handleEndEdit", [t], { checkFunc: function(t) { return t + "" != "false" } }) + "" != "false") { var c = !0 !== a; s.moveVertical({}, u, c, t.keyCode) } d.B.stopEvent(t) } } } } catch (t) { a.w.printStackTrace(t, null, this) } }, f.prototype._directEdit = function(t) {
						var e = this.focusedCell[this.focusedCell.length - 1], i = this.getCellInfo(e.focusedTd); if ("textarea" !== i.options.inputType || !this._getEditDisabled(e.focusedRowIndex, e.focusedColIndex) && !this.___getEditReadOnly(e.focusedRowIndex, e.focusedColIndex)) {
							var o, s = i.comp, a = this.getInput(i); a && (a.reFocus = !0, a._focusStatus = "cancel"); var r = s.render.tagName.toLowerCase(); (o = "input" === r || "textarea" === r ? s.render : s.render.getElementsByTagName("input")[0]) && WebSquare.text.setCaretPos(o, o.value.length); var n = t.keyCode, l = null; t.key && 1 === t.key.length ? l = t.key : !t.shiftKey && 65 <= n && n <= 90 ? (n += 32, l = String.fromCharCode(n)) : l = n >= 96 || n < 65 ? {
								96: "0", 97: "1",
								98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7", 104: "8", 105: "9", 110: ".", 111: "/", 106: "*", 107: "+", 109: "-", 187: "=", 189: "-", 192: "`", "220 ": "\\"
							}[n + ""] || "" : String.fromCharCode(n), "autoComplete" === i.options.inputType ? (s.dom.input.value = l, s.inputKeyDown(t)) : a && a.setValueNM(l)
						}
					}; var m = function(t) { }; m.prototype.initializeDrawController = function() { this.data_td_list = [], this.data_num_td_list = [], this.data_status_td_list = [], this.all_data_td_list = [] }, m.prototype.showAllBodyTR = function(t) { t = t || ""; for (var e = 0; e < this.drawedRowLength; e++)this._setRowDisplay(e, t); this.lastDisplayedRow = "none" === t ? -1 : this.drawedRowLength - 1 }, m.prototype._setRowDisplay = function(t, e) { for (var i = null, o = 0; o < this.oneRowLength; o++)(i = this.dataRowList[this.oneRowLength * t + o]) && (i.style.display = e, "none" == e ? this.__addClass(i, "w2grid_hidedRow") : this.__removeClass(i, "w2grid_hidedRow")); return i }, m.prototype.drawColumnData = function(t, e) { var i = this._dataList.rowPosition, o = !1; t = this.getColumnIndex(t); var s = this.options.showLastRow && !this.hasSubtotal ? this.lastIndex + 1 : this.lastIndex, a = this.getCellInfo(t); if (a.dataComp) { var r = this.modelControl.getDataComp(a.dataComp); null != r && "linkedDataList" === r.initializeType && null != r.conditionInfo && r.conditionInfo.filterInfo.useRef && "number" == typeof i && (o = !0) } for (var n = 0; n <= s; n++) { var l = n + this.rowIndex; e && a.select && a.hasRef && (a.select.itemArr = a.getRefItemArr(l), a.select.setSelectOptions(), a.select.setValueNM(a.mainGrid._dataList._getData(l, t)) || a.mainGrid._dataList._setData(l, t, "")), o && n === i || this.drawCellData(n, l, t) } o && this.drawCellData(i, i + this.rowIndex, t) }, m.prototype._setMouseOverTr = function(t, e) { this.setOverClass(e, "overTd", !0) }, m.prototype._setMouseOutTr = function(t, e) { this.setOverClass(e, "overTd", !1) }, m.prototype.setOverClass = function(t, e, i) { for (var o = t.parentNode, s = r.D.getDataPrefix("trIndex"), a = r.D.getDataPrefix("row_out_style"), n = parseInt(o.getAttribute(s)); n > 0;)n--, o = r.D.prev(o); do { for (var l = r.D.first(o); null != l && !(l.offsetLeft > this.render.offsetWidth);)l.offsetWidth > 0 && (i ? (l.setAttribute(a, l.style.cssText), l.style.cssText = l.style.cssText + ";background-color:" + this.options.rowMouseOverColor) : l.style.cssText = l.getAttribute(a)), l = r.D.next(l); o = r.D.next(o) } while (null != o && "0" != o.getAttribute(s)) }, m.prototype.changeFocusedCellPosition = function(t, e, i) { if (0 != this.focusedCell.length) { this.applyFocusedCellOut(); for (var o = 0; o < this.focusedCell.length; o++) { var s = this.focusedCell[o].focusedRowIndex - t, a = this.focusedCell[o].focusedColIndex, r = null; if (this.options.fixedRow > 0 && this.options.fixedRow > this.focusedCell[o].focusedRowIndex || this.options.lastFixedRow > 0 && this.focusedCell[o].focusedRowIndex > this.lastIndex - this.options.lastFixedRow) r = this.data_td_list[a + this.focusedCell[o].focusedRowIndex * this.oneRowDataLength], this.applyFocusedCellIn(r, e); else if (s < 0 || s > this.maxRowLength + this.hiddenRowObj.extraRow) r = null; else if (r = this.data_td_list[a + s * this.oneRowDataLength]) { var n = this.getCellInfo(a); i && n.options.embeddedInput && (e = !1), this.applyFocusedCellIn(r, e) } this.focusedCell[o].focusedTd = r } } }, m.prototype.setTRClass = function(t, e, i) { for (var o = t.parentNode, s = r.D.getDataPrefix("trIndex"), a = parseInt(o.getAttribute(s)); a > 0;)a--, o = r.D.prev(o); do { for (var n = r.D.first(o); null != n;)i ? this.addClass(n, e) : this.removeClass(n, e), n = r.D.next(n); o = r.D.next(o) } while (null != o && "0" != o.getAttribute(s)) }, m.prototype.setEditMode = function(t) {
						var e = r.D.getDataPrefix("tdIndex"), i = r.D.getDataPrefix("col_id"), o = r.D.getDataPrefix("colMerged"), a = t.getAttribute(i); if (null != a && "" != a.wq_trim()) {
							var n, l = parseInt(t.getAttribute(e)), h = parseInt(l / this.realRowDataLength); if (this.options.fixedRow > 0 && this.options.fixedRow > h) n = h; else if (this.options.lastFixedRow > 0 && h > this.lastIndex - this.options.lastFixedRow) { n = this.getDataLength() - 1 - (this.lastIndex - h) } else n = h + this.rowIndex; var p = r.D.getBoolean(s.v.getConfiguration("/WebSquare/" + this.options.pluginName + "/colIdToColIndex/@value")) ? this.getColumnIndex(t.getAttribute(i)) : t.getAttribute(i), u = this.getCellInfo(p)
								; if ((u.options.colMergeEdit || "1" != t.getAttribute(o)) && !u.options.embeddedInput && !this.groupbyStatus.grouped) { if (this.__getEditReadOnly(t, n)) return this.editMode = !1, void (u.options.showReadOnly && (this.editMode = !0, u.showReadonly(t, n))); if (this._getEditDisabled(n, p)) return this.editMode = !1, void (u.options.showReadOnly && (this.editMode = !0, u.showReadonly(t, n))); 0 != d.B.fireEvent(this, "onbeforeedit", n, p, this.dataList._getCellData(n, this.getColumnID(p))) && null == this.editedCell && (this.editMode = !0, this.setCellEditMode(t, n), u.comp && u.comp.setReadOnly(this.__getEditReadOnly(t, n))) }
						}
					}, m.prototype.getEditReadOnly = function(t, e) { var i = r.D.getDataPrefix("col_id"), o = t.getAttribute(i); return this._getEditReadOnly(e, o) }, m.prototype.getReadOnly = function() { var t = r.D.getBoolean, e = arguments[0]; if ("grid" == e || 0 == arguments.length) return t(this.options.readOnly); if ("row" == e) return t(this.getRowReadOnly(arguments[1])); if ("column" == e) { var i = this.getColumnID(arguments[1]); return t(this.getColumnReadOnly(i)) } if ("cell" == e) { var o = arguments[1]; i = this.getColumnID(arguments[2]); return t(this.getCellReadOnly(o, i)) } if ("all" == e) { o = arguments[1], i = this.getColumnID(arguments[2]); return this._getEditReadOnly(o, i) } }, m.prototype.setReadOnly = function() { try { var t = arguments[0]; if (1 == arguments.length || "grid" == t) { var e = arguments[arguments.length - 1], i = this.options.readOnly, o = r.D.getBoolean(e); "clear" == e ? (this.rowReadOnlyArr = [], this.cellReadOnlyArr = []) : this.options.readOnly = o; var s = this.getDataLength(); if (0 != s && i !== o) { var n = this.options.showLastRow && !this.hasSubtotal ? this.lastIndex + 1 : this.lastIndex; for (var l in this.cellInfoHash) { var h = this.getColumnIndex(l); if (!isNaN(h)) { for (var d = 0; d <= n; d++)this.drawCellData(d, d + this.rowIndex, h); this.applyColumnStyleOptions(h) } } } this.options.readOnly ? this.addClass(" w2grid_readonly_outer") : this.removeClass("w2grid_readonly_outer") } else "row" == t ? this.setRowReadOnly(arguments[1], arguments[2]) : "column" == t ? this.setColumnReadOnly(arguments[1], arguments[2]) : "cell" == t && this.setCellReadOnly(arguments[1], arguments[2], arguments[3]) } catch (t) { a.w.printStackTrace(t) } }, m.prototype._getEditReadOnly = function(t, e, i) { try { e = this.getColumnID(e); var o = this.getCellReadOnly(t, e, i), s = this.cellInfoHash[e]; if (null == s) return; var n = r.D.getBoolean; if (o + "" != "") return n(o); var l = this.options.readOnlyPriority, h = s.options.readOnly, d = this.getRowReadOnly(t, i); return "column" == l && "" !== h ? n(h) : "row" == l && "" !== d ? n(d) : h + "" == "true" || d + "" == "true" || h + "" != "false" && d + "" != "false" && (this.options.readOnly + "" != "" && n(this.options.readOnly)) } catch (t) { a.w.printStackTrace(t) } }, m.prototype.__getEditReadOnly = function(t, e) { var i = r.D.getDataPrefix("col_id"), o = t.getAttribute(i); return this.___getEditReadOnly(e, o) }, m.prototype.___getEditReadOnly = function(t, e, i) { var o = !(!this.isDrillDown || !this.options.drilldownRealRowIndexAll) ? this.dataList.getRealRowIndex(t) : this._getGroupbyDisplayRowIndex(t); return this._getEditReadOnly(o, e, i) }, m.prototype.getDisabled = function() { var t = r.D.getBoolean, e = arguments[0]; if ("grid" == e || null == e) return t(this.options.disabled); if ("row" == e) return t(this.getRowDisabled(arguments[1])); if ("column" == e) { var i = this.getColumnID(arguments[1]); return t(this.getColumnDisabled(i)) } if ("cell" == e) { var o = arguments[1]; i = this.getColumnID(arguments[2]); return t(this.getCellDisabled(o, i)) } if ("all" == e) { o = arguments[1], i = this.getColumnID(arguments[2]); return this.getEditDisabled(o, i) } }, m.prototype.setDisabled = function(t, e, i, o) {
						try {
							for (var s = [t, e, i, o]; s.length > 0 && null == s[s.length - 1];)s.pop(); var n = s[0], l = 1 == s.length || "grid" == n, h = 2 == s.length && "boolean" == typeof s[0] && "boolean" == typeof s[1], d = r.D.getDataPrefix("header_id"); if (l || h) {
								var p = l ? s[s.length - 1] : s[0]; if ((p = r.D.getBoolean(p)) != this.options.disabled) {
									this.options.disabled = p; var u = this.getElementById(this.id + "_dataLayer"); !l && p || (u.disabled = p), (h || !p && u.disabledW2) && (u.disabledW2 = p), p ? (this.addClass(u, "w2grid_disabled"), this.addClass("w2grid_disabled_outer"), this.options.disabledScrollHidden && (this.setOverflowXHidden(),
										this.setOverflowYHidden())) : (this.removeClass(u, "w2grid_disabled"), this.removeClass("w2grid_disabled_outer"), this.options.disabledScrollHidden && (this.setOverflowX(), this.setOverflowY())); for (var c = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")), g = 0; g < c.length; g++) { var f = c[g].getAttribute(d), m = this.headerObj[f]; m ? m.setDisabled ? m.setDisabled(p) : m.render ? m.render.disabled = p : m.disabled = p : c[g].disabled = p } for (var y in this.cellInfoHash) { var b = this.cellInfoHash[y]; b && "checkbox" === b.options.inputType && ("" === b.options.disabled ? (b._oriDisabled = b.options.disabled, b.options.disabled = p) : "" === b._oriDisabled && (b.options.disabled = p)); var w = this.getColumnIndex(y); this.drawColumnData(w), this.applyColumnStyleOptions(w) }
								} return p
							} "row" == n ? this.setRowDisabled(s[1], s[2]) : "column" == n ? this.setColumnDisabled(s[1], s[2]) : "cell" == n && this.setCellDisabled(s[1], s[2], s[3])
						} catch (t) { a.w.printStackTrace(t) }
					}, m.prototype.getEditDisabled = function(t, e, i) { return this._getEditDisabled(this._getGroupbyGroupedRowIndex(t), e, i) }, m.prototype._getEditDisabled = function(t, e, i) { try { var o = -1, s = ""; "number" == typeof e ? (o = e, s = this.cellIdList[e]) : (o = this.bodyIdColIndexMap[e], s = e); var r = -1; if (!0 === i) r = t; else if (this._linkedDataList) r = this._linkedDataList.filteredRowIndexArr[t]; else if (this.groupbyStatus.grouped) { var n = !0; for (var l in this._grid.customFilterStatusObj) if (this._grid.customFilterStatusObj[l]) { r = this._dataList.filteredRowIndexArr[t], n = !1; break } n && (r = this.groupbyStatus.groupedRowIndexArr[t]) } else r = this._dataList.filteredRowIndexArr[t]; var h = this.cellInfoHash[s] || { options: {} }, d = this.cellDisabledArr[r * this.oneRowDataLength + o]; if (!0 !== d && !1 !== d) { var p = h.options.disabled, u = this.rowDisabledArr[r], c = this.options.disabledPriority; !0 !== u && !1 !== u && (u = ""), d = "column" === c && "" !== p ? p : "row" === c && "" !== u ? u : p + "" == "true" || u + "" == "true" || p + "" != "false" && u + "" != "false" && ("" !== this.options.disabled && this.options.disabled) } return d } catch (t) { a.w.printStackTrace(t) } }, m.prototype.getElemRowIndex = function(t) { var e = r.D.getDataPrefix("tdIndex"), i = parseInt(t.getAttribute(e)); return parseInt(i / this.realRowDataLength) + this.rowIndex }, m.prototype.notifyDataChanged = function(t) {
						if ("active" == this.activeStatus) {
							this.initHeightCompleted = !1, this.checkResize(); var e = t && t.append || !1, i = t && t.keepTop || !1, o = t && t.refreshScroll || !1, s = t && t.refreshInstance || !1, a = i && this.rowIndex >= 0 ? this.rowIndex : 0, r = t && !0 === t.gridData, n = { sortIcon: this.options.hideSortIconOnNoData }; if (this.delayedDraw({ rowIndex: a })) !0 === s && this._refreshInstance(void 0, e); else {
								this._mergeRefresh(); var l = this._setGridBorderNoRefresh || !1; if (this._setGridBorderNoRefresh = !0, this.options.senseReader && this.rowIndex <= 0) return this.senseReaderMode = !0, this.setDataTable(), this.drawData(0), o && "all" !== this.options.visibleRowNum && (this.lastTopRowIndex = null, this.setScrollYHeight()), this.drawFooter(), this.drawHeader(void 0, n), this.senseReaderMode = !1, this.displayNoResultMessage(), this._setGridBorderNoRefresh = l, !0 === s && this._refreshInstance(void 0, e), void this.refreshAdaptive({ simple: !0 }); if ("native" === this.options.drawType) return this.setDataTable(), this.drawData(0), this.drawFooter(), this.drawHeader(void 0, n), this.displayNoResultMessage(), !0 === s && this._refreshInstance(void 0, e), void this.refreshAdaptive({ simple: !0 }); if (e && !this.loadFlag) return this.drawFooter(), this.drawHeader(void 0, n), void (!0 === s && this._refreshInstance(void 0, e)); if (this.changeCount++, !0 === e && "true" === this.options.keepScrollForSenseReader && !0 === this.options.senseReader && this.options.visibleRowNum > 0) var h = this.drawDataTable(0, { keepScrollTop: !0 }); else h = this.drawDataTable(0); for (var d in o && (this.lastTopRowIndex = null, this.setScrollYHeight()), 0 == h && (e && !o && (this.lastTopRowIndex = null, this.setScrollYHeight()), this.hiddenCellObj.length > 0 ? (this.rowIndex = a, !0 !== r && this._setCellVisibleRefresh()) : this.drawData(a)), this.displayNoResultMessage(), this.drawFooter(), this.drawHeader(void 0, n), this._setGridBorderNoRefresh = l, this.refreshAdaptive({ simple: !0 }),
									this.cellInfoHash) this.cellInfoHash[d].refreshCell(); if (this.hasCustomInputType) for (var p = 0; p < this.cellIdList.length; p++) { var u = this.cellInfoHash[this.cellIdList[p]]; u && u.options && "custom" === u.options.inputType && u.options.typeGetter && u.refreshCellManagerHash() } !0 === s && this._refreshInstance(void 0, e)
							}
						}
					}, m.prototype.notifyCellChanged = function(t, e, i, o) { if (this.changeCount++, !this.delayedDraw({})) { var s = this._getTrRowIndex(t); if (e = this.getColumnIndex(e), this._drawRowStatus(s, t), !0 !== i && (this.drawCellData(s, t, e), this.groupbyStatus.grouped && this.options.groupbyDisplayRowIndex)) { for (var a = t + 1, n = s + 1; "number" == typeof this.groupbyStatus.groupedRowIndexArr[a] && a < this.groupbyStatus.groupedRowIndexArr.length;)a++, n++; if ("object" == typeof this.groupbyStatus.groupedRowIndexArr[a] && "footer" === this.groupbyStatus.groupedRowIndexArr[a].type) { var l = this.dataList.getRealRowIndex(a); if (null != l) { var h = this.all_data_td_list[n * this.realRowDataLength]; h && this.drawGroupData(h, l, n) } } } var d = this.getColumnID(e); this._refreshExpression(t, d); var p = this.labelColumnAssArr[d]; if (null != p) for (var u = 0; u < p.length; u++) { var c = this.getColumnIndex(p[u]); this.drawCellData(s, t, c) } this.displayNoResultMessage(), this.hasSubtotal && (this.subtotalHidden({ startRowIndex: 0 }), this.refreshSubtotalRow(this.rowIndex)), this.drawFooter(d), this.drawHeader(d), o || this._setCheckboxHead(d), "never" !== this.options.mergeCellsFixedCols && r.D.setTimeout((function() { var t = { fixedCols: !0, fixedRows: !1 }; this._mergeCells(this.options.mergeCellsFixedCols, t, { type: "mergeCellsFixedCols" }) }), { key: this.id + "notifyCellChanged_mergeRefresh", caller: this, delay: 200 }) } }, m.prototype._getTrRowIndex = function(t) { try { var e = t; if (this.rowIndex >= 0) { var i = this.getDataLength(); this.options.fixedRow > 0 && this.options.fixedRow > t || (this.options.lastFixedRow > 0 && e >= i - this.options.lastFixedRow ? e = this.lastIndex - (i - 1 - e) : e -= this.rowIndex) } return e } catch (t) { a.w.printStackTrace(t) } }, m.prototype._refreshExpression = function(t, e) { try { var i = this._getTrRowIndex(t), o = this.expressionAssArr[e]; if (null != o) { var s = this.searchExpression(o); for (var r in s) { var n = this.getColumnIndex(r); this.drawCellData(i, t, n), this.drawFooter(n), this.drawHeader(n) } } } catch (t) { a.w.printStackTrace(t) } }, m.prototype.searchExpression = function(t) { for (var e = {}, i = [t]; i.length > 0;)for (var o = i.pop(), s = 0; s < o.length; s++)if (e[o[s]] = !0, this.expressionAssArr[o[s]]) { var a = this.expressionAssArr[o[s]]; if (a.length > 1) i.push(a); else null != this.expressionAssArr[a] && i.push(a), e[a] = !0 } return e }, m.prototype.notifyRowChanged = function(t, e) {
						if (this.changeCount++, !this.delayedDraw({ rowIndex: t })) {
							var i = { sortIcon: this.options.hideSortIconOnNoData }; if (this.options.senseReader && this.rowIndex <= 0) return this.senseReaderMode = !0, this.setDataTable(), this.drawData(0), this.drawFooter(), this.drawHeader(void 0, i), this.senseReaderMode = !1, this.displayNoResultMessage(), void this.refreshAdaptive({ simple: !0 }); if ("native" === this.options.drawType) return this.setDataTable(), this.drawData(0), this.drawFooter(), this.drawHeader(void 0, i), this.displayNoResultMessage(), void this.refreshAdaptive({ simple: !0 }); if (-1 == this.rowIndex) this.drawDataTable(0), (this.options.fixedColumn > 0 || this.options.fixedRightColumn > 0) && this.arrangeOverflowXScroll(!0); else if (e && !0 === e.keepScrollTop) this.lastTopRowIndex = null, this.drawData(this.rowIndex, 0, null, null, { keepScrollTop: !0 }); else {
								this.lastTopRowIndex = null; var o = this._dataList.options.depthColumn ? this.getDrawCount() + this.rowIndex : this.getDataLength(), s = (t = t || this.rowIndex) - this.rowIndex, a = this.rowIndex; if (0 <= s && s <= this.lastIndex && (this.rowIndex <= 0 || this.rowIndex + this.lastIndex < o)) if (this.isDrillDown && !this.drilldown.isOpen(t)) { var n = ("linkedDataList" === this.drilldown.mode ? this._linkedDataList.filteredRowIndexArr : this._dataList.filteredRowIndexArr).length - (t + 1), l = this.lastIndex - s - n; a = h = l <= 0 ? this.rowIndex : (h = this.rowIndex - l) > 0 ? h : 0 } else a = this.rowIndex; else if (0 <= s && s <= this.lastIndex || s < 0) { var h; (h = this.rowIndex - 1) + this.lastIndex >= o && (h = o - this.lastIndex - 1), a = h = h > 0 ? h : 0 }
								this.hiddenCellObj.length > 0 ? (this.rowIndex = a, r.D.setTimeout(this._setCellVisibleRefresh, { key: this.id + "_setCellVisibleRefresh", caller: this, delay: 200 })) : this.drawData(a, 0)
							} this.displayNoResultMessage(), this.hasSubtotal && this.refreshSubtotalRow(t), this.drawFooter(), this.drawHeader(void 0, i), this.refreshAdaptive({ simple: !0 })
						}
					}, m.prototype.notifyRowInserted = function(t) { if (t = parseInt(t, 10), this.changeCount++, !this.delayedDraw({ rowIndex: t })) { var e = { sortIcon: this.options.hideSortIconOnNoData }; if (this.options.senseReader && this.rowIndex <= 0) return this.senseReaderMode = !0, this.setDataTable(), this.drawData(0), "all" !== this.options.visibleRowNum && (this.lastTopRowIndex = null, this.setScrollYHeight()), this.drawFooter(), this.drawHeader(void 0, e), this.senseReaderMode = !1, this.displayNoResultMessage(), void this.refreshAdaptive({ simple: !0 }); if ("native" === this.options.drawType) return this.setDataTable(), this.drawData(0), this.drawFooter(), this.drawHeader(void 0, e), this.displayNoResultMessage(), void this.refreshAdaptive({ simple: !0 }); if (this.lastTopRowIndex = null, -1 == this.rowIndex) 0 == this.drawDataTable(0) && this.drawData(0, 0), (this.options.fixedColumn > 0 || this.options.fixedRightColumn > 0) && this.arrangeOverflowXScroll(!0); else if ("" !== this.options.visibleRowNum || this.options.initFixedHeightByRowNum > 0) this.setDataTable(), this.drawData(0); else { var i = t - this.rowIndex, o = this.getElementById(this.id + "_scrollY_div"); if (i < 0) { var s = this.getElementById(this.id + "_scrollY_div"); this.scrollEvent = !1, s.scrollTop = this.oneRowScrollHeight * this._getScrollRowIndex(t), this.drawData(t, 0) } else (o.offsetHeight >= o.scrollHeight || i <= this.lastIndex) && (this.hasSubtotal && (i = 0), this.drawData(this.rowIndex, i)) } 0 == this.getDataLength() && this.removeFocusedCell(), this.setScrollYHeight(); var a = this._getVisibleLastIndex(this.lastIndex + 1); if (this.rowIndex + a - 1 < t) { this.scrollEvent = !1, (s = this.getElementById(this.id + "_scrollY_div")).scrollTop = this.oneRowScrollHeight * this._getScrollRowIndex(t); var n = this._getEpsilon(), l = Math.round(s.scrollTop) + n, h = this._getVisibleRowIndex(parseInt(l / this.oneRowScrollHeight)); this.hiddenCellObj.length > 0 ? (this.rowIndex = h, r.D.setTimeout(this._setCellVisibleRefresh, { key: this.id + "_setCellVisibleRefresh", caller: this, delay: 200 }), this.lastTopRowIndex = null) : this.drawData(h) } this.displayNoResultMessage(), this.drawFooter(), this.drawHeader(void 0, e), this.refreshAdaptive({ simple: !0 }) } }, m.prototype.displayNoResultMessage = function() { var t = "removed" !== this.options.noResultMessageExclude || 0 == this.removed, e = this.getElementById(this.id + "_noresult"); if (e && this.options.noResultMessageVisible && t && 0 == this.initFlag && 0 == this.getDataLength()) { e.innerHTML = this.options.noResultMessage, e.style.display = "block"; var i = this.getElementById(this.id + "_main_div"), o = i.offsetHeight, s = this.getElementById(this.id + "_body_table").offsetHeight + 3, a = this.getElementById(this.id + "_foot_table"), r = 0; a && (r = a.offsetHeight); var n = this.getElementById(this.id + "_noresult"), l = parseInt(WebSquare.style.getStyle(n, "margin-top"), 10) || 0, h = parseInt(WebSquare.style.getStyle(n, "margin-bottom"), 10) || 0, d = n.offsetHeight + l + h, p = o - s - r, u = this.getElementById(this.id + "_scrollX_div").offsetHeight; if (p <= 0); else if (p <= d) n.style.top = s + l + "px", this.setSize(i, s + r + d + u + l + h); else { var c = this.getElementById(this.id + "_head_table"), g = (n.style.top, 0); if (c && c.childNodes) for (var f = 0; f < c.childNodes.length; f++)"string" == typeof c.childNodes[f].tagName && "TR" === c.childNodes[f].tagName.toUpperCase() && g++; if (g > 1 || this.options.groupbyZone) { var m; m = this._noResultMessageDivTop.indexOf("px") > 0 ? o - parseInt(this._noResultMessageDivTop) : o * parseInt(this._noResultMessageDivTop) / 100; var y = 0; this.options.groupbyZone && this.groupbyZoneStatus.groupbyZoneRender && (y = this.groupbyZoneStatus.groupbyZoneRender.offsetHeight), n.style.top = parseInt(g * this.oneRowHeight / 2 + m) + y + "px" } } } else e.style.display = "none"; this.removed = !1, this.delayedDrawObj || this.removeAllFinish || (this.initFlag = !1) }, m.prototype.delayedDraw = function(t) {
						return (0 == this.resizeObj.width || 0 == this.resizeObj.height) && (this.delayedDrawObj || (this.delayedDrawObj = {}), this.delayedDrawObj.redraw = !0, t.hasOwnProperty("rowIndex") ? this.delayedDrawObj.rowIndex = t.rowIndex : t.hasOwnProperty("subTotalVisible") ? this.delayedDrawObj.subTotalVisible = t.subTotalVisible : t.hasOwnProperty("newColumnOrder") && (this.delayedDrawObj.newColumnOrder = t.newColumnOrder), !0)
					}, m.prototype.delayedAction = function() { this.startedDisplayNone = !1, this.setPreAction(), this.getRowCount && this.getRowCount() > 0 && this.notifyDataChanged(), this.options.focusOnSetData && this._setFocusedCell(0, 0); var t = WebSquare.BootLoader.fullViewed || !1, e = r.D.fullViewed || !1; t || e || this.checkAdaptiveGridType() && ("" == this.options.adaptive && 0 == Object.keys(this.hideThresholdObj).length || (this.oldOptions.headerColBorder = "", this.oldOptions.bodyColBorder = "", this.setAdaptive(), r.D.isMobile() && this.options.fixAdaptive || this.event.addListener(window, "onresize", this.event.bindAsEventListener(this, this.setAdaptive)))), this.delayedDrawObj = null, this.initFlag = !1 }, m.prototype.setRedrawStatus = function(t) { if (!this.startedDisplayNone || "stop" != t) if ("stop" == t) this.delayedDrawObj || (this.delayedDrawObj = {}); else { this.setDataLayerPosition(), this.scrollX_right.scrollLeft = this.resizeObj.scrollLeft, this.getElementById(this.id + "_scrollY_div").scrollTop = this.resizeObj.scrollTop, this.handlerResize_drawInitializer(), this._handleScrollX(); for (var e = !1, i = 0; i < this.colWidthList.length; i++)if (this.colWidthList[i].toString().indexOf("*") > -1) { e = !0; break } if ((this.options.autoFit || e) && this.autoFitFunc(), this.delayedDrawObj.redraw) { this.lastTopRowIndex = null, this.setDataTable(), this.setTrRowTable(), this.setColIndexInfo(); var o = this.delayedDrawObj.rowIndex || 0, s = o, a = this.getDataLength(); if (a - this.drawedRowLength < s && (s = a - this.drawedRowLength) < 0 && (s = 0), "all" !== this.options.visibleRowNum) for (; this.hiddenRowObj.extraRow < this.hiddenRowObj.length;)this._addHiddenRow(this.drawedRowLength + this.hiddenRowObj.extraRow); this.drawData(s), null != this.delayedDrawObj.subTotalVisible && this.delayedDrawObj.subTotalVisible !== this.hasSubtotal ? this.setSubtotalVisible(this.delayedDrawObj.subTotalVisible) : this.setScrollYHeight(); var r = this.rowIndex + this.lastIndex, n = this._getScrollRowIndex(o); if (r < o || n < o) { this.scrollEvent = !1; var l = this.getElementById(this.id + "_scrollY_div"); l.scrollTop = this.oneRowScrollHeight * n; var h = this._getVisibleRowIndex(parseInt(l.scrollTop / this.oneRowScrollHeight)); this.drawData(h) } this.drawFooter(), this.drawHeader(), this.displayNoResultMessage(); var d = "never" === this.options.mergeCells && "never" === this.options.mergeCellsFixedRows && "never" === this.options.mergeCellsFixedCols; for (var p in d || (this._mergeRefresh(), this.dynamicMergeHTML()), this.cellInfoHash) this.cellInfoHash[p].refreshCell(); this._drawGroupbyZone(), void 0 !== this.delayedDrawObj.newColumnOrder && this.delayedDrawObj.newColumnOrder.length > 0 && this.setColumnOrder(this.delayedDrawObj.newColumnOrder) } this._setVisibleRowNumFix(), this.delayedDrawObj = null, this.initFlag = !1 } }; var y = function() { }; y.prototype.setScrollYHeight = function(t) {
						void 0 !== t && null != t || (t = {}); var e = this.getDataLength(), i = this.rowIndex, o = !0 === t.noDraw, a = !0 === t.keepScrollTop, n = this.getElementById(this.id + "_size_y"), l = this.getElementById(this.id + "_scrollY_div"), h = n.parentNode.offsetHeight; 0 == h && (h = parseInt(this.getStyle("height"))); var d = this._getScrollRowIndex(i); if (-1 == i || 0 == d && d + this._getVisibleLastIndex(this.lastIndex + 1) == e) {
							var p = !0; if (this.hasSubtotal && this.drawedSubtotal.length > 0) { var u = this.drawedSubtotal[this.drawedSubtotal.length - 1]; u.length > 0 && (u.rowIndex + 1 != e || "none" === u[u.length - 1].style.display || this._getLastSubtotalCount() > this.drawedSubtotal.length) && (p = !1) } else this.hasSubtotal && 0 == this.drawedSubtotal.length && this.lastSubtotalRow && e > 0 && (p = !1); if (p) return "table" == n.tagName.toLowerCase() && (l.innerHTML = this.getScrollY(), this.dom[this.id + "_size_y"] = null, n = this.getElementById(this.id + "_size_y")), void (0 !== n.offsetHeight && (n.style.height = "0px",
								this.handlerResize_drawInitializer()))
						} var c = l.scrollTop; if (!0 !== t.skipResize) { var g; if ("number" == typeof t.restRowCnt) g = t.restRowCnt; else if ("" !== this.options.visibleRowNum) this.options.senseReader && "all" === this.options.visibleRowNum || this.isDrillDown ? g = e - (this.lastIndex + 1) : (g = e - this.drawedRowLength, this._dynamicVisibleRowNum > 0 && (g = e - this._dynamicVisibleRowNum), this.options.initFixedHeightByRowNum > -1 && (g += this._getLastSubtotalCount())), g < 0 && (g = 0), g = Math.max(0, g - this._getHiddenRowCount()); else if (this.lastTopRowIndex && this.lastTopRowIndex > 0) g = this._getScrollRowIndex(Math.ceil(this.lastTopRowIndex)); else { var f = this.getElementById(this.id + "_head_table"), m = this.dataLayerHeight - f.offsetHeight, y = parseInt(m / this.oneRowHeight), b = this.drawedRowLength; this.oneRowLength > 1 && (b = Math.ceil(this.drawedRowLength / this.oneRowLength)), y + (this.isMobile ? 0 : 1) < b && (b = y + (this.isMobile ? 0 : 1)), g = this.options.fixHeight || this.hasSubtotal ? e - y > 1 ? e - y : 1 : this.options.senseReader ? e - (this.lastIndex + 1) > 0 ? e - (this.lastIndex + 1) : 1 : e - b + 1 > 1 ? e - b + (this.isMobile ? 0 : 1) : 1, g = Math.max(0, g - this._getHiddenRowCount()) } var w = h + this.oneRowScrollHeight * g; if (h = l.offsetHeight, w <= 1e6 && "table" != n.tagName.toLowerCase()) n.style.height = w + "px"; else if (w <= 1e6) l.innerHTML = this.getScrollY(), this.dom[this.id + "_size_y"] = null, (n = this.getElementById(this.id + "_size_y")).style.height = w + "px"; else if (s.v.browserCheck.ieAllVersion && !this.isIE6or7 || r.D.isSpartan()) { var v = []; for (v.push("<table id='" + this.id + "_size_y' style='border-collapse:collapse; border-spacing:0px;height:0px; position:absolute; top:0px; left:0px; width:18px'><tbody>"); w > 1e6;)v.push("<tr style='height:1000000px'><td></td></tr>"), w -= 1e6; v.push("<tr style='height:" + w + "px'><td></td></tr></tbody></table>"), l.innerHTML = v.join(""), this.dom[this.id + "_size_y"] = null, n = this.getElementById(this.id + "_size_y") } else "table" == n.tagName.toLowerCase() && (l.innerHTML = this.getScrollY(), this.dom[this.id + "_size_y"] = null, n = this.getElementById(this.id + "_size_y")), s.v.browserCheck.moz ? n.style.height = w + 1 + "px" : n.style.height = w + "px" } else h = l.offsetHeight; if (!0 !== t.skipScrollEnd) { var C = n.offsetHeight; C < 1e6 && (C = parseInt(n.style.height, 10)); var I = C - h, _ = this._getEpsilon(), x = Math.min(Math.round(c) + _, I), S = this._getScrollMaxRowIndex(); if (S > e - this._getHiddenRowCount()) this._applyScrollEnd(S, { noDraw: !0 }); else { var D = this.options.syncWithScrollTrack ? Math.ceil : Math.floor; if (I >= 0 && D.call(this, x / this.oneRowScrollHeight) != this._getScrollRowIndex(i)) { this.lastTopRowIndex && this.lastTopRowIndex == i && (i = this.lastTopRowIndex + 1); var R = this._getScrollRowIndex(i); o && l.scrollTop != this.oneRowScrollHeight * R && (this.scrollEvent = !1), x = Math.min(this.oneRowScrollHeight * R, I), l.scrollTop = x; var L = this._getVisibleRowIndex(parseInt(x / this.oneRowScrollHeight)); this.bScrollTop = L, this.rowIndex = L } !a && I > 0 && I == x && this._applyScrollEnd(this.rowIndex), this.lastScrollYTop = l.scrollTop, !0 !== t.skipResize && this.handlerResize_drawInitializer(), this.isMobile && this.setIScrollY() } } else this.handlerResize_drawInitializer()
					}, y.prototype._checkScrollEnd = function() { try { var t = this.getElementById(this.id + "_size_y"), e = this.getElementById(this.id + "_scrollY_div"), i = e.offsetHeight, o = t.offsetHeight; o < 1e6 && (o = parseInt(t.style.height, 10)); var s = o - i, r = this._getEpsilon(), n = e.scrollTop, l = Math.min(Math.round(n) + r, s); return s > 0 && s === l } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype._checkScrollEnd2 = function() { try { var t = this.getElementById(this.id + "_size_y"), e = this.getElementById(this.id + "_scrollY_div"), i = e.offsetHeight, o = parseInt(t.style.height, 10) - i, s = this._getEpsilon(), r = e.scrollTop, n = Math.min(Math.round(r) + s, o); return o <= 0 ? -1 : n < 3 ? 1 : n < o ? 0 : 2 } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype._applyScrollEnd = function(t, e) {
						try {
							if ("" !== this.options.visibleRowNum || this.lastTopRowIndex > 0 || 0 === this.lastTopRowIndex || this.groupbyStatus.grouped) return 0; if (this.hiddenCellObj.length > 0) return 0; if (isNaN(t) && (t = this.rowIndex), void 0 !== e && null != e || (e = {}), this._applyScrollEndCnt) {
								if (this._applyScrollEndCnt > 4) return
									; this._applyScrollEndCnt++
							} else this._applyScrollEndCnt = 0; var i = 0, o = this.getDataLength(), s = !1; if (this.hasSubtotal) { if (this.drawedSubtotal.length > 0) { var r = this.drawedSubtotal[this.drawedSubtotal.length - 1]; if (r.rowIndex == o - 1) "none" != r[r.length - 1].style.display && (s = !0) } } else s = !0; var n = this.lastIndex + 1, l = this._getVisibleLastIndex(n); if (t + l == o && s) !0 !== this._onSetHeight && (this.lastTopRowIndex = t); else { var h = o - l; i = this._getScrollRowIndex(h) - this._getScrollRowIndex(t); var d = this.getElementById(this.id + "_size_y"); if (this.hasSubtotal && !s && !0 !== this._onSetHeight) if (this.struct.subtotalArr.length > 1 && "" === this.options.visibleRowNum && !0 !== e.noDraw) { var p = this._getDrawedRowCount(); if (p > 0) return this.options.initFixedHeightByRowNum = p, this.options.visibleRowNum = p, this.drawedRowLength = p, this.lastTopRowIndex = null, this.drawedRowLength = this.options.initFixedHeightByRowNum, void this.drawData(this.rowIndex, 0); i += this.struct.subtotalArr.length } else i += this.struct.subtotalArr.length; if (0 !== i) { this.lastTopRowIndex = null; var u = d.offsetHeight; u < 1e6 && (u = parseInt(d.style.height, 10)), d.style.height = u + this.oneRowScrollHeight * i + "px", !0 !== e.noDraw && this.drawData(Math.max(t + i, 0)), this.handlerResize_drawInitializer() } } return this._applyScrollEndCnt = 0, i
						} catch (t) { a.w.printStackTrace(t, null, this) }
					}, y.prototype.addGridScroll = function(t) { var e = this.rowIndex + t; e = (e = e < 0 ? 0 : e) >= this.getDataLength() - this.lastIndex ? this.getDataLength() - this.lastIndex : e, this.scrollEvent = !1, this.checkScrollEnd = !0, this.drawData(e, 0) }, y.prototype.handleScrollY = function(t, e) { var i = this.getElementById(this.id + "_scrollY_div").scrollTop; if (i != this.bScrollY && (this.bScrollY = i, 0 !== this.getElementById(this.id + "_size_y").offsetHeight)) { var o = this._getEpsilon(), s = Math.round(i) + o, a = this._getVisibleRowIndex(parseInt(s / this.oneRowScrollHeight)), n = this.getDataLength(), l = this._checkScrollEnd(); if (this.scrollEvent && (null != this.editedCell && this._fireOnviewchange(this.editedCell.id, "handleScrollY", [t]), this.bScrollTop != a)) { this.hasClass(document.activeElement, this.options.bodyTdClass) && document.activeElement.blur && document.activeElement.blur(); var h = "async", p = e && !0 === e.changedHeight; (p || l) && (h = "sync", p || this.handleResize()), this.drawData(a, null, h) } this.bScrollTop = a; var u = this._getVisibleLastIndex(this.lastIndex + 1); if (0 == i && this.checkScrollStart && (this.skipScrollStartEvent || (this.scrollEvent = !0, this.checkScrollStart = this.options.alwaysTriggerScrollStart, d.B.stopEvent(t), r.D.setTimeout((function() { d.B.fireEvent(this, "onscrollstart") }), { key: this.id + "_scrollstart", caller: this, delay: 150 }))), (this.scrollEvent || this.checkScrollEnd) && this.options.loadCount > 0 && this.loadFlag) { var c = a + u - 1; n - this.options.loadCount - 1 <= c && null == this.loadCheck[n] && (this.skipScrollEndEvent || (this.loadCheck[n] = !0, this.scrollEvent = !0, this.loadFlag = !1, d.B.stopEvent(t), r.D.setTimeout((function() { d.B.fireEvent(this, "onscrollend") }), { key: this.id + "_scrollend", caller: this, delay: 150 }))) } else (this.scrollEvent || this.checkScrollEnd) && 0 == this.options.loadCount && !0 === l && (!this.scrollEvent || this._applyScrollEnd(this.rowIndex) <= 0) && (d.B.stopEvent(t), r.D.setTimeout((function() { d.B.fireEvent(this, "onscrollend") }), { key: this.id + "_scrollend", caller: this, delay: 150 })); if (this.skipScrollStartEvent = !1, this.skipScrollEndEvent = !1, this.scrollEvent = !0, this.checkScrollEnd = !1, 1 == this.options.syncScroll && this.options.syncScrollId) for (var g = this.options.syncScrollId.split(","), f = 0; f < g.length; f++) { var m = r.D.getComponentById(g[f], this.scope_id); m && this.getRowCount() == m.getRowCount() && m.setScrollTop(i) } d.B.fireEvent(this, "onscrolly", t) } }, y.prototype.drawDataTable = function(t, e) { try { null == t && (t = this.rowIndex), -1 == t && (t = 0); var i = this.drawedRowLength; return this.setDataTable(), this.headerTds = null, this.footerTds = null, this.drawedRowLength != i && (this.setColIndexInfo(), e && e.keepScrollTop ? this.drawData(this.rowIndex, 0, null, null, { keepScrollTop: !0 }) : this.drawData(t, 0)), this.drawedRowLength - i } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.drawData = function(t, e, i, o, r) {
						try {
							s.v.clearTimer(this.id + "_drawData"), s.v.clearTimer(this.id + "_completiveDrawData"), s.v.clearTimer(this.id + "_adjustDraw"); i = i || "sync"; var n = !0; this.options.senseReader && (n = !1), t = Math.min(t, this.getDataLength()), this.changeFocusedCellPosition(t, n, !0); var l = this.maxRowLength; if (this.rowIndex = t, null != this.editedCell && this.editedCell.handleEndEdit(null, o), this.subtotalHidden(e ? { startRowIndex: e + this.rowIndex } : null), -1 != this.rowIndex && "sync" != i && "all" !== this.options.visibleRowNum || this.startedDisplayNone) e = this.fastDrawData(e, { scroll: !0 }), s.v.setTimer((function(e) { s.v.setTimer(this.completiveDrawData, { key: this.id + "_completiveDrawData", caller: this, delay: 120, args: [e], callback: function(e) { s.v.setTimer((function() { this.startedDisplayNone || (this.adjustDraw(e), this._setGridBorder(), this._setCheckboxHead()), l != this.maxRowLength && this.changeFocusedCellPosition(t, n) }), { key: this.id + "_adjustDraw", caller: this }) } }) }), { key: this.id + "_drawData", caller: this, delay: 1, args: [e] }); else { var h = this.completiveDrawData(e, !1); this.adjustDraw(h, r), this._setGridBorder(), this._setCheckboxHead(), l != this.maxRowLength && this.changeFocusedCellPosition(t, n) }
						} catch (t) { a.w.printStackTrace(t, null, this) }
					}, y.prototype.fastDrawData = function(t, e) { try { var i = this.options.initFixedHeightByRowNum > -1; i && (void 0 === e || null == e ? e = { skipSubtotal: !0 } : e.skipSubtotal = !0), this.options.measureTime && s.v.measureTime((function(t) { var e = t.aver, i = parseInt(1e3 / e * 10, 10) / 10; p.k.printLog("Id : " + this.id + ", time : " + e + "ms   ,fps : " + i) }), { key: this.id + "_measureDrawTime", caller: this }); var o = this.rowIndex, r = this.getDataLength(); t = t || 0; !0 === this.hiddenRowObj.init && (t = 0); var n = this._getVisibleTrRowIndex(t, o), l = this.hiddenCellObj.length > 0; if (r > 0) { 0 == t && o != this.lastTopRowIndex && "" === this.options.visibleRowNum && this.drawSubtotalRow(0, o - 1); new Date; var h, d = 1; l ? (h = r, d = r) : "" === this.options.visibleRowNum ? h = this._getVisibleTrRowIndex(this.drawedRowLength, o) : ("all" === this.options.visibleRowNum || (d = parseInt(this.options.visibleRowNum, 10) - t), h = r); for (this._getVisibleTrRowIndex(this.options.drawLimitRow, o); n < h && n + o < r && d > 0; n++) { var u = !this.hiddenRowObj.length > 0 || this._getRowVisible(n + o); u && !0 === this.hiddenRowObj.init && this._setRowDisplay(n, ""), this.options.fixedRow > 0 && this.options.fixedRow > n ? this.fastDrawRowData(n, n, e) : this.options.lastFixedRow > 0 && n > this.lastIndex - this.options.lastFixedRow || this.fastDrawRowData(n, n + o, e); var c = this.options.backgroundColorMode.toLowerCase(); if ("always" == c ? "object" != typeof this.dataList.getRealRowIndex() && (this.options.fixedRow > 0 && this.options.fixedRow > n ? this.applyRowStyleOptions(n) : this.options.lastFixedRow > 0 && n > this.lastIndex - this.options.lastFixedRow || this.applyRowStyleOptions(o + n)) : "full" == c && "object" != typeof this.dataList.getRealRowIndex() && (this.options.fixedRow > 0 && this.options.fixedRow > n ? (this.applyRowStyleOptions(n), this.setEvenOddBackground(n, n)) : this.options.lastFixedRow > 0 && n > this.lastIndex - this.options.lastFixedRow || (this.applyRowStyleOptions(o + n), this.setEvenOddBackground(n, o + n))), u ? this.lastDisplayedRow < n && !0 !== this.hiddenRowObj.init && (this._setRowDisplay(n, ""), l || (this.lastDisplayedRow = n)) : this._setRowDisplay(n, "none"), u && "" !== this.options.visibleRowNum) if (d--, i && this.hasSubtotal && d >= 1) d -= this.drawSubtotalRow(n + 1, n + o, { maxCount: d }); if (l) for (var g = 0; g < this.oneRowDataLength; g++) { var f = n + o, m = this._getTdElem(n + o, g); if (m) { var y = !0 === this.hiddenCellObj[f + "_" + g]; m.style.display = y ? "none" : "" } } } } if (this.hideDataLayer && (this.hideDataLayer.style.display = "none"), null !== this.lastTopRowIndex && o >= this.lastTopRowIndex && !0 !== this.hiddenRowObj.init && !l) { for (g = n; g <= this.lastDisplayedRow; g++)this._setRowDisplay(g, "none"); this.lastDisplayedRow = n - 1 } return this.options.mergeRefreshAlways && this.dynamicMergeHTML(), !0 === this.hiddenRowObj.init ? t : n } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.completiveDrawData = function(t, e) {
						try {
							!this.autofitDone && this.options.autoFit && this._setAutoFit(); var i = this.getDataLength(); t = t || 0; !0 === this.hiddenRowObj.init && (t = 0)
								; var o = this.rowIndex, s = t - 1, n = this.dataLayerHeight, l = this.hiddenCellObj.length > 0; if (i > 0) { if (!0 === this.hiddenRowObj.init) this._applyRowVisible({ applyStyle: !0, drawRow: !0 }), s = this.lastIndex; else { var h = this.options.initFixedHeightByRowNum > -1; 0 == t && o != this.lastTopRowIndex && "" === this.options.visibleRowNum && this.drawSubtotalRow(0, o - 1); var d, p = this.drawedRowLength; this._dynamicVisibleRowNum > 0 && (p = this._dynamicVisibleRowNum), h && this.hasSubtotal && this.drawedSubtotal && (p -= this.drawedSubtotal.drawedRowLength), h && (d = { skipSubtotal: !0 }); for (var u = t; u < p && u + o < i; u++) { var c = u + this.rowIndex; if (this.options.fixedRow > 0 && this.options.fixedRow > u ? this.fastDrawRowData(u, u, d) : this.fastDrawRowData(u, c, d), s = u, h && this.hasSubtotal && u < p - 1) p -= this.drawSubtotalRow(u + 1, c, { maxCount: p - u - 1 }) } if (h && this.hasSubtotal && p > s + 1 && (p -= this.drawSubtotalRow(0, o - 1, { maxCount: p - s - 1 })), this.options.rowResize && this.rowResized) { var g = n - this.getElementById(this.id + "_head_table").offsetHeight, f = 0; for (u = 0; u < this.dataRowList.length; u++) { if (!(f < g)) { s = u; break } f += this.dataRowList[u].offsetHeight } } if ("native" == this.options.drawType && 0 != t && (s = this.getDataLength() - 1), l) { for (u = s + 1; u < this.drawedRowLength + this.hiddenRowObj.extraRow; u++)this._setRowDisplay(u, "none"); for (u = 0; u <= s; u++)this._setRowDisplay(u, "") } else { for (u = s + 1; u <= this.lastDisplayedRow + this.hiddenRowObj.extraRow; u++)this._setRowDisplay(u, "none"); for (u = this.lastDisplayedRow + 1; u <= s; u++)this._setRowDisplay(u, "") } var m = l || "" === this.options.visibleRowNum && -1 == this.options.initFixedHeightByRowNum; if (m) { var y = 0, b = this.options.backgroundColorMode.toLowerCase(); "always" !== b && "full" !== b || (y = t); for (u = y; u <= s; u++)this.options.fixedRow > 0 && this.options.fixedRow > u ? this.applyRowStyleOptions(u) : this.applyRowStyleOptions(o + u); this.options.autoResizeEmbeddedInput && this.firstEmbeddedInputResize && (this.setAutoResizeEmbeddedInput(), this.firstEmbeddedInputResize = !1) } this.lastDisplayedRow = s, m && "all" !== this.options.visibleRowNum && (s = this.cutGridBottom(s, e)) } for (u = 0; u <= s; u++)this.options.fixedRow > 0 && this.options.fixedRow > u ? this.setEvenOddBackground(u, u) : this.setEvenOddBackground(u, o + u); if (this.options.lastFixedRow > 0) for (u = 0; u < this.options.lastFixedRow; u++)this.options.lastFixedRowStartIndex > 0 ? (this.fastDrawRowData(s - u, this.options.lastFixedRowStartIndex + 1 - u), m && this.applyRowStyleOptions(s - u), this.setEvenOddBackground(s - u, this.options.lastFixedRowStartIndex + 1 - u)) : (this.fastDrawRowData(s - u, i - 1 - u), m && this.applyRowStyleOptions(s - u), this.setEvenOddBackground(s - u, i - 1 - u)); if (!0 !== this.hiddenRowObj.init && !l) { var w = this._getVisibleLastIndex(s + 1); s + 1 < this.drawedRowLength && (this._setRowDisplay(w, ""), this.setEvenOddBackground(w, o + w), this.applyRowStyleOptions(o + w), this.options.showLastRow && !this.hasSubtotal ? this.getDataLength() <= o + w && this._setRowDisplay(w, "none") : this._setRowDisplay(w, "none")) } } else { var v = this.options.showLastRow && !this.hasSubtotal ? 1 : 0, C = this.lastDisplayedRow + v; !0 === this.hiddenRowObj.init && (C = this.drawedRowLength + this.hiddenRowObj.extraRow - 1); for (u = 0; u <= C; u++)this._setRowDisplay(u, "none"); s = this.lastDisplayedRow = -1 } if (this.hideDataLayer && (this.hideDataLayer.style.display = "none"), this.focusedCell.length > 0 && !this.editedCell) { var I = this.focusedCell[this.focusedCell.length - 1].focusedRowIndex - this.rowIndex, _ = this.focusedCell[this.focusedCell.length - 1].focusedColIndex; if (0 <= I && I <= s) { var x = this.data_td_list[_ + I * this.oneRowDataLength]; x && this.applyFocusedCellIn(x) } } var S = WebSquare.BootLoader.fullViewed || !1, D = r.D.fullViewed || !1; if (!S && !D && "crosstab" == this.options.adaptive && this.hasClass("w2grid_adaptive_crosstab")) { this.hasSubtotal && this.setAdaptiveGridSubtotalHeight(); for (u = this.defaultColCnt; u < this.hiddenList.length; u++)1 == this.hiddenList[u] && this.setAdaptiveColumnVisible(u, !1) } return s
						} catch (t) { a.w.printStackTrace(t, null, this) }
					}, y.prototype.adjustDraw = function(t, e) {
						try {
							void 0 !== e && null != e || (e = {}); var i = this.rowIndex; this.dataLayerHeight; if (this.options.lazyDrawHiddenColumn) this.initVisibilityArr = this.colIndexInfo.body.visibilityArr.slice(0),
								this.hideInvisibleTds(); else { this.rollbackCommitFlag = !1; var o = this.lastDisplayedRow; !0 === this.hiddenRowObj.init && (o = this.drawedRowLength + this.hiddenRowObj.extraRow - 1); for (var s = 0; s <= o - this.options.lastFixedRow; s++)this.groupbyStatus.grouped && "object" == typeof this.dataList.getRealRowIndex(s + i) || (!0 !== this.hiddenRowObj.init || this._getRowVisible(s + i)) && (this.options.fixedRow > 0 && s <= this.options.fixedRow - 1 ? this.lazyDrawRowData(s, s) : this.lazyDrawRowData(s, s + i)); this.rollbackCommitFlag = !0 } t = this.options.initFixedHeightByRowNum > -1 ? this.adjustInitFixedByRowNum(t) : "" !== this.options.visibleRowNum ? this.adjustVisibleRowNum(t) : this.adjustDefault(t), this.maxRowLength = t, !this.isIE6or7 || 1 == this.options.senseReader && "" == this.options.visibleRowNum || (this._setRowDisplay(t + 1, ""), this.dataRowList[(t + 1) * this.oneRowLength] && this.dataRowList[(t + 1) * this.oneRowLength].offsetHeight, this._setRowDisplay(t + 1, "none")), this.dynamicMergeHTML()
						} catch (t) { a.w.printStackTrace(t, null, this) }
					}, y.prototype.adjustVisibleRowNum = function(t) { try { if ("" === this.options.visibleRowNum || "native" === this.options.drawType) return t; var e = this.rowIndex, i = this.getDataLength(); this.setDataTable(); var o = { noDraw: !0, skipResize: null != this.lastTopRowIndex }; this.setScrollYHeight(o), !0 === this.hiddenRowObj.init && this.applyStyleOptions(t); var s, n = this.getElementById(this.id + "_scrollX_div"), l = parseInt(n.style.height, 10), h = this.getElementById(this.id + "_body_table"), d = 0; if (!0 === this.hiddenRowObj.init) this.lastDisplayedRow = t, this.lastIndex = t, s = h.offsetHeight, r.D.isIE(9) && (s = h.getBoundingClientRect().height), this.hasFooter && (d = 0 == (d = this.getElementById(this.id + "_foot_table").offsetHeight) ? this.footerHeight : d); else { var p = "all" == this.options.visibleRowNum ? i : p = parseInt(this.options.visibleRowNum, 10); this.options.initFixedHeightByRowNum > -1 && this.hasSubtotal && this.drawedSubtotal && (p -= this.drawedSubtotal.drawedRowLength); for (var u = t + 1; u + e < i && u < p; u++)this.drawRowData(u, u + e), t++; for (u = this.lastDisplayedRow + 1; u <= t; u++)this._setRowDisplay(u, ""); this.applyStyleOptions(t); for (u = t + 1; u <= this.lastDisplayedRow; u++)this._setRowDisplay(u, "none"); this.lastDisplayedRow = t, this.lastIndex = t, s = h.offsetHeight, r.D.isIE(9) && (s = h.getBoundingClientRect().height), this.hasFooter && (d = 0 == (d = this.getElementById(this.id + "_foot_table").offsetHeight) ? this.footerHeight : d) } this.options.initFixedHeightByRowNum > -1 && i > this.options.initFixedHeightByRowNum || !(s < this.defaultDataLayerHeight) || !0 === this.options.isItemTable || this._dynamicVisibleRowNum > 0 || (s = this.defaultDataLayerHeight); var c = 0; "" !== this.options.visibleRowNum && this.options.groupbyZone && this.groupbyZoneStatus.groupbyZoneRender && (c = this.groupbyZoneStatus.groupbyZoneRender.offsetHeight, this.options.groupbyFilterBox && (c += this.groupbyZoneStatus.groupbyFilterBoxRender.offsetHeight)); var g = this.getSize("height"), f = s + l + d + c, m = "native" !== this.options.drawType; if (this.options.visibleRowNumFix) { var y = this.options.initFixedHeightByRowNum > -1 ? this.options.initFixedHeightByRowNum : this.options.visibleRowNum; if (!isNaN(y)) { var b = this.getElementById(this.id + "_head_table").offsetHeight; f < this.oneRowHeight * y + b + l + d + 1 && (m = !1) } } if ((i > 0 || "all" == this.options.visibleRowNum) && g != f && (m && this.setSize(null, f), null != this.lastTopRowIndex)) { var w = this._getScrollRowIndex(this.lastTopRowIndex); w !== this._getScrollMaxRowIndex() && (o.skipResize = !1, o.restRowCnt = w, this.lastTopRowIndex = null) } if (this.options.autoFit && this._setAutoFit(), this.resizeObj = { width: this.render.offsetWidth, height: this.render.offsetHeight, clientWidth: this.render.clientWidth }, this.dataLayerHeight = h.parentNode.offsetHeight, this.setScrollYHeight(o), null == this.lastTopRowIndex) { var v = this._getVisibleRowIndex(this._getScrollMaxRowIndex()), C = this._getVisibleLastIndex(this.lastIndex + 1); this.rowIndex === v && this.rowIndex + C === i && (this.lastTopRowIndex = this.rowIndex) } return t } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.adjustInitFixedByRowNum = function(t) { try { return this.adjustVisibleRowNum(t) } catch (t) { a.w.printStackTrace(t, null, this) } },
						y.prototype.adjustDefault = function(t) { try { return "" !== this.options.visibleRowNum || (this.adjustDraw_keepTop ? this.adjustDraw_keepTop = null : this.setScrollYHeight({ skipResize: !0 })), t } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.drawBottomData = function(t) { if (!(this.rowIndex < 0 || 0 == this.rowIndex && t <= this.lastIndex || this.rowIndex >= 0 && this.rowIndex + this.lastIndex == t || isNaN(Number(t)))) { var e = this.getDataLength(); t >= e && (t = e - 1), this.subtotalHidden(); for (var i = 0; i <= this.lastDisplayedRow; i++)this._setRowDisplay(i, "none"); var o = t + 1 - this.drawedRowLength; o < 0 && (o = 0); var s = (e < this.drawedRowLength ? e : this.drawedRowLength) - 1; for (i = 0; i <= s; i++)this.drawRowData(i, i + o), this._setRowDisplay(i, ""); var a = t - o, n = this.dataRowList[(t - o + 1) * this.oneRowLength - 1]; if (this.hasSubtotal && this.drawedSubtotal.length > 0) for (i = 0; i < this.drawedSubtotal.length; i++) { var l = this.drawedSubtotal[i]; if (l.rowIndex == t) { n = l[l.length - 1]; break } } var h = n.offsetTop + n.offsetHeight, d = this.dataLayerHeight; if (h <= d) { this.rowIndex = o, this.lastIndex = this.cutGridBottom(s); for (i = this.rowIndex; i <= this.rowIndex + this.lastIndex; i++)this.applyRowStyleOptions(i); this.setScrollYHeight({ noDraw: !0 }) } else { this.subtotalHidden({ startRowIndex: t + 1 }); for (i = a + 1; i <= s; i++)this._setRowDisplay(i, "none"); var p = o - (this.hasSubtotal ? .5 : 0), u = 0, c = 0; if (this.hasSubtotal) for (var g in this.subtotalTableList) c += this.subtotalTableList[g].rows.length; for (; p < e;) { if (this.hasSubtotal) { for (i = 0; i < this.drawedSubtotal.length; i++)if (this.drawedSubtotal[i].rowIndex == p - .5) for (var f = 0; f < this.drawedSubtotal[i].length; f++)h -= this.drawedSubtotal[i][f].offsetHeight; if (p += .5, h <= d) { this.subtotalHidden({ endRowIndex: p - 1 }); break } u += c } for (i = 0; i < this.oneRowLength; i++)h -= this.dataRowList[this.oneRowLength * (p - o) + i].offsetHeight; if (u += this.oneRowLength, p += this.hasSubtotal ? .5 : 1, h <= d) { if (this.hasSubtotal) { p += .5; for (i = 0; i < this.drawedSubtotal.length; i++)if (this.drawedSubtotal[i].rowIndex == p - 1) { p -= .5; break } } break } } var m = [], y = this.getElementById(this.id + "_body_tbody"); for (i = 0; i < u; i++) { var b = y.removeChild(y.rows[0]); b.style.cssText = "display:none", m.push(b) } for (i = c; i < m.length; i++)y.appendChild(m[i]); for (i = 0; i < c; i++)y.appendChild(m[i]); for (var g in this.dataRowList = [], this.all_data_td_list = [], this.data_num_td_list = [], this.data_status_td_list = [], this.data_td_list = [], this.subtotalRowHash) this.subtotalRowHash[g] = []; var w = r.D.getDataPrefix("targetcolumnid"), v = 0; for (i = 0; i < c; i++) { g = (I = y.rows[v++]).getAttribute(w); this.subtotalRowHash[g].push(I) } for (i = 0; i < this.drawedRowLength; i++) { var C = []; for (f = 0; f < this.oneRowLength; f++)C.push(y.rows[v++]); this.addBodyRow2(i, C); for (f = 0; f < c; f++) { var I; g = (I = y.rows[v++]).getAttribute(w); this.subtotalRowHash[g].push(I) } } this.hideDataLayer && (this.hideDataLayer.style.display = "none"), this.rowIndex = parseInt(p + .5, 10), this.lastIndex = s = t - this.rowIndex, t >= e - 1 && (this.lastTopRowIndex = p); for (i = 0; i <= s; i++)this.setEvenOddBackground(i, this.rowIndex + i); for (i = t; i >= p; i--)this.applyRowStyleOptions(i); if (s + 1 < this.drawedRowLength) { var _ = this._getVisibleLastIndex(s + 1); this._setRowDisplay(_, ""), this.setEvenOddBackground(_, this.rowIndex + _), this.rowIndex--, this.applyRowStyleOptions(this.rowIndex + _), this.rowIndex++, this._setRowDisplay(s + 1, "none") } this.setScrollYHeight({ noDraw: !0 }), this.options.lazyDrawHiddenColumn && this.hideInvisibleTds() } } }, y.prototype.cutGridBottom = function(t, e) {
							try {
								if ("native" === this.options.drawType) return; var i = this.rowIndex, o = this.dataLayerHeight, s = this.getElementById(this.id + "_head_table"), n = this.getElementById(this.id + "_body_tbody"), l = WebSquare.style.getStyle(s, "border-top-width"); l = "thin" == l ? r.D.isIE(6) || r.D.isIE(7) ? 2 : 1 : "medium" == l ? r.D.isIE(6) || r.D.isIE(7) ? 4 : 3 : "thick" == l ? r.D.isIE(6) || r.D.isIE(7) || r.D.isOpera() ? 6 : 5 : parseInt(l, 10); var h = parseInt(l / 2, 10) - s.offsetTop; if (n.getBoundingClientRect) { var d = n.getBoundingClientRect(), p = d.bottom - d.top; h += p - parseInt(p, 10) > 0 ? 1 : 0 } for (var u = o - h, c = this.getElementById(this.id + "_body_tbody").childNodes, g = (t = -1,
									!0), f = this.getDataLength(), m = this.oneRowLength * f - 1, y = i * this.oneRowLength, b = this.hiddenCellObj.length > 0, w = { row: [], cnt: 0 }, v = 0; v < c.length; v++) { var C = c[v], I = !1, _ = !1; if (0 !== C.offsetHeight) { w.row[v] = "visible", w.cnt++, this.hasClass(C, "grid_body_row") ? (g && y + t < m ? t++ : (C.style.display = "none", this.addClass(C, "w2grid_hidedRow")), I = !0) : C.getAttribute("data-subtotal") && (g || this._subtotalHidden([C]), _ = !0); var x = C.offsetTop + C.offsetHeight - u; if (g && x > 0) { if (g = !1, I) { var S = t % this.oneRowLength; if (b) { var D = this.oneRowHeight / this.oneRowLength; S = Math.floor(x / D) } for (var R = 0; R <= S && v >= R; R++) { var L = c[v - R]; L.style.display = "none", this.addClass(L, "w2grid_hidedRow"), t-- } } _ && this._subtotalHidden([C]) } } else w.row[v] = "hidden" } if (w.cnt -= t + 1, b) { var T = -1, k = -1; for (v = 0; v < w.row.length && k < t; v += this.oneRowLength) { var A = !1; for (R = 0; R < this.oneRowLength; R++)"visible" === w.row[v + R] && (!1 === A && (T++, A = !0), k++) } t = T } else if (t = Math.floor(t / this.oneRowLength), !this.senseReaderMode) { if (!0 !== this.hiddenRowObj.init) for (v = t + 1; v <= this.drawedRowLength; v++)this._setRowDisplay(v, "none"); this.lastDisplayedRow = t } var F = this.options.showLastRow && !this.hasSubtotal, E = !(1 == this.options.senseReader && "all" !== this.options.visibleRowNum); if (F && (!this.senseReaderMode || E)) { f = this.getDataLength(); var M = b ? Math.floor(t / this.oneRowLength) : t, O = this._getVisibleRowIndex(this._getScrollRowIndex(this.rowIndex) + M + 1); if (f > 0) { for (; !this._getRowVisible(O) && O < f;)O++; O < f && this._getRowVisible(O) && (this._setRowDisplay(O - this.rowIndex, ""), this.lazyDrawRowData(O - this.rowIndex, O)) } } this.lastIndex = t, !0 === this.hiddenRowObj.init && (this.lastDisplayedRow = t); var N = t; if (e && !0 === e.extraRowByCellHidden) { var B = 0; for (v = 0; v < w.row.length && w.cnt > 0; v += this.oneRowLength)for (A = !1, R = 0; R < this.oneRowLength; R++)"visible" === w.row[v + R] && (!1 === A && (B++, A = !0), w.cnt--); N = B } return N
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}, y.prototype.getLastIndex = function(t) { try { var e = this.dataLayerHeight; if (t < 0) return this.lastDisplayedRow = -1, -1; for (; ;) { var i = this.dataRowList[(t + 1) * this.oneRowLength - 1]; if (!(t > 0 && i.offsetTop + i.offsetHeight > e)) break; t-- } return t } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.lazyDrawRowData = function(t, e) { try { for (var i = 0; i < this.colIndexInfo.body.invisibleTds.length; i++) { var o = this.colIndexInfo.body.invisibleTds[i] - this.defaultColCnt, s = this._getColumnMoveIndex(o); s >= 0 && this.drawCellData(t, e, s, !0) } } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.fastDrawRowData = function(t, e, i) {
							try { var o = this.dataList.getRealRowIndex(this.rowIndex + t), s = this.all_data_td_list[t * this.realRowDataLength], r = 0; if ("number" == typeof o) { if ((this.groupbyStatus.grouped || this.clearGrouping) && this.defaultColCnt > 0) for (var n = s, l = !0, h = 0; h < this.defaultColCnt; h++) { var d = this.colIndexes.bodyColInfo.colSpanArr[h] || 1; n.setAttribute("colSpan", d), n.style.display = "", n.innerText = "", n.textContent = "", n.className.match("w2grid_groupby") && (n.className = s.className.split(" ").splice(0, 1), this.options.rowNumVisible && l ? (n.className += " gridBodyDefault_rowNumber", l = !1) : n.className += " gridBodyDefault_rowStatus"), n = n.nextSibling } if (this.options.rowMerge) { var p = { rowMergeStartPoint: [], rowMergeSameDataLength: [] }, u = this.getRowData(e), c = !1, g = 0; for (h = 0; h < u.length; h++)u[h] == u[h + 1] ? (c || p.rowMergeStartPoint.push(h), g++, c = !0) : (c && (g++, p.rowMergeSameDataLength.push(g)), c = !1, g = 0) } this._drawRowNumData(t, e, i), this._drawRowStatus(t, e, i); var f = this.colIndexInfo.body.visibleTds, m = f.length; i && !0 === i.refreshColumn && (m = this.oneRowDataLength); for (h = 0; h < m; h++) { var y; if (i && !0 === i.refreshColumn) y = h; else { var b = f[h] - this.defaultColCnt; y = this._getColumnMoveIndex(b) } if (y >= 0) if (this.options.rowMerge) { d = null; for (var w = 0; w < p.rowMergeStartPoint.length; w++)y == p.rowMergeStartPoint[w] ? d = p.rowMergeSameDataLength[w] : p.rowMergeStartPoint[w] < y && y < p.rowMergeStartPoint[w] + p.rowMergeSameDataLength[w] && (d = -1); this.drawCellData(t, e, y, null, d, i) } else this.drawCellData(t, e, y, null, null, i) } i && !0 === i.skipSubtotal || (r = this.drawSubtotalRow(t + 1, e)) } else "object" == typeof o && this.drawGroupData(s, o, t); return r } catch (t) {
								a.w.printStackTrace(t, null, this)
							}
						}, y.prototype.clearGroupedRow = function(t, e) { try { if (this.defaultColCnt > 0) for (var i = this.all_data_td_list[t * this.realRowDataLength], o = i, s = !0, r = 0; r < this.defaultColCnt; r++) { var n = this.colIndexes.bodyColInfo.colSpanArr[r] || 1; o.setAttribute("colSpan", n), o.style.display = "", o.innerText = "", o.textContent = "", o.className.match("w2grid_groupby") && (o.className = i.className.split(" ").splice(0, 1), this.options.rowNumVisible && s ? (o.className += " gridBodyDefault_rowNumber", s = !1) : o.className += " gridBodyDefault_rowStatus"), o = o.nextSibling } for (r = 0; r < this.oneRowDataLength; r++) { var l = r, h = this._getColumnMoveIndex(l); h >= 0 && this.drawCellData(t, e, h) } this.drawSubtotalRow(t + 1, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.drawRowData = function(t, e, i) { try { var o = this.dataList.getRealRowIndex(this.rowIndex + t), s = 0; if (null == o) return s; var n = r.D.getDataPrefix("colMerged"), l = this.all_data_td_list[t * this.realRowDataLength]; if ("number" == typeof o) { this._drawRowNumData(t, e), this._drawRowStatus(t, e); for (var h = 0; h < this.oneRowDataLength; h++) { var d = h, p = this.getCellInfo(d); if (this.drawCellData(t, e, d), p && p.options.colMerge && !this.groupbyStatus.grouped) for (var u = this._dataList.getColumnIndex(this.getColumnID(d)), c = this._dataList.dataArr[e * this._dataList.oneRowDataLength + u], g = 0; g <= this.maxRowLength - t; g++) { var f = this.data_td_list[(t + g) * this.oneRowDataLength + d]; if (f) { var m = c == this.dataList.getCellData(t + g + 1, d) ? "1" : "0"; f.setAttribute(n, m), this.drawCellData(t + g, e + g, d) } } } i && !0 === i.skipSubtotal || (s = this.drawSubtotalRow(t + 1, e)) } else this.drawGroupData(l, o, t); return s } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.hideNochangeDataLayer = function(t) { if (null == this.hideDataLayer) { this.hideDataLayer = document.createElement("div"), this.hideDataLayer.className = "w2grid_fastScroll_layer"; var e = document.createElement("div"); e.innerHTML = this.options.scrollMsg, e.className = "w2grid_fastScroll_msg", this.hideDataLayer.appendChild(e), this.getElementById(this.id + "_dataLayer").appendChild(this.hideDataLayer) } var i = this.all_data_td_list[(t - 1) * this.realRowDataLength], o = i.offsetHeight; 0 != o ? (this.hideDataLayer.style.display = "block", this.hideDataLayer.style.top = i.offsetTop + o + 1 + "px") : this.hideDataLayer.style.display = "none" }, y.prototype.setEvenOddBackground = function(t, e) { if (this.options.oddEvenColorDisplay) { var i = this.data_td_list[t * this.oneRowDataLength], o = null; if (i) { var s = r.D.getDataPrefix("trIndex"); o = i.parentNode; do { o.style.backgroundColor = e % 2 == 1 ? this.options.evenRowBackgroundColor : this.options.oddRowBackgroundColor, o = r.D.next(o) } while (null != o && "0" != o.getAttribute(s)) } } }, y.prototype._drawRowNumData = function(t, e, i) { if (this.options.rowNumVisible) { var o = this.data_num_td_list[t], s = ""; s = o && null != o.textContent ? "textContent" : o && null != o.innerText ? "innerText" : "innerHTML", this.rowNumArr ? "number" == typeof this.rowNumArr[e] && (o[s] = 1 + this.rowNumArr[e]) : o && (o[s] = 1 + e + this.startRowNumber) } }, y.prototype._drawRowStatus = function(t, e, i) { if (this.options.rowStatusVisible) { var o = this.data_status_td_list[t]; if (o) { var s = this._linkedDataList || this._dataList, a = ""; switch ("linkedDataList" == s.initializeType ? s.getRowStatusValue(e) : this._dataList.options.depthColumn || this.groupbyStatus.grouped ? s._getRowStatusValue(this.getRealRowIndex(e)) : s.getRowStatusValue(e)) { case 0: a = "R"; break; case 1: a = "U"; break; case 2: a = "C"; break; case 3: a = "D"; break; case 4: a = "V" }if (void 0 === o.imageName && (o.imageName = ""), o.imageName != a || this.clearGrouping) { switch (o.imageName) { case "": case "R": break; case "C": this.removeClass(o, "w2grid_rowStatus_C"); break; case "U": this.removeClass(o, "w2grid_rowStatus_U"); break; case "D": this.removeClass(o, "w2grid_rowStatus_D"); break; case "V": this.removeClass(o, "w2grid_rowStatus_V") }"R" != a && "" != a && this.addClass(o, "w2grid_rowStatus_" + a), o.imageName = a } } } }, y.prototype.drawCellData = function(t, e, i, o, s, n) {
							try {
								o || null == this.editedCell || this.editedCell.options.colIndex + "" != i + "" || this.editedCell.handleCancelEdit(); var l = this.data_td_list[i + t * this.oneRowDataLength]; if (l) {
									var h = this.cellInfoHash[this.tdIdList[i]]; if (this.groupbyStatus.grouped || this.clearGrouping) { var d = this.colIndexes.bodyColInfo.colSpanArr[i + this.defaultColCnt] || 1; l.setAttribute("colSpan", d), l.style.display = "", l.style.textAlign = h.options.textAlign } if (this.options.rowMerge) if (null == s) l.setAttribute("colSpan", ""), l.style.display = "", l.style.textAlign = ""; else if (s > 0) { d = s; l.setAttribute("colSpan", d), l.style.display = "", l.style.textAlign = h.options.textAlign } else -1 == s && (l.style.display = "none"); !h.options.embeddedInput && this.groupbyStatus.grouped && (l.innerText = "", l.textContent = ""), (this.groupbyStatus.grouped || this.clearGrouping) && this.hasClass(l, "w2grid_groupby") && (l.className = "gridBodyDefault"); var p = this.aria_labelledby[i]; if (p) { var u = t + e + 1; l.setAttribute("aria-labelledby", p + " r" + u) } if (h.options.headers && this.options.applyScopeHeaders) { var c = this.scope_id ? this.scope_id + "_" : "", g = r.D.getDataPrefix("headers"); l.setAttribute(g, c + h.options.headers) } this.isColMerge && h.options.colMerge && !this.groupbyStatus.grouped ? this.setColMergeCellData(t, e, i, n) : this.setInnerHTML(l, e, i, n)
								}
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}, y.prototype.setColMergeCellData = function(t, e, i, o) { if (this.isColMergeAnd) return this.setColMergeAndCellData(t, e, i, o); var s = this.data_td_list[i + t * this.oneRowDataLength], a = this.getHasSubtotalCount(e); if (0 == t) return 0 != a && (s.style.borderBottomWidth = "1px"), void this.setInnerHTML(s, e, i, o); var n = this.getColumnID(i), l = this.dataList._getCellData(e - 1, n), h = this.data_td_list[i + (t - 1) * this.oneRowDataLength], d = this.upperGroupingTest(e, i, t); if (l == this.dataList._getCellData(e, n) && d) { h.style.borderBottomWidth = "0px", s.style.borderTopWidth = "0px", s.style.borderBottomWidth = "0px", s.innerHTML = ""; var p = r.D.getDataPrefix("viewType"), u = r.D.getDataPrefix("inputType"); if ("icon" == s.getAttribute(p)) { var c = s.getAttribute(u); this.removeClass(s, this.options.bodyTdClass + "_" + c) } if (this.options.senseReader && (0 == a && t != this.lastDisplayedRow && t != this.lastIndex || (s.style.borderBottomWidth = "1px"), t - 1 != this.lastDisplayedRow && t - 1 != this.lastIndex || (h.style.borderBottomWidth = "1px")), 0 != a && (s.style.borderBottomWidth = "1px"), null != h) return this.applyCellStyleOptions(e, i, !1), "mergeCellBackgroundColor" } else { var g = s.style.borderTopWidth; this.getCellInfo(i).options.colMergeEdit && "0px" == g && !this.groupbyStatus.grouped && (g = "1px"), s.style.borderTopWidth = "0px", this.setInnerHTML(s, e, i, o), s.style.borderTopWidth = g } }, y.prototype.setColMergeAndCellData = function(t, e, i, o) { var s = this.data_td_list[i + t * this.oneRowDataLength], a = this.getHasSubtotalCount(e); if (0 == t) return 0 != a && (s.style.borderBottomWidth = "1px"), void this.setInnerHTML(s, e, i, o); this.colMergeObj ? this.colMergeObj.displayRowIndex != e && (this.colMergeObj = { displayRowIndex: e, colArr: [] }) : this.colMergeObj = { displayRowIndex: e, colArr: [] }; var r = this.getColumnID(i); if (null == this.colMergeObj.colArr[i]) { var n = this.dataList._getCellData(e - 1, r), l = this.dataList._getCellData(e, r); if (this.colMergeObj.colArr[i] = n == l, this.colMergeObj.colArr[i]) for (var h = 0; h < this.oneRowDataLength; h++) { if (null == this.colMergeObj.colArr[h]) if (this.getCellInfo(h).options.colMerge) { var d = this.getColumnID(h), p = this.dataList._getCellData(e - 1, d), u = this.dataList._getCellData(e, d); this.colMergeObj.colArr[h] = p == u } else this.colMergeObj.colArr[h] = !0 } } var c = !0; for (h = 0; h < this.colMergeObj.colArr.length; h++)if (!this.colMergeObj.colArr[h]) { c = !1; break } var g = this.data_td_list[i + (t - 1) * this.oneRowDataLength]; if (c) g.style.borderBottomWidth = "0px", s.style.borderTopWidth = "0px", s.style.borderBottomWidth = "0px", s.innerHTML = "", this.options.senseReader && (0 == a && t != this.lastDisplayedRow && t != this.lastIndex || (s.style.borderBottomWidth = "1px"), t - 1 != this.lastDisplayedRow && t - 1 != this.lastIndex || (g.style.borderBottomWidth = "1px")), 0 != a && (s.style.borderBottomWidth = "1px"); else { var f = s.style.borderTopWidth; this.getCellInfo(i).options.colMergeEdit && "0px" == f && (f = "1px"), s.style.borderTopWidth = "0px", this.setInnerHTML(s, e, i, o), s.style.borderTopWidth = f } }, y.prototype.drawColMergeCellData = function(t, e, i, o) {
							if (this.isColMergeAnd) return this.drawColMergeAndCellData(t, e, i, o); var s = this.getColumnID(i), a = this.data_td_list[i + t * this.oneRowDataLength]; if (a.style.borderBottomWidth = "0px", 0 != t || o) { var n = this.getHasSubtotalCount(e); 0 == n && (a.style.borderBottomWidth = "0px"); var l = this.dataList._getCellData(e - 1, s), h = this.data_td_list[i + (t - 1) * this.oneRowDataLength]; a.style.borderTopWidth = "0px"; var d = this.upperGroupingTest(e, i, t); if (l == this.dataList._getCellData(e, i) && d) { null != h && (h.style.borderBottomWidth = "0px"); var p = r.D.getDataPrefix("colMerged"), u = r.D.getDataPrefix("viewType"), c = r.D.getDataPrefix("inputType"); if (a.style.borderTopWidth = "0px", a.style.borderBottomWidth = "0px", a.setAttribute(p, "1"), a.innerHTML = "", 0 != n && (a.style.borderBottomWidth = "1px"), "icon" === a.getAttribute(u)) { var g = a.getAttribute(c); this.removeClass(a, this.options.bodyTdClass + "_" + g) } if (null != h && this.options.oddEvenColorDisplay && !this.options.oddEvenColorMerged) return "mergeCellBackgroundColor" } else a.style.borderTopWidth = "1px" }
						}, y.prototype.drawColMergeAndCellData = function(t, e, i, o) { var s = this.getColumnID(i), a = this.data_td_list[i + t * this.oneRowDataLength]; if (a.style.borderBottomWidth = "0px", 0 != t || o) { var n = this.getHasSubtotalCount(e); if (0 == n && (a.style.borderBottomWidth = "0px"), this.colMergeObj ? this.colMergeObj.displayRowIndex != e && (this.colMergeObj = { displayRowIndex: e, colArr: [] }) : this.colMergeObj = { displayRowIndex: e, colArr: [] }, null == this.colMergeObj.colArr[i]) { var l = this.dataList._getCellData(e - 1, s), h = this.dataList._getCellData(e, s); if (this.colMergeObj.colArr[i] = l == h, this.colMergeObj.colArr[i]) for (var d = 0; d < this.oneRowDataLength; d++) { if (null == this.colMergeObj.colArr[d]) if (this.getCellInfo(d).options.colMerge) { var p = this.getColumnID(d), u = this.dataList._getCellData(e - 1, p), c = this.dataList._getCellData(e, p); this.colMergeObj.colArr[d] = u == c } else this.colMergeObj.colArr[d] = !0 } } var g = !0; for (d = 0; d < this.colMergeObj.colArr.length; d++)if (!this.colMergeObj.colArr[d]) { g = !1; break } if (g) { var f = this.data_td_list[i + (t - 1) * this.oneRowDataLength]; null != f && (f.style.borderBottomWidth = "0px"); var m = r.D.getDataPrefix("colMerged"); if (a.style.borderTopWidth = "0px", a.style.borderBottomWidth = "0px", a.setAttribute(m, "1"), a.innerHTML = "", 0 != n && (a.style.borderBottomWidth = "1px"), null != f && this.options.oddEvenColorDisplay && !this.options.oddEvenColorMerged) return "mergeCellBackgroundColor" } else a.style.borderTopWidth = "1px" } }, y.prototype.upperGroupingTest = function(t, e, i) { var o = this.getCellInfo(e), s = o.options.upperColumn; if (this.hasSubtotal && this.hasUpperSubtotalRow(t)) return !1; if ("" != s) { if (i) { var a = r.D.getDataPrefix("colMerged"), n = this.getColumnIndex(s), l = this.data_td_list[n + i * this.oneRowDataLength], h = this.getCellInfo(n); if (l && "" == l.style.width && ("" == h.options.upperColumn || h.options.upperColumn && "1" != l.getAttribute(a)) && "1" != l.getAttribute(a) && 1 == h.options.colMerge && !this.groupbyStatus.grouped) return !1 } if (this.dataList._getCellData(t, s) != this.dataList._getCellData(t - 1, s)) return !1; var d = this.getCellInfo(s); if (d.options.upperColumn && "" != d.options.upperColumn && d.options.upperColumn != o.id) return this.upperGroupingTest(t, d.options.upperColumn, i) } else { if (this.dataList._getCellData(t, e) != this.dataList._getCellData(t - 1, e)) return !1 } return !0 }, y.prototype.setDataTable = function() {
							try {
								var t = this.getElementById(this.id + "_head_table"), e = this.getElementById(this.id + "_body_table"), i = this.getElementById(this.id + "_body_tbody"); if (this.dataLayerHeight = e.parentNode.offsetHeight, "" === this.options.visibleRowNum && 0 == this.dataLayerHeight) return this.resizeObj = { width: 0, height: 0, scrollLeft: 0, scrollTop: 0, clientWidth: 0 }, this.setRedrawStatus("stop"), void this.delayedDraw({ rowIndex: -1 == this.rowIndex ? 0 : this.rowIndex }); this.defaultDataLayerHeight || (this.isIE6or7 || r.D.isOpera() ? this.defaultDataLayerHeight = this.getElementById(this.id + "_main_div").offsetHeight : this.defaultDataLayerHeight = this.dataLayerHeight); var o = 0
									; if (this.options.senseReader && "all" === this.options.visibleRowNum) o = this.getDataLength(); else if ("" === this.options.visibleRowNum) if (this.options.initFixedHeightByRowNum > -1) o = parseInt(this.options.initFixedHeightByRowNum, 10) + 1; else { var s = this.oneRowHeight; this.hiddenCellObj.length > 0 && (s = this.oneRowHeight / this.oneRowLength), o = parseInt((this.dataLayerHeight - t.offsetHeight) / s) + 1 } else o = "all" === this.options.visibleRowNum ? this.getDataLength() : parseInt(this.options.visibleRowNum, 10); if (0 == this.drawedRowLength && (this.tdCellClassArr = new Array(o * this.oneRowLength)), o > this.drawedRowLength) { var n = this.drawedRowLength; this.drawedRowLength = o; var l = []; 0 == n && this.hasSubtotal && (l = l.concat(this.createSubtotalRows(-1))); for (var h = n; h < this.drawedRowLength; h++) { for (var d = [], p = 0; p < this.oneRowLength; p++) { var u = this.tempTr.rows[p].cloneNode(!0); d[p] = u, l.push(u), this.tdCellClassArr.push(null) } this.addBodyRow(h, d), this.hasSubtotal && (l = l.concat(this.createSubtotalRows(h))) } 0 == this.drawedRowLength ? e.style.borderWidth = "0px" : e.style.borderWidth = ""; for (p = 0; p < l.length; p++)i.appendChild(l[p]); for (h = n + this.hiddenRowObj.extraRow; h < this.drawedRowLength + this.hiddenRowObj.extraRow; h++)this._setRowDisplay(h, "none") }
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}, y.prototype.applyStyleOptions = function(t) { try { for (var e = this.rowIndex >= 0 ? this.rowIndex : 0, i = 0; i <= t + 1 + this.hiddenRowObj.extraRow && i < this.drawedRowLength + this.hiddenRowObj.extraRow; i++)"object" != typeof this.dataList.getRealRowIndex(i + e) && (this.options.fixedRow > 0 && i <= this.options.fixedRow - 1 || this.options.lastFixedRow > 0 && i > t - this.options.lastFixedRow ? this.applyRowStyleOptions(i) : (!this.hiddenRowObj.length > 0 || this._getRowVisible(i + e)) && this.applyRowStyleOptions(i + e)) } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype._setCheckboxHead = function(t) { try { if (t) this.checkHeader(this.bodyToHeaderRelation[t]); else for (var e in this.headerInfoHash) this.checkHeader(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.applyColumnStyleOptions = function(t) { try { for (var e = 0; e < this.drawedRowLength; e++)this.applyCellStyleOptions(e + this.rowIndex, t) } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.applyRowStyleOptions = function(t, e) { try { var i = this._getTrIndex(t); e && (i = this._getTrIndex(this.getDisplayRowIndex(t))); for (var o = 0, s = this.rowIndex; s < t && this.hiddenRowObj.length > 0; s++)this._getRowVisible(s) || o++; if (i < 0 || i - o >= this.drawedRowLength) return; var r = this.dataRowList[this.oneRowLength * i]; if (!r && !e) return; if (r && "none" == r.style.display && !e) return; if (this.options.fixedRow > 0 && i == this.options.fixedRow - 1) { var n = this.dataRowList[this.oneRowLength * (i + 1) - 1]; this.addClass(n, "w2grid_fixedRow") } if (this.options.lastFixedRow > 0 && i == this.lastIndex - this.options.lastFixedRow + 1) { n = this.dataRowList[this.oneRowLength * (i - 1)]; this.addClass(n, "w2grid_lastFixedRow") } if (this.options.lazyDrawHiddenColumn) { var l = this.colIndexInfo.body.visibleTds, h = i * this.oneRowDataLength; for (s = this.defaultColCnt; s < l.length; s++) { var d = l[s] - this.defaultColCnt; this.all_data_td_list[h + d] && (e ? this.applyCellStyleOptions(this.getDisplayRowIndex(t), d) : this.applyCellStyleOptions(t, d)) } } else for (s = 0; s < this.oneRowDataLength; s++) { h = i * this.oneRowDataLength; this.data_td_list[h + s] && (e ? this.applyCellStyleOptions(this.getDisplayRowIndex(t), s) : this.applyCellStyleOptions(t, s)) } t === this.getRowCount() - 1 ? this.__addClass(r, "w2grid_lastRow") : this.hasClass(r, "w2grid_lastRow") && this.__removeClass(r, "w2grid_lastRow") } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.setAutoResizeEmbeddedInput = function() {
							try {
								for (var t = this.data_td_list, e = "", i = null, o = null, s = 0, n = 0, l = !1, h = r.D.getDataPrefix("inputType"), d = r.D.getDataPrefix("colindex"), p = r.D.getDataPrefix("col_id"), u = 0; u < t.length; u++)if ("text" == t[u].getAttribute(h) || "secret" == t[u].getAttribute(h)) {
									e = t[u].getAttribute(p), o = this.cellInfoHash[e]; var c = !1; if ((this.dom[o.mainGridId + o.id] || this.dom[t[u].getAttribute("id") + "_" + t[u].getAttribute(h)]) && (c = !0), 1 == o.options.embeddedInput && c) {
										null == (i = this.getInput(o, t[u])).render.parentNode && (t[u].innerHTML = "", t[u].appendChild(i.render)), "none" == t[u].parentNode.style.display && (t[u].parentNode.style.display = "", l = !0); var g = parseInt(t[u].getAttribute(d), 10); this.embeddedStyleObj || (this.embeddedStyleObj = { top: parseInt(WebSquare.style.getStyle(t[u], "padding-top"), 10), bottom: parseInt(WebSquare.style.getStyle(t[u], "padding-bottom"), 10), left: parseInt(WebSquare.style.getStyle(t[u], "padding-left"), 10), right: parseInt(WebSquare.style.getStyle(t[u], "padding-right"), 10), inputTop: parseInt(WebSquare.style.getStyle(i.render, "padding-top"), 10), inputBottom: parseInt(WebSquare.style.getStyle(i.render, "padding-bottom"), 10), inputLeft: parseInt(WebSquare.style.getStyle(i.render, "padding-left"), 10), inputRight: parseInt(WebSquare.style.getStyle(i.render, "padding-right"), 10) }); var f = parseInt(WebSquare.style.getStyle(i.render, "border-top-width"), 10), m = parseInt(WebSquare.style.getStyle(i.render, "border-bottom-width"), 10), y = parseInt(WebSquare.style.getStyle(i.render, "border-left-width"), 10), b = parseInt(WebSquare.style.getStyle(i.render, "border-right-width"), 10); s = t[u].offsetHeight - parseInt(WebSquare.style.getStyle(t[u], "border-top-width"), 10) - parseInt(WebSquare.style.getStyle(t[u], "border-bottom-width"), 10), s -= this.embeddedStyleObj.top + this.embeddedStyleObj.bottom, s -= f + m, this.embeddedWidthObj[g] && !this.embeddedWidthObj[g].isChanged || (this.embeddedWidthObj[g] = { isChanged: !1, width: t[u].clientWidth }), n = this.embeddedWidthObj[g].width, n -= this.embeddedStyleObj.left + this.embeddedStyleObj.right, n -= y + b, n -= this.embeddedStyleObj.inputLeft + this.embeddedStyleObj.inputRight, r.D.isOpera() && (s += 2), l ? t[u].parentNode.style.display = "none" : r.D.isIE("6 7") && (s -= 2), i.setSize(n - 2, s - (this.embeddedStyleObj.inputTop + this.embeddedStyleObj.inputBottom)), i.setStyle("lineHeight", s + "px")
									}
								} else if ("calendar" == t[u].getAttribute(h)) { e = t[u].getAttribute(p), o = this.cellInfoHash[e]; var w = null; 1 == o.options.embeddedInput && (null == (w = this.getInput(o, t[u])).render.parentNode && (t[u].innerHTML = "", t[u].appendChild(w.render)), "none" == t[u].parentNode.style.display && (t[u].parentNode.style.display = "", l = !0)), s = t[u].offsetHeight - parseInt(WebSquare.style.getStyle(t[u], "border-top-width"), 10) - parseInt(WebSquare.style.getStyle(t[u], "border-bottom-width"), 10), s -= this.embeddedCalendarStyleObj.top + this.embeddedCalendarStyleObj.bottom; g = parseInt(t[u].getAttribute(d), 10); this.embeddedWidthObj[g] && !this.embeddedWidthObj[g].isChanged || (this.embeddedWidthObj[g] = { isChanged: !1, width: t[u].clientWidth }), n = this.embeddedWidthObj[g].width, n -= this.embeddedCalendarStyleObj.left + this.embeddedCalendarStyleObj.right, l ? t[u].parentNode.style.display = "none" : r.D.isIE("6 7") && (s -= 2), w.setSize(n - 2, s) }
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}, y.prototype.applyCellStyleOptions = function(t, e, i, o) {
							try {
								var s = this._getTrIndex(t), n = this._getTdElem(t, e); if (n) {
									var l, h, d, p = [], u = !1; if ("number" == typeof e ? (l = e, h = this.cellIdList[e]) : (l = this.bodyIdColIndexMap[e], h = e), this._linkedDataList) d = this._linkedDataList.filteredRowIndexArr[t]; else if (this.groupbyStatus.grouped) { var c = !0; for (var g in this._grid.customFilterStatusObj) if (this._grid.customFilterStatusObj[g]) { d = this._dataList.filteredRowIndexArr[t], c = !1; break } c && (d = this.groupbyStatus.groupedRowIndexArr[t]) } else d = this._dataList.filteredRowIndexArr[t]; var f = this.cellInfoHash[h] || { options: {} }; if ("custom" == f.options.inputType && (f = f.cellManagerHashByRowIndex[d] ? f.cellManagerHashByRowIndex[d] : f), "crosstab" == this.options.adaptive && this.hasClass("w2grid_adaptive_crosstab") && "true" == f.options.hidden) return; null != this.initStyleValueObj[l] && p.push(this.initStyleValueObj[l].style), "" != f.options.textAlign && p.push("text-align:" + f.options.textAlign), this.options.adjustAlign && "left" == f.options.textAlign && p.push("padding-left:" + this.options.adjustAlign + "px"), null != this.defaultStyleValueObj[l] && p.push(this.defaultStyleValueObj[l].style); var m = null, y = null, b = null, w = null, v = null, C = !1
										; (t < this.options.fixedRow || l < this.options.fixedColumn || l >= this.tdIdList.length - this.options.fixedRightColumn) && (C = !0), null != d ? (m = "number" == typeof d ? this.rowStyleArr[d] : this.rowStyleArr[d.type + "_" + d.groupId], y = "number" == typeof d ? this.rowStyleFixedArr[d] : this.rowStyleFixedArr[d.type + "_" + d.groupId], b = "number" == typeof d ? this.rowStyleDataArr[d] : this.rowStyleDataArr[d.type + "_" + d.groupId], w = "number" == typeof d ? this.cellStyleArr[d * this.oneRowDataLength + l] : this.cellStyleArr[d.type + "_" + d.groupId + "_" + l], v = this.cellClassArr[d * this.oneRowDataLength + l]) : v = this.cellClassArr[t * this.oneRowDataLength + l], null != m && p.push(this.rowStyleValueObj[m].style), null != y && C && p.push(this.rowStyleFixedValueObj[y].style), null == b || C || p.push(this.rowStyleDataValueObj[b].style); var I = this.columnStyleValueObj[l], _ = this.columnStyleFixedValueObj[l], x = this.columnStyleDataValueObj[l]; if (null != I && p.push(this.columnStyleValueObj[l].style), null != _ && C && p.push(this.columnStyleFixedValueObj[l].style), null == x || C || p.push(this.columnStyleDataValueObj[l].style), null != this.adaptiveColumnStyleValueObj[l] && !0 === this.checkRefreshAdaptive() && p.push(this.adaptiveColumnStyleValueObj[l].style), null != w && p.push(this.cellStyleValueObj[w].style), m == "rowResizeStyle_" + t && p.push(this.rowStyleValueObj[m].style), "" != this.options.readOnlyBackgroundColor && "number" == typeof d) 1 == this.___getEditReadOnly(t, e) ? (p.push(this.readOnlyTdStyle), n.readOnly = !0, "linear" !== this.options.focusFlow || !0 !== this.options.readOnlyTabIgnore || f.options.embeddedInput || n.setAttribute("tabIndex", -1)) : (n.readOnly = !1, "linear" !== this.options.focusFlow || !0 !== this.options.readOnlyTabIgnore || f.options.embeddedInput || n.setAttribute("tabIndex", 0)); if ("" != this.options.readOnlyBackgroundImg || "" != this.options.readOnlyBackgroundImgCSS) 1 == this.___getEditReadOnly(t, e) ? (p.push(this.readOnlyTdImg), this.options.readOnlyBackgroundImgCSS || (r.D.isIE(8) || r.D.isIE(6) || r.D.isIE(7)) && (p.push("filter: \"progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled='true', src='" + this.options.readOnlyBackgroundImg + "', sizingMethod='scale')\""), p.push("-ms-filter: \"progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled='true', src='" + this.options.readOnlyBackgroundImg + "', sizingMethod='scale')\"")), n.readOnly = !0, "linear" !== this.options.focusFlow || !0 !== this.options.readOnlyTabIgnore || f.options.embeddedInput || n.setAttribute("tabIndex", -1)) : (n.readOnly = !1, "linear" !== this.options.focusFlow || !0 !== this.options.readOnlyTabIgnore || f.options.embeddedInput || n.setAttribute("tabIndex", 0)); n.disabled = !1, n.removeAttribute("disabled"); var S = this.cellDisabledArr[d * this.oneRowDataLength + l], D = S; if (!0 !== S && !1 !== S) { var R = f.options.disabled, L = this.rowDisabledArr[d], T = this.options.disabledPriority; !0 !== L && !1 !== L && (L = ""), S = "column" === T && "" !== R ? R : "row" === T && "" !== L ? L : R + "" == "true" || L + "" == "true" || R + "" != "false" && L + "" != "false" && ("" !== this.options.disabled && this.options.disabled) } !0 !== S && "true" !== S || (p.push(this.disabledTdStyle), this.disabledCellStyleObj && this.disabledCellStyleObj[t + "_" + e] && this.disabledCellStyleObj[t + "_" + e].style && p.push(this.disabledCellStyleObj[t + "_" + e].style)); var k = this.options.focusMode; if (o && (k = "cell"), !i && "transparent" != this.options.selectedRowColor && ("row" == k || "both" == k)) for (var A = 0; A < this.focusedCell.length; A++)if (t == this.focusedCell[A].focusedRowIndex && !("row" == this.options.focusMode && 1 == this.options.fixedColumnNoBGColor && e < this.options.fixedColumn)) { p.push("background-color:" + this.options.selectedRowColor), u = !0; break } if (!i && "transparent" != this.options.selectedCellColor && ("cell" == k || "both" == k)) for (A = 0; A < this.focusedCell.length; A++)if (t == this.focusedCell[A].focusedRowIndex && e == this.focusedCell[A].focusedColIndex) { p.push("background-color:" + this.options.selectedCellColor), u = !0; break } ("none" != n.style.display || this.hiddenCellObj.length > 0) && !0 !== this.hiddenCellObj[t + "_" + e] || p.push("display:none"); var F = !1
										; this.hiddenCellObj.length > 0 && (!0 === this.hiddenCellObj[t + "_" + e] && "none" !== n.style.display || !0 !== this.hiddenCellObj[t + "_" + e] && "none" === n.style.display) && (F = !0); var E = p.join(";"), M = r.D.getDataPrefix("style_bak"), O = r.D.getDataPrefix("colMerged"), N = r.D.getDataPrefix("or_bgColor"), B = n.style.borderBottomWidth; (E != n.getAttribute(M) || this.groupbyStatus.grouped || F) && (n.style.cssText = E); var G = this.cellStyleValueObj[w]; if (G && G["background-repeat"] ? n.style.backgroundRepeat = G["background-repeat"] : G && G["background-size"] ? n.style.backgroundSize = G["background-size"] : G && G["background-position"] && (n.style.backgroundPosition = G["background-position"]), this.isColMerge && f.options.colMerge && !this.groupbyStatus.grouped) { n.setAttribute(O, "0"); var H = this.drawColMergeCellData(s, t, e); if (this.options.senseReader && B && -1 != B.indexOf("px") && (n.style.borderBottomWidth = B), "mergeCellBackgroundColor" === H && !u) { var W, V = this.getCellStyleValue(t - 1, h, "background-color", !0) || this.getColumnStyleValue(e, "background-color"), q = !0; n.readOnly || this.__getEditReadOnly(n, t) ? (W = V, this.options.readOnlyBackgroundColor ? W = this.options.readOnlyBackgroundColor : (f.options.readOnlyClass || this.options.readOnlyClass) && (q = !1)) : (W = "" != V ? V : t % 2 ? this.options.oddRowBackgroundColor : this.options.evenRowBackgroundColor, !this.options.disabledClass || !0 !== S && "true" !== S || (q = !1)), q && (n.style.backgroundColor = W, this._setMergeCellBackground(t, h, W)), "" != f.options.readOnlyClass && (this.__getEditReadOnly(n, t) ? this.addClass(n, f.options.readOnlyClass) : this.removeClass(n, f.options.readOnlyClass)), "" != this.options.readOnlyClass && (this.__getEditReadOnly(n, t) ? this.addClass(n, this.options.readOnlyClass) : this.removeClass(n, this.options.readOnlyClass)) } } if (n.setAttribute(M, E), n.setAttribute(N, n.style.backgroundColor), this.cellReadOnlyArr[d * this.oneRowDataLength + e] ? (n.setAttribute("readonly", "true"), "linear" !== this.options.focusFlow || !0 !== this.options.readOnlyTabIgnore || f.options.embeddedInput || n.setAttribute("tabIndex", -1)) : !1 === this.cellReadOnlyArr[d * this.oneRowDataLength + e] ? (n.setAttribute("readonly", "false"), "linear" !== this.options.focusFlow || !0 !== this.options.readOnlyTabIgnore || f.options.embeddedInput || n.setAttribute("tabIndex", 0)) : n.removeAttribute("readonly"), null != v) { var j = s * this.oneRowDataLength + e; this.tdCellClassArr[j] && this.tdCellClassArr[j] != v && this.removeClass(n, this.tdCellClassArr[j]), this.tdCellClassArr[j] = v, this.addClass(n, v) } else { j = s * this.oneRowDataLength + e; this.tdCellClassArr[j] && (this.removeClass(n, this.tdCellClassArr[j]), this.tdCellClassArr[j] = void 0) } if ("" != f.options.disabledClass && (!0 === S || "true" === S ? this.addClass(n, f.options.disabledClass) : this.removeClass(n, f.options.disabledClass)), !0 !== D && "true" !== D || ("" != this.options.disabledClass ? this.addClass(n, this.options.disabledClass) : this.removeClass(n, this.options.disabledClass)), "" != this.options.hiddenClass || "" != f.options.hiddenClass) { var P = this.options.hiddenClass; "" != f.options.hiddenClass && (P = f.options.hiddenClass); var z = this._getRealColIndex("body", f.options.col_id) + this.defaultColCnt; this.hiddenList[z] ? this.addClass(n, P) : this.removeClass(n, P) }
								}
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}, y.prototype.dynamicMergeHTML = function() {
							try {
								for (var t in this.tdMergeInfo) { var e = this.data_td_list[t]; this.tdMergeInfo[t].orgColSpan > 1 ? e.setAttribute("colSpan", this.tdMergeInfo[t].orgColSpan) : e.removeAttribute("colSpan"), this.tdMergeInfo[t].orgRowSpan > 1 ? e.setAttribute("rowSpan", this.tdMergeInfo[t].orgRowSpan) : e.removeAttribute("rowSpan"), e.style.display = this.tdMergeInfo[t].display, delete this.tdMergeInfo[t] } var i = this.getRowCount(), o = "native" === this.options.drawType ? i : Math.min(this.lastIndex + 2, i), s = !(!this.isDrillDown || !this._dataList.options.depthColumn), n = !1; for (var l in this.cellMergeInfo) {
									var h = l.split("_"), d = Number(h[0]), p = d; if (!(s && (d = this.getDisplayRowIndex(d), isNaN(d) || d < 0))) {
										var u = Number(h[1]), c = d
										; this.rowIndex >= 0 && (this.options.fixedRow > 0 && this.options.fixedRow > d || this.options.lastFixedRow > 0 && d > this.lastIndex - this.options.lastFixedRow || (c -= this.rowIndex)); var g = this.cellMergeInfo[l].rowSpan, f = this.cellMergeInfo[l].colSpan; if (s) { for (var m = g, y = 0; y < m; y++)0 == this.drilldown.statusArr[p + y] && g--; g = Math.max(g, 1) } var b = 0; if (this.hiddenRowObj.length > 0) for (y = this.rowIndex; y < d; y++)this._getRowVisible(y) || b++; if (!(c < 0 && c + g <= 0 || c - b >= o || (c < this.options.fixedRow && c + g > this.options.fixedRow && (g = c + g - this.options.fixedRow - b, c = this.options.fixedRow), c < this.options.fixedRow && d >= this.options.fixedRow))) { var w = 0, v = 0; if (this.hiddenRowObj.length > 0) for (y = 0; y < g; y++)this._getRowVisible(c + y + this.rowIndex) || (v++, y === w && w++); c + (g -= v) > o + b && (g = o - c + b); var C = g, I = this.oneRowLength; for (y = 0; y < C; y++) { for (var _ = !1, x = 0; x < f; x++) { t = (c + y) * this.oneRowDataLength + (u + x); if (null != (e = this.data_td_list[t])) if (this.hiddenRowObj.length > 0 && !this._getRowVisible(c + y + this.rowIndex)) e.removeAttribute("colSpan"), e.removeAttribute("rowSpan"), _ = !0; else if (this.tdMergeInfo[t] = { orgColSpan: e.getAttribute("colSpan"), orgRowSpan: e.getAttribute("rowSpan"), display: e.style.display }, y === w && 0 === x) { f > 1 ? (e.setAttribute("colSpan", f), n = !0) : e.removeAttribute("colSpan"); var S = g * I; if (S > 1) if (I > 1) { var D = parseInt(e.getAttribute("rowSpan"), 10); !isNaN(D) && D > 1 && (e.setAttribute("rowSpan", S), n = !0) } else e.setAttribute("rowSpan", g), n = !0; else e.removeAttribute("rowSpan"); e.style.display = "" } else e.removeAttribute("colSpan"), e.removeAttribute("rowSpan"), e.style.display = "none" } !0 === _ && C++ } }
									}
								} !0 === n && this.isWebKit && r.D.setTimeout(this.redrawTable, { key: this.id + "_dynamicMergeHTML", delay: 50, caller: this })
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}, y.prototype.createSubtotalRows = function(t) { var e = []; for (var i in this.subtotalTableList) { var o = this.subtotalRowHash[i]; null == o && (o = []); for (var s = this.subtotalTableList[i], a = 0; a < s.rows.length; a++) { var r = s.rows[a].cloneNode(!0); if (r.style.display = "none", this.options.rowNumStatusUniqueId) for (var n = r.getElementsByTagName("td"), l = 0; l < this.defaultColCnt; l++) { var h = n[l].getAttribute("id"); "_headerRowNumber" !== h && "_headerRowStatus" !== h || n[l].setAttribute("id", h + "_subtotal_" + t) } r.setAttribute("data-subtotal", i + "_" + a), o.push(r), e.push(r) } this.subtotalRowHash[i] = o } return e }, y.prototype.addBodyRow = function(t, e) {
							var i = new RegExp("(^|\\s)" + this.options.bodyTdClass + "_rowNumber(\\s|$)"), o = new RegExp("(^|\\s)" + this.options.bodyTdClass + "_rowStatus(\\s|$)"), s = new RegExp("(^|\\s)" + this.options.bodyTdClass + "_data(\\s|$)"), a = 0, n = 0, l = "grid_body_row"; "native" === this.options.drawType && (l += " " + this.options.gridNativeClass); for (var h = r.D.getDataPrefix("tdIndex"), d = r.D.getDataPrefix("or_wd"), p = r.D.getDataPrefix("col_id"), u = 0; u < e.length; u++) {
								this.dataRowList.push(e[u]), e[u].className = l; for (var c = e[u].getElementsByTagName("td"), g = 0; g < c.length; g++) {
									var f = c[g], m = f.className; f.setAttribute(h, t * this.realRowDataLength + a), f.removeAttribute("title"); var y = f.getAttribute("width"); if (y && (f.removeAttribute("width"), f.setAttribute(d, y)), this.options.rowNumStatusUniqueId) { var b = f.getAttribute("id"); "_headerRowNumber" !== b && "_headerRowStatus" !== b || f.setAttribute("id", b + "_bodyRow_" + t) } if (a++, this.all_data_td_list.push(f), i.test(m)) this.data_num_td_list.push(f); else if (o.test(m)) this.data_status_td_list.push(f); else if (!this.hasSubtotal || s.test(m)) {
										this.data_td_list.push(f); var w = this.id + "_columnstyle_" + n + "_"; this.addClass(f, w); var v = f.getAttribute(p), C = this.getCellInfo(v); if (this.addClass(f, C.options.className), f.style.cssText = "" == C.options.textAlign ? "" : "text-align:" + C.options.textAlign + ";", f.setAttribute("id", this.id + "_cell_" + t + "_" + n), this.options.fixedColumn > 0) this.getFixedColumnLastIndex() == n && this.addClass(f, "w2grid_fixedColumn"); if (this.options.fixedRightColumn > 0) this.getFixedRightColumnLastIndex() == n && this.addClass(f, "w2grid_fixedRightColumn"); n++,
											"linear" == this.options.focusFlow && "none" != this.options.focusMode && (C.options.embeddedInput || "custom" == C.options.inputType && 1 == this.options.senseReader || ("link" != C.options.inputType && "button" != C.options.inputType && "image" != C.options.inputType && "user" != C.options.inputType && "ul" != C.options.tableRender && ("expression" == C.options.inputType && 1 == this.options.senseReader || f.setAttribute("tabIndex", "0")), this.event.addListener(f, "onfocus", this.event.bindAsEventListener(this, this.handleTdFocus))))
									} "native" === this.options.drawType && (f.className = m ? m + " " + this.options.gridNativeClass : this.options.gridNativeClass)
								}
							} var I = []; if (!this.options.duplicateColumnId) { for (u = 0; u < e.length; u++) { c = e[u].getElementsByTagName("td"); var _ = []; for (g = 0; g < c.length; g++)_[g] = c[g]; for (g = 0; g < _.length; g++) { m = _[g].className; i.test(m) || o.test(m) || I.push(_[g].parentNode.removeChild(_[g])) } } for (u = 0; u < this.htmlInfo.body.rowArr.length; u++)for (g = 0; g < this.htmlInfo.body.rowArr[u].length; g++)for (var x = this.htmlInfo.body.rowArr[u][g].col_id, S = 0; S < I.length; S++)if (I[S].getAttribute(p) == x) { e[u].appendChild(I[S]); break } }
						}, y.prototype.addBodyRow2 = function(t, e) { for (var i = new RegExp("(^|\\s)" + this.options.bodyTdClass + "_rowNumber(\\s|$)"), o = new RegExp("(^|\\s)" + this.options.bodyTdClass + "_rowStatus(\\s|$)"), s = new RegExp("(^|\\s)" + this.options.bodyTdClass + "_data(\\s|$)"), a = [], n = r.D.getDataPrefix("tdIndex"), l = r.D.getDataPrefix("or_wd"), h = r.D.getDataPrefix("col_id"), d = 0; d < e.length; d++) { this.dataRowList.push(e[d]), e[d].className = "grid_body_row"; for (var p = e[d].getElementsByTagName("td"), u = 0; u < p.length; u++) { var c = p[u], g = c.className, f = parseInt(c.getAttribute(n), 10) % this.realRowDataLength; c.setAttribute(n, t * this.realRowDataLength + f), c.removeAttribute("title"); var m = c.getAttribute("width"); if (m && (c.removeAttribute("width"), c.setAttribute(l, m)), this.options.rowNumStatusUniqueId) { var y = c.getAttribute("id"); "_headerRowNumber" !== y && "_headerRowStatus" !== y || c.setAttribute("id", y + "_bodyRow_" + t) } if (i.test(g)) this.data_num_td_list.push(c), this.all_data_td_list.push(c); else if (o.test(g)) this.data_status_td_list.push(c), this.all_data_td_list.push(c); else if (!this.hasSubtotal || s.test(g)) { var b = f - this.defaultColCnt; a[b] = c; var w = this.id + "_columnstyle_" + b + "_"; this.addClass(c, w); var v = c.getAttribute(h), C = this.getCellInfo(v); this.addClass(c, C.options.className), c.style.cssText = "" == C.options.textAlign ? "" : "text-align:" + C.options.textAlign + ";", c.setAttribute("id", this.id + "_cell_" + t + "_" + b), "linear" == this.options.focusFlow && "none" != this.options.focusMode && (C.options.embeddedInput || ("link" != C.options.inputType && "button" != C.options.inputType && "image" != C.options.inputType && c.setAttribute("tabIndex", "0"), this.event.addListener(c, "onfocus", this.event.bindAsEventListener(this, this.handleTdFocus)))) } } } [].push.apply(this.all_data_td_list, a), [].push.apply(this.data_td_list, a) }, y.prototype.addRows = function(t) { for (var e = this.drawedRowLength, i = [], o = 0; o < t; o++) { for (var s = 0; s < this.oneRowLength; s++) { var a = this.tempTr.rows[s].cloneNode(!0); i.push(a) } this.addBodyRow(e + o, []), this.hasSubtotal && (i = i.concat(this.createSubtotalRows(e + o))) } var r = this.getElementById(this.id + "_body_tbody"); for (o = 0; o < i.length; o++)r.appendChild(i[o]) }, y.prototype.notifyStatusChanged = function(t) { var e, i, o = !1; "object" == typeof t.rowIndex ? (e = 0, i = t.rowIndex.length, o = !0) : "all" == t.rowIndex ? (e = 0, i = this.getRowCount()) : "number" == typeof t.startIndex && "number" == typeof t.endIndex && (e = t.startIndex, i = t.endIndex); for (var s = e; s < i; s++) { var a; if (a = o ? t.rowIndex[s] : s, null != this.rowStatusColIDArr) for (var r = 0; r < this.rowStatusColIDArr.length; r++) { var n = this.getColumnIndex(this.rowStatusColIDArr[r]); this.drawCellData(a - this.rowIndex, a, n) } } this.hasFooter && (this.options.excludeDeletedRows || this.options.excludeModifiedRows) && this.drawFooter(), this.hasSubtotal && (this.options.excludeDeletedRows || this.options.excludeModifiedRows) && (this.subtotalHidden({ startRowIndex: 0 }), this.refreshSubtotalRow(this.rowIndex)) }, y.prototype.refreshColumn = function(t) {
							try {
								t = this.getColumnIndex(t),
								this.redrawColumn(t)
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}, y.prototype.refreshRow = function(t) { try { var e = t - this.rowIndex; this.drawRowData(e, t) } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype.refreshCell = function(t, e) { try { e = this.getColumnIndex(e); var i = t - this.rowIndex; this.drawCellData(i, t, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype._setVisibleRowNumFix = function() { try { if (!this.options.visibleRowNumFix) return; var t = this.options.initFixedHeightByRowNum > -1 ? this.options.initFixedHeightByRowNum : this.options.visibleRowNum; if (isNaN(t) || t < 0 || "" == t) return; !0 === this._visibleRowNumFixResetFlag && this.setTrRowTable(); var e = this._getVisibleRowNumHeight(); this.setSize(null, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype._getVisibleRowNumHeight = function(t) { try { var e = this.options.initFixedHeightByRowNum > -1 ? this.options.initFixedHeightByRowNum : this.options.visibleRowNum; if (isNaN(e)) return 0; !0 === t && this.oneRowLength > 1 && (e *= this.oneRowLength); var i = this.getElementById(this.id + "_scrollX_div"), o = parseInt(i.style.height, 10), s = 0; this.hasFooter && (s = 0 == (s = this.getElementById(this.id + "_foot_table").offsetHeight) ? this.footerHeight : s); var r = this.getElementById(this.id + "_head_table").offsetHeight; return this.oneRowHeight * e + r + o + s + 1 } catch (t) { a.w.printStackTrace(t, null, this) } }, y.prototype._getDrawedRowCount = function() { try { for (var t = 0, e = this.getElementById(this.id + "_body_tbody").childNodes, i = 0; i < e.length; i++) { e[i].offsetHeight > 0 && t++ } } catch (e) { a.w.printStackTrace(e, null, this), t = this.drawedRowLength } return t }; var b = function() { }; b.prototype.setCellInfo = function() { for (var t = r.D.getDataPrefix("inputType"), e = r.D.getDataPrefix("depthColumn"), i = r.D.getDataPrefix("showDepth"), o = this.tempDiv.getElementsByTagName("td"), s = 0; s < o.length; s++) { "drilldown" == o[s].getAttribute(t) && (this.isDrillDown = !0, this.depthColumn = o[s].getAttribute(e), this.showDepth = o[s].getAttribute(i), this._dataList.options.depthColumn || "grid" == this.options.pluginName && !this.options.drilldownRealRowIndex || (this._dataList.options.depthColumn = this.depthColumn)) } }, b.prototype.setDataListCellInfo = function() { if (this.successBinding) for (var t = this.getColCnt(), e = 0; e < t; e++) { var i = this.getColumnID(e), o = this.getCellInfo(i); if (o && o.options && o.options.importExp) { var s = this._dataList.getCellInfo(i); s && s.options && !s.options.importExp && (s.options.importExp = o.options.importExp) } } }, b.prototype.setInnerHTML = function(t, e, i, o) { var s = this.getColumnID(i), a = this.dataList._getCellData(e, s), r = this.cellInfoHash[this.tdIdList[i]]; "" === a && (a = r.options.groupName ? this.dataList._getCellData(e, r.options.groupName) == r.options.groupValue ? r.options.trueValue : r.options.falseValue : r.options.defaultValue); if (r.setInnerHTML(t, a, e, i, o), "" != r.options.disabledClass && (this._getEditDisabled(e, i) ? this.addClass(t, r.options.disabledClass) : this.removeClass(t, r.options.disabledClass)), "" != this.options.disabledClass && !1 === this.options.disabled && (this._getEditDisabled(e, i) ? this.addClass(t, this.options.disabledClass) : this.removeClass(t, this.options.disabledClass)), "" != r.options.readOnlyClass && (this.___getEditReadOnly(e, s) ? this.addClass(t, r.options.readOnlyClass) : this.removeClass(t, r.options.readOnlyClass)), "" != this.options.readOnlyClass && (this.___getEditReadOnly(e, s) ? this.addClass(t, this.options.readOnlyClass) : this.removeClass(t, this.options.readOnlyClass)), "" != this.options.hiddenClass || "" != r.options.hiddenClass) { var n = this.options.hiddenClass; "" != r.options.hiddenClass && (n = r.options.hiddenClass); var l = this._getRealColIndex("body", s) + this.defaultColCnt; this.hiddenList[l] ? this.addClass(t, n) : this.removeClass(t, n) } }, b.prototype.getCellInfo = function(t) { try { var e = r.D.getDataPrefix("col_id"), i = ""; return i = "string" == typeof t ? t : "number" == typeof t ? this.tdIdList[t] : t ? t.getAttribute(e) : null, this.cellInfoHash[i] || { options: {} } } catch (t) { a.w.printStackTrace(t, null, this) } }, b.prototype._endEdit = function() { null != this.editedCell && this.editedCell.handleEndEdit() }, b.prototype.initColumns = function() {
							for (var t in this.cellInfoHash) {
								var e = this.cellInfoHash[t]; if ("select" == e.options.inputType && (e.initializeCellInfo(e.element), e.style = "", e.comp = null), this.options.initColumns) for (var i in e.dynamicAttrInfo) { var o = e.dynamicAttrInfo[i]; o && (e.options[i] = o.originalValue, "displayFormat" != i && "displayFormatter" != i || e.initFormatter()) }
							}
						}, b.prototype.initHeaders = function() { for (var t in this.headerInfoHash) { "checkbox" == this.headerInfoHash[t].options.inputType && this.setHeaderValue(t, !1) } }, b.prototype._setCellInfo = function(t, e) { this.cellInfoHash2[t] = e }, b.prototype.getColumnCount = function() { return this.tdIdList.length }, b.prototype.getColumnID = function(t) { if ("string" == typeof t) return t; var e = this.tdIdList[t]; return e || null }, b.prototype.getMovedColumnID = function(t) { if ("string" == typeof t) return t; var e = this.tdIdList[this.columnOrder[t]]; return e || null }, b.prototype.getColumnIndex = function(t) { return "number" == typeof t ? t : this.bodyIdColIndexMap[t] }, b.prototype.getDisplayColumnIndex = function(t) { return "number" == typeof t ? t : this.colMoveIndexMap[t] }, b.prototype.setExpressionAssociation = function(t, e) { try { null == this.expressionAssArr[t] && (this.expressionAssArr[t] = []), this.expressionAssArr[t].push(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, b.prototype.setLabelColumnAssociation = function(t, e) { try { null == this.labelColumnAssArr[t] && (this.labelColumnAssArr[t] = []), this.labelColumnAssArr[t].push(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, b.prototype.setCellEditMode = function(t, e) { this.hideTooltip(); var i = this.getCellInfo(t); this.editedCell = i, this.rollbackCommitFlag = !1; var o = this.render.offsetWidth, s = this.render.offsetHeight; i.setEditMode(t, e), o === this.render.offsetWidth && s === this.render.offsetHeight || (this.handleResize(), i.setEditMode(t, e)), this.rollbackCommitFlag = !0 }, b.prototype.setCellClickEdit = function(t) { var e = this.getElemRowIndex(t), i = this.getCellInfo(t); if ("custom" == i.options.inputType && !i.internal) { var o = e; this.isDrillDown && this._dataList.options.depthColumn && (o = this.getRealRowIndex(e)), i = i.cellManagerHashByRowIndex[o] ? i.cellManagerHashByRowIndex[o] : i } var s = !1; switch (i.options.inputType) { case "checkbox": case "radio": case "drilldown": s = i.handleClick(t, e) }return s }, b.prototype.getInput = function(t, e, i) {
							var n = t.options.inputType || "text", l = t.options.embeddedInput, h = this.getColumnOption(t.id, "dataType"); "text" === n && "number" === h && "true" === this.options.floatNumber && (h = "float", t.options.dataType = "float"); var u, c = "bigDecimal" == h, g = this; if (this.options.titleFormatter) try { if ("function" != typeof this.options.titleFormatter) { var f = r.D.getGlobalFunction(this.options.titleFormatter, this.scope_id); "function" == typeof f && (this.options.titleFormatter = f, u = f.call(this, this.getElemRowIndex(e), this.getColumnIndex(t.id), i)) } else u = this.options.titleFormatter.call(this, this.getElemRowIndex(e), this.getColumnIndex(t.id), i) } catch (t) { a.w.printStackTrace(t, null, this) } if (l) {
								if ("custom" == t.options.inputType && !t.internal) { var m = this.getElemRowIndex(e); this.isDrillDown && this._dataList.options.depthColumn && (m = this.getRealRowIndex(m)), t = t.cellManagerHashByRowIndex[m] ? t.cellManagerHashByRowIndex[m] : t } y = t.parentColumnInfo ? this.id + "_" + t.id : e.getAttribute("id") + "_" + n, this.fakeInput || "text" != n && "secret" != n && "calendar" != n || (this.makeFakeInput = function() {
									this.fakeInput = new WebSquare.uiplugin.input(this.id + "_fakeInput", {
										style: "visibility:hidden;position:absolute;z-index:100;background-color:" + this.options.selectedCellColor, className: "w2grid_embedded_input", ioFormat: "$blank", ioFormatter: "$blank", displayFormat: "$blank", displayFormatter: "$blank", readOnly: "$blank", disabled: "$blank", useKeyupBlur: !1, xmlEvents: [{ name: "onmousedown", action: "script", param: { handler: function(t) { g.lastEvent = t, d.B.stopEvent(t); var e = this; setTimeout((function() { e.lastInput.focus() }), 1) } } }, { name: "oncontextmenu", action: "script", param: { handler: function(t) { g.lastEvent = t } } }, {
											name: "ondblclick", action: "script", param: {
												handler: function(t) {
													g.lastEvent = t, g.hideFakeInput(this), d.B.stopPropagation(t), g.F2Mode = !0,
													WebSquare.text.setCaretPos(this.lastInput.render, this.lastInput.render.value.length)
												}
											}
										}]
									}), this.fakeInput.setAction = function() { }, this.fakeInput.writeTo(this.render), this.fakeInput.activate(), this.fakeInput.render.parentNode.removeChild(this.fakeInput.render); var t = null; this.showFakeInput = function(e) { var i = e.render.parentNode; if (this.render.appendChild(this.fakeInput.render), !t) { var o = this.all_data_td_list[0]; t = 1 - o.offsetLeft } var s = this.getElementById(this.id + "_dataLayer"); this.fakeInput.setPosition(i.offsetLeft + t - s.scrollLeft, i.offsetTop + t - s.scrollTop), this.fakeInput.setSize(i.clientWidth, i.clientHeight), r.D.isIE() && this.fakeInput.setVerticalAlign(), this.fakeInput.lastInput = e; var a = e.getStyle("text-align"); a ? this.fakeInput.setStyle("text-align", a) : this.fakeInput.setStyle("text-align", "") }, this.hideFakeInput = function(t) { this.fakeInput.render.parentNode && this.fakeInput.render.parentNode.removeChild(this.fakeInput.render) }
								})
							} else var y = t.mainGridId + t.id; var b = !!(G = this.dom[y]); G && !G.render && G.ownerDocument && !G.parentNode && (b = !1), b && "" !== u && null != u && ("text" == n ? G.render.setAttribute("title", u) : G.setAttribute("title", u)); var w = r.D.getDataPrefix("col_id"), v = r.D.getDataPrefix("rowIndex"), C = r.D.getDataPrefix("rowindex"); r.D.getDataPrefix("dateValidCheck"); if (b) { if ("checkbox" == n && l) { if (t.options.checkboxLabel || t.options.checkboxLabelColumn || t.options.checkboxLabelFormatter) { R = this.getElemRowIndex(e), L = this._getGroupbyDisplayRowIndex(R), T = (D = t.mainGridId + "_checkbox_" + t.id) + "_" + R, k = t.options.checkboxLabel || ""; if (t.options.checkboxLabelColumn) { for (A = t.options.checkboxLabelColumn.split(","), F = "", E = t.options.checkboxLabelDelimiter || this.options.labelDelimiter || " ", M = 0; M < A.length; M++) { O = this.bodyToHeaderRelation[A[M]]; if (M === A.length - 1) this.options.showCheckboxLabelUserFormat ? F += " " + this.getHeaderValue(O) + " " + this._getCellDisplayData(R, A[M], { removeTag: !0 }) : F += this._getCellDisplayData(R, A[M], { removeTag: !0 }); else if (this.options.showCheckboxLabelUserFormat) F += (0 === M ? R + 1 + "행" + E : "") + " " + this.getHeaderValue(O) + " " + this._getCellDisplayData(R, A[M], { removeTag: !0 }) + E; else F += this._getCellDisplayData(R, A[M], { removeTag: !0 }) + E } k = k ? F + E + k : F } if (t.options.checkboxLabelFormatter) try { "function" == typeof (N = r.D.getGlobalFunction(t.options.checkboxLabelFormatter, t.scope_id)) && (k = N.call(this, L, this.getColumnIndex(t.colID), k)) } catch (e) { p.k.printLog(this.id + "_" + t.id + " checkboxLabelFormatter error : " + e.message) } (I = e.getElementsByTagName("label")[0]) && (I.innerText = k) } } else if ("radio" == n && l && (t.options.radioLabel || t.options.radioLabelColumn || t.options.radioLabelFormatter)) { var I; R = this.getElemRowIndex(e), L = this._getGroupbyDisplayRowIndex(R), V = (W = t.mainGridId + "_radio_" + t.id) + "_" + R, q = t.options.radioLabel || ""; if (t.options.radioLabelColumn) { for (A = t.options.radioLabelColumn.split(","), F = "", E = t.options.radioLabelDelimiter || this.options.labelDelimiter || " ", M = 0; M < A.length; M++) { O = this.bodyToHeaderRelation[A[M]]; if (M === A.length - 1) this.options.showRadioLabelUserFormat ? F += " " + this.getHeaderValue(O) + " " + this._getCellDisplayData(R, A[M], { removeTag: !0 }) : F += this._getCellDisplayData(R, A[M], { removeTag: !0 }); else if (this.options.showRadioLabelUserFormat) F += (0 === M ? R + 1 + "행" + E : "") + " " + this.getHeaderValue(O) + " " + this._getCellDisplayData(R, A[M], { removeTag: !0 }) + E; else F += this._getCellDisplayData(R, A[M], { removeTag: !0 }) + E } q = q ? F + E + q : F } if (t.options.radioLabelFormatter) try { "function" == typeof (j = r.D.getGlobalFunction(t.options.radioLabelFormatter, t.scope_id)) && (q = j.call(this, L, this.getColumnIndex(t.colID), q)) } catch (e) { p.k.printLog(this.id + "_" + t.id + " radioLabelFormatter error : " + e.message) } (I = e.getElementsByTagName("label")[0]) && (I.innerText = q) } this.options.titleFormatter && l && u && G.title !== u && (G.title = u) } else {
								if ("text" != n && "secret" != n || !l) {
									if ("select" == n && l) {
										var _ = u || t.options.title || ""; if (this.options.titleAuto && !_) { Q = this.getHeaderValue(this.bodyToHeaderRelation[t.id]) || ""; _ = "" !== i && null != i ? Q + " " + (this.changeItemValue("label", t.id, [i])[0] || i) : Q + WebSquare.language.getMessage("Grid_select") }
										G = new WebSquare.uiplugin.selectbox_native(y, { className: "w2grid_embedded_select", style: "$blank", pluginName: "selectbox", renderType: "native", title: _, chooseOption: t.options.chooseOption, chooseOptionLabel: t.options.chooseOptionLabel, _scope_obj_uuid: t.options._scope_obj_uuid, xmlEvents: [{ name: "onmousedown", action: "script", param: { handler: function(t) { d.B.stopPropagation(t) } } }, { name: "onclick", action: "script", param: { handler: function(t) { var e = parseInt(this.render.getAttribute(v), 10), i = this.render.parentNode.getAttribute(w), o = g.getColumnIndex(i); d.B.fireEvent(g, "oncellclick", e, o, i) } } }, { name: "onkeydown", action: "script", param: { handler: function(t) { switch (t.keyCode) { case 38: case 40: case 27: return void d.B.stopPropagation(t) } } } }] }, t.xml), e.innerHTML = G.toHTML(); var x = WebSquare.uiplugin.selectbox_native.prototype.handleOnchange; G.handleOnchange = function(t) { var e = this.render.parentNode.getAttribute(w), i = parseInt(this.render.getAttribute(C), 10), o = g._getGroupbyDisplayRowIndex(i), s = g.getColumnIndex(e), a = this.selectedIndex, r = this.getValue(); if (x.call(this, t), g.dataList.__setCellData(i, e, this.getValue()), g._dataList.setRowPosition(i), a != this.selectedIndex) { var n = { oldValue: r, newValue: this.getValue(), oldSelectedIndex: a, newSelectedIndex: this.selectedIndex, rowIndex: i, colIndex: s }; d.B.fireEvent(g, "onviewchange", n) } d.B.fireEvent(g, "onafteredit", o, s, this.getValue(), t) }, G.activate(); var S = G.uuid; G.event.addListener2(G.dom.select, "onfocus", (function(t) { g.lastEvent = t; var e = WebSquare.idCache[S]; g.getLastFocusedCell().focusedTd == e.render.parentNode || g.focusedByApi || g._setFocusedCell(e.render.getAttribute(C), e.render.parentNode.getAttribute(w)), g.focusedByApi = !1 }))
									} else if ("checkbox" == n && l) {
										if (t.options.checkboxLabel || t.options.checkboxLabelColumn || t.options.checkboxLabelFormatter) { var D, R = this.getElemRowIndex(e), L = this._getGroupbyDisplayRowIndex(R), T = (D = t.mainGridId + "_checkbox_" + t.id) + "_" + R, k = t.options.checkboxLabel || ""; if (t.options.checkboxLabelColumn) { for (var A = t.options.checkboxLabelColumn.split(","), F = "", E = t.options.checkboxLabelDelimiter || this.options.labelDelimiter || " ", M = 0; M < A.length; M++) { var O = this.bodyToHeaderRelation[A[M]]; if (M === A.length - 1) this.options.showCheckboxLabelUserFormat ? F += " " + this.getHeaderValue(O) + " " + this._getCellDisplayData(R, A[M], { removeTag: !0 }) : F += this._getCellDisplayData(R, A[M], { removeTag: !0 }); else if (this.options.showCheckboxLabelUserFormat) F += (0 === M ? R + 1 + "행" + E : "") + " " + this.getHeaderValue(O) + " " + this._getCellDisplayData(R, A[M], { removeTag: !0 }) + E; else F += this._getCellDisplayData(R, A[M], { removeTag: !0 }) + E } k = k ? F + E + k : F } if (t.options.checkboxLabelFormatter) try { var N; "function" == typeof (N = r.D.getGlobalFunction(t.options.checkboxLabelFormatter, t.scope_id)) && (k = N.call(this, L, this.getColumnIndex(t.colID), k)) } catch (e) { p.k.printLog(this.id + "_" + t.id + " checkboxLabelFormatter error : " + e.message) } H = "<INPUT style='border-width:0px;' type='checkbox' class='w2grid_embedded_check'  id='" + T + "' name='" + D + "'/>"; var B = "<label class='w2checkbox_label ' for='" + T + "'>" + k + "</label>"; "left" === t.options.checkboxLabelPosition ? H = B + H : H += B, e.innerHTML = H; var G = e.getElementsByTagName("input")[0] } else { H = "<INPUT style='border-width:0px;' type='checkbox' class='w2grid_embedded_check' />", e.innerHTML = H; G = e.getElementsByTagName("input")[0]; if (u) G.title = u; else if (t.options.title) G.title = t.options.title; else if (this.options.titleAuto) { Q = this.getHeaderValue(this.bodyToHeaderRelation[t.id]) || ""; G.title = i ? Q + WebSquare.language.getMessage("Grid_title") : Q + WebSquare.language.getMessage("Grid_title_not_choose"), k && (G.title = G.title + k) } } if (this.event.addListener(G, "onclick", this.event.bindAsEventListener(this, (function(t) { var e = d.B.getTarget(t); this.lastEvent = t; var i = this.getLastFocusedCell(), o = e.parentNode, s = this.getElemRowIndex(o), a = this.getCellInfo(o), r = a.id, n = this.getColumnIndex(r); i.focusedTd == e.parentNode || this.focusedByApi || this._setFocusedCell(s, r), this.focusedByApi = !1, a.options.noDisabledOnReadOnly && this._getEditReadOnly(s, n) && d.B.preventDefault(t) }))),
											t.options.noDisabledOnReadOnly) { var R = this.getElemRowIndex(e); this._getEditReadOnly(R, t.id) ? this.addClass(G, this.options.readOnlyClass + "_nodisabled") : this.removeClass(G, this.options.readOnlyClass + "_nodisabled") }
									} else if ("radio" == n && l) { var H; if (t.options.radioLabel || t.options.radioLabelColumn || t.options.radioLabelFormatter) { var W, R = this.getElemRowIndex(e), L = this._getGroupbyDisplayRowIndex(R), V = (W = t.mainGridId + "_radio_" + t.id) + "_" + R, q = t.options.radioLabel || ""; if (t.options.radioLabelColumn) { for (var A = t.options.radioLabelColumn.split(","), F = "", E = t.options.radioLabelDelimiter || this.options.labelDelimiter || " ", M = 0; M < A.length; M++) { var O = this.bodyToHeaderRelation[A[M]]; if (M === A.length - 1) this.options.showRadioLabelUserFormat ? F += " " + this.getHeaderValue(O) + " " + this._getCellDisplayData(R, A[M], { removeTag: !0 }) : F += this._getCellDisplayData(R, A[M], { removeTag: !0 }); else if (this.options.showRadioLabelUserFormat) F += (0 === M ? R + 1 + "행" + E : "") + " " + this.getHeaderValue(O) + " " + this._getCellDisplayData(R, A[M], { removeTag: !0 }) + E; else F += this._getCellDisplayData(R, A[M], { removeTag: !0 }) + E } q = q ? F + E + q : F } if (t.options.radioLabelFormatter) try { var j; "function" == typeof (j = r.D.getGlobalFunction(t.options.radioLabelFormatter, t.scope_id)) && (q = j.call(this, L, this.getColumnIndex(t.colID), q)) } catch (e) { p.k.printLog(this.id + "_" + t.id + " radioLabelFormatter error : " + e.message) } H = "<INPUT style='border-width:0px;' type='radio' class='w2grid_embedded_radio'  id='" + V + "' name='" + W + "'/>"; B = "<label class='w2radio_label ' for='" + V + "'>" + q + "</label>"; "left" === t.options.radioLabelPosition ? H = B + H : H += B, e.innerHTML = H; G = e.firstChild } else { H = "<INPUT style='border-width:0px;' type='radio' name='" + (t.mainGridId + "_radio_" + t.id) + "' class='w2grid_embedded_radio' />", e.innerHTML = H; G = e.firstChild; if (u) G.title = u; else if (t.options.title) G.title = t.options.title; else if (this.options.titleAuto) { Q = this.getHeaderValue(this.bodyToHeaderRelation[t.id]) || ""; G.title = i ? Q + WebSquare.language.getMessage("Grid_title") : Q + WebSquare.language.getMessage("Grid_title_not_choose"), q && (G.title = G.title + q) } } if (this.event.addListener(G, "onclick", this.event.bindAsEventListener(this, (function(t) { var e = d.B.getTarget(t); this.lastEvent = t; var i = this.getLastFocusedCell(), o = e.parentNode, s = this.getElemRowIndex(o), a = this.getCellInfo(o), r = a.id, n = this.getColumnIndex(r); i.focusedTd == e.parentNode || this.focusedByApi || this._setFocusedCell(s, r), this.focusedByApi = !1, a.options.noDisabledOnReadOnly && this._getEditReadOnly(s, n) && d.B.preventDefault(t) }))), t.options.noDisabledOnReadOnly) { R = this.getElemRowIndex(e); this._getEditReadOnly(R, t.id) ? this.addClass(G, this.options.readOnlyClass + "_nodisabled") : this.removeClass(G, this.options.readOnlyClass + "_nodisabled") } } else if ("calendar" == n && l) {
										J = u || t.options.title || ""; if (this.options.titleAuto && !J) { Q = this.getHeaderValue(this.bodyToHeaderRelation[t.id]) || ""; J = "" !== i ? Q + " " + i : Q + WebSquare.language.getMessage("Grid_calendar") } var P = t.options.ioFormat, z = {
											style: "width:0px; height:0px;", delimiter: "$blank", calendarValueType: t.options.calendarValueType, calendarClass: t.options.calendarClass || "class1", ioFormat: P, ioFormatter: "$blank", displayFormat: t.options.displayFormat || P, displayFormatter: "$blank", displayFormatFunc: t.options.displayFormatFunc, calendarDisplayFormatFunc: t.options.calendarDisplayFormatFunc, footerDiv: !0, renderDiv: !0, keepFocusSelect: !0, focusOnOuterDiv: !0, renderType: "native", readOnly: "$blank", disabled: "$blank", title: J, validCheck: !1, _scope_obj_uuid: t.options._scope_obj_uuid, senseReader: t.options.senseReader, xmlEvents: [{ name: "onclick", action: "script", param: { handler: function(t) { var e = parseInt(this.render.getAttribute(v), 10), i = this.render.parentNode.getAttribute(w), o = g.getColumnIndex(i); d.B.fireEvent(g, "oncellclick", e, o, i), d.B.stopPropagation(t) } } }, {
												name: "onafterviewchange", action: "script", param: {
													handler: function(t) {
														var e = parseInt(this.render.getAttribute(C), 10), i = g._getGroupbyDisplayRowIndex(e), o = g.getColumnIndex(this.render.parentNode.getAttribute(w)); t.oldValue != t.newValue && d.B.fireEvent(g, "onviewchange", {
															oldValue: t.oldValue, newValue: t.newValue, rowIndex: i, colIndex: o
														})
													}
												}
											}, { name: "ondateselect", action: "script", param: { handler: function(t, e) { this.options.senseReader || this.dom.input.blur(); var i = this.render.getAttribute(C), o = this.render.parentNode.getAttribute(w), s = G.validator.validateString(this.getValue()); g.dataList.__setCellData(i, o, s) } } }, { name: "onconfirm", action: "script", param: { handler: function() { this.options.senseReader || this.dom.input.blur(); var t = this.render.getAttribute(C), e = this.render.parentNode.getAttribute(w), i = G.validator.validateString(this.getValue()); g.dataList.__setCellData(t, e, i) } } }]
										}; G = new WebSquare.uiplugin.inputCalendar(y, z, t.element); try { t.element && !t.element.getAttribute("dateValidCheck") && (G.options.dateValidCheck = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="calendar"]/dateValidCheck/@value') || "false") } catch (t) { a.w.printStackTrace(t, null, this) } e.innerHTML = "", G.writeTo(e), P != G.options.ioFormat && (t.options.ioFormat = G.options.ioFormat, t.initFormatter()), G.setVerticalAlign = function() { }, G.handleKeyupEvent = function() { }; var U = WebSquare.uiplugin.inputCalendar.prototype.handleFocusEvent; G.handleFocusEvent = function(t) { if (g.editEndFlag && g.fakeInput.lastInput != this) return d.B.stopEvent(t), !1; var e = this.render.getAttribute(C), i = g._getGroupbyDisplayRowIndex(e), o = this.render.parentNode.getAttribute(w); if (g.lastEvent = t, g.getLastFocusedCell().focusedTd == this.render.parentNode || g.focusedByApi || g._setFocusedCell(e, o), U.call(this, t), g.focusedByApi = !1, !this.reFocus && (g.showFakeInput(this), g.fakeInput.setValue(this.getValue()), this.select(), this.focus(), g.fakeInput.render.parentNode)) { var s = g.getColumnIndex(o); d.B.fireEvent(g, "onbeforeedit", i, s, g._dataList.getCellData(e, s)) } g.F2Mode = !1, this.reFocus = !1 }; var X = WebSquare.uiplugin.inputCalendar.prototype.handleKeyEvent; G.handleKeyEvent = function(t) { switch (g.lastEvent = t, X.call(this, t), t.keyCode) { case 46: return !g.F2Mode && g.fakeInput.render.parentNode && (this.setValue(""), g.fakeInput.setValue("")), void d.B.stopPropagation(t); case 27: return g.F2Mode = !1, g.showFakeInput(this), this.setValue(g.dataList.getCellData(g._getFocusedRowIndex(), g.getFocusedColumnIndex())), this.select(), void d.B.stopPropagation(t); case 113: return g.F2Mode = !0, WebSquare.text.setCaretPos(this.render, this.render.value.length), g.hideFakeInput(this), void d.B.stopPropagation(t); case 9: for (var e = this.event.getTargetIterator(t, this.render); e.next();)if (e.match("w2inputCalendar_divInput")) { d.B.stopPropagation(t); break } return }var i = t.which || t.keyCode; g.nonCharKeys[i] || (32 != i ? (g.fakeInput.render.parentNode && g.hideFakeInput(this), d.B.stopPropagation(t)) : d.B.stopPropagation(t)) }; var K = WebSquare.uiplugin.inputCalendar.prototype.handleBlurEvent; G.handleBlurEvent = function(t) { var e = this.render.getAttribute(C), i = g._getGroupbyDisplayRowIndex(e), o = this.render.parentNode.getAttribute(w), s = g.getColumnIndex(o), a = G.validator.validateString(this.getValue()); if (!1 === this.validate(a) && "" != a) { if (this.options.dateValidSet && this.options.dateValidSetCustom); else if ("false" !== this.options.displaymessage) { var r = WebSquare.language.getMessage("IC_invalidCalendarSelect") || "날짜 형식이 잘못 되었습니다."; alert(r) } return !1 } var n, l = WebSquare.historyManager.get(this.options.pluginName, this.id); if (l && (n = l.value), d.B.fireEvent(g, "oneditend", i, s, a, t) + "" == "false") return g.editEndFlag = !0, this.reFocus = !0, g.fakeInput.lastInput == this && this.focus(), g.getLastFocusedCell().focusedTd != this.render.parentNode && g._setFocusedCell(e, o), d.B.stopEvent(t), !1; g.editEndFlag = !1, K.call(this, t); var h = g.getCellInfo(o); g.dataList.__setCellData(e, o, a), a = g._dataList.getCellData(e, o), "all" == h.options.applyFormat || this.options.displayFormat || (a = h.getDisplayData(a)), this.setValue(a), d.B.fireEvent(this, "onafterviewchange", { oldValue: n, newValue: a }); d.B.fireEvent(g, "onafteredit", e, s, a, g.lastEvent); g.F2Mode = !1 }, G.setStyle("z-index", "10"), G.activate(), this.fakeInput || this.makeFakeInput()
									} else if ("text" == n || "textImage" == n || "drilldown" == n || "secret" == n) {
										tt = t.options.type ? t.options.type : "text", J = u || ""; "secret" == n && (tt = "password"), c && (h = "bigDecimal"); it = { style: "position:absolute;display:none;border:1px solid " + this.options.selectedCellColor + ";outline:none;z-index:10;", ioFormat: "$blank", ioFormatter: "$blank", displayFormat: "all" == t.options.applyFormat ? "" : "$blank", displayFormatter: "$blank", readOnly: "$blank", disabled: "$blank", title: J, type: tt, dataType: h, editType: t.options.editType, byteCheckIgnoreChar: t.options.byteCheckIgnoreChar, maxlength: t.options.maxLength || t.options.maxlength || -1, maskFormat: t.options.maskFormat, maskFormatModelNumber: t.options.maskFormatModelNumber, customModelFormatter: t.options.customModelFormatter, customModelUnformatter: t.options.customModelUnformatter, useMaxLength: t.options.useMaxLength, adjustMaxLength: t.options.adjustMaxLength, useKeyupBlur: !1, inputMode: t.options.inputMode || "", _scope_obj_uuid: t.options._scope_obj_uuid, xmlEvents: [{ name: "ondblclick", action: "script", param: { handler: function(e) { var i = t.editRowIndex, o = g.getColumnIndex(t.id); d.B.fireEvent(g, "oneditdblclick", i, o, t.id) } } }] }; t.options.maskFormat && "display" == t.options.applyFormat && (it.displayFormat = t.options.displayFormat), t.internal && (it = o.x.extend(o.x.extend(it, t.initializeInfo.options))), "float" === t.options.dataType && (it.dataType = t.options.dataType), (G = new WebSquare.uiplugin.input(y, it, t.element)).writeTo(this), this.options.editInputClass && "text" == n && this.addClass(G.render, this.options.editInputClass), G.event.addListener(G.render, "oncopy", this.event.bindAsEventListener(this, (function(t) { d.B.stopPropagation(t) }))), G.event.addListener(G.render, "onpaste", this.event.bindAsEventListener(this, (function(t) { d.B.stopPropagation(t) }))), G.activate(), "number" == t.options.dataType ? "" == t.options.displayFormat ? G.validator.addCommand(new WebSquare.validator.allowCharCommand("+\\-.0-9")) : t.options.maskFormat || G.validator.addCommand(new WebSquare.validator.numberCommand) : "euro" == t.options.dataType ? G.validator.addCommand(new WebSquare.validator.euroCommand(G.options.delimiter, G.options.decimalDelimiter)) : "text" == t.options.dataType && (t.options.maskFormat || (t.options.applyFormat = "display")), G.setVerticalAlign = function() { }, this._moveKeyEdit(G.uuid, "handleKeydownEvent", { oldMode: !0 })
									} else if ("textarea" == n) { if (l) { var Z, Y, $; e && (R = this.getElemRowIndex(e), Z = this.getColumnIndex(e.getAttribute(w)), Y = this._getEditDisabled(R, Z), $ = this.___getEditReadOnly(R, Z)), G = new WebSquare.uiplugin.textarea(y, { style: "position:relative;display:none;width:150px;height:60px;z-index:1000;resize:none;", className: "$blank", readOnly: !0 === $ ? $ : "$blank", disabled: !0 === Y ? Y : "$blank", maxlength: t.options.maxLength || -1, _scope_obj_uuid: t.options._scope_obj_uuid, xmlEvents: [{ name: "onkeydown", action: "script", param: { handler: function(t) { d.B.stopPropagation(t) } } }] }, t.element); K = WebSquare.uiplugin.textarea.prototype.handleBlurEvent; G.handleBlurEvent = function(t) { K.call(this, t); var e = parseInt(this.render.getAttribute(C), 10), i = this.render.parentNode.getAttribute(w), o = g.getCellInfo(i), s = this.getValue(); "number" == o.mainGrid.getColumnOption(o.options.col_id, "dataType") && "" != s && (s = Number(s)), o.mainGrid.dataList.__setCellData(e, i, s) } } else { z = { style: "position:absolute;display:none;width:150px;height:60px;z-index:1000;resize:none;", className: "$blank", readOnly: "$blank", disabled: "$blank", maxlength: t.options.maxLength || -1, _scope_obj_uuid: t.options._scope_obj_uuid }; !0 === t.options.keepCellClass && (z.className = ""), t.internal && (z = o.x.extend(o.x.extend(z, t.initializeInfo.options))), G = new WebSquare.uiplugin.textarea(y, z, t.element) } G.writeTo(this), G.event.addListener(G.render, "oncopy", this.event.bindAsEventListener(this, (function(t) { d.B.stopPropagation(t) }))), G.event.addListener(G.render, "onpaste", this.event.bindAsEventListener(this, (function(t) { d.B.stopPropagation(t) }))), this._moveKeyEdit(G.uuid, "handleKeydownEvent"), G.activate() } else if ("calendar" == n) {
										P = t.options.ioFormat, z = {
											style: "position:absolute;display:none;border:1px solid " + this.options.selectedCellColor + ";outline:none;",
											delimiter: "$blank", calendarValueType: t.options.calendarValueType, calendarClass: t.options.calendarClass || "class1", ioFormat: P, ioFormatter: "$blank", displayFormat: t.options.displayFormat || P, applyFormat: t.options.applyFormat || "display", displayFormatter: "$blank", holidayRef: t.options.holidayRef || "", keepFocusSelect: !0, focusOnOuterDiv: !0, footerDiv: t.options.footerDiv, _scope_obj_uuid: t.options._scope_obj_uuid, readOnly: "$blank", disabled: "$blank", validCheck: !1, renderDiv: !0, inputReadOnly: t.options.inputReadOnly, unformatOnPaste: t.options.unformatOnPaste, xmlEvents: [{ name: "ondateselect", action: "script", param: { handler: function(e, i) { var o = t.editRowIndex, s = g.getColumnIndex(t.id); d.B.fireEvent(g, "ondateselect", o, s, e, i) } } }, { name: "onmonthselect", action: "script", param: { handler: function(e) { var i = t.editRowIndex, o = g.getColumnIndex(t.id); d.B.fireEvent(g, "onmonthselect", i, o, { oldValue: e.oldValue, newValue: e.newValue }) } } }, { name: "onyearselect", action: "script", param: { handler: function(e) { var i = t.editRowIndex, o = g.getColumnIndex(t.id); d.B.fireEvent(g, "onyearselect", i, o, { oldValue: e.oldValue, newValue: e.newValue }) } } }]
										}; t.internal && (z = o.x.extend(o.x.extend(z, t.initializeInfo.options))); G = new WebSquare.uiplugin.inputCalendar(y, z, t.element); try { 0 == t.internal ? t.element && !t.element.getAttribute("dateValidCheck") && (G.options.dateValidCheck = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="calendar"]/dateValidCheck/@value') || "false") : 1 != t.options.dateValidCheck && "true" != t.options.dateValidCheck || (G.options.dateValidCheck = "true") } catch (t) { a.w.printStackTrace(t, null, this) } G.writeTo(this), G.event.addListener(G.render, "oncopy", this.event.bindAsEventListener(this, (function(t) { d.B.stopPropagation(t) }))), G.event.addListener(G.render, "onpaste", this.event.bindAsEventListener(this, (function(t) { d.B.stopPropagation(t) }))), P != G.options.ioFormat && (t.options.ioFormat = G.options.ioFormat, t.initFormatter()), this._moveKeyEdit(G.uuid, "handleKeyEvent"), G.activate(), G.setVerticalAlign = function() { }, "display" === t.options.applyFormat && (G.handleKeyupEvent = function() { }), G.setStyle("z-index", "10"), G.options.dateValidSet && G.options.dateValidSetCustom && (G._skipDateValidSet = !0)
									}
								} else {
									var J = u || t.options.title || "", Q = this.getHeaderValue(this.bodyToHeaderRelation[t.id]) || ""; J || this.options.titleAuto && ("text" == n && "" !== i ? J = Q + " " + i : "text" == n && "" == i ? J = Q + WebSquare.language.getMessage("Grid_text") : "secret" == n && (J = Q + WebSquare.language.getMessage("Grid_secret"))); var tt = t.options.type ? t.options.type : "text", et = "w2grid_embedded_input"; "secret" == n && (tt = "password", r.D.isIEAllVersion() ? et += " w2grid_secret" : et = "w2grid_embedded_secret"); var it = {
										className: et, style: "$blank", ioFormat: "$blank", ioFormatter: "$blank", readOnly: "$blank", disabled: "$blank", hidden: "$blank", title: J, type: tt, adjustMaxLength: t.options.adjustMaxLength, useMaxLength: t.options.useMaxLength, useKeyupBlur: !1, xmlEvents: [{ name: "onmousedown", action: "script", param: { handler: function(t) { var e = parseInt(this.render.getAttribute(v), 10), i = this.render.parentNode.getAttribute(w); if (e - g.rowIndex >= g.lastIndex + 1) return d.B.stopEvent(t), g.addGridScroll(1), void g._setFocusedCell(e, i, !0) } } }, { name: "onclick", action: "script", param: { handler: function(t) { var e = parseInt(this.render.getAttribute(v), 10), i = this.render.parentNode.getAttribute(w), o = g.getColumnIndex(i); d.B.fireEvent(g, "oncellclick", e, o, i), d.B.stopPropagation(t) } } }, { name: "oncopy", action: "script", param: { handler: function(t) { d.B.stopPropagation(t) } } }, { name: "onpaste", action: "script", param: { handler: function(t) { d.B.stopPropagation(t) } } }, { name: "oncut", action: "script", param: { handler: function(t) { d.B.stopPropagation(t) } } }, {
											name: "onkeydown", action: "script", param: {
												handler: function(t) {
													this._SenSeReaderBeforeEditValue = null; var e = {}, i = this.render.parentNode.getAttribute(w); e.rowIndex = parseInt(this.render.getAttribute(v), 10), e.colIndex = g.getColumnIndex(i), e.colID = i, e.keyCode = t.charCode ? t.charCode : t.keyCode, this._SenSeReaderBeforeEditValue = this.render.value, e.oldValue = this.render.value,
														d.B.fireEvent(g, "oneditkeydown", e)
												}
											}
										}, { name: "onkeyup", action: "script", param: { handler: function(t) { var e = t.charCode ? t.charCode : t.keyCode, i = this.render.parentNode.getAttribute(w), o = { rowIndex: parseInt(this.render.getAttribute(v), 10), colIndex: g.getColumnIndex(i), colID: i, oldValue: this._SenSeReaderBeforeEditValue || "", newValue: this.render.value, inputType: "text", keyCode: e }; this._SenSeReaderBeforeEditValue = null, d.B.fireEvent(g, "oneditkeyup", o), d.B.stopPropagation(t) } } }]
									}; "float" === t.options.dataType && (it.dataType = t.options.dataType), t.options.delimiter = "", G = new WebSquare.uiplugin.input(y, o.x.extend(o.x.extend({}, t.options), it)), e.innerHTML = "", G.writeTo(e), "number" == t.options.dataType && ("" == t.options.displayFormat ? G.validator.addCommand(new WebSquare.validator.allowCharCommand("+\\-.0-9")) : G.validator.addCommand(new WebSquare.validator.numberCommand)), r.D.isIE() && G.setVerticalAlign(), G.setVerticalAlign = function() { }; var ot = WebSquare.uiplugin.input.prototype.handleBlurEventBasic, st = this.uuid; G.handleBlurEventBasic = function(t) { var e = parseInt(this.render.getAttribute(C), 10), i = g._getGroupbyDisplayRowIndex(e), o = this.render.parentNode.getAttribute(w), s = g._dataList.getColumnIndex(o), a = g.getColumnIndex(o), n = G.validator.validateString(this.getValue()); if (d.B.fireEvent(g, "oneditend", i, a, n, t) + "" == "false") return g.editEndFlag = !0, this.reFocus = !0, g.fakeInput.lastInput == this && this.focus(), g.getLastFocusedCell().focusedTd != this.render.parentNode && g._setFocusedCell(e, o), d.B.stopEvent(t), !1; g.editEndFlag = !1, ot.call(this, t); var l = g.getCellInfo(o), h = g.getColumnOption(l.id, "dataType"); if ("number" == h || "float" == h) { var p = n.wq_trim(); "." !== p && "-" !== p && "+" !== p || (n = "") } var u = !(!g.isDrillDown || !g._dataList.options.depthColumn), c = e, f = g._dataList.getRealRowIndex(c); u && (c = f); var m = g._dataList.dataArr[f * g._dataList.getColumnCount() + s]; if (g.dataList.__setCellData(e, o, n), n = g._dataList.getCellData(c, o), "all" == l.options.applyFormat || this.options.displayFormat || this.options.displayFormatter || (n = l.getDisplayData(n)), this.setValue(n), WebSquare.idCache[st].options.senseReader && this.options.customFormatter) { var y = null; try { "function" == typeof this.options.customFormatter ? y = this.options.customFormatter : "function" == typeof (y = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id)) && (this.options.customFormatter = y) } catch (t) { y = null } var b = n, v = this.options.displayFormat || this.options.displayFormatter || this.options.ioFormat; if (this.formatter && v && (b = this.formatter.format(n)), "function" == typeof y) { this.useCustomFormatter = !0; var I = y.call(this.mainGrid, n, b, i, s); this.render.value = I } } d.B.fireEvent(g, "onafteredit", i, a, n, g.lastEvent); m != n && d.B.fireEvent(g, "onviewchange", { oldValue: m, newValue: n, rowIndex: i, colIndex: a }), g.hideFakeInput(G), g.F2Mode = !1 }; var at = WebSquare.uiplugin.input.prototype.handleFocusValueEventAdv; G.handleFocusValueEventAdv = function(t) { if (g.editEndFlag && g.fakeInput.lastInput != this) return d.B.stopEvent(t), !1; var e = parseInt(this.render.getAttribute(C), 10), i = g._getGroupbyDisplayRowIndex(e), o = this.render.parentNode.getAttribute(w); g.lastEvent = t; var s = g.getLastFocusedCell(); !(!g.isDrillDown || !g._dataList.options.depthColumn) && (e = g._dataList.getRealRowIndex(e)), s.focusedTd != this.render.parentNode && (!g.focusedByApi || s.focusedRowIndex === e && s.focusedColIndex === g.getColumnIndex(o) ? g._setFocusedCell(e, o) : g._setFocusedCell(e, o, !1)); var a = this.reFocus; if (at.call(this, t), this.reFocus = a, g.focusedByApi = !1, !this.reFocus && (this.setValue(g._dataList.getCellData(e, o)), g.showFakeInput(this), g.fakeInput.setValue(this.getValue()), "select" === this.options.editType && this.select(), this.focus(), g.fakeInput.render.parentNode)) { var r = g.getColumnIndex(o); d.B.fireEvent(g, "onbeforeedit", i, r, g._dataList.getCellData(e, r)) } g.F2Mode = !1, this.reFocus = !1 }; var rt = WebSquare.uiplugin.input.prototype.handleKeydownEvent; G.handleKeydownEvent = function(t) {
										switch (g.lastEvent = t, rt.call(this, t), t.keyCode) {
											case 46: return !g.F2Mode && g.fakeInput.render.parentNode && (this.setValue(""), g.fakeInput.setValue("")),
												void d.B.stopPropagation(t); case 27: return g.F2Mode = !1, g.showFakeInput(this), this.setValue(g.dataList.getCellData(g._getFocusedRowIndex(), g.getFocusedColumnIndex())), this.select(), void d.B.stopPropagation(t); case 113: return g.F2Mode = !0, WebSquare.text.setCaretPos(this.render, this.render.value.length), g.hideFakeInput(this), void d.B.stopPropagation(t); case 9: for (var e = this.event.getTargetIterator(t, this.render); e.next();)if (e.match("w2inputCalendar_divInput")) { d.B.stopPropagation(t); break } return
										}var i = t.which || t.keyCode; if (!g.nonCharKeys[i]) if (32 != i) { if (g.fakeInput.render.parentNode) { var o = this.render.getAttribute(C), s = g._getGroupbyDisplayRowIndex(o), a = this.render.parentNode.getAttribute(w), r = g.getColumnIndex(a); d.B.fireEvent(g, "onbeforeedit", s, r, g.dataList._getCellData(o, r)), g.hideFakeInput(this) } d.B.stopPropagation(t) } else d.B.stopPropagation(t)
									}, G.activate(), this.fakeInput || this.makeFakeInput()
								} this.dom[y] = G, l && this.adaptiveEmbeddedInputIdList.push(y)
							} return G
						}, b.prototype.getTemporaryDataCollectionItemArr = function(t) { try { var e = [], i = this.modelControl.getDataComp(t.dataCompID); if (i) switch (i.initializeType) { case "linkedDataList": for (var o = {}, s = 0; s < i.filteredRowIndexArr.length; s++) { var r = i.getRealRowIndex(s), n = i._dataList.dataArr[r * i.cellIdList.length + i.bodyIdColIndexMap[t.itemsetObj.label]], l = i._dataList.dataArr[r * i.cellIdList.length + i.bodyIdColIndexMap[t.itemsetObj.value]]; o[n] != l && (o[n] = l, e.push({ label: n, value: l })) } break; case "dataList": for (o = {}, s = 0; s < i.filteredRowIndexArr.length; s++) { n = i.dataArr[i.filteredRowIndexArr[s] * i.cellIdList.length + i.bodyIdColIndexMap[t.itemsetObj.label]], l = i.dataArr[i.filteredRowIndexArr[s] * i.cellIdList.length + i.bodyIdColIndexMap[t.itemsetObj.value]]; o[n] != l && (o[n] = l, e.push({ label: n, value: l })) } break; case "dataMap": for (o = {}, s = 0; s < i._dataList.oneRowDataLength; s++) { n = i._dataList.dataArr[i.bodyIdColIndexMap[t.itemsetObj.label]], l = i._dataList.dataArr[i.bodyIdColIndexMap[t.itemsetObj.value]]; o[n] != l && (o[n] = l, e.push({ label: n, value: l })) } }return e } catch (t) { a.w.printStackTrace(t) } }; var w = function() { }; w.prototype.initializeHead = function() {
							try {
								this.headerObj = {}, this.headerConfigOptions = {}; for (var t = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")), e = [], i = {}, o = 0; o < t.length; o++) { if (i[t[o].id]) { var n = WebSquare.language.getMessage("E_comp_duplicated_Msg", t[o].id) || "id[" + t[o].id + "] 가 중복사용되었습니다. 소스코드를 확인하세요."; $l(n) } else i[t[o].id] = t[o].id; e.push(t[o]) } var l = r.D.getDataPrefix("header_id"), h = r.D.getDataPrefix("inputType"), d = r.D.getDataPrefix("dataType"), p = r.D.getDataPrefix("value"), u = r.D.getDataPrefix("useLocale"), c = r.D.getDataPrefix("localeRef"), g = r.D.getDataPrefix("sortable"), f = r.D.getDataPrefix("toolTip"), m = r.D.getDataPrefix("useFilter"); for (o = 0; o < e.length; o++) {
									var y = e[o]; if (!y.getAttribute(l)) {
										var b = y.getAttribute(h), w = y.getAttribute(d), v = y.getAttribute(p), C = null; if (this.setConfigOptions(y, v), "checkbox" == b) y.innerHTML = "", (C = this.setCheckboxHead(y, v)).headInputType = "checkbox"; else if ("select" == b) (C = this.setSelectboxHead(y, v)).headInputType = "select"; else if ("text" == b && "own" == w) (C = this.setInputHead(y, v)).headInputType = "input"; else if ("checkcombobox" == b) (C = this.setCheckcomboboxHead(y, v)).headInputType = "checkcombobox"; else { var I = y.getAttribute(p), _ = y.getAttribute(u); if ("true" === _ || this.options.useLocale && !_) { var x = y.getAttribute(c); if (x) { (D = this.getLocaleValue(x)) && (I = D) } else { var S = y.getAttribute("id"); if (null != S && S.match("RowNumber") && this.options.rowNumLocaleRef) (D = this.getLocaleValue(this.options.rowNumLocaleRef)) && (I = D); else if (null != S && S.match("RowStatus") && this.options.rowStatusLocaleRef) { var D; (D = this.getLocaleValue(this.options.rowStatusLocaleRef)) && (I = D) } } } I = null != I ? I : "", y.innerHTML = this.dataTagOpen + I + this.dataTagClose } var R = y.getAttribute("id"); y.setAttribute(l, R); var L = y.className; if ("native" === this.options.drawType && (L += " " + this.options.gridNativeClass), L += " " + this.id + "_header__column" + o, this.headCellInfoHash[R]) { var T = this.headCellInfoHash[R].getAttribute("class"); T && (L += " " + T) }
										if (y.className = L, y.setAttribute("id", this.id + "_" + R), this.options.autoScope && y.setAttribute("scope", "col"), R && !R.match("RowNumber") && !R.match("RowStatus")) { var k = "/WebSquare/" + this.options.pluginName + "/header/column[@inputType='" + b + "']/useFilter/@value", A = r.D.getBoolean(s.v.getConfiguration(k)), F = this.headCellInfoHash[R].getAttribute("useFilter"); if ((F = "" === F || "string" != typeof F || r.D.getBoolean(F)) && (A || "true" == y.getAttribute(m))) { var E = "width:100%;height:100%;", M = ""; this.options.filterShowAlways && (E += "table-layout:fixed;", M = "overflow:hidden;"); var O = document.createElement("table"); O.style.cssText = E; var N = document.createElement("tr"), B = document.createElement("td"); B.style.cssText = "width:100%;" + M; for (var G = y.childNodes.length, H = 0; y.childNodes.length > 0 && H < G; H++)B.appendChild(y.childNodes[0]); N.appendChild(B); var W = document.createElement("td"), V = WebSquare.language.getMessage("Grid_filter_button"); if (W.innerHTML = "<input type='button' id='" + this.id + "_" + R + "_filter' class='w2trigger w2grid_customFilter_open' onclick='" + this.id + '.showCustomFilter("' + R + "\");' title='" + V + "'/>", N.appendChild(W), O.appendChild(N), y.appendChild(O), this.options.filterShowAlways) { var q = document.getElementById(this.id + "_" + R + "_filter"); q && q.parentNode && (q.parentNode.style.width = q.offsetWidth + 2 + "px") } } } "true" === y.getAttribute(g) && (y.className += " w2grid_head_sortable"), this.headerObj[R] = C, y.disabled = !1; var j = y.getAttribute(f); j && WebSquare.getBody().setToolTip(y, j)
									}
								} this.clearHeaderSort()
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}, w.prototype.associateHeaderBody = function() { try { for (var t = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")), e = 0, i = -1, o = "", s = r.D.getDataPrefix("colIndex"), n = r.D.getDataPrefix("header_id"), l = r.D.getDataPrefix("col_id"), h = 0; h < t.length; h++) { var d = t[h]; if (d.className.indexOf(this.options.headerTdClass + "_rowNumber") >= 0 || d.className.indexOf(this.options.headerTdClass + "_rowStatus") >= 0); else { var p = d.getAttribute(s); parseInt(p) <= i && e++, i = parseInt(p); var u = e; u + 1 > this.tempTr.rows.length && (u = this.tempTr.rows.length - 1); for (var c = null; u >= 0;) { for (var g = this.tempTr.rows[u], f = r.D.first(g); f;) { if (p == f.getAttribute(s)) { c = f; break } f = r.D.next(f) } if (c) break; u-- } if (c) { var m = d.getAttribute(n), y = c.getAttribute(l); o = y, this.headerToBodyRelation[m] = y, this.bodyToHeaderRelation[y] = m } else { m = d.getAttribute(n); this.passiveColSpanRelation[m] = o } } } } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.setConfigOptions = function(t, e) { try { var i = r.D.getDataPrefix("col_id"), o = r.D.getDataPrefix("inputType"), n = t.getAttribute(i), l = this.options.pluginName, h = t.getAttribute(o); this.headerConfigOptions[n] = s.v.getConfig(l + "/header[@inputType='" + h + "']") } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.getHeaderConfigValue = function(t, e, i) { try { var o = r.D.getDataPrefix("col_id"), s = t.getAttribute(o), n = t && (t.getAttribute(i) || t.getAttribute(i.toLowerCase())), l = this.headerConfigOptions[s] && this.headerConfigOptions[s][i]; return n || l || "" } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.setCheckboxHead = function(t, e) {
							try {
								var i = r.D.getDataPrefix("col_id"), o = r.D.getDataPrefix("onChangeFunction"), n = r.D.getDataPrefix("onchangeFunction"), l = r.D.getDataPrefix("localeRef"), h = r.D.getDataPrefix("checkboxLabel"), p = r.D.getDataPrefix("colId"), u = t.getAttribute(i), c = t.getAttribute(o) || t.getAttribute(n), g = "<INPUT type='checkbox' />", f = this.getHeaderConfigValue(t, e, h); if (this.options.useLocale) { var m = t.getAttribute(l); if (m) { var y = this.getLocaleValue(m); y && (f = y) } } if (f) { var b = this.uuid + "_header__" + u + "_checkboxLabel_", w = b + "_id", v = " for='" + w + "'"; !1 === this.options.useHeaderCheckboxLabelFor && (v = ""), g = "left" === this.getHeaderConfigValue(t, e, "checkboxLabelPosition") ? "<label class='w2checkbox_label'" + v + ">" + f + "</label><INPUT type='checkbox' name='" + b + "' id='" + w + "'/>" : "<INPUT type='checkbox' name='" + b + "' id='" + w + "'/><label class='w2checkbox_label'" + v + ">" + f + "</label>", t.getAttribute(h) || t.setAttribute(h, f) } t.innerHTML = g; var C = t.getElementsByTagName("input")[0]; C.setAttribute(p, e),
									("true" == t.getAttribute("disabled") || r.D.isIE() && parseInt(s.v.browserVersion(), 10) < 9 && "true" == this.headCellInfoHash[u].getAttribute("disabled")) && C.setAttribute("disabled", "disabled"); var I = t.getAttribute("title"); I && C.setAttribute("title", I); var _ = this; d.B.addListener(C, "onkeydown", (function(t) { d.B.fireEvent(_, "onkeydown", t), "32" == (t.charCode ? t.charCode : t.keyCode) && d.B.stopPropagation(t) })), d.B.addListener(C, "ondblclick", (function(t) { d.B.stopPropagation(t) })), d.B.addListener(C, "onfocus", (function(t) { var e = _.headerToBodyRelation[u]; _.getCellInfo(e).options.focusOutOnCheckHeaderClick && (_.removeFocusedCell(), 1 == _.options.senseReader && _.rowIndex > 0 && _.addGridScroll(0 - _.rowIndex)) })); var x = this.uuid; return null != c && "" != c ? d.B.addListener(C, "onclick", (function(t) { if (!WebSquare.idCache[x].options.checkHeaderOnly) { _.noevent = !0; var i = r.D.getGlobalFunction(c, _.scope_id); if ("function" == typeof i) try { i.call(this, this.checked, e) } catch (t) { } _.options.preventMultipleClick && d.B.fireEvent(_, "onheaderclick", u) } })) : d.B.addListener(C, "onclick", (function(t) {
										if (!WebSquare.idCache[x].options.checkHeaderOnly) {
											_.noevent = !0; var e, i, o, s, r, n, l = _.headerToBodyRelation[u], h = _.getCellInfo(l), p = h, c = h.options.trueValue, g = h.options.falseValue, f = !(!_.isDrillDown || !_._dataList.options.depthColumn), m = !("checkbox" !== h.options.inputType || !_.options.ref); if (!0 === m) { var y = _._dataList._getXPath({ colID: l, skipValueNode: !0 }); m = (e = WebSquare.ModelUtil.findInstanceNodes(y, null, _.scope_id)).length >= _.getTotalRow() } if ("checkbox" === h.options.inputType || "custom" === h.options.inputType || "radio" === h.options.inputType) { if (_.editedCell) try { r = _.editedCell.editRowIndex, n = _.getColumnIndex(_.editedCell.id); var b = _._dataList.getColumnIndex(_.editedCell.id); s = _._grid.getRealRowIndex(r) * _._dataList.getColumnCount() + b, o = _._dataList.dataArr[s] } catch (t) { a.w.printStackTrace(t, null, this) } if (this.checked) { for (var w = _.getUnCheckedIndex(l), v = 0; v < w.length; v++)if ("custom" == h.options.inputType && 0 == h.internal && (p = h.cellManagerHashByRowIndex[w[v]]) && (c = p.options.trueValue, g = p.options.falseValue), p.options.checkAlways || !_.___getEditReadOnly(w[v], l, f) && !_._getEditDisabled(w[v], l, f)) { var C = w[v]; f ? _._dataList._setCellData(C, l, c, !0, !0, null, null, m) : _.dataList.setCellData(C, l, c, !0, !0, null, null, m), i = c; var I = C; f && (I = _._dataList.getFilteredRowIndex(I)), null != I && _._dataList.broadcast({ gridView: ["notifyCellChanged", [I, l, null, !0]] }), p.options.checkHeaderOnViewchange && d.B.fireEvent(_, "onviewchange", { oldValue: g, newValue: c, rowIndex: C, colIndex: _.getColumnIndex(l) }) } } else { var S = _.getCheckedIndex(l); for (v = 0; v < S.length; v++)if ("custom" == h.options.inputType && 0 == h.internal && (p = h.cellManagerHashByRowIndex[S[v]]) && (c = p.options.trueValue, g = p.options.falseValue), p.options.checkAlways || !_.___getEditReadOnly(S[v], l, f) && !_._getEditDisabled(S[v], l, f)) { C = S[v]; f ? _._dataList._setCellData(C, l, g, !0, !0, null, null, m) : _.dataList.setCellData(C, l, g, !0, !0, null, null, m), i = g; I = C; f && (I = _._dataList.getFilteredRowIndex(I)), null != I && _._dataList.broadcast({ gridView: ["notifyCellChanged", [I, l, null, !0]] }), p.options.checkHeaderOnViewchange && d.B.fireEvent(_, "onviewchange", { oldValue: g, newValue: c, rowIndex: C, colIndex: _.getColumnIndex(l) }) } } if (_.checkHeader(u), !0 === m) for (v = 0; v < e.length; v++) { var D = e[v]; (p.options.checkAlways || !_.___getEditReadOnly(v, l, f) && !_._getEditDisabled(v, l, f)) && (_._dataList.valueNode ? D.setAttribute(_._dataList.valueNode, i) : WebSquare.xml.setTextNodeValue(D, i)) } _._dataList.broadcast({ linkedDataList: ["notifyRowChanged"], fusionChart: ["refresh"], fwFunnelChart: ["refresh"], fwSparkChart: ["refresh"], fwPyramidChart: ["refresh"], fwGanttChart: ["refresh"], generalComp: "both" }) } if (_.options.senseReader && _.rowIndex <= 0 && (_.senseReaderMode = !0, _._setGridBorderNoRefresh = !0), _.options.senseReader && _.rowIndex <= 0 && (_.senseReaderMode = !1, _._setGridBorderNoRefresh = !1), _.drawFooter(), _.drawHeader(), _.options.preventMultipleClick && d.B.fireEvent(_, "onheaderclick", u), null != s) try {
												var R = _._dataList.dataArr[s]; o != R && d.B.fireEvent(_, "onviewchange", {
													oldValue: o, newValue: R,
													rowIndex: r, colIndex: n
												})
											} catch (t) { a.w.printStackTrace(t, null, this) }
										}
									})), C
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}, w.prototype.checkHeader = function(t) { try { if (this.headerObj) { var e = this.headerObj[t], i = this.headerToBodyRelation[t], o = this.headerInfoHash[t]; if (e && o && o.options && "checkbox" == o.options.inputType) { var s = !(!this.isDrillDown || !this._dataList.options.depthColumn), n = this.getCellInfo(i), l = s ? this.getTotalRow() : this.getRowCount(); if ("checkbox" !== n.options.inputType && "custom" !== n.options.inputType && "radio" !== n.options.inputType) return; if (this.hasCustomInputType && 0 == n.internal && "custom" == n.options.inputType) { for (var h = l, d = 0; d < h; d++) { var p = s ? d : this.dataList.getRealRowIndex(d), u = n.cellManagerHashByRowIndex[p] ? n.cellManagerHashByRowIndex[p] : n; "checkbox" != u.options.inputType && "radio" != u.options.inputType && l-- } if (0 === l) return } var c = "exclude" === this.options.checkAllType ? this.getCheckedIndex(i, !0) : this.getCheckedIndex(i), g = c.length; if (0 == l) e.checked = !1, e.indeterminate = !1; else if (l == g) e.checked = !0, e.indeterminate = !1; else if (g > 0) { var f = !1; if (n.options.checkAlways) n.options.usePartialCheck && "uncheck" === n.options.partialCheckNextClick && (f = !0); else { for (d = 0; d < c.length; d++)if (!this.___getEditReadOnly(c[d], i, s) && !this._getEditDisabled(c[d], i, s)) { (n.options.usePartialCheck || r.D.isIEAllVersion()) && (f = !0); break } n.options.usePartialCheck && "check" === n.options.partialCheckNextClick && f && (f = !1) } r.D.isIEAllVersion() ? e.checked = !f : e.checked = f, n.options.usePartialCheck && (e.indeterminate = !0) } else l - g == l && (e.checked = !1, e.indeterminate = !1) } } } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.setSelectboxHead = function(t, e) { try { var i, o = this, n = t.getAttribute("id"), l = this.headCellInfoHash[n]; if ("json" === l._elementType) (i = l.cloneNode(!0)._element).N = "w2:select", i.A = { style: "width:100%; height:20px;top:0px;left:0px;position:relative;background-color:#ffffff" }; else { this.tmpSelectbox || (this.tmpSelectbox = new WebSquare.uiplugin.selectbox("___tmp_selectbox__" + this.id, {}, null)); var h = WebSquare.Elem.api.getElementsByTagName(l, "choices", s.v._XML_NAMESPACE.W2)[0], d = WebSquare.xml.serialize(h); for (var p in i = WebSquare.xml.parse('<w2:select xmlns:w2="http://www.inswave.com/websquare">' + d + "</w2:select>", !0).documentElement, this.tmpSelectbox.options) { var u = t.getAttribute(p); null != u && "" != u && ("style" == p && (u = "width:100%; height:20px;top:0px;left:0px;position:relative;background-color:#ffffff"), i.setAttribute(p, u)) } r.D.isIE(8) && "true" == this.headCellInfoHash[n].getAttribute("disabled") && i.setAttribute("disabled", "true") } t.style.position = "static", t.innerHTML = ""; var c = WebSquare.controlFactory.createControl(this.id + "_head_selectbox_" + t.getAttribute("id"), { pluginType: "uiplugin.selectbox", pluginName: "selectbox" }, i, this.scope_obj, !0, this.parentFrame); c.writeTo(t), window[c.id] = c, c.activate(), c.itemArr.length > 0 && c.setValueNM(c.itemArr[0].value); var g = r.D.getDataPrefix("onChangeFunction"), f = r.D.getDataPrefix("onchangeFunction"), m = t.getAttribute(g) || t.getAttribute(f); return c.changeFuncName = m, c.colId = e, c.headerId = n, c.addEvent("onchange", (function(t) { var e = r.D.getGlobalFunction(this.changeFuncName, this.scope_id); if ("function" == typeof e) try { e.call(this, this.getValue(), this.colId, this.headerId) } catch (t) { } })), c.addEvent("onclick", (function(t) { o.noevent = !0 })), this.addControl(c), c } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.setInputHead = function(t, e) {
							try {
								t.innerHTML = "<input type='text' class='w2grid_head_input' style='width:95%; height:18px;' />"; var i = r.D.first(t), o = this, s = r.D.getDataPrefix("onChangeFunction"), n = r.D.getDataPrefix("onchangeFunction"), l = r.D.getDataPrefix("changeFuncName"), h = r.D.getDataPrefix("colId"), p = r.D.getDataPrefix("col_id"), u = t.getAttribute(s) || t.getAttribute(n); i.setAttribute(l, u), i.setAttribute(h, e), i.scope_id = this.scope_id, i.headerId = t.getAttribute(p); var c = WebSquare.idCache[this.uuid]; return d.B.addListener(i, "onfocus", (function() { o.noevent = !0, o.headerFocus = !0 })), d.B.addListener(i, "onblur", (function(t) {
									o.headerFocus = !1
									; var e = r.D.getGlobalFunction(this.getAttribute(l), this.scope_id); if ("function" == typeof e) try { e.call(this, this.value, this.getAttribute(h), this.headerId) } catch (t) { }
								})), d.B.addListener(i, "onclick", (function(t) { o.noevent = !0 })), d.B.addListener(i, "onkeyup", (function(t) { 13 == t.keyCode && this.blur() })), d.B.addListener(i, "onpaste", (function(t) { c.options.preventPaste ? d.B.preventDefault(t) : 13 == t.keyCode && this.blur() })), i
							} catch (t) { a.w.printStackTrace(t, null, this) }
						}, w.prototype.setCheckcomboboxHead = function(t, e) { try { var i, o = this, n = t.getAttribute("id"), l = this.headCellInfoHash[n]; if ("json" === l._elementType) (i = l.cloneNode(!0)._element).N = "w2:checkcombobox", i.A = { style: "width:100%; height:20px;top:0px;left:0px;position:relative;background-color:#ffffff" }; else { this.tmpCheckcombobox || (this.tmpCheckcombobox = new WebSquare.uiplugin.checkcombobox("___tmp_checkcombobox__" + this.id, {}, null)); var h = WebSquare.Elem.api.getElementsByTagName(l, "choices", s.v._XML_NAMESPACE.W2)[0], d = WebSquare.xml.serialize(h); for (var p in i = WebSquare.xml.parse('<w2:checkcombobox xmlns:w2="http://www.inswave.com/websquare">' + d + "</w2:checkcombobox>", !0).documentElement, this.tmpCheckcombobox.options) { var u = t.getAttribute(p); null != u && "" != u && ("style" == p && (u = "width:100%; height:20px;top:0px;left:0px;position:relative;background-color:#ffffff"), i.setAttribute(p, u)) } } t.style.position = "static", t.innerHTML = ""; var c = WebSquare.controlFactory.createControl(this.id + "_head_checkcombobox_" + t.getAttribute("id"), { pluginType: "uiplugin.checkcombobox", pluginName: "checkcombobox" }, i, this.scope_obj, !0, this.parentFrame); c.writeTo(t), window[c.id] = c, c.activate(), c.itemArr.length > 0 && c.setValueNM(c.itemArr[0].value); var g = r.D.getDataPrefix("onChangeFunction"), f = r.D.getDataPrefix("onchangeFunction"), m = t.getAttribute(g) || t.getAttribute(f); return c.changeFuncName = m, c.colId = e, c.headerId = n, c.addEvent("onchange", (function(t) { var e = r.D.getGlobalFunction(this.changeFuncName, this.scope_id); if ("function" == typeof e) try { e.call(this, this.getValue(), this.colId, this.headerId) } catch (t) { } })), c.addEvent("onclick", (function(t) { o.noevent = !0 })), c } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.getHeaderDIV = function(t) { return this.getHeaderLayer(t) }, w.prototype.getHeaderLayer = function(t) { for (var e = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")), i = r.D.getDataPrefix("header_id"), o = 0; o < e.length; o++) { var s = e[o], a = s.getAttribute(i); if (null != a && null != t && t.toLowerCase() == a.toLowerCase()) return s } }, w.prototype.getHeaderInfo = function(t) { try { return this.headerInfoHash[t] || { options: {} } } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.getTotalHeaderCol = function(t) { try { var e = this.getTotalCol(); if (t) { if (t.mergedColumn) { e = 0; for (var i = this.htmlInfo.head.headerTdHtml, o = 0, s = i.length; o < s; o++)e += i[o].length } t.defaultColumn && (e += this.defaultColCnt) } return e } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.getHeaderColumnVisible = function(t) { var e = this.getHeaderInfo(t), i = this._getRealColIndex("head", t), o = i + this.defaultColCnt, s = !this.hiddenList[o]; if (e && (0 === i || i)) { for (var a = 0; a < e.options.colSpan; a++)s = !this.hiddenList[o + a] || s; return s } p.k.printLog("[getHeaderColumnVisible] 존재하지 않는 header 컬럼입니다.") }, w.prototype.setHeaderValue = function(t, e, i) {
							var o = this.getHeaderLayer(t); if (o) if ("function" == typeof e) e(o); else {
								var s = this.headerObj[t], a = e; i && (e = this.getFormattedHeaderValue(t, e)); var n = r.D.getDataPrefix("value"); if (s) if ("select" == s.headInputType || "checkcombobox" == s.headInputType) s.setValue(e); else if ("checkbox" == s.headInputType) s.checked != r.D.getBoolean(e) && (s.click(), s.checked = r.D.getBoolean(e)); else if ("input" == s.headInputType) { if (s.value != e) { s.value = e; var l = r.D.getGlobalFunction(s.getAttribute("changeFuncName"), this.scope_id); if ("function" == typeof l) try { l.call(s, s.value, s.getAttribute("colId")) } catch (t) { } } } else "user" == s.headerInputType && s.setValue(e); else {
									this.headerDataObj && t && (this.headerDataObj[t].value = a); var h = o.getElementsByTagName(this.options.dataTag)[0]
										; h ? ("NOBR" == h.tagName || "SPAN" == h.tagName && h.className.indexOf("w2grid_span") > -1) && (h.innerHTML = e) : o.innerHTML = this.dataTagOpen + e + this.dataTagClose
								} o.setAttribute(n, e); for (var d = WebSquare.Elem.api.getElementsByTagName(this.element, "w2:header")[0], p = WebSquare.Elem.api.getElementsByTagName(d, "w2:column"), u = 0; u < p.length; u++) { var c = p[u]; if (t == c.getAttribute("id")) { c.setAttribute("value", e); break } }
							}
						}, w.prototype.setHeaderNodeSet = function(t, e, i, o) { if (this.getHeaderLayer(t)) { var s = this.headerObj[t]; s && ("select" != s.headInputType && "checkcombobox" != s.headInputType || s.setNodeSet(e, i, o)) } }, w.prototype.setHeaderUserObject = function(t, e) { this.headerObj[t] = e, e.headerInputType = "user"; var i = this.getHeaderLayer(t); i.innerHTML = "", i.appendChild(e.getContent()) }, w.prototype.getHeaderValue = function(t) { var e = ""; if (t && (e = this.getHeaderLayer(t)), e) { var i = r.D.getDataPrefix("inputtype"), o = r.D.getDataPrefix("usefilter"), s = r.D.getDataPrefix("value"); if (!this.options.titleAuto || "text" != e.getAttribute(i)) { var a = this.headerObj[t]; if (a) { var n = ""; if ("select" == a.headInputType || "checkcombobox" == a.headInputType) n = a.getValue(); else if ("checkbox" == a.headInputType) { n = !a.indeterminate && a.checked; var l = this.headerToBodyRelation[t]; if (this.options.returnTrueFalseValue && l) { var h = this.getCellInfo(l), d = h.options.trueValue, p = h.options.falseValue; n && d ? n = d : p && (n = p) } } else "input" == a.headInputType ? n = a.value : "user" == a.headerInputType && (n = a.getValue()); return n } if (r.D.getBoolean(e.getAttribute(o))) return e.getAttribute(s); var u = r.D.first(e), c = u.getElementsByTagName(this.options.dataTag.toUpperCase())[0]; if (c) u = c; else for (c = u; c && "NOBR" != c.tagName && !("SPAN" == c.tagName && c.className.indexOf("w2grid_span") > -1);) { if ("TD" == c.tagName) { u = r.D.first(c); break } c = r.D.first(c) } return u ? u.innerHTML : "" } var g = e.getElementsByTagName(this.options.dataTag.toUpperCase())[0]; if (g && ("NOBR" == g.tagName || "SPAN" == g.tagName && g.className.indexOf("w2grid_span") > -1)) return null != g.textContent ? g.textContent : g.innerHTML || "" } }, w.prototype.getFormattedHeaderValue = function(t, e) { var i = this.getHeaderLayer(t); if (i) { var o = r.D.getDataPrefix("header_id"); return this.headerDataObj[i.getAttribute(o)] && (e = this.headerDataObj[i.getAttribute(o)].formatter.format(e)), e } }, w.prototype.getHeaderValueList = function(t) { for (var e = [], i = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")), o = r.D.getDataPrefix("header_id"), s = r.D.getDataPrefix("inputtype"), a = 0; a < i.length; a++)if (null == this.hiddenList[a] || 1 == t || 1 != this.hiddenList[a]) { var n = i[a], l = n.getAttribute(o); if (null != l && n) if (this.options.captionAuto || this.options.summaryOnlyAuto) { if ("text" != n.getAttribute(s)) continue; var h = n.getElementsByTagName(this.options.dataTag.toUpperCase())[0]; (h && "NOBR" == h.tagName || "SPAN" == h.tagName && h.className.indexOf("w2grid_span") > -1) && (null != h.innerText && "" != h.innerText && "\n" != h.innerText ? e.push(h.innerText) : null != h.textContent && "" != h.textContent ? e.push(h.textContent) : null != h.innerHTML && "" != h.innerHTML ? e.push(h.innerHTML) : e.push("")) } else { var d, p = this.headerObj[l]; p && ("select" == p.headInputType || "checkcombobox" == p.headInputType ? d = p.getValue() : "checkbox" == p.headInputType ? d = p.checked : "input" == p.headInputType ? d = p.value : "user" == p.headerInputType && (d = p.getValue()), e.push(d)); for (var u = r.D.first(n), c = u; c && "NOBR" != c.tagName && !("SPAN" == c.tagName && c.className.indexOf("w2grid_span") > -1);) { if ("TD" == c.tagName) { u = r.D.first(c); break } c = r.D.first(c) } u ? e.push(u.innerHTML) : e.push("") } } return e }, w.prototype.getHeaderSpan = function(t, e) { for (var i = 0; i < this.htmlInfo.head.rowArr.length; i++)for (var o = 0; o < this.htmlInfo.head.rowArr[i].length; o++)if (this.htmlInfo.head.rowArr[i][o].id === t) { if ("row" === e) return this.htmlInfo.head.rowArr[i][o].rowSpan; if ("col" === e) return this.htmlInfo.head.rowArr[i][o].colSpan } }, w.prototype.getHeaderInputType = function(t) { for (var e = 0; e < this.htmlInfo.head.rowArr.length; e++)for (var i = 0; i < this.htmlInfo.head.rowArr[e].length; i++)if (this.htmlInfo.head.rowArr[e][i].id === t) return this.htmlInfo.head.rowArr[e][i].inputType },
							w.prototype.getSortableArr = function() { for (var t = [], e = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")), i = r.D.getDataPrefix("sortable"), o = 0; o < e.length; o++)"true" === e[o].getAttribute(i) ? t.push(!0) : "false" === e[o].getAttribute(i) ? t.push(!1) : 1 == this.options.sortable ? t.push(!0) : t.push(!1); return t }, w.prototype.getSortableStatus = function() { return this.headerSortStatusArr.slice(0) }, w.prototype.clearHeaderSort = function() { this.headerSortStatusArr = []; for (var t = r.D.getDataPrefix("sortable"), e = r.D.getDataPrefix("header_id"), i = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")), o = this.htmlInfo.head.rowArr, s = 0; s < i.length; s++) { if ("_headerRowNumber" !== (p = i[s].getAttribute(e)) && "_headerRowStatus" !== p && ("false" !== i[s].getAttribute(t) || !0 === this.options.showSortableImage)) { if (o.length > 1 && "top" == this.options.sortedImagePosition) for (var a = this.headerToBodyRelation[p], n = this.getColumnIndex(a), l = o[0], h = 0; h < l.length; h++)if (l[h]["@col"] == n) { p = l[h].id; break } var d = this.headerObj[p]; d && "user" == d.headerInputType || this.setHeaderSortImage(p, 0, 0) } } for (s = 0; s < i.length; s++) { var p = ""; i[s].getElementsByClassName("w2grid_customFilter_open").length > 0 ? (p = i[s].getAttribute(e), this._lastHeaderElementType = "filter") : i[s].getElementsByClassName("w2grid_head_sort_div_main_btn").length > 0 && (p = i[s].getAttribute(e), this._lastHeaderElementType = "sort"), p && (this._lastHeaderElementId = p) } }, w.prototype.drawHeaderSortImages = function() { for (var t = this.htmlInfo.head.rowArr, e = 0; e < this.headerSortStatusArr.length; e++) { var i = ""; if (t.length > 1 && "top" == this.options.sortedImagePosition) { for (var o = this.headerSortStatusArr[e].colID, s = this.getColumnIndex(o), a = t[0], r = 0; r < a.length; r++)if (a[r]["@col"] == s) { i = a[r].id; break } } else if (!(i = this.bodyToHeaderRelation[this.headerSortStatusArr[e].colID])) { var n = this.headerSortStatusArr[e].colID, l = this.getColumnIndex(n); for (l--; l >= 0 && (n = this.getColumnID(l), !(i = this.bodyToHeaderRelation[n]));)l-- } i && this.setHeaderSortImage(i, this.headerSortStatusArr[e].sortOrder, e + 1) } }, w.prototype.setHeaderSortImage = function(t, e, i) {
								var o = this.getElementById(this.id + "_" + t); if (null != o) {
									e = parseInt(e, 10), i = parseInt(i, 10); isNaN(i) || i <= 0 || this.headerSortStatusArr.length < 2 ? i = "" : i += "", this._clearHeaderSortImage(o, "table"), this._clearHeaderSortImage(o, "div"); var a = "", n = this.options.showSortableImage, l = r.D.getDataPrefix("sortable"), h = r.D.getDataPrefix("inputType"); if (this.options.showSortableImage) { var d = o.getAttribute(l); n = !!(a = d ? r.D.getBoolean(d) : this.options.sortable) } var u = o.getAttribute(h), c = "/WebSquare/" + this.options.pluginName + "/header/column[@inputType='" + u + "']/useFilter/@value", g = r.D.getBoolean(s.v.getConfiguration(c)), f = r.D.getDataPrefix("useFilter"), m = o.getAttribute(f); m = "" === m || "string" != typeof m || r.D.getBoolean(m); var y = !1, b = !1, w = !1; if (0 === this.getDataLength() && this.options.hideSortIconOnNoData && (w = !0), 0 === this.getDataLength() && this.options.hideFilterIconOnNoData && (b = !0), m && (g || "true" == o.getAttribute(f))) { y = !0; var v = b ? "none" : "", C = o.getElementsByTagName("input"); C && C[0] && (C[0].style.display = v) } if (!0 !== this.options.showSortableImage) { var I; if (0 !== e) { I = r.D.first(o); var _ = null, x = null, S = null; try { this._useCheckboxLabel(t) && (x = document.createElement("div"), _ = r.D.next(I), x.appendChild(_)) } catch (t) { } "nobr" == I.nodeName.toLowerCase() || "span" == I.nodeName.toLowerCase() && I.className.indexOf("w2grid_span") > -1 ? (I = o.innerHTML, o.innerHTML = "") : I = o.removeChild(I), this.headerObjArr[t] = I; var D = 1 == e ? "w2grid_head_sort_asc" : "w2grid_head_sort_desc", R = 0, L = "w2grid_head_sort_table_main", T = "w2grid_head_sort_td", k = "<table " + (W = r.D.getDataPrefix("sort")) + "='sort' class='" + L + "'><tr><td></td><td class='" + T + " " + D + "'>" + i + "</td></tr></table>"; "left" === this.options.sortedIconPosition && (R = 1, k = "<table " + W + "='sort' class='" + L + "'><tr><td class='" + T + " " + D + "'>" + i + "</td><td></td></tr></table>"), o.innerHTML = k; var A = o.getElementsByTagName("td"); "string" == typeof I ? A[R].innerHTML = I : (A[R].appendChild(I), _ && x && (A[R].appendChild(x.removeChild(_)), x = null)) } } else {
										var F = this.headerObj[t]; if (F) F.render && (F = F.render); else { var E = o.getElementsByTagName(this.options.dataTag)[0]; (E && "NOBR" == E.tagName || "SPAN" == E.tagName && E.className.indexOf("w2grid_span") > -1) && (F = E) } _ = null; var M = null; try { this._useCheckboxLabel(t) && ("left" === this.headerInfoHash2[t].getAttribute("checkboxLabelPosition") ? (M = "left", x = document.createElement("div"), _ = r.D.prev(F), x.appendChild(_)) : (x = document.createElement("div"), _ = r.D.next(F), x.appendChild(_))) } catch (t) { } try { y && this.options.showSortableUseFilter && (S = o.getElementsByTagName("input")[0]) } catch (t) { } F.parentNode.removeChild(F); D = ""; var O = ""; switch (e) { case 0: !1 !== n || a ? (D = "w2grid_head_sort_none", O = WebSquare.language.getMessage("Grid_sort_asc")) : (D = "w2grid_head_sort_image_none", O = ""); break; case 1: D = "w2grid_head_sort_asc", O = WebSquare.language.getMessage("Grid_sort_desc"); break; case -1: D = "w2grid_head_sort_desc", O = WebSquare.language.getMessage("Grid_sort_none"); break; default: D = "w2grid_head_sort_none", O = WebSquare.language.getMessage("Grid_sort_asc") }if (this.options.sortHeaderDiv) { D += "_btn"; var N = w ? "style = 'display:none'" : ""; W = r.D.getDataPrefix("sort"); o.innerHTML = "<div " + W + "='sort' class='w2grid_head_sort_div_main_outer'><button class='w2grid_head_sort_div_main_btn " + D + "'" + N + " >" + O + "</button></div>"; A = o.getElementsByTagName("div"); var B = o.getElementsByTagName("button")[0]; if (A[0].insertBefore(F, B), _ && x) this._useCheckboxLabel(t) && "left" !== this.headerInfoHash2[t].getAttribute("checkboxLabelPosition") ? A[0].insertBefore(x.removeChild(_), B) : A[0].insertBefore(x.removeChild(_), F), x = null; else if (y && this.options.showSortableUseFilter) { q = A[0].parentElement; (V = document.createElement("div")).appendChild(A[0]), V.appendChild(S), this.addClass(V, "w2grid_head_sort_div_main_outer_box"), q.appendChild(V), this.addClass(S, "w2grid_customFilter_sortable_open"), r.D.isIE() && parseInt(s.v.browserVersion(), 10) < 8 ? this.addClass(A[1], "w2grid_head_sort_usefilter_div_main_ie") : this.addClass(A[1], "w2grid_head_sort_usefilter_div_main") } } else { var G = "w2grid_head_sort_div_main", H = "w2grid_head_sort_div_sub"; "left" === this.options.sortedIconPosition && (G = "w2grid_head_sort_div_main_left"), !0 === this.options.showSortableImage && (H = "left" === this.options.sortedIconPosition ? "w2grid_head_sort_div_sub_sortable_image_left" : "w2grid_head_sort_div_sub_sortable_image"), w && (D = ""); var W = r.D.getDataPrefix("sort"); if (o.innerHTML = "<div " + W + "='sort' class = '" + G + " " + D + "'><div class = '" + H + "'>" + i + "</div></div>", (A = o.getElementsByTagName("div"))[0].appendChild(F), _ && x) "left" === M ? A[0].insertBefore(x.removeChild(_), F) : A[0].appendChild(x.removeChild(_)), x = null; else if (y && this.options.showSortableUseFilter) { var V, q = A[0].parentElement; (V = document.createElement("div")).appendChild(A[0]), V.appendChild(S), this.addClass(V, "w2grid_head_sort_div_main_outer_box"), q.appendChild(V), this.addClass(S, "w2grid_customFilter_sortable_open"), r.D.isIE() && parseInt(s.v.browserVersion(), 10) < 8 ? this.addClass(A[1], "w2grid_head_sort_usefilter_div_main_ie") : this.addClass(A[1], "w2grid_head_sort_usefilter_div_main") } }
									}
								} else p.k.printLog("headerId : " + t + "를 찾을 수 없습니다.[" + this.id + "]")
							}, w.prototype._clearHeaderSortImage = function(t, e) { var i = t.getElementsByTagName(e), o = r.D.getDataPrefix("sort"), s = r.D.getDataPrefix("header_id"); if (i.length > 0 && "sort" == i[0].getAttribute(o)) { var a = t.getAttribute(s), n = this.headerObjArr[a]; if (n) if ("string" == typeof n) t.innerHTML = n; else { var l = null, h = null; try { this._useCheckboxLabel(a) && (h = document.createElement("div"), l = r.D.next(n), h.appendChild(l)) } catch (t) { } n = t.appendChild(n), l && h && (t.appendChild(h.removeChild(l)), h = null), t.removeChild(n.previousSibling) } } }, w.prototype.getColIdByHeaderId = function(t) { return this.headerToBodyRelation[t] }, w.prototype.setHeaderHide = function(t) {
								if (t = r.D.getBoolean(t), this.options.hideHeader != t) {
									this.options.hideHeader = t; var e = this.getElementById(this.id + "_head_table"), i = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")); if (t) {
										e.style.display = "none"; for (var o = 0; o < i.length; o++) {
											var s = i[o].getAttribute("class"); null != s && (i[o].setAttribute("data-bkclass", s), i[o].removeAttribute("class"))
										}
									} else { e.style.display = ""; for (o = 0; o < i.length; o++) { var a = i[o].getAttribute("data-bkclass"); null != a && (i[o].setAttribute("class", a), i[o].removeAttribute("data-bkclass")) } } this.refresh(), this.setScrollYHeight()
								}
							}, w.prototype.setHeaderDisabled = function(t, e) { try { e = r.D.getBoolean(e); var i = this.getHeaderLayer(t); if (i) { var o = this.headerObj[t]; o ? (o.setDisabled ? o.setDisabled(e) : o.render ? o.render.disabled = e : o.disabled = e, i.disabled = e) : i.disabled = e } } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype._getHeaderDisabled = function(t) { try { var e = !1, i = this.getHeaderLayer(t); if (i) { var o = this.headerObj[t]; o ? o.getDisabled ? e = o.getDisabled() : o.render ? e = o.render.disabled : o.disabled && (e = o.disabled) : i.disabled && (e = i.disabled) } return e } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.getHeaderID = function(t) { try { if ("string" == typeof t) return t; var e = this.head_table; if (!e) return null; for (var i = t += this.defaultColCnt, o = 0, s = 0; s < e.children.length; s++) { var r = e.children[s].children; if ((o += r.length) > t) { var n = r[i]; return n ? n.id.replace(this.id + "_", "") : null } i -= r.length } } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.getHeaderIDArr = function(t) { try { if ("string" == typeof t) return t; var e = this.head_table; if (!e) return null; for (var i = t += this.defaultColCnt, o = 0, s = [], r = 0; r < e.children.length; r++) { var n = e.children[r].children; if ((o += n.length) > t) { var l = n[i]; l && s.push(l.id.replace(this.id + "_", "")) } else i -= n.length } return s } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.getHeaderIndex = function(t) { try { if ("number" == typeof t) return t; var e = this.head_table; e || (e = this.getElementById(this.id + "_head_table")); for (var i = 0, o = 0; o < e.children.length; o++) { for (var s = e.children[o].children, r = 0; r < s.length; r++) { if (s[r].id.replace(this.id + "_", "") == t) return i + r - this.defaultColCnt } i += s.length } } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.getHeaderRowIndex = function(t) { for (var e = 0; e < this.htmlInfo.head.rowArr.length; e++)for (var i = 0; i < this.htmlInfo.head.rowArr[e].length; i++)if (this.htmlInfo.head.rowArr[e][i].id === t) return e }, w.prototype.getHeaderColIndex = function(t) { for (var e = 0; e < this.htmlInfo.head.rowArr.length; e++)for (var i = 0; i < this.htmlInfo.head.rowArr[e].length; i++)if (this.htmlInfo.head.rowArr[e][i].id === t) return this.htmlInfo.head.rowArr[e][i].colIndex }, w.prototype.getHeaderColID = function(t, e) { try { void 0 !== e && null != e || (e = {}); for (var i = "", o = this.struct.head.rowArr, s = !0 === e.firstRow ? 1 : o.length, r = 0; r < s; r++) { for (var n = o[r], l = 0; l < n.length; l++)if (n[l].colIndex === t) { i = n[l].id; break } if (i) break } return i } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.setHeaderStyle = function(t, e, i) { try { var o, s = r.D.getDataPrefix("header_id"), n = this.getElementById(this.id + "_head_table").getElementsByTagName("th"); if ("$rownum" == t.wq_trim().toLowerCase()) t = "_headerRowNumber"; else if ("$rowstatus" == t.wq_trim().toLowerCase()) t = "_headerRowStatus"; else if ("number" == typeof t) { t = (o = n[t + this.defaultColCnt]).getAttribute(s) } for (var l = 0; l < n.length; l++)(o = n[l]).getAttribute(s) == t && WebSquare.style.setStyle(o, e, i) } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.setHeaderClass = function(t, e) { try { var i, o = r.D.getDataPrefix("header_id"), s = this.getElementById(this.id + "_head_table").getElementsByTagName("th"); if ("$rownum" == t.wq_trim().toLowerCase()) t = "_headerRowNumber"; else if ("$rowstatus" == t.wq_trim().toLowerCase()) t = "_headerRowStatus"; else if ("number" == typeof t) { t = (i = s[t + this.defaultColCnt]).getAttribute(o) } for (var n = 0; n < s.length; n++)(i = s[n]).getAttribute(o) == t && (this.addClass(i, e), this.headerCellClassObj[t] = e) } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.getHeaderClass = function(t) {
								try {
									var e = r.D.getDataPrefix("header_id"), i = this.getElementById(this.id + "_head_table").getElementsByTagName("th"); if ("$rownum" == t.wq_trim().toLowerCase()) t = "_headerRowNumber"; else if ("$rowstatus" == t.wq_trim().toLowerCase()) t = "_headerRowStatus"; else if ("number" == typeof t) {
										t = i[t + this.defaultColCnt].getAttribute(e)
									} for (var o = 0; o < i.length; o++)if (i[o].getAttribute(e) == t) return this.headerCellClassObj[t]
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, w.prototype.removeHeaderClass = function(t, e) { try { var i, o = r.D.getDataPrefix("header_id"), s = this.getElementById(this.id + "_head_table").getElementsByTagName("th"); if ("$rownum" == t.wq_trim().toLowerCase()) t = "_headerRowNumber"; else if ("$rowstatus" == t.wq_trim().toLowerCase()) t = "_headerRowStatus"; else if ("number" == typeof t) { t = (i = s[t + this.defaultColCnt]).getAttribute(o) } for (var n = 0; n < s.length; n++)(i = s[n]).getAttribute(o) == t && (this.removeClass(i, e), delete this.headerCellClassObj[t]) } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.drawHeader = function(t, e) { try { if (!this.head_table) return; null == this.headerDataObj && this.initHeaderDataObj(); var i = this.head_table.getElementsByTagName("th"); this.headerTempSum = []; var o = r.D.getDataPrefix("header_id"); if (t) { t = this.getColumnID(t); for (var s = 0; s < i.length; s++) { if (d = (h = i[s]).getAttribute(o)) if (p = this.headerDataObj[d]) if ("expression" == p.inputType) { var n = p.expression.match(/headercol(sum|avg|max|min)\s*\([^\)]*/g); if (n) for (var l = 0; l < n.length; l++)n[l].split("(")[1].wq_replaceAll("'", "").wq_replaceAll('"', "").wq_trim() == t && (p.value = new Function("_this", "return " + p.expression)(this), isNaN(p.value) && "NaN" != p.NaNFormat && (p.value = p.NaNFormat), h.innerHTML = this.dataTagOpen + p.formatter.format(p.value) + this.dataTagClose) } else "" === p.displayFormat || "number" != p.dataType || "text" != p.inputType && "textarea" != p.inputType && "button" != p.inputType && "textImage" != p.inputType || (h.innerHTML = this.dataTagOpen + p.formatter.format(p.value) + this.dataTagClose) } } else for (s = 0; s < i.length; s++) { var h, d, p; if (d = (h = i[s]).getAttribute(o)) if (p = this.headerDataObj[d]) if ("expression" == p.inputType) { try { p.value = new Function("_this", "return " + p.expression)(this), isNaN(p.value) && "NaN" != p.NaNFormat && (p.value = p.NaNFormat) } catch (t) { } h.innerHTML = this.dataTagOpen + p.formatter.format(p.value) + this.dataTagClose } else "" === p.displayFormat || "number" != p.dataType || "text" != p.inputType && "textarea" != p.inputType && "button" != p.inputType && "textImage" != p.inputType || (h.innerHTML = this.dataTagOpen + p.formatter.format(p.value) + this.dataTagClose) } !e || !e.sortIcon || this.headerSortStatusArr && 0 !== this.headerSortStatusArr.length || this.clearHeaderSort() } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.initHeaderDataObj = function() { try { var t = this.head_table.getElementsByTagName("th"); this.headerDataObj = {}; for (var e = r.D.getDataPrefix("header_id"), i = r.D.getDataPrefix("expression"), o = r.D.getDataPrefix("value"), n = r.D.getDataPrefix("localeRef"), l = r.D.getDataPrefix("inputType"), h = r.D.getDataPrefix("dataType"), d = r.D.getDataPrefix("displayFormat"), p = r.D.getDataPrefix("displayFormatter"), u = r.D.getDataPrefix("NaNFormat"), c = 0; c < t.length; c++) { var g = t[c], f = {}; f.id = g.getAttribute(e); var m = g.getAttribute(i) || ""; if ("" != m && (m = (m = (m = (m = m.replace(/[sS][uU][mM][\s]*[(]/g, "_this.headercolsum( ")).replace(/[aA][vV][gG][\s]*[(]/g, "_this.headercolavg( ")).replace(/[mM][aA][xX][\s]*[(]/g, "_this.headercolmax( ")).replace(/[mM][iI][nN][\s]*[(]/g, "_this.headercolmin( ")), f.value = g.getAttribute(o) || "", this.options.useLocale) { var y = g.getAttribute(n); if (y) { var b = this.getLocaleValue(y); b && (f.value = b) } } f.inputType = g.getAttribute(l), f.dataType = g.getAttribute(h) || "text", f.expression = m, f.displayFormat = g.getAttribute(d) || "", f.displayFormatter = g.getAttribute(p) || "", f.formatter = WebSquare.format.createFormatter(f.dataType, f.displayFormat, f.displayFormatter, null, null, null, this.scope_id, this.id), f.NaNFormat = g.getAttribute(u) || s.v.getConfiguration("/WebSquare/" + this.options.pluginName + "/column[@inputType='expression']/NaNFormat/@value") || "NaN", "$blank" == f.NaNFormat && (f.NaNFormat = ""), this.headerDataObj[f.id] = f } } catch (t) { a.w.printStackTrace(t, null, this) } }, w.prototype.headercolsum = function(t) {
								if (this.headerTempSum || (this.headerTempSum = []), this.headerTempSum[t] || (this.headerTempSum[t] = {}), void 0 === this.headerTempSum[t].sum) {
									var e = ""
									; if (this.groupbyStatus.grouped); else { var i = this.getColumnAllDataArray(t); e = r.D.sum(i) } this.headerTempSum[t].sum = e
								} return r.D.setPrecision(this.headerTempSum[t].sum)
							}, w.prototype.headercolavg = function(t) { var e = this.getColumnAllDataArray(t); this.headerTempSum || (this.headerTempSum = []), this.headerTempSum[t] || (this.headerTempSum[t] = {}); var i = ""; if (this.groupbyStatus.grouped) return i; if (void 0 === this.headerTempSum[t].sum) { if (e.length > 0) { for (var o = 0; o < e.length; o++)"" == e[o].replace(/^\s+|\s+$/g, "") && (e[o] = "0"); i = r.D.sum(e) } this.headerTempSum[t].sum = i } return "" == this.headerTempSum[t].sum ? "" : this.headerTempSum[t].sum / e.length }, w.prototype.headercolmax = function(t) { if (this.headerTempSum || (this.headerTempSum = []), this.headerTempSum[t] || (this.headerTempSum[t] = {}), void 0 === this.headerTempSum[t].max) { var e = null; if (this.groupbyStatus.grouped); else { for (var i = this.getColumnAllDataArray(t), o = 0; o < i.length; o++) { var s = parseFloat(i[o]); isNaN(s) || (null == e || e < s) && (e = s) } e = null == e ? "" : e, e = r.D.setPrecision(e) } this.headerTempSum[t].max = e } return this.headerTempSum[t].max }, w.prototype.headercolmin = function(t) { if (this.headerTempSum || (this.headerTempSum = []), this.headerTempSum[t] || (this.headerTempSum[t] = {}), void 0 === this.headerTempSum[t].min) { var e = null; if (this.groupbyStatus.grouped); else { for (var i = this.getColumnAllDataArray(t), o = 0; o < i.length; o++) { var s = parseFloat(i[o]); isNaN(s) || (null == e || e > s) && (e = s) } e = null == e ? "" : e, e = r.D.setPrecision(e) } this.headerTempSum[t].min = e } return this.headerTempSum[t].min }, w.prototype._getMatchedHeaderId = function(t) { try { return this.bodyToHeaderRelation[t] } catch (t) { a.w.printStackTrace(t, null, this) } }; var v = function(t, e) { try { this.options = { id: "", value: "", inputType: "text", useFilter: !1, textAlign: "" }, this.mainGrid = e, this.mainGridId = "G_" + this.mainGrid.id + "__", t && this.setOptions(t), this.id = this.options.id } catch (t) { a.w.printStackTrace(t, null, this) } }; w.prototype._setHeaderInfo = function(t, e) { this.headerInfoHash2[t] = e }, w.prototype.setCheckboxHeader = function(t) { try { "function" == typeof this.cellInfoHash[t].checkHeader && this.cellInfoHash[t].checkHeader() } catch (t) { a.w.printStackTrace(t, null, this) } }, v.prototype.setOptions = function(t) { this.options.useFilter = r.D.getBoolean(s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + "/header/column/useFilter/@value")), this.options.hideCustomFilter = r.D.getBoolean(s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + "/header/column/hideCustomFilter/@value")); var e = []; for (var i in this.options) e[i.toLowerCase()] = i; var o = this.mainGrid.headerConfigOptions[t.getAttribute("id")] || {}; for (var i in o) this.options[i] = o[i]; var a = WebSquare.Parser.parseAttribute(t); for (var n in a) { var l = a[n]; "class" == n ? this.options.className = l : "" != String(l).wq_trim() && (e[n] && (n = e[n]), "boolean" == typeof this.options[n] ? l = r.D.getBoolean(l) : "number" == typeof this.options[n] && (l = r.D.getNumber(l)), this.options[n] = l) } }, w.prototype._useCheckboxLabel = function(t) { try { var e = r.D.getDataPrefix("inputType"), i = r.D.getDataPrefix("checkboxLabel"), o = r.D.getDataPrefix("checkboxlabel"), s = this.getHeaderLayer(t); return "checkbox" === s.getAttribute(e) && (s.getAttribute(i) || s.getAttribute(o)) } catch (t) { a.w.printStackTrace(t, null, this) } }; var C = function() { }; C.prototype.getLastFocusedCell = function() { if (this.focusedCell.length > 0) return this.focusedCell[this.focusedCell.length - 1]; var t = { focusedRowIndex: -1, focusedColIndex: null }; return this.options.groupbyDisplayRowIndex && (t.groupbyDisplayRowIndex = -1), t }, C.prototype.getFocusedRowIndex = function() { return this._getFocusedRowIndex(this.options.groupbyDisplayRowIndex) }, C.prototype._getFocusedRowIndex = function(t) { return this.getLastFocusedCell()[!0 === t && this.options.groupbyDisplayRowIndex ? "groupbyDisplayRowIndex" : "focusedRowIndex"] }, C.prototype.getFocusedRealRowIndex = function() { return this.getLastFocusedCell().focusedRealRowIndex }, C.prototype.getAllFocusedIndex = function() {
								for (var t = this.focusedCell, e = [], i = this.options.groupbyDisplayRowIndex ? "groupbyDisplayRowIndex" : "focusedRowIndex", o = 0; o < t.length; o++) {
									var s = {}; s.col = t[o].focusedColIndex, s.row = t[o][i], e.push(s)
								} return e
							}, C.prototype.getAllFocusedRowIndex = function() { for (var t = [], e = {}, i = this.options.groupbyDisplayRowIndex ? "groupbyDisplayRowIndex" : "focusedRowIndex", o = 0; o < this.focusedCell.length; o++) { e[this.focusedCell[o][i]] = !0 } for (var s in e) t.push(parseInt(s, 10)); return t }, C.prototype.getFocusedColumnIndex = function() { return this.getLastFocusedCell().focusedColIndex }, C.prototype.getFocusedColumnID = function() { return this.getColumnID(this.getFocusedColumnIndex()) }, C.prototype.getFocusedRowStatus = function() { var t = this._getFocusedRowIndex(!0); return -1 == t ? null : this.dataList.getRowStatus(t) }, C.prototype.setFocusedCell2 = function(t, e, i, o) { try { o = o || {}; i = r.D.getBoolean(i), e = this.getColumnIndex(e); var s = !1; try { s = this.lastEvent && void 0 !== this.lastEvent.type && "unknown" != typeof this.lastEvent.type && ("focus" == this.lastEvent.type || "focusin" == this.lastEvent.type) } catch (t) { s = !1 } var n = this.getLastFocusedCell(), l = i && n.focusedColIndex == e; if ((this.___getEditReadOnly(t, e) || this._getEditDisabled(t, e)) && (l = !1), this.editedCell && !this.editedCell.handleEndEdit(null, l)) return !1; if (!s && "native" !== this.options.drawType) { var h = this._getVisibleLastIndex(this.lastIndex + 1), d = this.getDataLength(), p = this.rowIndex + this._getVisibleTrRowIndex(this.lastIndex, this.rowIndex); !0 === this.hiddenRowObj.init && this.rowIndex === d - h && (p = d - this._getVisibleLastIndex(1)); var u = this.rowIndex, c = this.hiddenCellObj.length > 0; if (c && t === p && (p = Math.max(p - 1, 0)), t < u || t > p) { var g = t < u ? t - u : t - p; if (t > p && this.hasSubtotal) { for (var f in this.rollbackCommitFlag = !1, this.subtotalTableList) { if (p < d - 1) this.dataList._getCellData(p, f) != this.dataList._getCellData(p + 1, f) && g++ } this.rollbackCommitFlag = !0 } var m = this.rowIndex + g; m = (m = m < 0 ? 0 : m) > d - h ? d - h : m, c && !isNaN(this.lastTopRowIndex) && null != this.lastTopRowIndex && (m = Math.min(m, this.lastTopRowIndex)), m !== this.rowIndex && (this.scrollEvent = !1, this.checkScrollEnd = !0, m = Math.max(0, m), isNaN(this.lastTopRowIndex) || null == this.lastTopRowIndex || (m = Math.min(m, this.lastTopRowIndex)), this.drawData(m, 0, "keymove", l), !0 === this.hiddenRowObj.init || c || (this.lastIndex = this.getLastIndex(this.lastDisplayedRow))) } } var y = t - (this.rowIndex > 0 ? this.rowIndex : 0), b = this.data_td_list[e + y * this.oneRowDataLength]; return !!b && ("rollback" == this.__setFocusedCell({ ctrl: !1 }, b, { editMode: i, dont_hide: l, dont_fixScroll: !0, tabDirection: o.tabDirection }) && this._setFocusedCell(n.focusedRowIndex, n.focusedColIndex, !0, { tabDirection: o.tabDirection }), !0) } catch (t) { a.w.printStackTrace(t, null, this) } }, C.prototype.setFocusedCell = function(t, e, i, o) { try { (o = o || {}).groupbyDisplayRowIndex = this.options.groupbyDisplayRowIndex; var s = !(!this.isDrillDown || !this.options.drilldownRealRowIndexAll), r = t; if (s && (r = this.getDisplayRowIndex(t)), !isNaN(r)) return this._setFocusedCell(r, e, i, o) } catch (t) { a.w.printStackTrace(t, null, this) } }, C.prototype._setFocusedCell = function(t, e, i, o) {
								try {
									if (o = o || {}, "none" == this.options.focusMode) return; if (!0 === o.groupbyDisplayRowIndex && (t = this._getGroupbyGroupedRowIndex(t, !0)), 0 == arguments.length || 1 == arguments.length) { i = 0 != arguments.length && arguments[0]; var s = this.colIndexInfo.body.colInfo.colIndexMatch; if (this.focusedCell.length > 0) t = this.focusedCell[this.focusedCell.length - 1].focusedRowIndex, e = this.focusedCell[this.focusedCell.length - 1].focusedColIndex; else if (this.lastFocusedCell && null != this.lastFocusedCell.focusedColIndex && this.lastFocusedCell.focusedRowIndex >= 0) t = this.lastFocusedCell.focusedRowIndex, e = this.lastFocusedCell.focusedColIndex; else { var n = this.getLastFocusedCell(); t = n.focusedRowIndex; if (null == (e = n.focusedColIndex) || -1 == t) return this.focusedCell = [{ focusedRowIndex: 0, focusedColIndex: s.length - this.defaultColCnt - 1 }], this.moveHorizontal(null, "home"), void (i && this._setFocusedCell(!0)) } } var l = this.getDataLength(), h = this.getDataLength() - this._getVisibleLastIndex(1); if (e = this.getColumnIndex(e), t < 0 || t > h || e < 0 || e >= this.oneRowDataLength) return; var d = !1; try {
										d = this.lastEvent && void 0 !== this.lastEvent.type && "unknown" != typeof this.lastEvent.type && ("focus" == this.lastEvent.type || "focusin" == this.lastEvent.type)
									} catch (t) { d = !1 } if (i = r.D.getBoolean(i), this.delayedDraw({ rowIndex: t })) return this.focusedCell = [{ focusedRowIndex: t, focusedColIndex: e }], this._linkedDataList ? this._linkedDataList.setRowPosition(t) : this._dataList.setRowPosition(t), void this._dataList.setColumnPosition(this.getColumnID(e)); var p = this.getElementById(this.id + "_scrollY_div"); "native" !== this.options.drawType && p && 0 == p.scrollTop && this.rowIndex > 0 && (p.scrollTop = this.lastScrollYTop); var u = t - (this.rowIndex > 0 ? this.rowIndex : 0); if (!d && "native" !== this.options.drawType) if (u < 0) this.scrollEvent = !1, p.scrollTop = this.oneRowScrollHeight * this._getScrollRowIndex(t), this.drawData(t, 0), u = 0; else if (this.options.showLastRow && u - this.lastIndex == 1 && "" === this.options.visibleRowNum); else if (u > this._getVisibleTrRowIndex(this.lastIndex, this.rowIndex)) { var c = this._getVisibleLastIndex(this.lastIndex + 1); this.hiddenCellObj.length > 0 && !isNaN(this.lastTopRowIndex) && null != this.lastTopRowIndex && (c = l - this.lastTopRowIndex); var g = t + c > l ? l - c : t; this.hiddenCellObj.length > 0 && (g = Math.max(0, g)), g !== this.rowIndex && (this.scrollEvent = !1, this.checkScrollEnd = !o.isSort || "string" != typeof this.options.filterFocusMode || "followfocus" !== this.options.filterFocusMode.toLowerCase(), p.scrollTop = this.oneRowScrollHeight * this._getScrollRowIndex(g), g > this.rowIndex + c - 1 && (this.adjustDraw_keepTop = !0), this.drawData(g, 0), u = t - this.rowIndex) } var f = this.data_td_list[e + u * this.oneRowDataLength]; if (f) { for (var m = 5; "native" !== this.options.drawType && this.hiddenCellObj.length > 0 && 0 === f.offsetHeight && m > 0;) { this.lastTopRowIndex++; var y = this.getElementById(this.id + "_size_y"), b = (p = this.getElementById(this.id + "_scrollY_div"), y.offsetHeight); b < 1e6 && (b = parseInt(y.style.height, 10)), y.style.height = p.offsetHeight + this.oneRowScrollHeight * this.lastTopRowIndex + "px", this.drawData(this.lastTopRowIndex, 0), u--, f = this.data_td_list[e + u * this.oneRowDataLength], m-- } o.editMode = i, this.__setFocusedCell({ ctrl: !1 }, f, o) }
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, C.prototype.removeFocusedCell = function() { try { this.lastFocusedCell = this.getLastFocusedCell(), this.applyFocusedCellOut(), this.focusedCell = [], this._dataList.setRowPosition(null) } catch (t) { a.w.printStackTrace(t, null, this) } }, C.prototype.applyFocusedCell = function(t, e) { if (e || (this.applyFocusedCellOut(), this.focusedCell = []), null != t) { this.applyFocusedCellIn(t); var i = {}; i.focusedTd = t, this.focusedCell.push(i) } }, C.prototype.__setFocusedCell = function(t, e, i) {
								i = i || {}; var o = t.ctrlKey || i.ctrled, s = t.shiftKey || i.shifted, a = e.className; if (this.options.focusDefaultColumn) { if (a.indexOf("_groupby") >= 0 || a.indexOf("Subtotal") >= 0) return null != this.editedCell && this.editedCell.handleEndEdit(), !1 } else if (a.indexOf("_rowNum") >= 0 || a.indexOf("_rowStatus") >= 0 || a.indexOf("_groupby") >= 0 || a.indexOf("Subtotal") >= 0) return null != this.editedCell && this.editedCell.handleEndEdit(), !1; var n = r.D.getDataPrefix("tdIndex"), l = r.D.getDataPrefix("colIndex"), h = parseInt(e.getAttribute(n)), p = parseInt(h / this.realRowDataLength), u = parseInt(e.getAttribute(l)), c = p + this.rowIndex, g = this._getGroupbyDisplayRowIndex(c), f = c; this.isDrillDown && this._dataList.options.depthColumn && (f = this.getRealRowIndex(c)); var m, y = h % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength), b = this.getColumnID(y), w = !0, v = this.getLastFocusedCell(); if (this.focusedCell.length > 0 && v.focusedTd == e && (w = !1), w && this.editedCell && !this.editedCell.handleEndEdit(t, !!i.dont_hide, { focuseChanged: w })) return !1; m = this._linkedDataList ? this._linkedDataList.setRowPosition(g) : this.groupbyStatus.grouped && this.options.groupbyDisplayRowIndex ? this._dataList.setRowPosition(g) : this._dataList.setRowPosition(f); var C = this._dataList.setColumnPosition(b); if (!1 === m || !1 === C) return !1; var I = this._getFocusedRowIndex(), _ = this.getFocusedColumnIndex(), x = !(r.D.getBoolean(this.options.useCtrlKey) && o || r.D.getBoolean(this.options.useShiftKey) && s), S = !1
									; if (x && r.D.getBoolean(i.allowContextMenuMultiCell) && (x = !1, S = !0, this.focusedCell)) { for (var D = !1, R = 0; R < this.focusedCell.length; R++)if (this.focusedCell[R].focusedTd == e) { D = !0; break } D || (x = !0, S = !1) } if (x && (this.applyFocusedCellOut(), this.focusedCell = []), i.tabDirection || (this.focusedCellLinkIndex = -1, this.focusedCellLinkLength = 0), this.focusedCell.length > 0 && r.D.getBoolean(this.options.useShiftKey) && s) { var L, T = (L = !0 === this.options.ctrlShiftKey ? this.focusedCell[this.focusedCell.length - 1] : this.focusedCell[0]).focusedRowIndex, k = L.focusedColIndex; this._applyFocusedMultiCell(T, k, c, y, i.ignoreFocusMode), i.dont_fixScroll || (u >= this.getFixedColumnLastIndex() && this.fixScrollLeftDirection(), this.fixScrollRightDirection()), this.options.lazyDrawHiddenColumn && this.hideInvisibleTds() } else if (!S) { var A; if (this.getCellInfo(e).options.blockSelect) return; var F = { focusedTd: e, focusedRealRowIndex: f, focusedRowIndex: A = this.rowIndex > 0 && this.options.fixedRow > 0 && this.options.fixedRow > c - this.rowIndex || this.options.lastFixedRow > 0 && c - this.rowIndex > this.lastIndex - this.options.lastFixedRow ? c - this.rowIndex : c, focusedColIndex: y }; this.options.groupbyDisplayRowIndex && (F.groupbyDisplayRowIndex = this._getGroupbyDisplayRowIndex(A)), this.focusedCell.push(F), i.dont_fixScroll || (u >= this.getFixedColumnLastIndex() && this.fixScrollLeftDirection(), this.fixScrollRightDirection()), this.options.lazyDrawHiddenColumn && this.hideInvisibleTds(); var E = "native" !== this.options.drawType && !!i.editMode; if (this.applyFocusedCellIn(e, E, i.tabDirection, i.ignoreFocusMode), "linear" === this.options.focusFlow && !0 === i.editMode && (this.focusedByApi = !1), v = this.getLastFocusedCell(), i.ignoreFocusMode || "cell" == this.options.focusMode) { for (R = this.focusedCell.length - 2; R >= 0; R--)if (this.focusedCell[R].focusedTd == v.focusedTd) { this._applyFocusedCellOut(this.focusedCell[R]), this.focusedCell.pop(), this.focusedCell.splice(R, 1); break } } else if ("both" == this.options.focusMode) { for (R = this.focusedCell.length - 2; R >= 0; R--)if (this.focusedCell[R].focusedTd == v.focusedTd) { this._applyFocusedCellOut(this.focusedCell[R]), this.focusedCell.pop(), this.focusedCell.splice(R, 1), this.changeFocusedCellPosition(this.rowIndex); break } } else if ("row" == this.options.focusMode) { var M = r.D.getDataPrefix("trIndex"), O = v.focusedTd ? v.focusedTd.parentNode : null; for (R = this.focusedCell.length - 2; R >= 0; R--) { var N = this.focusedCell[R]; if (null != N.focusedTd) { var B = N.focusedTd.parentNode; for (p = parseInt(B.getAttribute(M)); p > 0;)p--, B = r.D.prev(B); do { if (B == O) { this._applyFocusedCellOut(this.focusedCell[R]), this.focusedCell.pop(), this.focusedCell.splice(R, 1), this.changeFocusedCellPosition(this.rowIndex, !0); break } if (!(B = r.D.next(B))) break } while ("0" != B.getAttribute(M)) } } } } var G = this.getCellInfo(y); if ("custom" == G.options.inputType && (G = G.cellManagerHashByRowIndex[c]), (I = this._getGroupbyDisplayRowIndex(I)) == (c = this._getGroupbyDisplayRowIndex(c)) && _ == y || d.B.fireEvent(this, "oncellindexchange", c, y, I, _), I != c && d.B.fireEvent(this, "onrowindexchange", c, I), _ != y && d.B.fireEvent(this, "oncolumnindexchange", y, _), i.editMode) if ("native" === this.options.drawType) { var H = this.uuid, W = e.id, V = e.parentNode, q = this.id + "_dataLayer", j = document.getElementById(q), P = this.head_table.offsetHeight, z = V.offsetHeight * this.oneRowLength, U = V.offsetTop - j.offsetHeight + z + 2; r.D.setTimeout((function() { var t, e = document.getElementById(q); e.scrollTop < U ? e.scrollTop = U : e.scrollTop > (t = U + e.offsetHeight - P - z) && (e.scrollTop = Math.max(t, 0)), r.D.setTimeout((function() { var t = WebSquare.idCache[H], e = document.getElementById(W); t.setEditMode(e) }), { key: this.id + "__setFocusedCell_after", delay: 50 }) }), { key: this.id + "__setFocusedCell", delay: 50 }) } else this.setEditMode(e)
							}, C.prototype.applyFocusedCellOut = function() { if (this.focusedCell.length > 0) for (var t = 0; t < this.focusedCell.length; t++) { var e = this.focusedCell[t]; this._applyFocusedCellOut(e) } }, C.prototype._applyFocusedCellOut = function(t) {
								if ("row" == this.options.focusMode || "both" == this.options.focusMode) {
									if (null == (o = t.focusedTd) && this.options.showLastRow) {
										var e = t.focusedRowIndex, i = t.focusedColIndex
										; o = this.data_td_list[i + e * this.oneRowDataLength]
									} null != o && this.removeFocusRowStyle(o)
								} if ("cell" == this.options.focusMode || "both" == this.options.focusMode) { var o; if (null == (o = t.focusedTd) && this.options.showLastRow) { e = t.focusedRowIndex, i = t.focusedColIndex; o = this.data_td_list[i + e * this.oneRowDataLength] } null != o && ("linear" != this.options.focusFlow && o.setAttribute("tabIndex", -1), this.removeClass(o, "focusedTd"), (!this.options.focusDefaultColumn || t.focusedColIndex >= 0) && (this.options.fixedRow > 0 && t.focusedRowIndex - this.rowIndex >= 0 && this.options.fixedRow > t.focusedRowIndex - this.rowIndex || this.options.lastFixedRow > 0 && t.focusedRowIndex - this.rowIndex > this.lastIndex - this.options.lastFixedRow ? this.applyCellStyleOptions(t.focusedRowIndex - this.rowIndex, t.focusedColIndex, !0) : this.applyCellStyleOptions(t.focusedRowIndex, t.focusedColIndex, !0)), this.options.rowMouseOver && this.addRowOverStyle(this.overElem)) }
							}, C.prototype.removeFocusRowStyle = function(t) { if (null != t) { for (var e = r.D.getDataPrefix("trIndex"), i = r.D.getDataPrefix("tdIndex"), o = r.D.getDataPrefix("style_bak"), s = t.parentNode, a = parseInt(s.getAttribute(e)); a > 0;)a--, s = r.D.prev(s); for (var n = r.D.first(s), l = parseInt(n.getAttribute(i)), h = (a = parseInt(l / this.realRowDataLength), 0); h < this.realRowDataLength; h++) { var d = h; h >= this.defaultColCnt && (d = Math.floor((h - this.defaultColCnt) / this.columnOrder.length) * this.columnOrder.length + this.columnOrder[(h - this.defaultColCnt) % this.columnOrder.length] + this.defaultColCnt); var p = a * this.realRowDataLength + d, u = this.all_data_td_list[p]; if (this.removeClass(u, "focusedTr"), h < this.defaultColCnt) { var c = u.className; c.indexOf(this.options.bodyTdClass + "_rowNumber") >= 0 ? "" == this.options.rowNumBackgroundColor && (u.style.backgroundColor = "", u.removeAttribute(o)) : c.indexOf(this.options.bodyTdClass + "_rowStatus") >= 0 && (u.style.backgroundColor = "", u.removeAttribute(o)) } else { var g = parseInt(u.getAttribute(i)), f = a + this.rowIndex, m = g % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength); this.applyCellStyleOptions(f, m, !0) } } } }, C.prototype.applyFocusedCellIn = function(t, e, i, o) {
								if ("none" != this.options.focusMode) {
									var s = r.D.getDataPrefix("col_id"), a = r.D.getDataPrefix("tdIndex"), n = this.getCellInfo(t.getAttribute(s)), l = n.options.inputType || "text", h = !1; if (this.options.useTextMultiLink && this.options.senseReader && "user" === l && n.options.customFormatter && (h = !0), this.focusedByApi = !0, n.options.embeddedInput && !1 === h) if (e) { var d = this.getElemRowIndex(t); if ("text" != l && "link" != l || !this._getEditDisabled(d, n.id) && !this.__getEditReadOnly(t, d)) this.getInput(n, t).focus(); else t.focus() } else { if (i) this.getInput(n, t).focus() } else {
										var p = !1; try { var u = this.focusedCell[this.focusedCell.length - 1].focusedRealRowIndex - this.rowIndex; (this.rowIndex > 0 && this.options.fixedRow > 0 && u >= 0 && this.options.fixedRow > u || this.options.lastFixedRow > 0 && u - this.rowIndex > this.lastIndex - this.options.lastFixedRow) && (p = !0) } catch (t) { } if (1 == this.options.senseReader && "all" != this.options.visibleRowNum || this.___getEditReadOnly(u, t.getAttribute(s)) && !0 === this.options.readOnlyTabIgnore || t.setAttribute("tabIndex", 0), "custom" == l && this.options.senseReader) { d = this.getElemRowIndex(t); var c = n.cellManagerHashByRowIndex[d]; l = c ? c.options.inputType : "text" } if (e && ("text" == l || "secret" == l || "textarea" == l || "textImage" == l || "calendar" == l) || p); else if ("button" == l && this.options.senseReader) { var g = t.getElementsByTagName("button"); (g = g[0]).focus() } else if ("link" == l && this.options.senseReader) { (y = (y = t.getElementsByTagName("a"))[0]).focus() } else if ("checkbox" == l && this.options.senseReader) { t.getElementsByTagName("input")[0].focus() } else if ("user" == l && this.options.senseReader) {
											var f; if (0 == (y = t.getElementsByTagName("a")).length && (y = t.getElementsByTagName("input")), -1 != this.focusedCellLinkIndex) if ("right" == i) { for (var m = 0; m < y.length; m++)document.activeElement == y[m] && (this.focusedCellLinkIndex = m); f = this.focusedCellLinkIndex + 1 } else f = this.focusedCellLinkIndex - 1; else {
												if ("right" == i) f = 0; else if (null == i) {
													if (f = 0,
														document.activeElement) for (m = 0; m < y.length; m++)document.activeElement == y[m] && (f = m)
												} else f = y.length - 1; this.focusedCellLinkLength = y.length
											} y = y[f], this.focusedCellLinkIndex = f, y ? i && y.focus() : this._getEditDisabled(d, n.id) || this.__getEditReadOnly(t, d) ? t.blur() : t.focus()
										} else if ("select" != l || 1 != this.options.senseReader || "ul" != n.options.tableRender || this.isVirtualCursor()) r.D.isIE(8) ? "none" != t.parentElement.style.display && t.focus() : t.focus(); else { var y; (y = (y = t.getElementsByTagName("a"))[0]).focus() }
									} var b = !1; try { b = this.lastEvent && void 0 !== this.lastEvent.type && "unknown" != typeof this.lastEvent.type && ("focus" == this.lastEvent.type || "focusin" == this.lastEvent.type) } catch (t) { b = !1 } if (!b && !e && "native" !== this.options.drawType) { var w = this.getElementById(this.id + "_dataLayer"); w.scrollLeft = 0, w.scrollTop = 0 } var v = this.options.focusMode; if (o && (v = "cell"), "row" != v && "both" != v || this.setFocusRowStyle(t), "cell" == v || "both" == v) { this.addClass(t, "focusedTd"); var C = parseInt(t.getAttribute(a)), I = parseInt(C / this.realRowDataLength), _ = I + this.rowIndex; (this.rowIndex > 0 && this.options.fixedRow > 0 && this.options.fixedRow > I || this.options.lastFixedRow > 0 && I > this.lastIndex - this.options.lastFixedRow) && (_ = I); var x = C % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength); if (this.options.focusDefaultColumn && x < 0) return; this.applyCellStyleOptions(_, x, null, o) }
								}
							}, C.prototype.setFocusRowStyle = function(t) { if (null != t) { for (var e = r.D.getDataPrefix("trIndex"), i = r.D.getDataPrefix("tdIndex"), o = r.D.getDataPrefix("style_bak"), s = t.parentNode, a = parseInt(s.getAttribute(e)); a > 0;)a--, s = r.D.prev(s); for (var n = r.D.first(s), l = parseInt(n.getAttribute(i)), h = (a = parseInt(l / this.realRowDataLength), 0); h < this.realRowDataLength; h++) { var d = h; h >= this.defaultColCnt && (d = Math.floor((h - this.defaultColCnt) / this.columnOrder.length) * this.columnOrder.length + this.columnOrder[(h - this.defaultColCnt) % this.columnOrder.length] + this.defaultColCnt); var p = a * this.realRowDataLength + d, u = this.all_data_td_list[p]; if (this.addClass(u, "focusedTr"), h < this.defaultColCnt) { var c = u.className; c.indexOf(this.options.bodyTdClass + "_rowNumber") >= 0 ? "" == this.options.rowNumBackgroundColor && (u.style.backgroundColor = this.options.selectedRowColor.wq_trim(), u.removeAttribute(o)) : c.indexOf(this.options.bodyTdClass + "_rowStatus") >= 0 && (u.style.backgroundColor = this.options.selectedRowColor.wq_trim(), u.removeAttribute(o)) } else { var g = parseInt(u.getAttribute(i)), f = a + this.rowIndex, m = g % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength); this.applyCellStyleOptions(f, m) } } } }, C.prototype.outFocusedCell = function() { this.removeFocusedCell() }, C.prototype.getFocusedCellData = function() { var t = this._getFocusedRowIndex(), e = this.getFocusedColumnIndex(), i = this.getColumnID(e); return t > -1 ? this.dataList._getCellData(t, i) : null }, C.prototype.getFocusedRowData = function() { var t = this._getFocusedRowIndex(); return t > -1 ? this.dataList.getRowData(t) : null }, C.prototype.getFocusedRowXML = function() { var t = this._getFocusedRowIndex(!0); return t > -1 ? this.dataList.getRowXML(t) : null }, C.prototype.removeRowFocus = function(t) { for (var e = [], i = 0; i < this.focusedCell.length; i++)t != this.focusedCell[i].focusedRowIndex ? e.push(this.focusedCell[i]) : this._applyFocusedCellOut(this.focusedCell[i]); this.focusedCell = e }, C.prototype.setFocusedHeaderObj = function(t) { if (this.getHeaderLayer(t)) { var e = this.headerObj[t]; if (e) switch (e.headInputType) { case "checkcombobox": case "select": case "checkbox": case "input": e.focus() } } }, C.prototype.focus = function() { try { var t = this.getLastFocusedCell(), e = -1 != t.focusedRowIndex ? t.focusedRowIndex : 0, i = null != t.focusedColIndex ? t.focusedColIndex : 0; this._setFocusedCell(e, i, !1) } catch (t) { a.w.printStackTrace(t, null, this) } }, C.prototype.setFocusedMultiCell = function(t, e, i, o, s) {
								try { s = s || {}; var r = this.options.useShiftKey; this.options.useShiftKey = !0, this._setFocusedCell(Number(t), Number(e), null, { ignoreFocusMode: s.ignoreFocusMode }), this._setFocusedCell(Number(i), Number(o), !1, { shifted: !0, ignoreFocusMode: s.ignoreFocusMode }), this.options.useShiftKey = r } catch (t) {
									a.w.printStackTrace(t, null, this)
								}
							}, C.prototype.removeFocusedMultiCell = function(t, e, i, o) { try { for (var s = "focusedColIndex", r = "focusedRowIndex", n = this.focusedCell.length - 1; n >= 0; n--) { var l = this.focusedCell[n]; l[r] >= t && l[r] <= i && l[s] >= e && l[s] <= o && (this._applyFocusedCellOut(l), this.focusedCell.splice(n, 1)) } } catch (t) { a.w.printStackTrace(t, null, this) } }, C.prototype._applyFocusedMultiCell = function(t, e, i, o, s) { try { !0 !== this.options.ctrlShiftKey && (this.applyFocusedCellOut(), this.focusedCell = []); var r = this.getLocationRowCol(t, e); t = r.rowIndex, e = r.colIndex; var n = t, l = e, h = this.getLocationRowCol(i, o); i = h.rowIndex, o = h.colIndex; for (var d = i, p = o, u = t > i, c = e > o, g = this.htmlInfo.body.rowAttrArr.length, f = u ? i : t, m = u ? t : i, y = c ? o : e, b = c ? e : o, w = !0; w;) { w = !1; var v = m, C = 0; for (var I in this.cellMergeInfo) this.cellMergeInfo.hasOwnProperty(I) && C++; m - f > g && C < 1 && (v = f + g); for (var _ = y, x = f; x <= v; x++) { var S = this.getOriginalRowCol(x, y); S.colSize > 1 && _ > (S = this.getLocationRowCol(S.rowIndex, S.colIndex)).colIndex && (_ = S.colIndex, w = !0), y = _ } var D = b; for (x = f; x <= v; x++) { var R = this.getOriginalRowCol(x, b); R.colSize > 1 && D < (R = this.getLocationRowCol(R.rowIndex, R.colIndex)).colIndex + R.colSize - 1 && (D = R.colIndex + R.colSize - 1, w = !0), b = D } for (var L = f, T = y; T <= b; T++) { var k = this.getOriginalRowCol(f, T); k.rowSize > 1 && L > (k = this.getLocationRowCol(k.rowIndex, k.colIndex)).rowIndex && (L = k.rowIndex, w = !0), f = L } var A = m; for (T = y; T <= b; T++) { var F = this.getOriginalRowCol(m, T); F.rowSize > 1 && A < (F = this.getLocationRowCol(F.rowIndex, F.colIndex)).rowIndex + F.rowSize - 1 && (A = F.rowIndex + F.rowSize - 1, w = !0), m = A } } i = u ? f : m, e = c ? b : y, o = c ? y : b; for (x = t = u ? m : f; u ? x >= i : x <= i; u ? x-- : x++)for (T = e; c ? T >= o : T <= o; c ? T-- : T++) { var E = this.getOriginalRowCol(x, T), M = E.colIndex, O = E.rowIndex; if (!E.noLeftTop) { var N = this.data_td_list[M + (O - this.rowIndex) * this.oneRowDataLength]; if (O < this.rowIndex && (N = null), !(this.groupbyStatus.grouped && N && this.hasClass(N, "w2grid_groupby"))) { var B = this.getCellInfo(M), G = this._getRealColIndex("body", B.options.col_id) + this.defaultColCnt; if (!B.options.blockSelect && !this.hiddenList[G]) { var H = { focusedTd: N, focusedRowIndex: O, focusedColIndex: M }; if (this.options.groupbyDisplayRowIndex && (H.groupbyDisplayRowIndex = this._getGroupbyDisplayRowIndex(O)), x == n && T == l ? this.focusedCell.unshift(H) : this.focusedCell.push(H), null != N) { var W = !0; (B.options.embeddedInput || T == p && x == d) && (W = !1), this.applyFocusedCellIn(N, W, null, s) } ("" == B.options.inputType || "text" == B.options.inputType && !B.options.embeddedInput || "textImage" == B.options.inputType || "calendar" == B.options.inputType) && (this.getInput(B).options.editType = B.options.editType ? B.options.editType : this.options.editType) } } } } } catch (t) { a.w.printStackTrace(t, null, this) } }, C.prototype._addFocus = function(t) { try { var e = r.D.getDataPrefix("tdIndex"), i = parseInt(t.getAttribute(e)), o = parseInt(i / this.realRowDataLength) + this.rowIndex, s = o; this.isDrillDown && this._dataList.options.depthColumn && (s = this.getRealRowIndex(o)); var n, l = i % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength), h = { focusedTd: t, focusedRealRowIndex: s, focusedRowIndex: n = this.rowIndex > 0 && this.options.fixedRow > 0 && this.options.fixedRow > o - this.rowIndex || this.options.lastFixedRow > 0 && o - this.rowIndex > this.lastIndex - this.options.lastFixedRow ? o - this.rowIndex : o, focusedColIndex: l }; this.options.groupbyDisplayRowIndex && (h.groupbyDisplayRowIndex = this._getGroupbyDisplayRowIndex(n)), this.focusedCell.push(h) } catch (t) { a.w.printStackTrace(t, null, this) } }; var I = i(736), _ = function(t) { }; _.prototype.initializeFooter = function() {
								try {
									if (!this.hasFooter) return; for (var t = r.D.getDataPrefix("footer_id"), e = r.D.getDataPrefix("inputType"), i = r.D.getDataPrefix("value"), o = r.D.getDataPrefix("useLocale"), s = r.D.getDataPrefix("localeRef"), n = this.getDomList("foot_tds", "td", this.getElementById(this.id + "_foot_table")), l = 0; l < n.length; l++) {
										var h = n[l], d = h.getAttribute("id"); if (d && !h.getAttribute(t)) {
											for (var p = "", u = 0; u < this.struct.foot.rowArr.length; u++)for (var c = 0; c < this.struct.foot.rowArr[u].length; c++)if (this.struct.foot.rowArr[u][c].id == d && this.struct.foot.rowArr[u][c].class) {
												p = this.struct.foot.rowArr[u][c].class
												; break
											} if ("_headerRowNumber" !== d && "_headerRowStatus" !== d || (d += "_footer"), h.setAttribute(t, d), h.setAttribute("id", this.id + "_" + d), h.setAttribute("class", h.getAttribute("class") + " " + this.id + "_footer__column" + l + " " + p), "expression" != h.getAttribute(e)) { var g = h.getAttribute(i), f = h.getAttribute(o); if ("true" === f || this.options.useLocale && !f) { var m = h.getAttribute(s); if (m) { var y = this.getLocaleValue(m); y && (g = y) } } g = null != g ? g : "", h.innerHTML = this.dataTagOpen + g + this.dataTagClose }
										}
									}
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, _.prototype.drawFooter = function(t) { try { if (!this.hasFooter || !this.drawFooterStatus) return; null == this.footerDataObj && this.initFooterDataObj(); var e = r.D.getDataPrefix("footer_id"), i = r.D.getDataPrefix("colindex"), o = this.getElementById(this.id + "_foot_table").getElementsByTagName("td"); if (this.footerTempSum = [], t) { t = this.getColumnID(t); for (var s = 0; s < o.length; s++) { var n = (c = o[s]).getAttribute(e), l = parseInt(c.getAttribute(i)) - this.defaultColCnt; if (n) if ("expression" == (g = this.footerDataObj[n]).inputType) { var h = g.expression.match(/footercol(sum|avg|max|min|custom)\s*\([^\)]*/g); if (h) { for (var d = 0; d < h.length; d++)if (h[d].indexOf(t) >= 0) { var p = r.D.scopingFuncBody(g.expression, this.scope_id); g.value = Function("_this", p).call(this, this), isNaN(g.value) ? "NaN" != g.NaNFormat && (g.value = g.NaNFormat) : "number" === g.dataType && 0 === Number(g.value) && (g.value = 0); var u = g.value; g.customModelUnformatter && (u = g.customModelUnformatter.call(this, u)), c.innerHTML = this.dataTagOpen + g.formatter.format(u) + this.dataTagClose } } else if (t == this.getCellInfo(l).id) { try { p = r.D.scopingFuncBody(g.expression, this.scope_id); g.value = Function("_this", p).call(this, this), isNaN(g.value) && "NaN" != g.NaNFormat && (g.value = g.NaNFormat) } catch (t) { } u = g.value; g.customModelUnformatter && (u = g.customModelUnformatter.call(this, u)), c.innerHTML = this.dataTagOpen + g.formatter.format(u) + this.dataTagClose } } } } else for (s = 0; s < o.length; s++) { var c; if (n = (c = o[s]).getAttribute(e)) { var g; if ("expression" == (g = this.footerDataObj[n]).inputType) try { p = r.D.scopingFuncBody(g.expression, this.scope_id); g.value = Function("_this", p).call(this, this), isNaN(g.value) ? "NaN" != g.NaNFormat && (g.value = g.NaNFormat) : "number" === g.dataType && 0 === Number(g.value) && (g.value = 0) } catch (t) { } u = g.value; g.customModelUnformatter && (u = g.customModelUnformatter.call(this, u)), c.innerHTML = this.dataTagOpen + g.formatter.format(u) + this.dataTagClose } } } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.initFooterDataObj = function(t) {
								try {
									var e = this.getElementById(this.id + "_foot_table").getElementsByTagName("td"), i = -1, o = !1; t ? (i = this.getColumnIndex(t), o = !0) : this.footerDataObj = {}; for (var n = r.D.getDataPrefix("footer_id"), l = r.D.getDataPrefix("colindex"), h = r.D.getDataPrefix("value"), d = r.D.getDataPrefix("useLocale"), p = r.D.getDataPrefix("localeRef"), u = r.D.getDataPrefix("inputType"), c = r.D.getDataPrefix("dataType"), g = r.D.getDataPrefix("displayFormat"), f = r.D.getDataPrefix("displayFormatter"), m = r.D.getDataPrefix("NaNFormat"), y = r.D.getDataPrefix("expression"), b = 0; b < e.length; b++) {
										var w = e[b], v = w.getAttribute(n); v || (v = "f_" + Math.random().toString(), w.setAttribute(n, v)); var C = parseInt(w.getAttribute(l)) - this.defaultColCnt; if (!(i >= 0 && i !== C)) {
											var I = {}; I.id = v; var _ = w.getAttribute(y) || ""; "" != _ && (_ = (_ = (_ = (_ = (_ = (_ = _.replace(/[sS][uU][mM][\s]*[(]/g, "_this.footercolsum( ")).replace(/[aA][vV][gG][\s]*[(]/g, "_this.footercolavg( ")).replace(/[mM][aA][xX][\s]*[(]/g, "_this.footercolmax( ")).replace(/[mM][iI][nN][\s]*[(]/g, "_this.footercolmin( ")).replace(/[cC][oO][uU][nN][tT][\s]*[(]/g, "_this.footercolcnt( ")).replace(/[cC][uU][sS][tT][oO][mM][\s]*[(]/g, "_this.footercolcustom( ")), I.value = w.getAttribute(h); var x, S, D = w.getAttribute(d); if ("true" === D || this.options.useLocale && !D) { var R = w.getAttribute(p); if (R) { var L = this.getLocaleValue(R); L && (I.value = L) } } if (I.inputType = w.getAttribute(u), I.dataType = w.getAttribute(c), I.col_id = this.getColumnID(C), !I.dataType) try {
												if (I.dataType = this.getColumnOption(I.col_id, "dataType"), "true" === this.options.useCurrency) {
													var T = this.getCellInfo(I.col_id)
													; T && (x = T.options.displayFormat, S = T.options.displayFormatter, T.options.customModelUnformatter && ("function" == typeof T.options.customModelUnformatter ? I.customModelUnformatter = T.options.customModelUnformatter : I.customModelUnformatter = r.D.getGlobalFunction(T.options.customModelUnformatter, this.scope_id)))
												} else if ("expression" === I.inputType) I.col_id = new Function("_this", "return " + _.substring(_.indexOf("(") + 1, _.indexOf(")")))(this), I.dataType = this._dataList.getCellInfo(I.col_id).options.dataType || "text"; else { var k = "text", A = C; A >= 0 && (k = this._dataList.getCellInfo(A).options.dataType), I.dataType = k }
											} catch (t) { I.dataType = "text" } I.expression = _, I.displayFormat = w.getAttribute(g) || "", I.displayFormatter = w.getAttribute(f) || "", "true" !== this.options.useCurrency || I.displayFormatter || (I.displayFormat = x || w.getAttribute(g) || "", I.displayFormatter = S || ""), I.formatter = this._initFooterFormatter(I.col_id, I.dataType, I.displayFormat, I.displayFormatter, this.scope_id, this.id, o), I.NaNFormat = w.getAttribute(m) || s.v.getConfiguration("/WebSquare/" + this.options.pluginName + "/column[@inputType='expression']/NaNFormat/@value") || "NaN", "$blank" == I.NaNFormat && (I.NaNFormat = ""), this.footerDataObj[I.id] = I
										}
									}
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, _.prototype._initFooterFormatter = function(t, e, i, o, r, n, l) { try { if (t) { var h = this.getCellInfo(t), d = e || h.options.dataType, p = i; return "euro" == d ? (i || (p = this.options.euroMask || s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + d + '"]/euroMask/@value') || ""), ".", ",") : "rupee" == d ? (i || (p = this.options.rupeeMask || s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + d + '"]/rupeeMask/@value') || ""), ",", ".") : "tenge" == d ? (i || (p = this.options.tengeMask || s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + d + '"]/tengeMask/@value') || ""), " ", ",") : !l || "number" !== d && "float" !== d && "bigDecimal" !== d || (i || (p = this.options.numberMask || s.v.getConfiguration('/WebSquare/input/dataType[@valueType="' + d + '"]/numberMask/@value') || ""), ",", "."), WebSquare.format.createFormatter(e, p, o, null, null, null, r, n) } return WebSquare.format.createFormatter(e, i, o, null, null, null, r, n) } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.footercolsum = function(t) { try { if (this.footerTempSum || (this.footerTempSum = []), this.footerTempSum[t] || (this.footerTempSum[t] = {}), void 0 === this.footerTempSum[t].sum || "" === this.footerTempSum[t].sum) { var e = "", i = 5e3; if (this.groupbyStatus.grouped) e = this.groupExpression(this._dataList.filteredRowIndexArr, 0, this._dataList.filteredRowIndexArr.length - 1, "SUM('" + t + "')"); else { var o = this.getColumnAllDataArray(t), s = this.getColumnOption(t, "dataType"), n = !1; if ("bigDecimal" !== s && "euro" !== s && "tenge" !== s && "rupee" != s || (n = !0), o.length > 0 && n || "true" === this.options.useCurrency) { for (var l = WebSquare.bigDecimal("0"), h = 0; h < o.length; h++)"" == o[h].replace(/^\s+|\s+$/g, "") && (o[h] = "0"); for (var d = 0; d < o.length; d++)o[d] = WebSquare.bigDecimal(o[d]), l = l.plus(o[d]); e = l.toString() } else if (o.length > 0) if (o.length > i) { var p, u = Math.ceil(o.length / i), c = 0; e = 0; for (h = 0; h < u; h++) { for (var g = o.slice(c, i * (h + 1)), f = 0; f < g.length; f++)"" == g[f].replace(/^\s+|\s+$/g, "") && (g[f] = "0"), g[f] = g[f] - 0 + ""; p = r.D.sum(g), c = parseInt(c, 10) + parseInt(g.length, 10), e = parseFloat(e, 10) + parseFloat(p, 10) } } else e = r.D.sum(o) } this.footerTempSum[t].sum = e } return r.D.setPrecision(this.footerTempSum[t].sum) } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.footercolavg = function(t) {
								try {
									var e = this.getColumnAllDataArray(t); this.footerTempSum || (this.footerTempSum = []), this.footerTempSum[t] || (this.footerTempSum[t] = {}); var i = "", o = 5e3; if (this.groupbyStatus.grouped) return i = this.groupExpression(this._dataList.filteredRowIndexArr, 0, this._dataList.filteredRowIndexArr.length - 1, "AVG('" + t + "')"); if (void 0 === this.footerTempSum[t].sum || "" === this.footerTempSum[t].sum) {
										var s = this.getColumnOption(t, "dataType"); if (e.length > 0 && ("bigDecimal" == s || "true" === this.options.useCurrency)) {
											for (var n = WebSquare.bigDecimal("0"), l = 0; l < e.length; l++)"" == e[l].replace(/^\s+|\s+$/g, "") && (e[l] = "0"); for (var h in e) e[h] = WebSquare.bigDecimal(e[h]), n = n.plus(e[h]); return n.divide(WebSquare.bigDecimal(e.length)).toString()
										} if (e.length > 0) if (e.length > o) { var d, p = Math.ceil(e.length / o), u = 0; i = 0; for (l = 0; l < p; l++) { for (var c = e.slice(u, o * (l + 1)), g = 0; g < c.length; g++)"" == c[g].replace(/^\s+|\s+$/g, "") && (c[g] = "0"); d = r.D.sum(c), u = parseInt(u, 10) + parseInt(c.length, 10), i = parseFloat(i, 10) + parseFloat(d, 10) } } else i = r.D.sum(e); this.footerTempSum[t].sum = i
									} return "" === this.footerTempSum[t].sum ? "" : i = this.cellInfoHash[t] && "bigDecimal" == this.cellInfoHash[t].options.dataType ? WebSquare.bigDecimal(this.footerTempSum[t].sum).divide(WebSquare.bigDecimal(e.length)).toString() : this.footerTempSum[t].sum / e.length
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, _.prototype.footercolmax = function(t) { try { if (this.footerTempSum || (this.footerTempSum = []), this.footerTempSum[t] || (this.footerTempSum[t] = {}), void 0 === this.footerTempSum[t].max || "" === this.footerTempSum[t].max) { var e = null; if (this.groupbyStatus.grouped) e = this.groupExpression(this._dataList.filteredRowIndexArr, 0, this._dataList.filteredRowIndexArr.length - 1, "MAX('" + t + "')"); else { var i = this.getColumnAllDataArray(t), o = this.getColumnOption(t, "dataType"); if (i.length > 0 && ("bigDecimal" == o || "true" === this.options.useCurrency)) { for (var s, n = 0; n < i.length; n++)"" == i[n].replace(/^\s+|\s+$/g, "") && (i[n] = "0"); for (var l in i) i[l] = WebSquare.bigDecimal(i[l]), s = null == s ? i[l] : s.compare(i[l], !1); e = s.toString() } else { for (n = 0; n < i.length; n++) { var h = parseFloat(i[n]); isNaN(h) || (null == e || e < h) && (e = h) } e = null == e ? "" : e, e = r.D.setPrecision(e) } this.footerTempSum[t].max = e } } return this.footerTempSum[t].max } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.footercolmin = function(t) { try { if (this.footerTempSum || (this.footerTempSum = []), this.footerTempSum[t] || (this.footerTempSum[t] = {}), void 0 === this.footerTempSum[t].min || "" === this.footerTempSum[t].min) { var e = null; if (this.groupbyStatus.grouped) e = this.groupExpression(this._dataList.filteredRowIndexArr, 0, this._dataList.filteredRowIndexArr.length - 1, "MIN('" + t + "')"); else { var i = this.getColumnAllDataArray(t), o = this.getColumnOption(t, "dataType"); if (i.length > 0 && ("bigDecimal" == o || "true" === this.options.useCurrency)) { for (var s, n = 0; n < i.length; n++)"" == i[n].replace(/^\s+|\s+$/g, "") && (i[n] = "0"); for (var l in i) i[l] = WebSquare.bigDecimal(i[l]), s = null == s ? i[l] : s.compare(i[l], !0); e = s.toString() } else { for (n = 0; n < i.length; n++) { var h = parseFloat(i[n]); isNaN(h) || (null == e || e > h) && (e = h) } e = null == e ? "" : e, e = r.D.setPrecision(e) } this.footerTempSum[t].min = e } } return this.footerTempSum[t].min } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.footercolcnt = function(t, e) { try { e = e || {}; return (this.getColumnAllDataArray(t, e) || []).length } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.getColumnAllDataArray = function(t, e) { try { var i = [], o = this.getColumnID(t), s = this.dataList.getDeletedIndex(), n = this.dataList.getModifiedIndex(); if (null !== o) { for (var l = this.isDrillDown && r.D.getBoolean(this.options.drilldownFooterExpressionAllData) ? this.getTotalRow() : this.getDataLength(), h = 0; h < l; h++) { if (this.options.excludeDeletedRows) { for (var d = !1, u = 0; u < s.length; u++)if (s[u] === h) { d = !0; break } if (d) continue } if (this.options.excludeModifiedRows) { for (d = !1, u = 0; u < n.length; u++)if (n[u] === h) { d = !0; break } if (d) continue } var c; c = this.isDrillDown && r.D.getBoolean(this.options.drilldownFooterExpressionAllData) ? this._dataList.getCellData(h, o) : this.dataList._getCellData(h, o), void 0 === (c += "") || "" == c ? (c = "0", "object" == typeof e && !1 !== e.blank && i.push(c)) : i.push(c) } return i } p.k.printLog("[Warning] Invalid colIndex(" + t + "). [" + this.id + "] getColumnAllDataArray.") } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.getFooterData = function(t, e) {
								try {
									var i = this.getElementById(this.id + "_foot_table").getElementsByTagName("td"), o = r.D.getDataPrefix("footer_id"); if ("number" == typeof t) {
										t = i[t + this.defaultColCnt].getAttribute(o); var s = (h = this.footerDataObj[t]).value; if ("expression" == h.inputType) {
											var n = r.D.scopingFuncBody(h.expression, this.scope_id); s = Function("_this", n).call(this, this)
										} return "displayData" != e ? s : h.formatter.format(s)
									} for (var l = 0; l < i.length; l++)if (i[l].getAttribute(o) == t) { var h; s = (h = this.footerDataObj[t]).value; if ("expression" == h.inputType) { n = r.D.scopingFuncBody(h.expression, this.scope_id); s = Function("_this", n).call(this, this) } return "displayData" != e ? s : h.formatter.format(s) }
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, _.prototype.setFooterValue = function(t, e) { this.setFooterData(t, e) }, _.prototype.setFooterData = function(t, e) { try { var i, o = this.getElementById(this.id + "_foot_table").getElementsByTagName("tbody")[0].getElementsByTagName("td"), s = r.D.getDataPrefix("footer_id"); if ("number" == typeof t) t = (i = o[t + this.defaultColCnt]).getAttribute(s); for (var n = 0; n < o.length; n++)if ((i = o[n]).getAttribute(s) == t) { var l = this.footerDataObj[t]; "text" == l.inputType && (l.value = e, i.innerHTML = this.dataTagOpen + l.formatter.format(l.value) + this.dataTagClose) } } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.setFooterDisplayFormat = function(t, e) { try { var i, o = this.getElementById(this.id + "_foot_table").getElementsByTagName("td"), s = r.D.getDataPrefix("footer_id"); if ("number" == typeof t) t = (i = o[t + this.defaultColCnt]).getAttribute(s); for (var n = 0; n < o.length; n++)if ((i = o[n]).getAttribute(s) == t) { var l = this.footerDataObj[t]; l.displayFormat = e, l.formatter = WebSquare.format.createFormatter(l.dataType, l.displayFormat, l.displayFormatter, null, null, null, this.scope_id, this.id), "number" == l.dataType && (i.innerHTML = this.dataTagOpen + l.formatter.format(l.value) + this.dataTagClose) } var h = this.footerXml; if (h) for (var d = WebSquare.xml.getElementsByTagName(h, "w2:row"), p = 0; p < d.length; p++) { var u = WebSquare.xml.getElementsByTagName(d[p], "w2:column"); for (n = 0; n < u.length; n++) { var c = u[n]; if (c.getAttribute("id") == t) { c.setAttribute("displayFormat", e); break } } } } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.getFooterStyle = function(t, e) { try { var i, o = this.getElementById(this.id + "_foot_table").getElementsByTagName("td"), s = r.D.getDataPrefix("footer_id"); if ("number" == typeof t) t = (i = o[t + this.defaultColCnt]).getAttribute(s); for (var n = 0; n < o.length; n++)if ((i = o[n]).getAttribute(s) == t) return WebSquare.style.getStyle(i, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.setFooterStyle = function(t, e, i) { try { var o, s = this.getElementById(this.id + "_foot_table").getElementsByTagName("td"), n = r.D.getDataPrefix("footer_id"); if ("$rownum" == t.wq_trim().toLowerCase()) t = "_headerRowNumber_footer"; else if ("$rowstatus" == t.wq_trim().toLowerCase()) t = "_headerRowStatus_footer"; else if ("number" == typeof t) { t = (o = s[t + this.defaultColCnt]).getAttribute(n) } for (var l = 0; l < s.length; l++)(o = s[l]).getAttribute(n) == t && WebSquare.style.setStyle(o, e, i) } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.getExcelAllFooterXML = function(t) { try { if (t || (t = ","), !this.hasFooter) return "<array><![CDATA[[]]]></array>"; var e = []; e.push("<array><![CDATA["), e.push('["'), this.footerDataObj || this.initFooterDataObj(); for (var i = "", o = WebSquare.Elem.api.getElementsByTagName(this.element, "footer", s.v._XML_NAMESPACE.W2)[0].getChildNodes(), n = 0; n < o.length; n++) { var l = o[n]; if (1 == l.nodeType) for (var h = l.getChildNodes(), d = 0; d < h.length; d++) { var p = h[d]; if (1 == p.nodeType) { var u = p.getAttribute("id"), c = this.footerDataObj[u]; if ("expression" != c.inputType) i = c.value, i = c.formatter.format(i); else { var g = r.D.scopingFuncBody(c.expression, this.scope_id); i = Function("_this", g).call(this, this), i = c.formatter.format(i) } e.push(i), e.push('"' + t + '"') } } } return e[e.length - 1] = '"]', e.push("]]></array>"), e.join("") } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.getExcelAllFooterXMLDisplay = function(t) {
								try {
									if (t || (t = ","), !this.hasFooter) return "<array><![CDATA[[]]]></array>"; var e = r.D.getDataPrefix("footer_id"), i = []; i.push("<array><![CDATA["), i.push('["'); var o = this.getElementById(this.id + "_foot_table").getElementsByTagName("tbody")[0].getElementsByTagName("td"); if (this.groupbyStatus.grouped) {
										this.footerDataObj || this.initFooterDataObj(); var n = 0
											; if (this.options.rowNumVisible) { var l = (f = this.footerDataObj[o[n].getAttribute(e)]).value || ""; i.push(l), i.push('"' + t + '"'), n++ } if (this.options.rowStatusVisible) { l = (f = this.footerDataObj[o[n].getAttribute(e)]).value || ""; i.push(l), i.push('"' + t + '"') }
									} this.footerDataObj || this.initFooterDataObj(); l = ""; for (var h = WebSquare.Elem.api.getElementsByTagName(this.element, "footer", s.v._XML_NAMESPACE.W2)[0].getChildNodes(), d = 0; d < h.length; d++) { var p = h[d]; if (1 == p.nodeType) for (var u = p.getChildNodes(), c = 0; c < u.length; c++) { var g = u[c]; if (1 == g.nodeType) { var f, m = g.getAttribute("id"); if ("expression" != (f = this.footerDataObj[m]).inputType) l = f.value, l = f.formatter.format(l); else { var y = r.D.scopingFuncBody(f.expression, this.scope_id); l = Function("_this", y).call(this, this), l = f.formatter.format(l) } i.push(l), i.push('"' + t + '"') } } } return i[i.length - 1] = '"]', i.push("]]></array>"), i.join("")
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, _.prototype.getExcelAllFooterXMLRaw = function(t) { try { if (t || (t = ","), !this.hasFooter) return "<array><![CDATA[[]]]></array>"; this.footerDataObj || this.initFooterDataObj(); for (var e = [], i = "", o = WebSquare.Elem.api.getElementsByTagName(this.element, "footer", s.v._XML_NAMESPACE.W2)[0].getChildNodes(), r = 0; r < o.length; r++) { var n = o[r]; if (1 == n.nodeType) for (var l = n.getChildNodes(), h = 0; h < l.length; h++) { var d = l[h]; if (1 == d.nodeType) { var p = d.getAttribute("id"), u = this.footerDataObj[p]; i = u.value, i = u.formatter.format(i), e[e.length] = i } } } return e[0] = '<array><![CDATA[["' + e[0], e[e.length - 1] += '"]]]></array>', e.join('"' + t + '"') } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.getExpressionValue = function(t) { try { return this.hasFooter || (this.footerTempSum = []), t = (t = (t = (t = (t = (t = t.replace(/[sS][uU][mM][\s]*[(]/g, "_this.footercolsum( ")).replace(/[aA][vV][gG][\s]*[(]/g, "_this.footercolavg( ")).replace(/[mM][aA][xX][\s]*[(]/g, "_this.footercolmax( ")).replace(/[mM][iI][nN][\s]*[(]/g, "_this.footercolmin( ")).replace(/[cC][oO][uU][nN][tT][\s]*[(]/g, "_this.footercolcnt( ")).replace(/[cC][uU][sS][tT][oO][mM][\s]*[(]/g, "_this.footercolcustom( "), new Function("_this", "return " + t)(this) } catch (t) { a.w.printStackTrace(t, null, this) } }, _.prototype.footercolcustom = function(t, e) { try { var i = r.D.getGlobalFunction(t, this.scope_id), o = ""; return "function" == typeof i && (o = i(this.getColumnAllDataArray(e), this.getColumnOption(e, "dataType"))), o } catch (e) { p.k.printLog("[Warning] " + t + " is not valid function.[" + this.id + "]") } }; var x = i(6451), S = function(t) { }; S.prototype.setStartRowNumber = function(t) { this.startRowNumber = t; for (var e = 0; e <= this.lastIndex; e++)this._drawRowNumData(e, e + this.rowIndex) }, S.prototype.setNoResultMessage = function(t) { this.options.noResultMessage = t, this.displayNoResultMessage() }, S.prototype.setNoResultMessageVisible = function(t) { this.options.noResultMessageVisible = t, this.displayNoResultMessage() }, S.prototype.checkAll = function(t, e) {
								var i = !1, o = this.getCellInfo(t), s = o.id; if ("checkbox" != o.options.inputType) { if ("custom" != o.options.inputType) { var a = WebSquare.language.getMessage("Grid_warning1") || "선택하신 컬럼은 checkbox가 아닙니다."; return void $l(a) } i = !0 } var r = o.options.trueValue, n = o.options.falseValue; this.drawFooterStatus = !1; var l, h = !(!this.isDrillDown || !this._dataList.options.depthColumn), d = h ? this.getTotalRow() : this.getDataLength(), p = !1, u = !1; if (this._linkedDataList) { (u = this._linkedDataList.getBroadcast()) && this._linkedDataList.setBroadcast(!1); for (var c = 0; c < d; c++) { var g = this._linkedDataList.initialRowIndexArr[c], f = h ? g : this._dataList.getFilteredRowIndex(g); if (i) { if ("checkbox" != (y = o.cellManagerHashByRowIndex[g] ? o.cellManagerHashByRowIndex[g] : o).options.inputType) continue; r = y.options.trueValue, n = y.options.falseValue } if (l = this._dataList.getCellData(f, s), 1 == e || 1 == e || e == r) l != r && this._dataList.setCellData(f, s, r); else if (0 == e || 0 == e || e == n) l != n && this._dataList.setCellData(f, s, n); else { var m = l == r ? n : r; this._dataList.setCellData(f, s, m) } } } else {
									(p = this._dataList.getBroadcast()) && this._dataList.setBroadcast(!1); for (f = 0; f < d; f++) {
										if (i) {
											var y; g = this.dataList.getRealRowIndex(f)
												; if ("checkbox" != (y = o.cellManagerHashByRowIndex[g] ? o.cellManagerHashByRowIndex[g] : o).options.inputType) continue; r = y.options.trueValue, n = y.options.falseValue
										} if (l = this._dataList.getCellData(f, s), 1 == e || 1 == e || e == r) l != r && this._dataList.setCellData(f, s, r); else if (0 == e || 0 == e || e == n) l != n && this._dataList.setCellData(f, s, n); else { m = l == r ? n : r; this._dataList.setCellData(f, s, m) }
									}
								} u && this._linkedDataList.setBroadcast(!0, !0, { gridView: [{ keepTop: !0, refreshInstance: !1 }] }), p && this._dataList.setBroadcast(!0, !0, { gridView: [{ keepTop: !0, refreshInstance: !1 }] }), this.drawFooterStatus = !0, this.drawFooter(), this.drawHeader()
							}, S.prototype.getColumnType = function(t) { return this.getCellInfo(t).options.inputType }, S.prototype.getColumnNodeSet = function(t) { return this.getCellInfo(t).itemsetObj }, S.prototype.getDefaultStyle = function() { return this.options.style }, S.prototype.setCellChecked = function(t, e, i) { if ("boolean" == typeof i) { var o = this.getCellInfo(e), s = o.id, a = !1; if (0 == o.internal && "custom" == o.options.inputType) { var r = this.dataList.getRealRowIndex(t); o = o.cellManagerHashByRowIndex[r] ? o.cellManagerHashByRowIndex[r] : o, a = !0 } if ("checkbox" == o.options.inputType || "radio" == o.options.inputType) { if ("radio" == o.options.inputType && 0 != i) { var n = !(!this.isDrillDown || !this._dataList.options.depthColumn), l = n ? this.getTotalRow() : this.getDataLength(); if (this._linkedDataList) if (a); else for (var h = 0; h < l; h++) { r = this._linkedDataList.initialRowIndexArr[h]; var d = n ? r : this._dataList.getFilteredRowIndex(r); this._dataList.setCellData(d, s, o.options.falseValue) } else if (a); else for (d = 0; d < l; d++)this._dataList.setCellData(d, s, o.options.falseValue); this.drawColumnData(e) } i = 1 == i ? o.options.trueValue : o.options.falseValue, this._dataList.setCellData(t, s, i) } else { var p = WebSquare.language.getMessage("Grid_warning3") || "checkbox나 radio가 아닙니다."; alert(p) } } else { var u = WebSquare.language.getMessage("Grid_warning2") || "입력데이터가 옳바르지 않습니다. true/false boolean 타입으로 입력하세요"; alert(u) } }, S.prototype.getGridHTML = function() { alert("현재 구현중") }, S.prototype.redrawColumn = function(t, e) { try { var i = void 0 === e || e; this.drawColumnData(t, i) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getDrawCount = function() { return this.getVisibleRowNum() }, S.prototype.getVisibleRowNum = function() { return this.rowIndex >= 0 ? this.lastIndex + 1 : 0 }, S.prototype.getTopRowIndex = function() { return this.rowIndex }, S.prototype.setTopRowIndex = function(t, e, i) { var o = this.getElementById(this.id + "_scrollY_div"); if (t <= 0 && (t = 0), null !== this.lastTopRowIndex) t > this.lastTopRowIndex && (t = parseInt(this.lastTopRowIndex + .5, 10)); else if (o.offsetHeight < o.scrollHeight) { if (this.rowIndex < t) { var s = this._getVisibleLastIndex(this.lastIndex + 1); (t = t + s > this.getDataLength() ? this.getDataLength() - s : t) > this.rowIndex + s - 1 && (this.adjustDraw_keepTop = !0) } } else t = 0; if (this.rowIndex != t) { if (this.delayedDraw({ rowIndex: t })) return; this.scrollEvent = !1, this.checkScrollEnd = !e, i && this.setFocusedCell2(0, 0, !1), this.drawData(t), o.scrollTop = this.oneRowScrollHeight * this._getScrollRowIndex(t) } }, S.prototype.getBottomRowIndex = function() { return this.rowIndex >= 0 ? this.rowIndex + this.lastIndex : -1 }, S.prototype.setBottomRowIndex = function(t) { this.drawBottomData(t) }, S.prototype.getCellPosition = function(t, e, i) { e = this.getColumnIndex(e), i = (i || "").toLowerCase(); var o = this.data_td_list[e + t * this.oneRowDataLength]; if (!o) { var s = t - this.rowIndex; o = this.data_td_list[e + s * this.oneRowDataLength] } if (o) { if ("top" == i) return o.offsetTop; if ("left" == i) return o.offsetLeft } return null }, S.prototype.getCellSize = function(t, e, i) { e = this.getColumnIndex(e), i = (i || "").toLowerCase(); var o = t - this.rowIndex, s = this.data_td_list[e + o * this.oneRowDataLength]; return "width" == i ? s.clientWidth : "height" == i ? s.clientHeight : null }, S.prototype.getHeaderPosition = function(t, e) { e = (e || "").toLowerCase(); var i = this.getHeaderLayer(t); if ("top" == e) { var o = i.offsetTop; return this.options.groupbyZone && (o += this.groupbyZoneStatus.groupbyZoneRender.offsetHeight), o } return "left" == e ? i.offsetLeft : null }, S.prototype.getHeaderSize = function(t, e) {
								e = (e || "").toLowerCase(); var i = this.getHeaderLayer(t)
									; return "width" == e ? i.clientWidth : "height" == e ? i.clientHeight : null
							}, S.prototype.setSummary = function(t) { this.getElementById(this.id + "_body_table").setAttribute("summary", t) }, S.prototype.setFooterSummary = function(t) { this.hasFooter && this.getElementById(this.id + "_foot_table").setAttribute("summary", t) }, S.prototype.setCaption = function(t) { var e = this.getElementById(this.id + "_body_table").getElementsByTagName("caption")[0]; if (e) e.innerHTML = t; else { (e = document.createElement("caption")).innerHTML = t; var i = this.render.getElementsByTagName("colgroup")[0]; i.parentNode.insertBefore(e, i) } var o = e.className; e.className = o && "" != o ? o + " setcaption" : "setcaption" }, S.prototype.setCaptionAuto = function(t) { for (var e = this.getHeaderValueList(), i = "", o = "", s = 0; s < e.length; s++)i.length > 0 && (o = ","), i = i + o + e[s]; t && (this.options.captionTitle = t), this.options.captionTitle ? this.setCaption(this.options.captionTitle + WebSquare.language.getMessage("Grid_caption2") + i + WebSquare.language.getMessage("Grid_caption")) : this.setCaption(i + WebSquare.language.getMessage("Grid_caption")) }, S.prototype.setFooterCaption = function(t) { if (this.hasFooter) { var e = this.getElementById(this.id + "_foot_table"), i = e.getElementsByTagName("caption")[0]; if (i) i.innerHTML = t; else { (i = document.createElement("caption")).innerHTML = t; var o = e.getElementsByTagName("colgroup")[0]; o.parentNode.insertBefore(i, o) } } }, S.prototype.groupby = function(t) {
								try {
									this.hideCustomFilterList(), this._clearMergeCellBackground(), this.clearSearchData({ clearValue: !0 }); var e = "string" == typeof t.sortIndex ? t.sortIndex.split(" ") : t.sortIndex, i = "string" == typeof t.sortOrder ? t.sortOrder.split(" ") : t.sortOrder, s = e.length; if (-1 != this.options.groupbyMaxCount && this.options.groupbyMaxCount < s) return void p.k.printLog("groupby max column count has been exceeded.[" + this.id + "]"); for (var n = 0; n < s; n++) { var l = parseInt(e[n], 10); e[n] = isNaN(l) ? this.getColumnIndex(e[n]) : l } if (!(t = t || {}).filter && !this.groupbyStatus.grouped && this.options.customFilterBox && this.groupbyFilterBox_history && this.groupbyFilterBox_history.length > 0 && !0 === this.getElementById(this.id + "_groupbyFilterBox_apply").checked) { var h = this.groupbyFilterBox_history[this.groupbyFilterBox_select.getSelectedIndex()]; if (!h.groupbyOptions && h.customFilterListFilterInfo) { t.filter = JSON.parse(h.customFilterListFilterInfo, (function(t, e) { try { var i = new Function("return " + e)(); return "function" == typeof i || "object" == typeof i && i.constructor === RegExp ? i : "object" == typeof i && "func" === i.type && "string" == typeof i.key ? (i.key = new Function("return " + i.key)(), i) : e } catch (t) { return e } })); var d = e.length - 1, u = !1; for (var c in t.filter) { var g = !1; for (n = d; n >= 0; n--)if (this.tdIdList[e[n]] === c) { g = !0; break } g || (e.push(this.bodyIdColIndexMap[c]), i.push(i[i.length - 1]), u = !0) } u && (t.sortIndexArr = e, t.sortOrderArr = i), this.groupbyFilterList || this.createGroupbyFilterList({ noDraw: !0 }), this.groupbyStatus.filter = t.filter, this._dataList.sortStatusInfo = {}, this._dataList.sortStatusArr = [], s = e.length } } this.removeFocusedCell(), this._dataList.clearFilter(!0), this.clearHeaderSort(), this.headerSortStatusArr = [], this.groupbyStatus.groupbyOptions = JSON.stringify(t, (function(t, e) { return "function" == typeof e || "object" == typeof e && e.constructor === RegExp ? e.toString() : e })); var f = {}; if (t.filter) {
										var m = "", y = ""; for (var c in t.filter) { var b, w = t.filter[c]; m = ',"' + c + '"' + m, y = ",[" + this._dataList.filteredRowIndexArr.join(",") + "]" + y, "func" === w.type ? (w.noRefresh = !0, w.noRefreshAfter = !0, f[this.bodyToHeaderRelation[w.colIndex]] = !0, this.dataList.setColumnFilter(w)) : (w.constructor === /a/.constructor ? b = w : t.filterRegExp && t.filterRegExp[c] && t.filterRegExp[c].constructor === /a/.constructor ? b = t.filterRegExp[c] : "object" == typeof w && (w = 0 == w.length ? "/^[a-z0-9_-]{3,16}$/" : "^" + w.join("$|^") + "$", b = new RegExp(w, "gi")), b && this.dataList.setColumnFilter({ type: "regExp", colIndex: c, key: b, condition: "and", noRefresh: !0, noRefreshAfter: !0 })) } if (this.groupbyFilterList) {
											var v = '{"column":[' + (m = m.slice(1) + "],") + '"filteredRowIndexArr":[' + (y = y.slice(1) + "]}"); if (this.groupbyFilterList.filterHistory = JSON.parse(v),
												this.getRowCount() <= 0) for (; this.groupbyFilterList.filterHistory.filteredRowIndexArr.length > 0 && this.groupbyFilterList.filterHistory.filteredRowIndexArr[0].length <= 0;)this.groupbyFilterList.filterHistory.column.shift(), this.groupbyFilterList.filterHistory.filteredRowIndexArr.shift()
										} t.noRefreshAfter || this._dataList.broadcast({ gridView: ["notifyAfterSettedColumnFilter"] })
									} if (t.sortOrder && t.sortIndex) { var C = o.x.extend({}, t); C.noRefresh = !0, C.sortIndex = []; for (n = 0; n < e.length; n++)C.sortIndex.push(this.getColumnID(e[n])); this.dataList.multisort(C) } this.groupbyInfo = {}, this.statusArr = []; var I = this._linkedDataList ? this._linkedDataList.filteredRowIndexArr : this._dataList.filteredRowIndexArr, _ = [], x = [], S = 0, D = [], R = []; for (var L in this.groupbyStatus.groupedRowIndexArr = [], this.groupbyStatus.groupbyRowIndexArr = I.slice(), this.groupbyStatus.groupbyDepthDelimiter = "||", this.customFilterStatusObj = {}, f) this.customFilterStatusObj[L] = !0; this.groupbyStatus.grouped = !0, this.groupbyStatus.filter = t.filter || {}, this.groupbyStatus.sortIndexArr = e, this.groupbyStatus.sortOrderArr = i, this.groupbyStatus.headerValueObj = {}, this.groupbyStatus.footerValueObj = {}, t.keepDisplayOptions || (this.groupbyDisplayOptions = {}, this.groupbyDisplayOptions.rowNumHeader = t.rowNumHeader || {}, this.groupbyDisplayOptions.rowStatusHeader = t.rowStatusHeader || {}, this.groupbyDisplayOptions.groupbyHeader = t.groupbyHeader || [], this.groupbyDisplayOptions.rowNumFooter = t.rowNumFooter || {}, this.groupbyDisplayOptions.rowStatusFooter = t.rowStatusFooter || {}, this.groupbyDisplayOptions.groupbyFooter = t.groupbyFooter || [], this.groupbyDisplayOptions.closeGroup = t.closeGroup || !1, this.groupbyDisplayOptions.hideHeader = t.hideHeader || !1, this.groupbyDisplayOptions.hideFooter = t.hideFooter || !1); for (n = 0; n < I.length; n++) { D = R, R = []; for (var T = I[n], k = T * this._dataList.cellIdList.length, A = 0; A < s; A++) { var F = this.tdIdList[e[A]], E = this.cellInfoHash[F]; E && "expression" == E.options.inputType ? R[A] = E.getExpressionValue(T) : R[A] = this._dataList.dataArr[k + this._dataList.bodyIdColIndexMap[F]] || "" } if (n > 0) { var M = !1, O = []; for (A = 0; A < s; A++)if (M || D[A] !== R[A]) { var N = D.slice(0, A + 1).join(this.groupbyStatus.groupbyDepthDelimiter); M = !0; var B = { type: "footer", groupId: N, depth: A, status: "open", index: "" }; this.groupbyInfo[N] = this.groupbyInfo[N] ? this.groupbyInfo[N] : {}, this.groupbyInfo[N].footer = B, O.push(B) } for (A = O.length - 1; A >= 0; A--)O[A].index = _.length, this.groupbyDisplayOptions.hideFooter || (_.push(O[A]), x.push("footer")) } var G = !1; for (A = 0; A < s; A++)if (G || 0 == n || D[A] !== R[A]) { N = R.slice(0, A + 1).join(this.groupbyStatus.groupbyDepthDelimiter); G = !0; B = { type: "header", groupId: N, depth: A, status: "open", index: _.length }; this.groupbyInfo[N] = { header: B }, this.groupbyDisplayOptions.hideHeader || (_.push(B), x.push("header")) } _.push(I[n]), x.push(S++) } if (x.length > 0) for (n = s - 1; n >= 0; n--) { B = { type: "footer", groupId: N = R.slice(0, n + 1).join(this.groupbyStatus.groupbyDepthDelimiter), depth: n, status: "open", index: _.length }; this.groupbyInfo[N] = this.groupbyInfo[N] ? this.groupbyInfo[N] : {}, this.groupbyInfo[N].footer = B, this.groupbyDisplayOptions.hideFooter || (_.push(B), x.push("footer")) } if (this.groupbyStatus.groupedRowIndexArr = _, this.rowNumArr = x, this.options.foldAll) for (var N in this.groupbyInfo) { "open" == (W = this.groupbyInfo[N].header).status && 0 == W.depth && this._foldRow(W) } else if (this.groupbyDisplayOptions.closeGroup && x.length > 0) for (var H in this.groupbyInfo) { var W; s == (W = this.groupbyInfo[H].header).groupId.split(this.groupbyStatus.groupbyDepthDelimiter).length && "number" != typeof W && this.groupbyStatus.groupedRowIndexArr[W.index] == W && this._foldRow(W) } this.lastTopRowIndex = null, this.rowIndex = 0, this.setScrollYHeight(), t.sortOrder && t.sortIndex ? (this._dataList.broadcast({ gridView: ["notifyMultisort"] }), this._dataList.broadcast({ gridView: ["notifySettedFilter", [{ isSort: !0, keepTop: t.keepTop }]], generalComp: "both" })) : this.notifyDataChanged(), this.options.groupbyZoneMessage && this.hideGroupbyZoneMessage(), this.options.groupbyZone && this.syncWithGroupbyZone(); var V = e.length; if (this.groupbyStatus.beforeSortIndexLength = V,
										r.D.isIE("8") && this.drawData(0, null, "async"), this.groupbyStatus.grouped) { var q = r.D.getDataPrefix("useFilter"), j = r.D.getDataPrefix("header_id"), P = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")); for (n = 0; n < P.length; n++) { var z = P[n], U = z.getAttribute("id"); if (U && !U.match("RowNumber") && !U.match("RowStatus") && "true" == z.getAttribute(q)) { var X = !1; if (this.options.groupbyFilterIcon) { var K = z.getAttribute(j), Z = this.headerToBodyRelation[K]; if (Z) { var Y = this.getColumnIndex(Z); for (A = 0; A < this.groupbyStatus.sortIndexArr.length; A++)if (this.groupbyStatus.sortIndexArr[A] == Y) { X = !0; break } } } !1 === X && (document.getElementById(U + "_filter").style.display = "none") } } }
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.clearGroupby = function() { try { this.clearGrouping = !0, this.groupbyStatus = {}, this.groupbyZoneStatus.beforeOpenedColIndex = null, this.groupbyZoneStatus.beforeOpenedColTagName = null, this.groupbyZoneStatus.clickedHeaderInfo = null, this.groupbyDisplayOptions = null, this.rowIndex = 0, this.dataList.clearFilter(), this.clearHeaderSort(), this.clearGroupbyZone(), r.D.isIE("8"), this.options.groupbyZoneMessage && this.showGroupbyZoneMessage(), this.groupbyFilterList && this.hideGroupbyFilterList(); var t = this.getDataLength(); if (t < this.rowIndex + this.drawedRowLength) for (var e = t - this.rowIndex; e < this.drawedRowLength; e++)this.clearGroupedRow(e, e + this.rowIndex); this.clearGrouping = !1; var i = r.D.getDataPrefix("useFilter"), o = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")); for (e = 0; e < o.length; e++) { var s = o[e], n = s.getAttribute("id"); !n || n.match("RowNumber") || n.match("RowStatus") || "true" == s.getAttribute(i) && (document.getElementById(n + "_filter").style.display = "") } if (this.options.customFilterBox && this.groupbyFilterBox_history && this.groupbyFilterBox_history.length > 0 && !0 === this.getElementById(this.id + "_groupbyFilterBox_apply").checked) { var l = this.groupbyFilterBox_select.getSelectedIndex(); this.groupbyFilterBox_history[l].groupbyOptions && (this.notifyBeforeSettedColumnFilter(), this.refreshCustomFilterHistory(l), this.notifyAfterSettedColumnFilter()) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.toggleGroup = function(t) { if (this.groupbyInfo[t]) { var e = this.groupbyInfo[t].header; "number" != typeof e && this.dataList.getRealRowIndex(e.index) == e && ("open" == e.status ? this._foldRow(e) : this._unfoldRow(e), this.lastTopRowIndex = null, this.setScrollYHeight(), "open" == e.status ? this.notifyRowInserted(e.index) : this.notifyRowChanged(e.index), this.removeFocusedCell(), this.drawFooter()) } }, S.prototype._foldRow = function(t) { if ("open" == t.status) { if (t.status = "closed", this.groupbyDisplayOptions.hideFooter) { for (var e, i = t.index + 1; i < this.rowNumArr.length && !("header" == this.rowNumArr[i] && this.groupbyStatus.groupedRowIndexArr[i].depth <= t.depth); i++)e = i; t.closedChildArr = this.groupbyStatus.groupedRowIndexArr.splice(t.index + 1, e - t.index) } else { var o = this.groupbyInfo[t.groupId].footer; t.closedChildArr = this.groupbyStatus.groupedRowIndexArr.splice(t.index + 1, o.index - t.index - 1) } var s = [], a = t.closedChildArr.slice(0).sort(); for (i = 0; i < this.groupbyStatus.groupbyRowIndexArr.length; i++) { for (var r = !1, n = 0, l = a.length - 1, h = 0, d = this.groupbyStatus.groupbyRowIndexArr[i]; n <= l;) { if (d == a[h = Math.floor((n + l) / 2)]) { r = !0; break } d < a[h] ? l = h - 1 : n = h + 1 } r || s.push(this.groupbyStatus.groupbyRowIndexArr[i]) } this.groupbyStatus.groupbyRowIndexArr = s; var p = this.groupbyStatus.groupedRowIndexArr.length, u = 0; this.rowNumArr = []; for (i = 0; i < p; i++)"number" == typeof this.groupbyStatus.groupedRowIndexArr[i] ? this.rowNumArr.push(u++) : (this.groupbyInfo[this.groupbyStatus.groupedRowIndexArr[i].groupId][this.groupbyStatus.groupedRowIndexArr[i].type].index = this.rowNumArr.length, this.rowNumArr.push(this.groupbyStatus.groupedRowIndexArr[i].type)) } }, S.prototype._unfoldRow = function(t) {
								if ("closed" == t.status) {
									t.status = "open", t.closedChildArr.unshift(t.index + 1, 0), [].splice.apply(this.groupbyStatus.groupedRowIndexArr, t.closedChildArr), t.closedChildArr = []; var e = 0; this.rowNumArr = [], this.groupbyStatus.groupbyRowIndexArr = []
										; for (var i = 0; i < this.groupbyStatus.groupedRowIndexArr.length; i++)"number" == typeof this.groupbyStatus.groupedRowIndexArr[i] ? (this.rowNumArr.push(e++), this.groupbyStatus.groupbyRowIndexArr.push(this.groupbyStatus.groupedRowIndexArr[i])) : (this.groupbyInfo[this.groupbyStatus.groupedRowIndexArr[i].groupId][this.groupbyStatus.groupedRowIndexArr[i].type].index = this.rowNumArr.length, this.rowNumArr.push(this.groupbyStatus.groupedRowIndexArr[i].type))
								}
							}, S.prototype.foldAll = function() { for (var t in this.groupbyInfo) { var e = this.groupbyInfo[t].header; "open" == e.status && 0 == e.depth && this._foldRow(e) } this.lastTopRowIndex = null, this.notifyDataChanged({ keepTop: !0 }), 0 == this.getDataLength() && this.removeFocusedCell(), this.setScrollYHeight(), this.drawFooter(), this.drawHeader() }, S.prototype.unfoldAll = function() { for (var t = 0; t < this.groupbyStatus.groupedRowIndexArr.length; t++) { var e = this.groupbyStatus.groupedRowIndexArr[t]; "number" != typeof e && "header" == e.type && "closed" == e.status && this._unfoldRow(e) } this.lastTopRowIndex = null, this.notifyDataChanged({ keepTop: !0 }), 0 == this.getDataLength() && this.removeFocusedCell(), this.setScrollYHeight(), this.drawFooter(), this.drawHeader() }, S.prototype.drawGroupData = function(t, e, i) { var o, s, a, r = t, n = i * this.realRowDataLength, l = this.realRowDataLength; if ("header" == e.type) o = this.groupbyDisplayOptions.rowNumHeader, s = this.groupbyDisplayOptions.rowStatusHeader, a = this.groupbyDisplayOptions.groupbyHeader; else { if ("footer" != e.type) return void (t.innerHTML = ""); o = this.groupbyDisplayOptions.rowNumFooter, s = this.groupbyDisplayOptions.rowStatusFooter, a = this.groupbyDisplayOptions.groupbyFooter } this.options.rowNumVisible && (this._drawGroupData(r, e, o), o.hidden || (l -= o.colSpan || 1), n++, r = this.all_data_td_list[n]), this.options.rowStatusVisible && (this._drawGroupData(r, e, s), s.hidden || (l -= s.colSpan || 1), n++, r = this.all_data_td_list[n]); for (var h = {}, d = 0; d < l; d++)if (!h["domIndex_" + n]) { n++; var p = {}; if (a instanceof Array ? p = a[d] || {} : a instanceof Object && "object" == typeof a && (p = a["depth_" + e.depth][d] || {}), Number(p.targetIndex) > -1) { var u = i * this.realRowDataLength + p.targetIndex; h["domIndex_" + u] = !0, this._drawGroupData(this.all_data_td_list[u], e, p) } else this._drawGroupData(r, e, p); r = this.all_data_td_list[n] } }, S.prototype._drawGroupData = function(t, e, i) {
								try {
									var o = i.className || "", s = "gridBodyDefault w2grid_groupby w2grid_groupby_depth_" + e.depth + " " + o; t.className = s, t.innerHTML = ""; var n, l = i.colSpan, h = i.value || "", d = i.inputType || "", p = i.depthVisible || !1, u = i.align || "", c = i.expression || "", g = (l = i.colSpan || 1, i.hidden ? "none" : ""), f = i.displayFormatType || "text", m = i.displayFormat || "", y = i.displayFormatter || null; if (t.setAttribute("colSpan", l), t.style.align = "", t.style.textAlign = "", t.style.display = g, t.style.borderTopWidth = "1px", t.style.borderBottomWidth = "1px", d) { var b = r.D.getDataPrefix("col_id"); switch ((m || y) && (n = new WebSquare.format.createFormatter(f, m, y, null, null, null, this.scope_id, this.id)), d) { case "toggleButton": var w = "<span class='" + ("open" == e.status ? "w2grid_minus" : "w2grid_plus") + "' style='display:inline-block;" + (u ? "float:" + u + ";" : "") + " margin-left:" + 20 * e.depth + "px;'></span>"; t.innerHTML += w; break; case "expression": if (c) { var v = this.groupbyInfo[e.groupId].header; v.colID = t.getAttribute(b); var C = 0; if ("open" == v.status) { for (var I, _ = !0, x = 0, S = v.index; S < this.groupbyStatus.groupedRowIndexArr.length; S++) { var D = this.groupbyStatus.groupedRowIndexArr[S]; if (this.groupbyDisplayOptions.hideFooter && _) { _ = !1; for (var R = S + 1; R < this.groupbyStatus.groupedRowIndexArr.length; R++) { var L = this.groupbyStatus.groupedRowIndexArr[R]; if ("header" == L.type && D.depth >= L.depth) break; x = R } } if (this.groupbyDisplayOptions.hideFooter) { if (S >= x) { I = S; break } } else if ("footer" == D.type && D.depth == v.depth) { I = D.index; break } } C = this.groupExpression(this.groupbyStatus.groupedRowIndexArr, v.index, I, c, v) } else C = this.groupExpression(v.closedChildArr, 0, v.closedChildArr.length - 1, c, v); n && (C = n.format(C)); var T = "<span style='display:inline-block;" + (u ? "float:" + u + ";" : "") + "''>" + C + "</span>"; t.innerHTML += T } } } if (p) {
										var k = ""
										; "toggleButton" != d && (k = "margin-left: " + 20 * e.depth + "px"), t.innerHTML += "<span style='display:inline-block;" + (u ? "float:" + u + ";" : "") + " " + (k || "") + "'>" + e.groupId.wq_replaceAll(this.groupbyStatus.groupbyDepthDelimiter, " - ") + "</span>"
									} h && (n && (h = n.format(h)), t.innerHTML += "<span style='display:inline-block;" + (u ? "float:" + u + ";" : "") + "'>" + h + "</span>")
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.groupExpression = function(t, e, i, o, s) { try { var r = o; return r = (r = (r = (r = (r = (r = (r = (r = r.replace(/[sS][uU][mM][\s]*[(]/g, "_this.groupbySum(arr, startIndex, endIndex,")).replace(/[aA][vV][gG][\s]*[(]/g, "_this.groupbyAvg(arr, startIndex, endIndex,")).replace(/[mM][aA][xX][\s]*[(]/g, "_this.groupbyMax(arr, startIndex, endIndex,")).replace(/[mM][iI][nN][\s]*[(]/g, "_this.groupbyMin(arr, startIndex, endIndex,")).replace(/[cC][oO][uU][nN][tT][\s]*[(]/g, "_this.groupbyCount(arr, startIndex, endIndex,")).replace(/[dD][eE][pP][tT][hH][\s]*[(]/g, "_this.groupbyDepth(header")).replace(/[tT][oO][gG][gG][lL][eE][\s]*[(]/g, "_this.groupbyToggle(header")).replace(/[dD][eE][pP][tT][hH][sS][tT][rR][\s]*[(]/g, "_this.groupbyDepthStr(header"), r = new Function("_this", "arr", "startIndex", "endIndex", "expression", "header", "return " + r)(this, t, e, i, o, s) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.groupbySum = function(t, e, i, o) { for (var s = this.getColumnIndex(o), a = 0, r = e; r <= i; r++)"number" == typeof t[r] ? a += parseFloat(this.dataList._getCellData(t[r], this.getColumnID(s), 3)) || 0 : "header" == t[r].type && "closed" == t[r].status && (a += this.groupbySum(t[r].closedChildArr, 0, t[r].closedChildArr.length - 1, o)); return a }, S.prototype.groupbyAvg = function(t, e, i, o) { var s = this._groupbyAvg(t, e, i, o); return s.sum / s.number }, S.prototype._groupbyAvg = function(t, e, i, o) { for (var s = this.getColumnIndex(o), a = { sum: 0, number: 0 }, r = e; r <= i; r++)if ("number" == typeof t[r]) a.sum += parseFloat(this.dataList._getCellData(t[r], this.getColumnID(s), 3)) || 0, a.number++; else if ("header" == t[r].type && "closed" == t[r].status) { var n = this._groupbyAvg(t[r].closedChildArr, 0, t[r].closedChildArr.length - 1, o); a.sum += n.sum, a.number += n.number } return a }, S.prototype.groupbyMax = function(t, e, i, o) { for (var s = this.getColumnIndex(o), a = 0, r = 0, n = !1, l = e; l <= i; l++)"number" == typeof t[l] ? a = parseFloat(this.dataList._getCellData(t[l], this.getColumnID(s), 3)) || 0 : "header" == t[l].type && "closed" == t[l].status && (a = this.groupbyMax(t[l].closedChildArr, 0, t[l].closedChildArr.length - 1, o)), n || (r = n = a), n && r < a && (r = a); return r }, S.prototype.groupbyMin = function(t, e, i, o) { for (var s, a = this.getColumnIndex(o), r = 0, n = !1, l = e; l <= i; l++)"number" == typeof t[l] ? r = parseFloat(this.dataList._getCellData(t[l], this.getColumnID(a), 3)) || 0 : "header" == t[l].type && "closed" == t[l].status && (r = this.groupbyMin(t[l].closedChildArr, 0, t[l].closedChildArr.length - 1, o)), n || (s = n = r), n && s > r && (s = r); return s }, S.prototype.groupbyToggle = function(t) { return "<span class='" + ("open" == t.status ? "w2grid_minus" : "w2grid_plus") + "' style='display:inline-block; margin-left:" + 20 * t.depth + "px;'></span>" }, S.prototype.groupbyDepth = function(t) { return t.depth }, S.prototype.groupbyDepthStr = function(t) { for (var e = t.groupId.wq_replaceAll(this.groupbyStatus.groupbyDepthDelimiter, " - "), i = !1, o = e.split(" - "), s = 0; s < this.groupbyStatus.sortIndexArr.length; s++) { var a = this.getCellInfo(this.groupbyStatus.sortIndexArr[s]); if ("true" == a.options.groupbyDepthStrLabel) try { i = !0; var n = o[s]; if (a.dataComp) { var l = r.D.getComponentById(a.dataComp, a.scope_id); if (l) { var h, d; a.itemsetObj && (h = a.itemsetObj.label || "label", d = a.itemsetObj.value || "value"), a.element && (h = a.element.getValue("w2:label", "ref"), d = a.element.getValue("w2:value", "ref")); for (var p = l.getAllJSON(), u = 0; u < p.length; u++) { var c = p[u]; if (n == c[d]) { o[s] = c[h]; break } } } } else for (u = 0; u < a.itemArr.length; u++)if (n == a.itemArr[u].value) { o[s] = a.itemArr[u].label; break } } catch (t) { break } } return i && (e = o.join(" - ")), e }, S.prototype.groupbyCount = function(t, e, i) {
								for (var o = 0, s = e; s <= i && s < t.length; s++)"number" == typeof t[s] ? o++ : "header" == t[s].type && "closed" == t[s].status && (o += this.groupbyCount(t[s].closedChildArr, 0, t[s].closedChildArr.length - 1)); return o
							}, S.prototype._drawGroupbyZone = function() {
								try {
									var t = this.uuid; if (this.options.groupbyZone) { this.groupbyZoneStatus.groupbyZoneRender = this.dom[this.id + "_groupbyZone_div"]; var e = null != this.options.groupbyZoneHeight.match("%"), i = parseInt(this.options.groupbyZoneHeight), o = i + "px"; this.groupbyZoneStatus.groupbyZoneRender.style.height = o, e && (this.groupbyZoneStatus.groupbyZoneRender.style.height = this.groupbyZoneStatus.groupbyZoneRender.offsetHeight + "px"); var s = this.getElementById(this.id + "_main_div"), a = WebSquare.style.getStyle(this.groupbyZoneStatus.groupbyZoneRender, "border-left-width").replace("px", ""); if (this.groupbyZoneStatus.groupbyZoneBorder = 2 * a, this.groupbyZoneStatus.groupbyZoneRender.style.width = s.clientWidth - this.groupbyZoneStatus.groupbyZoneBorder + "px", this.dom[this.id + "_main_div"] && (this.dom[this.id + "_main_div"].style.top = this.groupbyZoneStatus.groupbyZoneRender.offsetHeight + "px"), this.isIE6) try { this.dom[this.id + "_main_div"].style.height = this.dom[this.id + "_main_div"].offsetHeight - this.groupbyZoneStatus.groupbyZoneRender.offsetHeight } catch (t) { } if (this.dom[this.id + "_scrollY_div"].style.top = "0px", this.options.groupbyZoneMessage) { var n = document.createElement("div"); n.innerHTML += this.options.groupbyZoneMessage, n.className += " w2grid_groupbyZone_message ", this.groupbyZoneStatus.groupbyZoneRender.appendChild(n), n.style.marginTop = -n.offsetHeight / 2 + "px", n.style.marginLeft = -n.offsetWidth / 2 + "px", this.groupbyZoneStatus.groupbyZoneMessageRender = n } if (this.options.groupbyZoneSearch) { var l = document.getElementById(this.id + "_groupbyZone_search"); this.groupbyZone_searchinput = new WebSquare.uiplugin.input(this.id + "_groupbyZone_searchinput", { className: "w2grid_groupbyZone_searchinput" }), requires("uiplugin.trigger"), this.groupbyZone_searchbtn = new WebSquare.uiplugin.trigger(this.id + "_groupbyZone_searchbtn", { className: "w2grid_groupbyZone_searchbtn" }), this.addControl(this.groupbyZone_searchinput), this.addControl(this.groupbyZone_searchbtn), l.innerHTML = this.groupbyZone_searchinput.toHTML() + this.groupbyZone_searchbtn.toHTML(), this.groupbyZone_searchbtn.activate(), this.groupbyZone_searchinput.activate(); var h = this.groupbyZone_searchinput.uuid; this.groupbyZone_searchbtn.bind("onclick", (function() { WebSquare.idCache[h].show() })); var p = this.id; this.groupbyZone_searchinput.bind("onkeydown", (function(e) { d.B.stopPropagation(e), r.D.setTimeout((function() { var e = WebSquare.idCache[t]; e._groupbyZoneSearch(), e.groupbyZone_searchinput.focus() }), { key: p + "_groupbyZone_search", delay: 50 }) })), this.groupbyZone_searchinput.hide() } } if (this.options.groupbyZone && this.options.groupbyFilterBox) {
										this.groupbyZoneStatus.groupbyFilterBoxRender = this.dom[this.id + "_groupbyFilterBox_div"]; var u = this.getElementById(this.id + "_groupbyFilterBox_select"); this.groupbyFilterBox_select = new WebSquare.uiplugin.selectbox(this.id + "_groupbyFilterBox_select", { className: "w2grid_groupbyFilterBox_select", labelWidthAuto: !1, readOnly: !0, direction: "top" === this.options.groupbyFilterBoxLocation ? "down" : "up", visibleRowNum: this.options.filterBoxvisibleRowNum }), this.addControl(this.groupbyFilterBox_select), u.innerHTML = this.groupbyFilterBox_select.toHTML(), this.groupbyFilterBox_select.activate(), this.groupbyFilterBox_select.bind("onclick", (function(t) { this.handleClickEvent() })), this.groupbyFilterBox_select.bind("onchange", (function() { WebSquare.idCache[t].applyFilterHistory() })); var c = this.getElementById(this.id + "_groupbyFilterBox_div"); "bottom" === this.options.groupbyFilterBoxLocation ? this.dom[this.id + "_main_div"].style.bottom = this.scrollLayerWidthSize + c.offsetHeight + "px" : "top" === this.options.groupbyFilterBoxLocation && (this.dom[this.id + "_main_div"].style.top = i + c.offsetHeight + "px", this.dom[this.id + "_main_div"].style.bottom = this.scrollLayerWidthSize + "px", this.groupbyZoneStatus.groupbyZoneRender.style.top = c.offsetHeight + "px")
											; var g = this.getElementById(this.id + "_groupbyFilterBox_main"), f = this.getElementById(this.id + "_groupbyFilterBox_buttons"); g.style.paddingLeft = f.offsetWidth + "px"; var m = this.getElementById(this.id + "_groupbyFilterBox_apply"), y = this.getElementById(this.id + "_groupbyFilterBox_delete"); m.onclick = function() { var e = WebSquare.idCache[t]; this.checked ? e.applyFilterHistory() : e.groupbyStatus.grouped ? e.clearGroupby() : e._dataList.clearFilter() }, y.onclick = function() { WebSquare.idCache[t].clearFilterHistory() }, this.handlerResize_drawInitializer()
									}
								} catch (t) { WebSquare.exception.printStackTrace(t) }
							}, S.prototype.getCellInputType = function(t, e) { try { var i = this.getCellInfo(e); if ("custom" == i.options.inputType) { var o = this.getRealRowIndex(t); return i.cellManagerHashByRowIndex[o].options.inputType } return i.options.inputType } catch (t) { a.w.printStackTrace(t) } }, S.prototype.setCellOption = function(t, e, i, o) { var s = this.getColumnIndex(e), a = this.getExtraDataObj("cell", t, s); switch (i) { case "viewType": a.key = o, this.rowIndex >= 0 && this.drawCellData(t - this.rowIndex, t, s); break; default: var r = WebSquare.language.getMessage("Grid_warning4", this.id, i) || "[" + this.id + "] " + i + "에 대한 변경은 처리할 수 없습니다."; $l(r) } }, S.prototype.getCellOption = function(t, e, i) { var o = this.getColumnIndex(e), s = this.getCellInfo(e); if ("custom" != s.options.inputType) { var a = this.getExtraDataObj("cell", t, o); return null == a.key ? s.options[i] : a.key } var r = s.cellManagerHashByRowIndex[t]; if (r) return r.options[i] }, S.prototype.getCustomCellOptions = function(t, e) { try { var i = this.getCellInfo(e), o = {}; if ("custom" == i.options.inputType) { var s = this.getRealRowIndex(t), r = i.cellManagerHashByRowIndex[s]; for (var n in r.initializeInfo) "id" != n && "displayRowIndex" != n && "realRowIndex" != n && (o[n] = r.initializeInfo[n]) } return o } catch (t) { a.w.printStackTrace(t) } }, S.prototype.ungroupColumn = function(t) { try { if (this.groupbyStatus.grouped) { var e; "string" == typeof t ? e = this.getColumnIndex(t) : "number" == typeof t && (e = t); for (var i = !0, o = this.groupbyStatus.sortIndexArr.length - 1; o >= 0; o--)if (this.groupbyStatus.sortIndexArr[o] == e) { this.groupbyStatus.sortIndexArr.splice(o, 1), this.groupbyStatus.sortOrderArr.splice(o, 1), delete this.groupbyStatus.filter[this.getColumnID(e)], i = !1; break } if (i) return; if (this.groupbyFilterList && this.groupbyFilterList.filterHistory.column.length > 0) if (this.groupbyFilterList.filterHistory.column[0] === this.getColumnID(e)) this.groupbyFilterList.filterHistory.column.shift(), this.groupbyFilterList.filterHistory.filteredRowIndexArr.shift(); else { var s = this.groupbyFilterList.filterHistory.column.length, r = this.groupbyFilterList.filterHistory.filteredRowIndexArr[s - 1].slice(0), n = 0; for (o = 0; o < s; o++)if (this.groupbyFilterList.filterHistory.column[o] === this.getColumnID(e)) { this.groupbyFilterList.filterHistory.column.splice(o, 1), this.groupbyFilterList.filterHistory.filteredRowIndexArr.splice(o, 1), n = 1; break } for (o = 0; o < s - n; o++)this.groupbyFilterList.filterHistory.filteredRowIndexArr[o] = r } if (this.clearSearchData({ clearValue: !0 }), 0 == this.groupbyStatus.sortIndexArr.length) this.clearGroupby(); else { var l = this.groupbyDisplayOptions; l.filter = this.groupbyStatus.filter, l.sortIndex = this.groupbyStatus.sortIndexArr, l.sortOrder = this.groupbyStatus.sortOrderArr, this.groupby(l) } } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.changeGroupDepth = function(t, e) {
								try {
									if (this.groupbyStatus.grouped) {
										var i, o, s, r; "string" == typeof t ? i = this.getColumnIndex(t) : "number" == typeof t && (i = t), "string" == typeof e ? o = this.getColumnIndex(e) : "number" == typeof e && (o = e); for (var n = 0; n < this.groupbyStatus.sortIndexArr.length; n++)this.groupbyStatus.sortIndexArr[n] == i && (r = n), this.groupbyStatus.sortIndexArr[n] == o && (s = n); if ("number" != typeof r || "number" != typeof s || r == s) return; this.groupbyStatus.sortIndexArr.splice(r, 1), this.groupbyStatus.sortIndexArr.splice(s, 0, i); var l = this.groupbyStatus.sortOrderArr.splice(r, 1); this.groupbyStatus.sortOrderArr.splice(s, 0, l); var h = this.groupbyDisplayOptions; h.filter = this.groupbyStatus.filter, h.sortIndex = this.groupbyStatus.sortIndexArr, h.sortOrder = this.groupbyStatus.sortOrderArr,
											this.groupby(h)
									}
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.removeGroupbyFilterList = function() { try { this.groupbyFilterList && this.groupbyFilterList.remove() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._getGroupbyDisplayRowIndex = function(t, e) { try { return this.options.groupbyDisplayRowIndex && this.groupbyStatus.grouped ? this.__getGroupbyDisplayRowIndex(t, e) : t } catch (e) { return a.w.printStackTrace(e, null, this), t } }, S.prototype.__getGroupbyDisplayRowIndex = function(t, e) { try { if (!this.groupbyStatus.grouped) return t; var i = this._dataList.getFilteredRowIndex(this.getRealRowIndex(t)); return null == i && !0 !== e && (i = t), i } catch (e) { return a.w.printStackTrace(e, null, this), t } }, S.prototype._getGroupbyGroupedRowIndex = function(t, e) { try { return this.options.groupbyDisplayRowIndex && this.groupbyStatus.grouped ? this.__getGroupbyGroupedRowIndex(t, e) : t } catch (e) { return a.w.printStackTrace(e, null, this), t } }, S.prototype.__getGroupbyGroupedRowIndex = function(t, e) { try { if (!this.groupbyStatus.grouped) return t; for (var i, o = this._dataList.getRealRowIndex(t), s = 0; s < this.groupbyStatus.groupedRowIndexArr.length; s++)if (o === this.groupbyStatus.groupedRowIndexArr[s]) { i = s; break } return null == i && !0 !== e && (i = t), i } catch (e) { return a.w.printStackTrace(e, null, this), t } }, S.prototype.isEditing = function() { try { return !!this.editedCell } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.readExcelFile = function(t, e, i, o, s, a, r, n) { this.readFile(t, e, i, o, s, "excel", null, a, r, n) }, S.prototype.readFile = function(t, e, i, o, s, a, r, n, l, h) { o = void 0 === o || "string" != typeof o ? this.options.excelUploadPopupURL : this.getURL(o), void 0 !== s && "string" == typeof s || (s = "top=280,height=80,left=160,width=400,location=no,menubar=no,resizable=yes,scrollbars=auto,status=no,titlebar=yes,toolbar=no"), o += 1 == (t = parseInt(t, 10)) ? "?header=true" : "?header=false", o += 1 == (e = parseInt(e, 10)) ? "&append=true" : "&append=false", o += 1 == n ? "&fillHidden=true" : "&fillHidden=false", o += 1 == (i = parseInt(i, 10)) ? "&hidden=true" : "&hidden=false", o += 1 == (h = h || 0) ? "&type=true" : "&type=false", r && (o += "&" + r), o += "&action=" + this.options.excelUploadURL, o += "&gridID=" + this.id; for (var d = [], p = this.defaultColCnt; p < this.hiddenList.length; p++)1 == this.hiddenList[p] && d.push(p - this.defaultColCnt); o += "&columnNum=" + this.getTotalCol(), o += "&expressionColumns=" + this.getExpressionColumnArr().join(","), o += "&hiddenColumns=" + d.join(","), o += "&headerRows=" + this.getElementById(this.id + "_head_table").rows.length, o += l ? "&gridStartRow=" + l : "&gridStartRow=1", WebSquare.domain && (o += "&domain=" + WebSquare.text.URLEncoder(WebSquare.domain)), window.open(o, "fileupWindow", s) }, S.prototype.getExpressionColumnArr = function(t) { var e, i = []; e = t && "1" == t.ignoreSpan ? this.getColCnt() : this.getTotalCol(); for (var o = 0; o < e; o++)"expression" == this.getCellInfo(o).options.inputType ? i.push("true") : i.push("false"); return i }, S.prototype.saveExcelFile = function(t, e, i, o, s, a, r, n) { var l = {}; l.fileName = t, l.hidden = e, l.checkButton = i, l.type = o, l.hiddenExpand = s, l.saveList = a, l.useEuroLocale = r, l.httpReadOnly = n, this.saveExcel(l) }, S.prototype.saveExcel = function(t) {
								var e = t.processMsg; e && e.length > 0 ? WebSquare.layer.showProcessMessage(e, { scope: this.scope_id || "" }) : WebSquare.layer.showProcessMessage("download...", { scope: this.scope_id || "" }); for (var i = t.fileName || "default", o = t.hidden || 0, a = t.checkButton || 0, r = t.type + "" || "0", n = t.hiddenExpand || 0, l = t.saveList || [], h = t.useEuroLocale || "false", d = t.password || "", p = new x.h.Hashtable, u = WebSquare.Elem.api.getElementsByTagName(this.element, "w2:header")[0], c = WebSquare.Elem.api.getElementsByTagName(u, "w2:column"), g = 0; g < c.length; g++) { var f = c[g], m = f.getAttribute("id"); f.setAttribute("value", this.getHeaderValue(m)) } if (p.put("style", WebSquare.xml.serialize(this.element._element)), "0" == r || "" == r) p.put("data", this.getExcelAllXML()), p.put("footer_data", this.getExcelAllFooterXML()); else if ("2" == r) { var y = this.getExcelAllXMLRaw(); p.put("data", y), p.put("footer_data", this.getExcelAllFooterXMLRaw()) } else { y = this.getExcelAllXMLDisplay(r); p.put("data", y), p.put("footer_data", this.getExcelAllFooterXMLDisplay()) } var b = []
									; for (g = 0; g < this.getTotalCol(); g++) { var w = this.getCellInfo(g).options.inputType; "checkbox" != w && "radio" != w && "button" != w || b.push('"' + g + '"') } p.put("hiddenArr", this.getHiddenColumnArr()), p.put("fileName", i), p.put("hidden", o), p.put("checkButton", a), p.put("type", r), p.put("rowNumVisible", this.options.rowNumVisible + ""); var v = this.options.rowNumHeaderValue || ""; if (this.options.useLocale && this.options.rowNumLocaleRef) { var C = this.getLocaleValue(this.options.rowNumLocaleRef); C && (v = C) } p.put("rowNumHeaderValue", v), p.put("hiddenExpand", n), p.put("checkButtonArr", "<array><![CDATA[[" + b.join(",") + "]]]></array>"), p.put("saveList", '<array><![CDATA[["' + l.join('","') + '"]]]></array>'), p.put("useEuroLocale", h), p.put("password", d), t.scopeId = this.scope_id || "", s.v.excelDownload(this.options.excelDownloadURL, p.toString(), "post", t)
							}, S.prototype.saveExcelFile2 = function(t, e, i, o, s, a) { var r = {}; if (r.fileName = t, r.type = o, e + "" == "0") { for (var n = [], l = this.defaultColCnt; l < this.hiddenList.length; l++)this.hiddenList[l] && n.push(l - this.defaultColCnt); r.removeColumns = n.join(",") } var h = []; if (i + "" == "0") for (l = 0; l < this.getTotalCol(); l++) { var d = this.getCellInfo(l).options.inputType; "checkbox" != d && "radio" != d && "button" != d || h.push(this.getCellInfo(l).options.colIndex - this.defaultColCnt) } for (l = this.defaultColCnt; l < this.hiddenList.length; l++)e + "" == "1" && s + "" == "0" && 1 == this.hiddenList[l] && h.push(l - this.defaultColCnt); r.foldColumns = h.join(","), this.advancedExcelDownload(r) }, S.prototype.getHiddenColumnArr = function() { for (var t = [], e = this.defaultColCnt; e < this.hiddenList.length; e++)t.push(this.hiddenList[e]); return '<array><![CDATA[["' + t.join('","') + '"]]]></array>' }, S.prototype.fireFileReadEnd = function(t) { var e = this; setTimeout((function() { d.B.fireEvent(e, "onfilereadend", t) }), 10) }, S.prototype.readCSV = function(t) {
								var e = {}; t = t || {}; e.wframe = t.wframe || !1; var i = t.type || "1", s = t.delim || ",", a = t.escapeChar || "", n = t.header || "1", l = t.footer || "1", h = t.startRowIndex || "0", d = t.startColumnIndex || "0", p = t.append || "0", u = t.hidden || "0", c = t.advancedHidden || "0", g = t.fillHidden || "0", f = t.skipSpace || "0", m = t.removeColumns || "", y = t.optionParam || "", b = document.location.protocol + "//" + document.location.host + "/", w = t.popupUrl ? b + t.popupUrl : o.x.baseURI + WebSquare.BootLoader.inquiresPath("uiplugin/grid/upload/csvfileUpload.js"), v = t.popupUrl || this.options.csvUploadPopupURL; v += "?"; var C, I = t.processMsg || "", _ = ""; if (e.name = t.name || "FILE UPLOAD", this.options.dataList) { var x = this.modelControl.getDataComp(this.options.dataList); null != x && (_ = x.id) } var S = t.status || "R", D = t.expression || "1", R = t.ignoreSpan || "0", L = t.maxFileSize || -1, T = t.csvUploadURL || "", k = 1 == this.options.postMsg ? this.options.postMsg : t.postMsg || "false", A = t.columnOrder || "", F = t.useModalDisable || "false", E = 1 == this.options.useXHR ? this.options.useXHR : t.useXHR || "false", M = t.filePath || ""; if (t.useDialog = t.useDialog + "" != "false", e.className = t.className || "", e.resizable = 0 != t.resizable || t.resizable, e.windowDragMove = t.windowDragMove || !1, void 0 === t.features || "string" != typeof t.features) C = "top=280,height=137,left=160,width=446,location=no,menubar=no,resizable=yes,scrollbars=auto,status=no,titlebar=yes,toolbar=no"; else if (1 == t.wframe) { for (var O = t.features.split(","), N = {}, B = 0; B < O.length; B++)0 != O[B].toLowerCase().indexOf("top") ? 0 != O[B].toLowerCase().indexOf("left") ? 0 != O[B].toLowerCase().indexOf("height") ? 0 != O[B].toLowerCase().indexOf("width") || (N.width = parseInt(O[B].split("=")[1])) : N.height = parseInt(O[B].split("=")[1]) : N.left = parseInt(O[B].split("=")[1]) : N.top = parseInt(O[B].split("=")[1]); C = N } else C = t.features; e.sFeatures = C, n = parseInt(n, 10), p = parseInt(p, 10), u = parseInt(u, 10), i = i || 0, e.type = 1 == i ? "true" : "false", e.uploadType = i, e.delim = s, e.escapeChar = a, e.header = 1 == n ? "true" : "false", e.footer = 1 == l ? "true" : "false", e.append = 1 == p ? "true" : "false", e.hidden = 1 == u ? "true" : "false", 1 == c ? (v += "&advancedHidden=true", e.advancedHidden = "true") : (v += "&advancedHidden=false", e.advancedHidden = "false"), e.fillHidden = 1 == g ? "true" : "false", e.skipSpace = 1 == f ? "true" : "false", e.removeColumns = m, e.optionParam = y, v += "&gridID=" + this.id, e.gridID = this.id
									; var G = []; for (B = this.defaultColCnt; B < this.hiddenList.length; B++)1 == this.hiddenList[B] && G.push(B - this.defaultColCnt); var H, W = this.getExpressionColumnArr(t); if (e.expressionColumns = W.join(","), e.columnNum = W.length, e.hiddenColumns = G.join(","), e.headerRows = this.getElementById(this.id + "_head_table").rows.length, e.gridStartRow = h || "1", e.gridStartCol = d || "1", WebSquare.domain ? (v += "&domain=" + WebSquare.text.URLEncoder(WebSquare.domain), e.domain = WebSquare.text.URLEncoder(WebSquare.domain)) : e.domain = "", "" == T && (T = this.options.csvUploadURL), e.action = T, e.processMsg = WebSquare.text.BASE64URLEncoder(I), e.dataList = _, 1 == R) { var V = [], q = {}, j = 0; for (B = 0; B < this.cellIdList.length; B++) { for (var P = this.cellInfoHash[this.cellIdList[B]], z = parseInt(P.options.rowSpan) || 1, U = parseInt(P.options.colSpan) || 1, X = j, K = 0; K < this.getRowCount() * this.getColCnt() && V[X + K]; K++)j++; for (var Z = 0; Z < U; Z++) { var Y = j; V[Y] = P.id, q[Y] = !0; for (K = 1; K < z; K++) { var $ = j + K * this.getColCnt(); V[$] = P.id, q[$] = !0 } j += 1 } } H = V.join(",") } else H = this.cellIdList.join(","); e.columnIds = H, e.expression = 1 == D ? "false" : "true", e.status = S, e.maxFileSize = L, e.postMsg = k, e.columnOrder = A, e.useModalDisable = F, e.useXHR = E, e.filePath = M, e.useDialog = t.useDialog; var J = r.D.getBoolean(e.wframe); if (this._csvUploadInfo = JSON.stringify(e), 0 == t.useDialog) {
										var Q = new FormData; Q.append("type", e.type), Q.append("uploadType", e.uploadType), Q.append("delim", e.delim), Q.append("escapeChar", e.escapeChar), Q.append("header", e.header), Q.append("footer", e.footer), Q.append("append", e.append), Q.append("hidden", e.hidden), Q.append("fillHidden", e.fillHidden), Q.append("advancedHidden", e.advancedHidden), Q.append("skipSpace", e.skipSpace), Q.append("removeColumns", e.removeColumns), Q.append("action", e.action), Q.append("gridID", e.gridID), Q.append("columnNum", e.columnNum), Q.append("expressionColumns", e.expressionColumns), Q.append("hiddenColumns", e.hiddenColumns), Q.append("headerRows", e.headerRows); var tt = WebSquare.Elem.api.getElementsByTagName(this.element, "w2:gBody"), et = WebSquare.Elem.api.getElementsByTagName(tt[0], "w2:row"); Q.append("bodyRows", et.length), Q.append("headerRows", e.headerRows), Q.append("gridStartRow", e.gridStartRow); var it = ""; it = "json" === this.element._elementType ? WebSquare.xmljs.json2xml(this.element._element, { changeKey: { "w2:select": "w2:column" } }) : WebSquare.xml.serialize(this.element._element), Q.append("gridStyle", it), Q.append("columnIds", e.columnIds), Q.append("dataList", e.dataList), Q.append("expression", e.expression), Q.append("status", e.status), Q.append("optionParam", e.optionParam), Q.append("columnOrder", e.columnOrder), Q.append("useXHR", e.useXHR), Q.append("filePath", e.filePath), Q.append("useDialog", e.useDialog), I && I.length > 0 ? WebSquare.layer.showProcessMessage(I, t) : WebSquare.layer.showProcessMessage("upload...", t); var ot = this, st = new XMLHttpRequest; st.onreadystatechange = function() {
											if (4 == st.readyState) if (200 == st.status) try {
												var i = st.responseText, o = WebSquare.xml.parse(i), s = o.getElementsByTagName("Exception"); if (s.length > 0) { var a, n = o.getElementsByTagName("deniedCodeList")[0], l = ""; if ("102" == (l = void 0 === n || null == l || void 0 === (l = n.firstChild) || null == l || "" == l ? "" : l.nodeValue)) h = Upload_msg2; else { var h = o.getElementsByTagName("message")[0].firstChild; h = WebSquare.language.getMessage("Upload_msg3") } (a = t.onFailureCallback || null) && a(e.action, h) } else {
													var d = o.getElementsByTagName("array")[0].firstChild.nodeValue; "string" == typeof e.append && (e.append = r.D.getBoolean(e.append)); var p = "", u = { columnInfo: e.columnIds.split(","), data: d }; if ("" != e.dataList) { p = e.dataList; var c = r.D.getComponentById(p), g = c.getRowCount(); if (1 == e.uploadType || 2 == e.uploadType ? c.setArrayFile(u, e.append, e.gridID, e.uploadType) : c.setArray(u, e.append), "C" == e.status) { var f = c.getRowCount(); e.append ? c.modifyRangeStatus(g, f, "C") : c.modifyRangeStatus(0, f, "C") } } else {
														p = e.gridID; g = this.getRowCount(); if (1 == e.uploadType || 2 == e.uploadType ? this.setDataFile(d, e.append, u.columnInfo, e.gridID, e.uploadType) : this.setData(d, e.append), "C" == e.status) {
															f = this.getRowCount()
															; e.append ? this.modifyRangeStatus(g, f, "C") : this.modifyRangeStatus(0, f, "C")
														}
													} var m = t.onSuccessCallback || null; m && m(e.action); var y = M.split("\\"); ot.fireFileReadEnd(y[y.length - 1])
												}
											} catch (t) { s.printStackTrace(t) } finally { WebSquare.layer.hideProcessMessage({ scope: this.scope_id || "" }) } else (a = t.onFailureCallback || null) && a(e.action), WebSquare.layer.hideProcessMessage({ scope: this.scope_id || "" })
										}, st.open("POST", e.action, !0), st.send(Q)
									} else if (!0 === J) { e.sizeInfo = {}, e.osName = "", e.sizeInfo.top = e.sFeatures.top ? e.sFeatures.top : 160, e.sizeInfo.left = e.sFeatures.left ? e.sFeatures.left : 280, -1 != navigator.userAgent.indexOf("Windows") ? e.osName = "window" : -1 != navigator.userAgent.indexOf("Macintosh") && (e.osName = "mac"), r.D.isIE(6) ? (e.sizeInfo.height = 212, e.sizeInfo.width = 456) : r.D.isIE(7) || r.D.isIE(8) ? (e.sizeInfo.height = 218, e.sizeInfo.width = 457) : r.D.isIE(9) ? (e.sizeInfo.height = 204, e.sizeInfo.width = 446) : r.D.isIE(10) ? (e.sizeInfo.height = 162, e.sizeInfo.width = 455) : r.D.isIEAllVersion(11) ? (e.sizeInfo.height = 161, e.sizeInfo.width = 455) : r.D.isSpartan() ? (e.sizeInfo.height = 178, e.sizeInfo.width = 446) : r.D.isChrome() ? -1 != navigator.userAgent.indexOf("OPR") ? "window" == e.osName ? (e.sizeInfo.height = 198, e.sizeInfo.width = 454) : "mac" == e.osName && (e.sizeInfo.height = 200, e.sizeInfo.width = 454) : "window" == e.osName ? (e.sizeInfo.height = 198, e.sizeInfo.width = 454) : "mac" == e.osName && (e.sizeInfo.height = 197, e.sizeInfo.width = 454) : r.D.isFF() ? "window" == e.osName ? (e.sizeInfo.height = 163, e.sizeInfo.width = 454) : "mac" == e.osName && (e.sizeInfo.height = 160, e.sizeInfo.width = 454) : r.D.isSafari() ? "window" == e.osName ? (e.sizeInfo.height = 160, e.sizeInfo.width = 470) : "mac" == e.osName && (e.sizeInfo.height = 160, e.sizeInfo.width = 454) : r.D.isOpera() && ("window" == e.osName ? (e.sizeInfo.height = 189, e.sizeInfo.width = 446) : "mac" == e.osName && (e.sizeInfo.height = 233, e.sizeInfo.width = 460)), "object" == typeof e.sFeatures && (e.sizeInfo.height = e.sFeatures.height ? e.sFeatures.height : e.sizeInfo.height, e.sizeInfo.width = e.sFeatures.width ? e.sFeatures.width : e.sizeInfo.width); var at = { type: "json", name: "csvPopupParam", data: e }, rt = { id: this.id + "_csvPop", type: "wframePopup", dataObject: at, popupName: e.name, style: "", useIFrame: !1, className: e.className, modal: !0, srcORurl: "", srcData: null, destData: null, xml: null, popupUrl: w, left: e.sizeInfo.left, top: e.sizeInfo.top, width: e.sizeInfo.width, height: e.sizeInfo.height, resizable: e.resizable, status: !1, menubar: !1, scrollbars: !1, title: !0, useControl: !1, controls: { minimize: !0, maximize: !0, close: !0 }, disableCloseButton: !1, fullscreen: !1, alwaysOnTop: !0, foldSize: { width: 500 }, windowDragMove: e.windowDragMove, processMsgFrame: !0 }; this.scope_obj && WebSquare.idCache[this.scope_obj.uuid] && (rt.scope_uuid = this.scope_obj.uuid), r.D.openPopup(rt.popupUrl, rt) } else v = WebSquare.BootLoader.getEngineUri(v), window.open(v, "csvupWindow", e.sFeatures)
							}, S.prototype.saveCSV = function(t) {
								var e = t.maxCellCount || -1; if (-1 != (e = parseInt(e, 10)) && e < (this.htmlInfo.body.rowAttrArr.length || 1) * this.getRowCount() * this.getColCnt()) { var i = WebSquare.language.getMessage("Grid_warning8", e) || "Cell 개수가 제한 크기를 초과 하였습니다.\n 제한 개수 : " + e; return void alert(i) } var o = t.maxRowCount || -1; if (-1 != (o = parseInt(o, 10)) && o < (this.htmlInfo.body.rowAttrArr.length || 1) * this.getRowCount()) { i = WebSquare.language.getMessage("Grid_warning10", o) || "Row 개수가 제한 크기를 초과 하였습니다.\n 제한 개수 : " + o; return void alert(i) } WebSquare.layer.showProcessMessage("download...", { scope: this.scope_id || "" }), this._dataList.options.depthColumn && "true" == t.spanAll && (this.orgStatusArr = this.drilldown.statusArr, this.orgFilteredRowIndexArr = this._dataList.filteredRowIndexArr, this.orgShowDepth = this.showDepth, this.showDepth = "9999", this.initDrilldown()); var a = (t = t || {}).fileName || "csvfile.csv", n = t.type || "1", l = t.delim || ";", h = t.displayDelim || "true", d = t.removeColumns || "", p = t.header || "1", u = t.hidden || "0", c = t.checkButton || "1", g = t.removeQuotation || "1", f = t.removeNewLine || "1", m = t.saveList || "", y = this.options.rowNumHeaderValue || ""; this.options.useLocale && this.options.rowNumLocaleRef && ((W = this.getLocaleValue(this.options.rowNumLocaleRef)) && (y = W)); var b = ""
									; "1" != t.rowNumVisible && "true" != t.rowNumVisible && 1 != t.rowNumVisible || (b = this.options.rowNumVisible || "false"); var w = t.textTable || "false", v = t.textTableAlign || "right", C = t.useFooter || "false", I = t.columnMove + "" == "true", _ = t.columnOrder || "", S = t.optionParam || "", D = t.aposPrefixOnNum || "0", R = t.aposPrefixOnText || "0", L = t.ignoreSpan || "0", T = t.maxDataSize || -1; T = parseInt(T, 10); var k = t.csvDownloadURL || "", A = 1 == this.options.useXHR ? this.options.useXHR : t.useXHR || "false"; t.useXHR = A + "" == "true"; for (var F = t.openFile || "false", E = t.sameSite || "", M = t.useHeaderCheckBoxLabel + "" == "true", O = t.opencsv + "" == "true", N = WebSquare.Elem.api.getElementsByTagName(this.element, "w2:header")[0], B = WebSquare.Elem.api.getElementsByTagName(N, "w2:column"), G = 0; G < B.length; G++) { var H = B[G]; if ("checkbox" === H.getAttribute("inputType") && !0 === M) { var W, V = H.getAttribute("checkboxLabel") || H.getAttribute("value"), q = H.getAttribute("localeRef"); if (this.options.useLocale && q) (W = this.getLocaleValue(q)) && (V = W); H.setAttribute("value", V + "") } else { var j = H.getAttribute("id"); H.setAttribute("value", this.getHeaderValue(j) + "") } } var P = new x.h.Hashtable, z = ""; z = "json" === this.element._elementType ? WebSquare.xmljs.json2xml(this.element._element, { changeKey: { "w2:select": "w2:column" } }) : WebSquare.xml.serialize(this.element._element), P.put("style", z), "0" == n ? (P.put("data", this.getExcelAllXML()), "true" == C ? P.put("footer_data", this.getExcelAllFooterXML()) : P.put("footer_data", "<array><![CDATA[[]]]></array>")) : (P.put("data", this.getExcelAllXMLDisplay(n)), "true" == C ? P.put("footer_data", this.getExcelAllFooterXMLDisplay()) : P.put("footer_data", "<array><![CDATA[[]]]></array>")); var U, X = []; for (G = 0; G < this.getTotalCol(); G++) { var K = this.getCellInfo(G).options.inputType; "checkbox" != K && "radio" != K && "button" != K || X.push('"' + G + '"') } I && (U = "" == _ ? this.getColumnOrder() || "" : _.split(",")); var Z = []; if ("" != d) { var Y = (d += "").split(","); if (I) for (G = 0; G < Y.length; G++)for (var $ = 0; $ < U.length; $++)Y[G] == U[$] && Z.push($); else Z = Y; Z.sort((function(t, e) { return 1 * t - 1 * e })), d = Z.join(",") } var J = d; J = '"' + J.wq_replaceAll(",", '","') + '"', P.put("hiddenArr", this.getHiddenColumnArr()), P.put("fileName", a), P.put("hidden", u), P.put("checkButton", c), P.put("type", n), P.put("rowNumVisible", b), P.put("rowNumHeaderValue", y), P.put("removeQuotation", g), P.put("delim", l), P.put("displayDelim", h), P.put("header", p), P.put("textTable", w), P.put("textTableAlign", v), P.put("useFooter", C), P.put("columnMove", I), P.put("columnOrder", U), P.put("optionParam", S), P.put("aposPrefixOnNum", D), P.put("aposPrefixOnText", R), P.put("ignoreSpan", L), P.put("removeNewLine", f), P.put("checkButtonArr", "<array><![CDATA[[" + X.join(",") + "]]]></array>"), "" != m && P.put("saveList", '<array><![CDATA[["' + m.join('","') + '"]]]></array>'), P.put("removeColumns", "<array><![CDATA[[" + J + "]]]></array>"), P.put("openFile", F), "" != E && P.put("sameSite", E), P.put("opencsv", O), P.put("useXHR", A); var Q = P.toString(); if (-1 != T && T < r.D.getByteLengthUtf8(Q)) { i = WebSquare.language.getMessage("Grid_warning9", T) || "전송 data가 제한 크기를 초과 하였습니다.\n 제한 크기 : " + e + " byte"; return !1 === t.showProcess ? WebSquare.getBody().hideModal(!0) : !0 === t.showConfirm ? this.hideDownloadLayer() : WebSquare.layer.hideProcessMessage({ scope: this.scope_id || "" }), void alert(i) } "" == k && (k = this.options.csvDownloadURL), t.scopeId = this.scope_id || "", s.v.excelDownload(k, Q, "post", t), this._dataList.options.depthColumn && "true" == t.spanAll && (this.drilldown.statusArr = this.orgStatusArr, this._dataList.filteredRowIndexArr = this.orgFilteredRowIndexArr, this.showDepth = this.orgShowDepth, this.orgStatusArr = null, this.orgFilteredRowIndexArr = null, this.orgShowDepth = null, this.drawData(this.rowIndex, 0))
							}, S.prototype.saveCSVFile = function(t, e, i, o, a, r, n, l, h) {
								WebSquare.layer.showProcessMessage("download...", { scope: this.scope_id || "" }), n += ""; var d = new x.h.Hashtable, p = ""; p = "json" === this.element._elementType ? WebSquare.xmljs.json2xml(this.element._element, { changeKey: { "w2:select": "w2:column" } }) : WebSquare.xml.serialize(this.element._element), d.put("style", p), "0" == n || "" == n ? (d.put("data", this.getExcelAllXML()),
									d.put("footer_data", this.getExcelAllFooterXML())) : (d.put("data", this.getExcelAllXMLDisplay(n)), d.put("footer_data", this.getExcelAllFooterXMLDisplay())); for (var u = [], c = 0; c < this.getTotalCol(); c++) { var g = this.getCellInfo(c).options.inputType; "checkbox" != g && "radio" != g && "button" != g || u.push('"' + c + '"') } var f = h || ""; f = '"' + f.wq_replaceAll(",", '","') + '"', d.put("hiddenArr", this.getHiddenColumnArr()), d.put("fileName", t), d.put("hidden", o), d.put("checkButton", "1"), d.put("type", n), d.put("rowNumVisible", this.options.rowNumVisible); var m = this.options.rowNumHeaderValue || ""; if (this.options.useLocale && this.options.rowNumLocaleRef) { var y = this.getLocaleValue(this.options.rowNumLocaleRef); y && (m = y) } d.put("rowNumHeaderValue", m), d.put("removeQuotation", r), d.put("delim", e), d.put("header", i), d.put("checkButtonArr", "<array><![CDATA[[" + u.join(",") + "]]]></array>"), void 0 !== l && l && d.put("saveList", '<array><![CDATA[["' + l.join('","') + '"]]]></array>'), d.put("removeColumns", "<array><![CDATA[[" + f + "]]]></array>"), s.v.excelDownload(this.options.csvDownloadURL, d.toString(), "post", { scopeId: this.scope_id || "" })
							}, S.prototype.getExcelUploadInfo = function(t) {
								var e = {}, i = (t = t || {}).type || "0", o = t.removeColumns || "", s = t.startRowIndex || "0", a = t.startColumnIndex || "0", r = t.endColumnIndex || "-1", n = t.ignoreStartRowIndexInSAX + "" || "1", l = t.ignoreStartColumnIndexInSAX + "" || "1", h = t.sheetNo || "0", d = t.sheetName || "", p = t.activeSheet || !1, u = t.headerExist || "0"; 0 === t.footerExist && (t.footerExist = "0"); var c = t.footerExist || "1", g = t.append || "0", f = t.hidden || "0", m = t.fillHidden || "0", y = t.optionParam || "", b = t.skipSpace || "0", w = t.insertColumns || [], v = t.processMsg || "", C = ""; if (this.options.dataList) { var I = this.modelControl.getDataComp(this.options.dataList); null != I && (C = I.id) } var _ = t.status || "R", x = t.delim || ",", S = "", D = "", R = "", L = t.pwd || "", T = t.loadingMode || "", k = t.maxFileSize || "-1", A = t.cellDataConvertor || "", F = t.decimal || "4", E = t.applyDecimal || "0", M = t.useModalDisable || "false", O = t.useMaxByteLength || "false", N = 1 == this.options.postMsg ? this.options.postMsg : t.postMsg || "false", B = t.dateFormat || "yyyy-MM-dd", G = t.byteCheckEncoding || "EUC-KR", H = t.columnOrder || "", W = t.columnMove + "" == "true", V = t.chunkNum || 0, q = t.trim || 0, j = t.useXHR + "" == "true", P = t.filePath || ""; t.useDialog = t.useDialog + "" != "false"; for (var z = 0; z < w.length; z++) { var U = w[z], X = U.columnIndex + "" || "", K = U.columnValue + "" || ""; "" != X && (S = S + D + X + "," + K, D = "|") } if (void 0 === t.features || "string" != typeof t.features) R = "top=280,height=137,left=160,width=446,location=no,menubar=no,resizable=yes,scrollbars=auto,status=no,titlebar=yes,toolbar=no"; else { var Z = t.features.split(","), Y = {}; for (z = 0; z < Z.length; z++)0 != Z[z].toLowerCase().indexOf("top") ? 0 != Z[z].toLowerCase().indexOf("left") ? 0 != Z[z].toLowerCase().indexOf("height") ? 0 != Z[z].toLowerCase().indexOf("width") || (Y.width = parseInt(Z[z].split("=")[1])) : Y.height = parseInt(Z[z].split("=")[1]) : Y.left = parseInt(Z[z].split("=")[1]) : Y.top = parseInt(Z[z].split("=")[1]); R = 1 == t.wframe ? Y : t.features } e.sFeatures = R, e.userFeatures = Y, u = parseInt(u, 10), g = parseInt(g, 10), f = parseInt(f, 10), c = parseInt(c, 10), e.header = 1 == u ? "true" : "false", e.footer = 1 == c ? "true" : "false", e.append = 1 == g ? "true" : "false", e.removeColumns = o, e.fillHidden = 1 == m ? "true" : "false", e.hidden = 1 == f ? "true" : "false", e.type = 1 == i ? "true" : "false", e.uploadType = i, e.skipSpace = 1 == b ? "true" : "false", e.insertColumns = S, e.optionParam = y, t.advancedExcelUploadURL ? e.action = t.advancedExcelUploadURL : e.action = this.options.advancedExcelUploadURL, e.gridID = this.id; var $ = []; for (z = this.defaultColCnt; z < this.hiddenList.length; z++)1 == this.hiddenList[z] && $.push(z - this.defaultColCnt); if (e.columnNum = this.getTotalCol(), e.expressionColumns = this.getExpressionColumnArr().join(","), e.hiddenColumns = $.join(","), e.headerRows = this.getElementById(this.id + "_head_table").rows.length, e.gridStartRow = s || "1", e.gridStartCol = a || "1", e.gridEndCol = r, e.ignoreStartRowIndexInSAX = "0" == n ? "true" : "false", e.ignoreStartColumnIndexInSAX = "0" == l ? "true" : "false", e.gridSheetNo = h || "0", e.gridSheetName = d, e.activeSheet = p, e.applyDecimal = "0" == E ? "false" : "true",
									WebSquare.domain && (e.domain = WebSquare.text.URLEncoder(WebSquare.domain)), e.processMsg = WebSquare.text.BASE64URLEncoder(v), e.delim = x, e.dataList = C, !0 === W) { var J = this.htmlInfo.body.rowAttrArr.length, Q = this.getColumnOrder(), tt = Q.length, et = new Array(tt); for (z = 0; z < J; z++)for (var it = 0; it < tt; it++)et[tt * z + it] = this.getColumnID(tt * z + Q[it]); e.columnIds = et.join(",") } else e.columnIds = this.cellIdList.join(","); return e.trim = 1 == q, e.status = _, e.pwd = L, e.loadingMode = T, e.maxFileSize = k, e.cellDataConvertor = A, e.decimal = F, e.useModalDisable = M + "", e.useMaxByteLength = O + "", e.postMsg = N + "", e.dateFormat = B, e.byteCheckEncoding = G, e.columnOrder = H, e.wframe = t.wframe || !1, e.name = t.name || "FILE UPLOAD", e.className = t.className || "", e.resizable = 0 != t.resizable || t.resizable, e.windowDragMove = t.windowDragMove || !1, e.chunkNum = parseInt(V, 10), e.useXHR = j, e.filePath = P, e.useDialog = t.useDialog, t.convertIndex && (t.convertIndex = t.convertIndex.wq_replaceAll(" ", ""), e.convertIndexArr = t.convertIndex.split(",")), "grid" == this.initializeType && this.options.ref && t.instanceBind && (e.instanceBind = t.instanceBind), e
							}, S.prototype.advancedExcelUpload = function(t) {
								var e = this.getExcelUploadInfo(t), i = t.popupUrl || this.options.advancedExcelUploadPopupURL, s = document.location.protocol + "//" + document.location.host + "/", a = t.popupUrl ? s + t.popupUrl : o.x.baseURI + WebSquare.BootLoader.inquiresPath("uiplugin/grid/upload/advancedfileUpload.js"), n = t.advancedHidden || "0", l = ""; i += "?gridID=" + e.gridID, WebSquare.domain && (i += "&domain=" + e.domain), i += 1 == n ? "&advancedHidden=true" : "&advancedHidden=false", "" != e.pwd && (l = WebSquare.text.BASE64Encoder(e.pwd)), e.pwd = l; var h = r.D.getBoolean(e.wframe); if (this._excelUploadInfo = JSON.stringify(e), 0 == t.useDialog) {
									var d = new FormData; d.append("header", e.header), d.append("footer", e.footer), d.append("append", e.append), d.append("hidden", e.hidden), d.append("columnNum", e.columnNum), d.append("hiddenColumns", e.hiddenColumns), d.append("removeColumns", e.removeColumns), d.append("headerRows", e.headerRows); var p = WebSquare.Elem.api.getElementsByTagName(this.element, "w2:gBody"), u = WebSquare.Elem.api.getElementsByTagName(p[0], "w2:row"); d.append("bodyRows", u.length), d.append("delim", e.delim), d.append("fillHidden", e.fillHidden), d.append("gridStartRow", e.gridStartRow), d.append("gridStartCol", e.gridStartCol), d.append("gridEndCol", e.gridEndCol), d.append("gridEndCol", e.gridEndCol), d.append("gridSheetNo", e.gridSheetNo), d.append("gridSheetName", e.gridSheetName), d.append("activeSheet", e.activeSheet), d.append("expressionColumns", e.expressionColumns); var c = ""; c = "json" === this.element._elementType ? WebSquare.xmljs.json2xml(this.element._element, { changeKey: { "w2:select": "w2:column" } }) : WebSquare.xml.serialize(this.element._element), d.append("gridStyle", c), d.append("type", e.type), d.append("uploadType", e.uploadType), d.append("skipSpace", e.skipSpace), d.append("insertColumns", e.insertColumns), d.append("dataList", e.dataList), d.append("instanceBind", e.instanceBind), d.append("columnIds", e.columnIds), d.append("status", e.status), d.append("pwd", e.pwd), d.append("loadingMode", e.loadingMode), d.append("optionParam", e.optionParam), d.append("cellDataConvertor", e.cellDataConvertor), d.append("decimal", e.decimal), d.append("applyDecimal", e.applyDecimal), d.append("useMaxByteLength", e.useMaxByteLength), d.append("dateFormat", e.dateFormat), d.append("byteCheckEncoding", e.byteCheckEncoding), d.append("columnOrder", e.columnOrder), d.append("chunkNum", e.chunkNum || 0), d.append("trim", e.trim), d.append("useXHR", e.useXHR), d.append("filePath", e.filePath), d.append("useDialog", e.useDialog); var g = WebSquare.text.BASE64URLDecoder(e.processMsg); g && g.length > 0 ? WebSquare.layer.showProcessMessage(g, t) : WebSquare.layer.showProcessMessage("upload...", t); var f = this, m = new XMLHttpRequest; m.onreadystatechange = function() {
										if (4 == m.readyState) if (200 == m.status) {
											var i = m.responseText; try {
												var o = WebSquare.xml.parse(i), s = o.getElementsByTagName("Exception"); if (s.length > 0) {
													var a = o.getElementsByTagName("deniedCodeList")[0], n = ""
													; if (void 0 === a ? n = "" : void 0 !== (n = WebSquare.xml.getTextNodeValue(a)) && null != n && "" != n || (n = ""), "102" == n) l = WebSquare.language.getMessage("Upload_msg2"); else if ("101" == n) l = WebSquare.language.getMessage("Upload_msg9"); else if ("200" == n) l = WebSquare.language.getMessage("Upload_msg10"); else if ("201" == n) l = WebSquare.language.getMessage("Upload_msg11"); else if ("202" == n) l = WebSquare.language.getMessage("Upload_msg8"); else if ("203" == n) l = WebSquare.language.getMessage("Upload_msg12"); else if ("204" == n) l = WebSquare.language.getMessage("Upload_msg13"); else if ("205" == n) l = WebSquare.language.getMessage("Upload_msg14"); else if ("206" == n) l = WebSquare.language.getMessage("Upload_msg15"); else if ("207" == n) l = WebSquare.language.getMessage("Upload_msg16"); else if ("208" == n) l = WebSquare.language.getMessage("Upload_msg17"); else { var l = WebSquare.xml.getTextNodeValue(o.getElementsByTagName("message")[0]); void 0 !== l && null != l && "" != l || (l = WebSquare.language.getMessage("Upload_msg3")) } (b = t.onFailureCallback || null) && b(e.action, l)
												} else { var h = o.getElementsByTagName("array")[0].firstChild.nodeValue; "string" == typeof e.append && (e.append = r.D.getBoolean(e.append)); var d = { columnInfo: e.columnIds.split(","), data: h }; if ("" != e.dataList) { var p = r.D.getComponentById(e.dataList); d.data = d.data.replaceAll("\\n", "\n"); var u = p.getRowCount(); if (1 == e.uploadType || 2 == e.uploadType ? "," != e.delim ? p.setArrayFile(d, e.append, e.gridID, e.uploadType, e.delim) : p.setArrayFile(d, e.append, e.gridID, e.uploadType) : 0 == e.uploadType && ("," != e.delim ? p.setArray(d, e.append, null, null, e.delim) : p.setArray(d, e.append)), "C" == status) { var c = p.getRowCount(); e.append ? p.modifyRangeStatus(u, c, "C") : p.modifyRangeStatus(0, c, "C") } } else { u = this.getRowCount(); if (!this.options.ref || 1 != e.instanceBind && "true" != e.instanceBind ? 1 == e.uploadType || 2 == e.uploadType ? this.setDataFile(h, e.append) : 0 == uploadType && this.setData(h, e.append) : (this.options.instanceBindBySetData = !0, 1 == e.uploadType || 2 == e.uploadType ? this.setDataFile(h, e.append) : 0 == e.uploadType && this.setData(h, e.append), this.options.instanceBindBySetData = !1), "C" == e.status) { c = this.getRowCount(); e.append ? this.modifyRangeStatus(u, c, "C") : this.modifyRangeStatus(0, c, "C") } } var g = t.onSuccessCallback || null; g && g(e.action); var y = t.filePath.split("\\"); f.fireFileReadEnd(y[y.length - 1]) }
											} catch (t) { s.printStackTrace(t) } finally { WebSquare.layer.hideProcessMessage({ scope: this.scope_id || "" }) }
										} else { var b; (b = t.onFailureCallback || null) && b(e.action), WebSquare.layer.hideProcessMessage({ scope: this.scope_id || "" }) }
									}, m.open("POST", e.action, !0), m.send(d)
								} else if (!0 === h) {
									e.sizeInfo = {}, e.osName = "", e.sizeInfo.top = e.sFeatures.top ? e.sFeatures.top : 160, e.sizeInfo.left = e.sFeatures.left ? e.sFeatures.left : 280, -1 != navigator.userAgent.indexOf("Windows") ? e.osName = "window" : -1 != navigator.userAgent.indexOf("Macintosh") && (e.osName = "mac"), r.D.isIE(6) ? (e.sizeInfo.height = 212, e.sizeInfo.width = 456) : r.D.isIE(7) || r.D.isIE(8) ? (e.sizeInfo.height = 218, e.sizeInfo.width = 457) : r.D.isIE(9) ? (e.sizeInfo.height = 204, e.sizeInfo.width = 446) : r.D.isIE(10) ? (e.sizeInfo.height = 162, e.sizeInfo.width = 455) : r.D.isIEAllVersion(11) ? (e.sizeInfo.height = 198, e.sizeInfo.width = 455) : r.D.isSpartan() ? (e.sizeInfo.height = 178, e.sizeInfo.width = 446) : r.D.isChrome() ? -1 != navigator.userAgent.indexOf("OPR") ? "window" == e.osName ? (e.sizeInfo.height = 164, e.sizeInfo.width = 454) : "mac" == e.osName && (e.sizeInfo.height = 160, e.sizeInfo.width = 454) : "window" == e.osName ? (e.sizeInfo.height = 200, e.sizeInfo.width = 454) : "mac" == e.osName && (e.sizeInfo.height = 197, e.sizeInfo.width = 454) : r.D.isFF() ? "window" == e.osName ? (e.sizeInfo.height = 163, e.sizeInfo.width = 454) : "mac" == e.osName && (e.sizeInfo.height = 160, e.sizeInfo.width = 454) : r.D.isSafari() ? "window" == e.osName ? (e.sizeInfo.height = 160, e.sizeInfo.width = 470) : "mac" == e.osName && (e.sizeInfo.height = 160, e.sizeInfo.width = 454) : r.D.isOpera() && ("window" == e.osName ? (e.sizeInfo.height = 189, e.sizeInfo.width = 446) : "mac" == e.osName && (e.sizeInfo.height = 233, e.sizeInfo.width = 460)), "object" == typeof e.sFeatures && (e.sizeInfo.height = e.sFeatures.height ? e.sFeatures.height : e.sizeInfo.height,
										e.sizeInfo.width = e.sFeatures.width ? e.sFeatures.width : e.sizeInfo.width); var y = { type: "json", name: "popupParam", data: e }, b = { id: this.id + "_excelPop", type: "wframePopup", dataObject: y, popupName: e.name, style: "", useIFrame: !1, className: e.className, modal: !0, useModalStack: !0, srcORurl: "", srcData: null, destData: null, xml: null, popupUrl: a, left: e.sizeInfo.left, top: e.sizeInfo.top, width: e.sizeInfo.width, height: e.sizeInfo.height, resizable: e.resizable, status: !1, menubar: !1, scrollbars: !1, title: !0, useControl: !1, controls: { minimize: !0, maximize: !0, close: !0 }, disableCloseButton: !1, fullscreen: !1, alwaysOnTop: !0, foldSize: { width: 500 }, windowDragMove: e.windowDragMove, processMsgFrame: !0 }; r.D.openPopup(b.popupUrl, b)
								} else i = WebSquare.BootLoader.getEngineUri(i), window.open(i, "fileupWindow", e.sFeatures)
							}, S.prototype.advancedExcelDownload = function(t, e) { try { var i = t.maxCellCount || -1; if (-1 != (i = parseInt(i, 10))) if (i < (this.htmlInfo.body.rowAttrArr.length || 1) * this.getRowCount() * this.getColCnt()) { var o = WebSquare.language.getMessage("Grid_warning8", i) || "Cell 개수가 제한 크기를 초과 하였습니다.\n 제한 개수 : " + i; return WebSquare.layer.hideProcessMessage({ scope: this.scope_id || "" }), void alert(o) } var s = t.maxRowCount || -1; if (-1 != (s = parseInt(s, 10))) if (s < (this.htmlInfo.body.rowAttrArr.length || 1) * this.getRowCount()) { o = WebSquare.language.getMessage("Grid_warning10", s) || "Row 개수가 제한 크기를 초과 하였습니다.\n 제한 개수 : " + s; return WebSquare.layer.hideProcessMessage({ scope: this.scope_id || "" }), void alert(o) } this._dataList.options.depthColumn && "true" == t.spanAll && (this.orgStatusArr = this.drilldown.statusArr, this.orgFilteredRowIndexArr = this._dataList.filteredRowIndexArr, this.orgShowDepth = this.showDepth, this.showDepth = "9999", this.initDrilldown()); var r = parseInt(t.rowsByN); switch (t.rowsByN = r > 100 ? r : 100, t.dataLength = this.getDataLength(), t.multiexcel = !1, t.dataProvider = t.dataProvider || "", t.splitProvider = t.splitProvider || "", t.scope = this.scope_id || "", t.type + "") { case "": case "0": t.type = 0; break; case "2": t.type = 2; break; default: t.type = 1 }if (!1 === t.showProcess) WebSquare.getBody().showModal("w2modal_gridDownload"); else if (!0 === t.showConfirm) t.massStorage = !0, window.downloadGridId = this.id, WebSquare.getBody().showModal(), this.showSendExcelLayer(); else { var n = t.processMsg; n && n.length > 0 ? WebSquare.layer.showProcessMessage(n, t) : WebSquare.layer.showProcessMessage("download...", t) } if (0 === t.type || 1 === t.type || 2 == t.type) { t.cellInfo = [], t.isPlainDataCol = [], t.isSelectCol = [], t.isBasicCol = [], t.isExpCol = [], t.isCustomCol = [], t.isCustomModelCol = [], t.isCustomType = [], t.isEscapeFormatter = []; for (var l = this.oneRowDataLength, h = 0; h < l; h++) { var d = this.getCellInfo(h), p = d.options.inputType; t.cellInfo[h] = d, t.isCustomType[h] = "custom" === p, t.isPlainDataCol[h] = "checkbox" === p || "image" === p || "radio" === p, t.isSelectCol[h] = "select" === p || "checkcombobox" === p || "autoComplete" === p, t.isExpCol[h] = "expression" === p, t.isCustomCol[h] = d.useCustomFormatter, t.isCustomModelCol[h] = d.useCustomModelFormatter, t.isBasicCol[h] = !(t.isPlainDataCol[h] || t.isSelectCol[h] || t.isExpCol[h] || t.isCustomCol[h] || t.isCustomModelCol[h] || t.isCustomType[h]), t.isEscapeFormatter[h] = d.useEscapeFormatter } } if (t.dataHandler = t.dataHandler || "", "" != t.dataHandler) { this.sendExcelData(t, e, "") } else this.makeExcelData(0, [], t, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.showSendExcelLayer = function() {
								if (void 0 !== window.gridExceldownloadIframe) { window.gridExceldownloadIframe.style.visibility = "hidden", window.gridExceldownloadIframe.style.display = "block"; var t = document.documentElement.scrollTop + document.documentElement.clientHeight / 2 - parseInt(window.gridExceldownloadIframe.offsetHeight) / 2, e = document.documentElement.scrollLeft + document.documentElement.clientWidth / 2 - parseInt(window.gridExceldownloadIframe.offsetWidth) / 2; window.gridExceldownloadIframe.style.left = e + "px", window.gridExceldownloadIframe.style.top = t + "px", window.gridExceldownloadIframe.style.visibility = "visible", window.gridExceldownloadIframe.contentWindow.initialize() } else {
									window.gridExceldownloadIframe = document.createElement("iframe"),
									window.gridExceldownloadIframe.style.visibility = "hidden", window.gridExceldownloadIframe.setAttribute("id", "gridDownLoadLayer"), window.gridExceldownloadIframe.setAttribute("src", this.options.advancedExcelDownloadPopupURL), window.gridExceldownloadIframe.setAttribute("frameBorder", "0"), window.gridExceldownloadIframe.className = "w2grid_downloadIframe", window.gridExceldownloadIframe.style.width = "300px", window.gridExceldownloadIframe.style.overflow = "hidden", document.body.appendChild(window.gridExceldownloadIframe); t = document.documentElement.scrollTop + document.documentElement.clientHeight / 2 - parseInt(window.gridExceldownloadIframe.offsetHeight) / 2, e = document.documentElement.scrollLeft + document.documentElement.clientWidth / 2 - parseInt(window.gridExceldownloadIframe.offsetWidth) / 2; window.gridExceldownloadIframe.style.left = e + "px", window.gridExceldownloadIframe.style.top = t + "px", window.gridExceldownloadIframe.style.position = "absolute", window.gridExceldownloadIframe.style.visibility = "visible"
								}
							}, S.prototype.checkUpload = function() { var t = this; setTimeout((function() { 1 == t.downloadInit ? window.gridExceldownloadIframe.contentWindow.checkUpload("end") : t.checkUpload() }), 10) }, S.prototype.sendExcelData = function(t, e, i) {
								"boolean" == typeof t.useFooter && (t.useFooter = t.useFooter + ""); var o = WebSquare.xml.encode(t.fileName) || "excel", a = t.sheetName || "sheet", n = t.type || "0", l = "false"; if (1 == t.multiexcel) { var h = t.multipleSheet; void 0 === t.multipleSheet && (h = ""), l = h + "" == "true" || h + "" == "" ? "true" : "false" } else l = "false"; var d = t.removeColumns || "", p = t.removeHeaderRows || "", u = t.foldColumns || "", c = t.startRowIndex || "0", g = t.startColumnIndex || "0", f = t.headerColor || "", m = t.headerFontName || "", y = t.headerFontSize || "", b = t.headerFontColor || "", w = t.headerFontBold || "", v = t.bodyColor || "", C = t.bodyFontName || "", I = t.bodyFontSize || "", _ = t.bodyFontColor || "", x = t.bodyFontBold || "", S = t.footerColor || "", D = t.footerFontName || "", R = t.footerFontSize || "", L = t.footerFontColor || "", T = t.footerFontBold || "", k = t.subTotalColor || "", A = t.subTotalFontName || "", F = t.subTotalFontSize || "", E = t.subTotalFontColor || "", M = t.subTotalFontBold || "", O = t.rowNumHeaderColor || "", N = t.rowNumHeaderFontName || "", B = t.rowNumHeaderFontSize || "", G = t.rowNumHeaderFontColor || "", H = t.rowNumBodyColor || "", W = t.rowNumBodyFontName || "", V = t.rowNumBodyFontSize || "", q = t.rowNumBodyFontColor || "", j = t.rowNumFooterColor || "", P = t.rowNumFooterFontName || "", z = t.rowNumFooterFontSize || "", U = t.rowNumFooterFontColor || "", X = t.rowNumSubTotalColor || "", K = t.rowNumSubTotalFontName || "", Z = t.rowNumSubTotalFontSize || "", Y = t.rowNumSubTotalFontColor || "", $ = t.dataProvider || "", J = t.footerDataProvider || "", Q = t.splitProvider || "", tt = t.providerRequestXml || "", et = t.userDataXml || "", it = t.optionParam || "", ot = t.bodyWordwrap || "", st = t.subtotalWordwrap || "", at = t.footerWordwrap || "", rt = t.useEuroLocale || "false", nt = t.numberLocale || "", lt = t.useHeader || "true", ht = t.useSubTotal || "false", dt = t.useFooter || "true"; t.printSet = t.printSet || {}; var pt = t.printSet.fitToPage || "false", ut = t.printSet.landScape || "false", ct = t.printSet.fitWidth || "1", gt = t.printSet.fitHeight || "1", ft = t.printSet.scale || "100", mt = t.printSet.pageSize || "A4", yt = t.separator || ",", bt = t.subTotalScale || -1, wt = t.subTotalRoundingMode || "", vt = t.footerScale || -1, Ct = t.footerRoundingMode || "", It = t.useStyle + "" == "true", _t = t.useClass + "" == "true"; t.useClass = _t; var xt = t.setFontSize + "" == "true", St = t.freezePane || "", Dt = t.autoSizeColumn || "false", Rt = t.autoSizeAdjustWith || 512, Lt = t.displayGridlines || "", Tt = t.colMerge || "false", kt = t.colMergeValue || "false", At = t.colMergeTextAlign || "center", Ft = t.useDataFormat || "false", Et = t.useHeaderDataFormat || "", Mt = t.applyDataFormat || "false", Ot = t.customToDataType || "false", Nt = t.useSubTotalData + "" == "true", Bt = t.useFooterData + "" == "true", Gt = t.calcFooter + "" == "true", Ht = t.columnMove + "" == "true", Wt = t.columnOrder || ""; Gt && (Ht = !1); var Vt = t.columnMoveWithSubTotal || "", qt = t.columnMoveWithFooter || "", jt = t.oddRowBackgroundColor || "", Pt = t.evenRowBackgroundColor || "", zt = t.indent || "0", Ut = WebSquare.xml.encode(this.options.rowNumHeaderValue) || t.rowNumHeaderValue || ""
									; this.options.useLocale && this.options.rowNumLocaleRef && ((ni = this.getLocaleValue(this.options.rowNumLocaleRef)) && (Ut = ni)); var Xt = t.rowNumVisible + "" == "true", Kt = this.options.startRowNumber || "1", Zt = t.bodyNumberDefaultValue || "", Yt = t.numberToText || "false", $t = t.rowHeight || "-1", Jt = t.headerRowHeight || "-1", Qt = t.maxDataSize || -1; Qt = parseInt(Qt, 10); var te = t.pwd || "", ee = t.useImage || "false", ie = t.headerAutoFilter || "false", oe = t.filterRowIndex || "-1", se = t.mergeCell + "" == "true", ae = t.noMerge + "" == "true"; t.httpReadOnly = t.httpReadOnly + "" == "true"; var re = t.advancedExcelDownloadURL || "", ne = 1 == this.options.useXHR ? this.options.useXHR : t.useXHR || "false"; t.useXHR = ne + "" == "true"; var le, he = t.openFile || "false", de = t.macroFileName || "", pe = t.useMacro || "false", ue = t.showDialog || "false", ce = t.dialogFilter || "", ge = t.keepType || "false", fe = t.useHeaderCheckBoxLabel + "" == "true", me = t.lazyInfoArr || "false", ye = t.decimal || "", be = t.sameSite || "", we = t.customProvider || "", ve = t.customProviderIndex || "", Ce = t.rowAccessWindowSize || "", Ie = t.trim || "", _e = t.desc || "", xe = t.chart || {}; if (xe.chartName) var Se = xe.chartName || "line", De = xe.chartType || "", Re = xe.title || "", Le = xe.xTitle || "", Te = xe.yTitle || "", ke = xe.startRowIndex || 0, Ae = xe.startColIndex || 0, Fe = xe.endRowIndex || 0, Ee = xe.endColIndex || 0, Me = xe.serAxis || "true", Oe = xe.catAxis || "true", Ne = xe.catAxisRange || {}, Be = Ne.startColIndex || 0, Ge = Ne.startRowIndex || 0, He = Ne.endColIndex || 0, We = Ne.endRowIndex || 0, Ve = xe.serAxisRange || {}, qe = Ve.startColIndex || 0, je = Ve.startRowIndex || 0, Pe = Ve.endColIndex || 0, ze = Ve.endRowIndex || 0, Ue = xe.dataAxisRange || {}, Xe = Ue.startColIndex || 0, Ke = Ue.startRowIndex || 0, Ze = Ue.endColIndex || 0, Ye = Ue.endRowIndex || 0, $e = xe.catGridLines || "true", Je = xe.serGridLines || "true", Qe = xe.legend || "true", ti = xe.legendPosition || "bottom"; Ht && (le = "" == Wt ? this.getColumnOrder() || "" : Wt.split(",")); var ei = []; if ("" != d) { var ii = (d += "").split(","); if (Ht) for (var oi = 0; oi < ii.length; oi++)for (var si = 0; si < le.length; si++)ii[oi] == le[si] && ei.push(si); else ei = ii; ei.sort((function(t, e) { return 1 * t - 1 * e })), d = ei.join(",") } var ai = WebSquare.Elem.api.getElementsByTagName(this.element, "w2:header")[0], ri = WebSquare.Elem.api.getElementsByTagName(ai, "w2:column"); for (oi = 0; oi < ri.length; oi++) { if ("checkbox" === (_i = ri[oi]).getAttribute("inputType") && !0 === fe) { var ni, li = _i.getAttribute("checkboxLabel") || _i.getAttribute("value"), hi = _i.getAttribute("localeRef"); if (this.options.useLocale && hi) (ni = this.getLocaleValue(hi)) && (li = ni); _i.setAttribute("value", li + "") } else { var di = _i.getAttribute("id"); _i.setAttribute("value", this.getHeaderValue(di) + "") } } var pi = WebSquare.Elem.api.getElementsByTagName(this.element, "w2:gBody"); if (pi.length > 0) { var ui = pi[0], ci = WebSquare.Elem.api.getElementsByTagName(ui, "w2:row"); for (oi = 0; oi < ci.length; oi++)for (ri = WebSquare.Elem.api.getElementsByTagName(ci[oi], "w2:column"), si = 0; si < ri.length; si++) { di = (_i = ri[si]).getAttribute("id"); var gi = this.getCellInfo(di); gi.options.displayFormat && _i.setAttribute("displayFormat", gi.options.displayFormat); var fi = _i.getAttribute("excelCellType"), mi = ""; (mi = null == fi ? this._dataList.getColumnOption(di, "dataType") : fi) ? _i.setAttribute("dataType", mi) : _i.setAttribute("dataType", "text"); var yi = _i.getAttribute("excelFormatter"); if (xi = r.D.getGlobalFunction(yi, this.scope_id)) { var bi = xi.call(this, di); _i.setAttribute("excelFormat", bi) } } } var wi = WebSquare.Elem.api.getElementsByTagName(this.element, "w2:subTotal"); for (oi = 0; oi < wi.length; oi++) { ci = WebSquare.Elem.api.getElementsByTagName(wi[oi], "w2:row"); for (si = 0; si < ci.length; si++) { ri = WebSquare.Elem.api.getElementsByTagName(ci[si], "w2:column"); for (var vi = 0; vi < ri.length; vi++) { di = (_i = ri[vi]).getAttribute("id"), yi = _i.getAttribute("excelFormatter"); if (xi = r.D.getGlobalFunction(yi, this.scope_id)) { bi = xi.call(this, di); _i.setAttribute("excelFormat", bi) } } } } var Ci = WebSquare.Elem.api.getElementsByTagName(this.element, "w2:footer"); if (Ci.length > 0) {
										var Ii = Ci[0]; ci = WebSquare.Elem.api.getElementsByTagName(Ii, "w2:row"); for (oi = 0; oi < ci.length; oi++)for (ri = WebSquare.Elem.api.getElementsByTagName(ci[oi], "w2:column"), si = 0; si < ri.length; si++) {
											var _i, xi
											; di = (_i = ri[si]).getAttribute("id"), yi = _i.getAttribute("excelFormatter"); if (xi = r.D.getGlobalFunction(yi, this.scope_id)) { bi = xi.call(this, di); _i.setAttribute("excelFormat", bi) }
										}
									} var Si = []; Si.push("<vector result='1'>"), Si.push("<data vectorkey='0'><hashtable>"); var Di = ""; if (Di = "json" === this.element._elementType ? WebSquare.xmljs.json2xml(this.element._element, { changeKey: { "w2:select": "w2:column" } }) : WebSquare.xml.serialize(this.element._element), Si.push("<data hashkey='style'>" + Di + "</data>"), t.dataHandler = t.dataHandler || "", "" != t.dataHandler) { var Ri = WebSquare.util.getGlobalFunction(t.dataHandler, this.scope_id); if ("function" == typeof Ri) { var Li = Ri.call(this, this.id); yt = t.separator || ","; i = '<array><![CDATA[["' + Li.join('"' + yt + '"') + '"]]]></array>' } } Si.push("<data hashkey='data'>" + i + "</data>"), (this.startedDisplayNone || 0 == this.resizeObj.width || 0 == this.resizeObj.height) && this.drawFooter(), Si.push("<data hashkey='groupby' value='" + this.groupbyStatus.grouped + "'/>"), t.groupby && this.groupbyStatus.grouped ? (Si.push("<data hashkey='groupbyStyle'>" + this.getExcelGroupbyStyle() + "</data>"), Si.push("<data hashkey='groupbyHeaderValue'>" + this.getExcelGroupbyHeaderValue() + "</data>"), Si.push("<data hashkey='groupbyFooterValue'>" + this.getExcelGroupbyFooterValue() + "</data>"), Si.push("<data hashkey='groupbyStatusValue'>" + this.getExcelGroupbyStatusValue() + "</data>"), Si.push("<data hashkey='groupbyStyleData'>" + this.getExcelGroupbyStyleData() + "</data>"), Si.push("<data hashkey='rowNumVisible' value='" + this.options.rowNumVisible + "'/>"), Si.push("<data hashkey='rowStatusVisible' value='" + this.options.rowStatusVisible + "'/>"), r.D.isEmptyObject(this.groupbyDisplayOptions.rowNumHeader) && r.D.isEmptyObject(this.groupbyDisplayOptions.rowStatusHeader) || Si.push("<data hashkey='rowNone' value='true'/>")) : Si.push("<data hashkey='rowNumVisible' value='" + Xt + "'/>"), 0 == n ? Si.push("<data hashkey='footer_data'>" + this.getExcelAllFooterXML(yt) + "</data>") : 1 == n ? Si.push("<data hashkey='footer_data'>" + this.getExcelAllFooterXMLDisplay(yt) + "</data>") : Si.push("<data hashkey='footer_data'>" + this.getExcelAllFooterXMLRaw(yt) + "</data>"), Si.push("<data hashkey='fileName' value='" + o + "'/>"), Si.push("<data hashkey='sheetName' value='" + a + "'/>"), Si.push("<data hashkey='multipleSheet' value='" + l + "'/>"), Si.push("<data hashkey='stRowIndex' value='" + c + "'/>"), Si.push("<data hashkey='stColIndex' value='" + g + "'/>"), Si.push("<data hashkey='removeColumns' value='" + d + "'/>"), Si.push("<data hashkey='removeHeaderRows' value='" + p + "'/>"), Si.push("<data hashkey='foldColumns' value='" + u + "'/>"), Si.push("<data hashkey='headerColor' value='" + f + "'/>"), Si.push("<data hashkey='headerFontName' value='" + m + "'/>"), Si.push("<data hashkey='headerFontSize' value='" + y + "'/>"), Si.push("<data hashkey='headerFontColor' value='" + b + "'/>"), Si.push("<data hashkey='headerFontBold' value='" + w + "'/>"), Si.push("<data hashkey='bodyColor' value='" + v + "'/>"), Si.push("<data hashkey='bodyFontName' value='" + C + "'/>"), Si.push("<data hashkey='bodyFontSize' value='" + I + "'/>"), Si.push("<data hashkey='bodyFontColor' value='" + _ + "'/>"), "" != x && Si.push("<data hashkey='bodyFontBold' value='" + x + "'/>"), Si.push("<data hashkey='footerColor' value='" + S + "'/>"), Si.push("<data hashkey='footerFontName' value='" + D + "'/>"), Si.push("<data hashkey='footerFontSize' value='" + R + "'/>"), Si.push("<data hashkey='footerFontColor' value='" + L + "'/>"), "" != T && Si.push("<data hashkey='footerFontBold' value='" + T + "'/>"), Si.push("<data hashkey='subTotalColor' value='" + k + "'/>"), Si.push("<data hashkey='subTotalFontName' value='" + A + "'/>"), Si.push("<data hashkey='subTotalFontSize' value='" + F + "'/>"), Si.push("<data hashkey='subTotalFontColor' value='" + E + "'/>"), "" != M && Si.push("<data hashkey='subTotalFontBold' value='" + M + "'/>"), Xt && (Si.push("<data hashkey='rowNumHeaderColor' value='" + O + "'/>"), Si.push("<data hashkey='rowNumHeaderFontName' value='" + N + "'/>"), Si.push("<data hashkey='rowNumHeaderFontSize' value='" + B + "'/>"), Si.push("<data hashkey='rowNumHeaderFontColor' value='" + G + "'/>"),
										Si.push("<data hashkey='rowNumBodyColor' value='" + H + "'/>"), Si.push("<data hashkey='rowNumBodyFontName' value='" + W + "'/>"), Si.push("<data hashkey='rowNumBodyFontSize' value='" + V + "'/>"), Si.push("<data hashkey='rowNumBodyFontColor' value='" + q + "'/>"), Si.push("<data hashkey='rowNumFooterColor' value='" + j + "'/>"), Si.push("<data hashkey='rowNumFooterFontName' value='" + P + "'/>"), Si.push("<data hashkey='rowNumFooterFontSize' value='" + z + "'/>"), Si.push("<data hashkey='rowNumFooterFontColor' value='" + U + "'/>"), Si.push("<data hashkey='rowNumSubTotalColor' value='" + X + "'/>"), Si.push("<data hashkey='rowNumSubTotalFontName' value='" + K + "'/>"), Si.push("<data hashkey='rowNumSubTotalFontSize' value='" + Z + "'/>"), Si.push("<data hashkey='rowNumSubTotalFontColor' value='" + Y + "'/>")), Si.push("<data hashkey='footerDataProvider' value='" + J + "'/>"), Si.push("<data hashkey='dataProvider' value='" + $ + "'/>"), Si.push("<data hashkey='splitProvider' value='" + Q + "'/>"), Si.push("<data hashkey='providerRequestXml' value=''>" + tt + "</data>"), Si.push("<data hashkey='userDataXml' value=''>" + et + "</data>"), Si.push("<data hashkey='optionParam' value='" + it + "'/>"), "" != ot && Si.push("<data hashkey='bodyWordwrap' value='" + ot + "'/>"), "" != st && Si.push("<data hashkey='subtotalWordwrap' value='" + st + "'/>"), "" != at && Si.push("<data hashkey='footerWordwrap' value='" + at + "'/>"), Si.push("<data hashkey='useEuroLocale' value='" + rt + "'/>"), Si.push("<data hashkey='numberLocale' value='" + nt + "'/>"), Si.push("<data hashkey='useHeader' value='" + lt + "'/>"), Si.push("<data hashkey='useSubTotal' value='" + ht + "'/>"), Si.push("<data hashkey='useFooter' value='" + dt + "'/>"), Si.push("<data hashkey='fitToPage' value='" + pt + "'/>"), Si.push("<data hashkey='landScape' value='" + ut + "'/>"), Si.push("<data hashkey='fitWidth' value='" + ct + "'/>"), Si.push("<data hashkey='fitHeight' value='" + gt + "'/>"), Si.push("<data hashkey='scale' value='" + ft + "'/>"), Si.push("<data hashkey='pageSize' value='" + mt + "'/>"), Si.push("<data hashkey='separator' value='" + yt + "'/>"), Si.push("<data hashkey='subTotalScale' value='" + bt + "'/>"), Si.push("<data hashkey='subTotalRoundingMode' value='" + wt + "'/>"), Si.push("<data hashkey='footerScale' value='" + vt + "'/>"), Si.push("<data hashkey='footerRoundingMode' value='" + Ct + "'/>"), Si.push("<data hashkey='useStyle' value='" + It + "'/>"), 1 == xt && Si.push("<data hashkey='setFontSize' value='" + It + "'/>"), Si.push("<data hashkey='freezePane' value='" + St + "'/>"), Si.push("<data hashkey='autoSizeColumn' value='" + Dt + "'/>"), Si.push("<data hashkey='autoSizeAdjustWith' value='" + Rt + "'/>"), Si.push("<data hashkey='displayGridlines' value='" + Lt + "'/>"), Si.push("<data hashkey='colMerge' value='" + Tt + "'/>"), Si.push("<data hashkey='colMergeValue' value='" + kt + "'/>"), Si.push("<data hashkey='colMergeTextAlign' value='" + At + "'/>"), Si.push("<data hashkey='useDataFormat' value='" + Ft + "'/>"), "" != Et && Si.push("<data hashkey='useHeaderDataFormat' value='" + Et + "'/>"), Si.push("<data hashkey='customToDataType' value='" + Ot + "'/>"), Si.push("<data hashkey='applyDataFormat' value='" + Mt + "'/>"), Si.push("<data hashkey='useSubTotalData' value='" + Nt + "'/>"), Si.push("<data hashkey='useFooterData' value='" + Bt + "'/>"), Si.push("<data hashkey='calcFooter' value='" + Gt + "'/>"), Si.push("<data hashkey='columnMove' value='" + Ht + "'/>"), Si.push("<data hashkey='columnOrder' value='" + le + "'/>"), "" != Vt && Si.push("<data hashkey='columnMoveWithSubTotal' value='" + Vt + "'/>"), "" != qt && Si.push("<data hashkey='columnMoveWithFooter' value='" + qt + "'/>"), Si.push("<data hashkey='oddRowBgColor' value='" + jt + "'/>"), Si.push("<data hashkey='evenRowBgColor' value='" + Pt + "'/>"), Si.push("<data hashkey='indent' value='" + zt + "'/>"), Si.push("<data hashkey='rowNumHeaderValue' value='" + Ut + "'/>"), Si.push("<data hashkey='startRowNumber' value='" + Kt + "'/>"), Si.push("<data hashkey='bodyNumberDefaultValue' value='" + Zt + "'/>"), Si.push("<data hashkey='numberToText' value='" + Yt + "'/>"), Si.push("<data hashkey='rowHeight' value='" + $t + "'/>"), Si.push("<data hashkey='headerRowHeight' value='" + Jt + "'/>"),
										Si.push("<data hashkey='pwd' value='" + te + "'/>"), Si.push("<data hashkey='useImage' value='" + ee + "'/>"), Si.push("<data hashkey='headerAutoFilter' value='" + ie + "'/>"), Si.push("<data hashkey='filterRowIndex' value='" + oe + "'/>"), Si.push("<data hashkey='mergeCell' value='" + se + "'/>"), Si.push("<data hashkey='noMerge' value='" + ae + "'/>"), It && Si.push("<data hashkey='styleData'><array><![CDATA[[" + this._getExcelStyle(t) + "]]]></array></data>"), Nt && Si.push("<data hashkey='subtotalData'><array><![CDATA[[" + this._getExcelSubtotalData(yt) + "]]]></array></data>"); var Ti = "", ki = t.mergeCellHeaderInfo || ""; se && (ht = r.D.getBoolean(ht), Ti = this.getMergeAll(d, ht)), Si.push("<data hashkey='mergeCellInfo'><array><![CDATA[[" + Ti + "]]]></array></data>"), Si.push("<data hashkey='mergeCellHeaderInfo'><array><![CDATA[[" + ki + "]]]></array></data>"), Si.push("<data hashkey='openFile' value='" + he + "'/>"), Si.push("<data hashkey='macroFileName' value='" + de + "'/>"), Si.push("<data hashkey='useMacro' value='" + pe + "'/>"), Si.push("<data hashkey='showDialog' value='" + ue + "'/>"), Si.push("<data hashkey='dialogFilter' value='" + ce + "'/>"), Si.push("<data hashkey='keepType' value='" + ge + "'/>"), Si.push("<data hashkey='lazyInfoArr' value='" + me + "'/>"), Si.push("<data hashkey='decimal' value='" + ye + "'/>"), "" != be && Si.push("<data hashkey='sameSite' value='" + be + "'/>"), Si.push("<data hashkey='customProvider' value='" + we + "'/>"), Si.push("<data hashkey='customProviderIndex' value='" + ve + "'/>"), Si.push("<data hashkey='rowAccessWindowSize' value='" + Ce + "'/>"), Si.push("<data hashkey='trim' value='" + Ie + "'/>"), Si.push("<data hashkey='useXHR' value='" + ne + "'/>"), Si.push("<data hashkey='desc' value='" + _e + "'/>"), xe.chartName && (Si.push("<data hashkey='c_chartName' value='" + Se + "'/>"), Si.push("<data hashkey='c_chartType' value='" + De + "'/>"), Si.push("<data hashkey='c_title' value='" + Re + "'/>"), Si.push("<data hashkey='c_xTitle' value='" + Le + "'/>"), Si.push("<data hashkey='c_yTitle' value='" + Te + "'/>"), Si.push("<data hashkey='c_startRowIndex' value='" + ke + "'/>"), Si.push("<data hashkey='c_startColIndex' value='" + Ae + "'/>"), Si.push("<data hashkey='c_endRowIndex' value='" + Fe + "'/>"), Si.push("<data hashkey='c_endColIndex' value='" + Ee + "'/>"), Si.push("<data hashkey='c_serAxis' value='" + Me + "'/>"), Si.push("<data hashkey='c_catAxis' value='" + Oe + "'/>"), Si.push("<data hashkey='c_catAxisStartX' value='" + Be + "'/>"), Si.push("<data hashkey='c_catAxisStartY' value='" + Ge + "'/>"), Si.push("<data hashkey='c_catAxisEndX' value='" + He + "'/>"), Si.push("<data hashkey='c_catAxisEndY' value='" + We + "'/>"), Si.push("<data hashkey='c_serAxisStartX' value='" + qe + "'/>"), Si.push("<data hashkey='c_serAxisStartY' value='" + je + "'/>"), Si.push("<data hashkey='c_serAxisEndX' value='" + Pe + "'/>"), Si.push("<data hashkey='c_serAxisEndY' value='" + ze + "'/>"), Si.push("<data hashkey='c_dataAxisStartX' value='" + Xe + "'/>"), Si.push("<data hashkey='c_dataAxisStartY' value='" + Ke + "'/>"), Si.push("<data hashkey='c_dataAxisEndX' value='" + Ze + "'/>"), Si.push("<data hashkey='c_dataAxisEndY' value='" + Ye + "'/>"), Si.push("<data hashkey='c_catGridLines' value='" + $e + "'/>"), Si.push("<data hashkey='c_serGridLines' value='" + Je + "'/>"), Si.push("<data hashkey='c_legend' value='" + Qe + "'/>"), Si.push("<data hashkey='c_legendPosition' value='" + ti + "'/>")), null != e && void 0 !== e || (e = []), Si.push("<data hashkey='information'><vector result='" + e.length + "'>"); for (oi = 0; oi < e.length; oi++) { var Ai = e[oi]; for (var Fi in Si.push("<data vectorkey='" + oi + "'><hashtable>"), Ai) "text" == Fi ? Si.push("<data hashkey='" + Fi + "' value='" + WebSquare.xml.encode(Ai[Fi]) + "'/>") : Si.push("<data hashkey='" + Fi + "' value='" + Ai[Fi] + "'/>"); Si.push("</hashtable></data>") } if (Si.push("</vector></data>"), 0 != t.multiexcel) return Si.push("</hashtable></data>"), Si.push("</vector>"), Si; Si.push("</hashtable></data>"), Si.push("</vector>"); var Ei = Si.join(""); if (-1 != Qt && Qt < r.D.getByteLengthUtf8(Ei)) {
											var Mi = WebSquare.language.getMessage("Grid_warning9", Qt) || "전송 data가 제한 크기를 초과 하였습니다.\n 제한 크기 : " + Qt + " byte"
											; return !1 === t.showProcess ? WebSquare.getBody().hideModal(!0) : !0 === t.showConfirm ? this.hideDownloadLayer() : WebSquare.layer.hideProcessMessage({ scope: this.scope_id || "" }), void alert(Mi)
										} "" == re && (re = this.options.advancedExcelDownloadURL), t.scopeId = this.scope_id || "", s.v.excelDownload(re, Ei, "post", t), this._dataList.options.depthColumn && "true" == t.spanAll && (this.drilldown.statusArr = this.orgStatusArr, this._dataList.filteredRowIndexArr = this.orgFilteredRowIndexArr, this.showDepth = this.orgShowDepth, this.orgStatusArr = null, this.orgFilteredRowIndexArr = null, this.orgShowDepth = null, this.drawData(this.rowIndex, 0)), this.xmlData = null, !1 === t.showProcess ? WebSquare.getBody().hideModal(!0) : !0 === t.showConfirm && this.hideDownloadLayer()
							}, S.prototype.saveFile = function(t) { var e = t.type || "xml", i = t.fileName || "gridView", o = t.extension || "xml", a = t.sameSite || "", r = []; r.push("<vector result='1'>"), r.push("<data vectorkey='0'><hashtable>"), r.push("<data hashkey='type' value='" + e + "'/>"), r.push("<data hashkey='fileName' value='" + i + "'/>"), r.push("<data hashkey='extension' value='" + o + "'/>"), r.push("<data hashkey='sameSite' value='" + a + "'/>"), r.push("</hashtable></data>"), r.push("</vector>"); var n = r.join(""); n += "\x3c!----VALUESTR----!>", n += WebSquare.xml.serialize(this.getAllXML()); var l = t.action || WebSquare.baseServletURI + "gridToFile.wq"; s.v.excelDownload(l, n, "post", t) }, S.prototype.getExcelExpression = function(t) { var e, i = ""; return void 0 !== t.type && void 0 !== t.id && void 0 !== t.attr && ("header" == t.type ? e = WebSquare.Elem.api.getElementsByTagName(this.element, "header", s.v._XML_NAMESPACE.W2)[0] : "body" == t.type ? e = WebSquare.Elem.api.getElementsByTagName(this.element, "gBody", s.v._XML_NAMESPACE.W2)[0] : "footer" == t.type && (e = WebSquare.Elem.api.getElementsByTagName(this.element, "footer", s.v._XML_NAMESPACE.W2)[0]), void 0 !== e && (i = this._getAttribute(e, t))), i }, S.prototype.setExcelExpression = function(t) { var e; void 0 !== t.type && void 0 !== t.id && void 0 !== t.excelExpression && ("header" == t.type ? e = WebSquare.Elem.api.getElementsByTagName(this.element, "header", s.v._XML_NAMESPACE.W2)[0] : "body" == t.type ? e = WebSquare.Elem.api.getElementsByTagName(this.element, "gBody", s.v._XML_NAMESPACE.W2)[0] : "footer" == t.type && (e = WebSquare.Elem.api.getElementsByTagName(this.element, "footer", s.v._XML_NAMESPACE.W2)[0]), void 0 !== e && this._setAttribute(e, t)) }, S.prototype._getAttribute = function(t, e) { for (var i = "", o = 0; o < t.childNodes.length; o++) { var s = t.childNodes[o]; if (1 == s.nodeType) for (var a = 0; a < s.childNodes.length; a++) { var r = s.childNodes[a]; if (1 == r.nodeType) { if (("body" == e.type ? r.getAttribute("col_id") : r.getAttribute("id")) == e.id) { i = r.getAttribute(e.attr); break } } } } return i }, S.prototype._setAttribute = function(t, e) { for (var i = 0; i < t.childNodes.length; i++) { var o = t.childNodes[i]; if (1 == o.nodeType) for (var s = 0; s < o.childNodes.length; s++) { var a = o.childNodes[s]; if (1 == a.nodeType) { if (("body" == e.type ? a.getAttribute("col_id") : a.getAttribute("id")) == e.id) { a.setAttribute("excelExpression", e.excelExpression); break } } } } }, S.prototype.cancleDownload = function() { clearTimeout(this.excelTime), this.hideDownloadLayer() }, S.prototype.hideDownloadLayer = function() { window.gridExceldownloadIframe.style.display = "none", this.excelOptions = null, this.excelInfoArr = null, this.excelFinalStr = null, window.downloadGridId = null, WebSquare.getBody().hideModal(!0) }, S.prototype.saveBigExcelFile = function(t, e, i) { i && (t.rowsByN = i), t.massStorage = !0, this.advancedExcelDownload(t, e) }, S.prototype._getExcelStyle = function(t) {
								for (var e = {}, i = {}, o = {}, s = {}, a = {}, n = this.getColumnCount(), l = 0; l < n; l++) { var h = (p = this.getCellInfo(l)).options.className; if (h) { var d = document.querySelector("." + h); d && (e[l] = { "text-align": WebSquare.style.getComputedStyle(d, "text-align") }) } } for (var l in this.columnStyleValueObj) { var p, u = {}; for (var c in this.columnStyleValueObj[l]) "style" != c && (u[c] = this.columnStyleValueObj[l][c]); if ((p = this.getCellInfo(parseInt(l, 10))) && p.options.textAlign) { var g = ""; "" == (g = this.getColumnStyleValue(parseInt(l, 10), "text-align")) && "" == (g = p.options.textAlign) && (g = "center"), u["text-align"] = g } e[l] = u }
								for (l = 0; l < this.rowStyleArr.length; l++)if (this.rowStyleArr[l]) { u = {}; for (var c in this.rowStyleValueObj[this.rowStyleArr[l]]) "style" != c && (u[c] = this.rowStyleValueObj[this.rowStyleArr[l]][c]); var f = this.getDisplayRowIndex(l); isNaN(f) || (i[f] = u) } for (l = 0; l < this.cellStyleArr.length; l++)if (this.cellStyleArr[l]) { u = {}; var m = parseInt(l / this.oneRowDataLength, 10), y = (f = this.getDisplayRowIndex(m), l % this.oneRowDataLength); for (var c in this.cellStyleValueObj[this.cellStyleArr[l]]) "style" != c && this.cellStyleValueObj[this.cellStyleArr[l]][c] && (u[c] = this.cellStyleValueObj[this.cellStyleArr[l]][c]); o[f + "," + y] = u } if (1 == t.useClass) for (l = 0; l < this.cellClassArr.length; l++)if (this.cellClassArr[l]) { u = {}, m = parseInt(l / this.oneRowDataLength, 10), f = this.getDisplayRowIndex(m), y = l % this.oneRowDataLength; var b = r.D.getStyleFromCssStr(this.cellClassArr[l], ["backgroundColor", "color", "textAlign", "fontSize", "fontWeight", "fontFamily"]); o[f + "," + y] && (u = o[f + "," + y]), b && (b.backgroundColor && (u["background-color"] = b.backgroundColor), b.color && (u.color = b.color), b.textAlign && (u["text-align"] = b.textAlign), b.fontSize && (u["font-size"] = b.fontSize), b.fontWeight && (u["font-weight"] = b.fontWeight), b.fontFamily && (u["font-family"] = b.fontFamily)), 0 !== Object.keys(u).length && (o[f + "," + y] = u) } var w = r.D.getDataPrefix("header_id"), v = "", C = this.getDomList("head_tds", "th", this.getElementById(this.id + "_head_table")); for (l = this.defaultColCnt; l < C.length; l++) { var I = "", _ = C[l].id.replace(this.id + "_", ""), x = this.headerCellStyleValueObj[_]; v = x && x["background-color"] ? x["background-color"] : t.headerColor ? t.headerColor : WebSquare.style.getStyle(C[l], "background-color"), I += "color:" + WebSquare.style.getStyle(C[l], "color") + ";", I += "background-color:" + v + ";", I += "font-weight:" + WebSquare.style.getStyle(C[l], "font-weight") + ";", I += "font-family:" + WebSquare.style.getStyle(C[l], "font-family") + ";", I += "text-align:" + WebSquare.style.getStyle(C[l], "text-align") + ";", s[C[l].getAttribute(w)] = I } if (this.hasFooter) { var S = r.D.getDataPrefix("footer_id"), D = this.getDomList("foot_tds", "th", this.getElementById(this.id + "_foot_table")); for (l = this.defaultColCnt; l < D.length; l++) { I = ""; I += "color:" + WebSquare.style.getStyle(D[l], "color") + ";", I += "background-color:" + WebSquare.style.getStyle(D[l], "background-color") + ";", I += "font-weight:" + WebSquare.style.getStyle(D[l], "font-weight") + ";", I += "font-family:" + WebSquare.style.getStyle(D[l], "font-family") + ";", I += "text-align:" + WebSquare.style.getStyle(D[l], "text-align") + ";", a[D[l].getAttribute(S)] = I } } return JSON.stringify({ row: i, col: e, cell: o, header: s, footer: a })
							}, S.prototype._getExcelSubtotalData = function(t) { t || (t = ","); var e = []; e.push('"'); for (var i = r.D.getDataPrefix("colMerge"), o = r.D.getDataPrefix("value"), s = this.getDataLength(), a = 0; a < s; a++) { var n = a; for (var l in this.subtotalTableList) { var h = this.dataList._getCellData(n, l), d = h + "_12"; if (n < s - 1) d = this.dataList._getCellData(n + 1, l); if (h != d) { var p = this.subtotalTableList[l], u = this.subtotalDataArr[l + "_" + h]; null == u && (u = this.getSubtotalData(p, l, h, n)); for (var c = "", g = p.getElementsByTagName("td"), f = 0; f < g.length; f++) { var m = g[f], y = m.getAttribute("id"); if (!y.startsWith("_headerRowNumber") && !y.startsWith("_headerRowStatus")) { if (null != u[y]) c = u[y]; else if ("true" == m.getAttribute(i)) c = ""; else { c = null != (c = m.getAttribute(o)) ? c : "" } e.push(c), e.push('"' + t + '"') } } } } } return e[e.length - 1] = '"', e.join("") }, S.prototype.getExcelGroupbyStyle = function() {
								try {
									if (this.groupbyStatus.grouped) {
										var t = { rowNumHeader: { type: "H", index: 2 }, rowNumFooter: { type: "F", index: 2 }, rowStatusHeader: { type: "H", index: 3 }, rowStatusFooter: { type: "F", index: 3 }, groupbyHeader: { type: "H", index: -1 }, groupbyFooter: { type: "F", index: -1 } }, e = 4, i = 4, o = !1, s = !1, r = [], n = [], l = [], h = {}; r.push("<w2:groupby>"), n.push("<w2:groupbyHeader>"), l.push("<w2:groupbyFooter>"), n.push("<w2:row>"), l.push("<w2:row>"); var d = this.defaultColCnt + this.getColCnt(), p = 0, u = 0
											; this.options.rowNumVisible && (this.groupbyDisplayOptions.rowNumHeader && (this.groupbyDisplayOptions.rowNumHeader.hidden || (u += parseInt(this.groupbyDisplayOptions.rowNumHeader.colSpan, 10) || 1) <= d && (h.rowNumHeader = this.groupbyDisplayOptions.rowNumHeader)), this.groupbyDisplayOptions.rowNumFooter && (this.groupbyDisplayOptions.rowNumFooter.hidden || (p += parseInt(this.groupbyDisplayOptions.rowNumFooter.colSpan, 10) || 1) <= d && (h.rowNumFooter = this.groupbyDisplayOptions.rowNumFooter))), this.options.rowStatusVisible && (this.groupbyDisplayOptions.rowStatusHeader && (this.groupbyDisplayOptions.rowStatusHeader.hidden || (u += parseInt(this.groupbyDisplayOptions.rowStatusHeader.colSpan, 10) || 1) <= d && (h.rowStatusHeader = this.groupbyDisplayOptions.rowStatusHeader)), this.groupbyDisplayOptions.rowStatusFooter && (this.groupbyDisplayOptions.rowStatusFooter.hidden || (p += parseInt(this.groupbyDisplayOptions.rowStatusFooter.colSpan, 10) || 1) <= d && (h.rowStatusFooter = this.groupbyDisplayOptions.rowStatusFooter))), h.groupbyHeader = [], h.groupbyFooter = []; for (var c = this.groupbyDisplayOptions.groupbyHeader, g = 0; g < c.length; g++)c[g].hidden || (u += parseInt(c[g].colSpan, 10) || 1, h.groupbyHeader[g] = c[g]); var f = this.groupbyDisplayOptions.groupbyFooter; for (g = 0; g < f.length; g++)f[g].hidden || (p += parseInt(f[g].colSpan, 10) || 1, h.groupbyFooter[g] = f[g]); if (e < d) { var m = d - u; for (g = 0; g < m; g++)h.groupbyHeader.push({ temp: !0 }) } if (i < d) for (m = d - p, g = 0; g < m; g++)h.groupbyFooter.push({ temp: !0 }); for (var y in this.groupbyStatus.excelDisplayOptions = h, h) { var b, w = []; switch (y) { case "rowNumHeader": case "rowNumFooter": case "rowStatusHeader": case "rowStatusFooter": w.push("<w2:column"); var v = h[y], C = !1; for (var I in v) if ("align" == I || "hidden" == I || "colSpan" == I) { if ("hidden" == I) { C = !0; break } w.push(" " + I + '="' + v[I] + '"'), "rowNumHeader" != y && "rowNumFooter" != y || "colspan" == I.toLowerCase() && v[I] >= this.defaultColCnt + this.getColCnt() && ("rowNumHeader" == y ? o = !0 : s = !0) } if (C) break; if ("rowStatusHeader" == y && o) break; if ("rowStatusFooter" == y && s) break; y.match("rowNum") ? w.push(' type="rowNum"') : y.match("rowStatus") && w.push(' type="rowStatus"'), w.push("/>"), b = t[y]; break; case "groupbyHeader": case "groupbyFooter": C = !1; var _ = h[y]; if (_.length > 0) { var x, S = 0, D = 0, R = 0, L = 0, T = this.htmlInfo ? this.htmlInfo.body.rowArr : this.struct.body.rowArr; for (g = 0; g < T.length; g++) { for (var k = T[g], A = 0; A < k.length; A++) { var F = k[A]; S += parseInt(F.colSpan, 10) || 1 } D < S && (D = S), S = 0 } x = new Array(D); for (g = 0; g < _.length; g++) { var E = []; for (var I in E.push("<w2:column"), _[g]) if ("align" == I || "hidden" == I || "colSpan" == I || "rowSpan" == I || "displayFormat" == I) { if ("hidden" == I) { E.pop(); break } E.push(" " + I + '="' + _[g][I] + '"') } E.push("/>"), w.push(E.join("")); var M = parseInt(_[g].colSpan, 10) || 1, O = parseInt(_[g].rowSpan, 10) || 1; if (0 === L) { if (void 0 === x[R]) if (M > 1) for (var N = 0; N < M; N++)x[R + N] = O; else x[R] = O } else { x[R] > 1 ? x[R] -= 1 : x[R] = O; for (var B = R + 1; 1 !== x[B] && B < D;)x[B] -= 1, R += 1, B += 1 } D <= (R += M) && g != _.length - 1 && (w.push("</w2:row><w2:row>"), R = 0, L += 1) } } b = t[y] }b && ("H" == b.type ? -1 == b.index ? (n[e] = w.join(""), e++) : n[b.index] = w.join("") : "F" == b.type && (-1 == b.index ? (l[i] = w.join(""), i++) : l[b.index] = w.join(""))), b = null } return n.push("</w2:row>"), l.push("</w2:row>"), n.push("</w2:groupbyHeader>"), l.push("</w2:groupbyFooter>"), r.push(n.join("")), r.push(l.join("")), r.push("</w2:groupby>"), r.join("")
									}
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.getExcelGroupbyHeaderValue = function() { this.groupbyStatus.headerValueObj = {}, this.getAllGroupbyHeaderValueObj(); var t = []; t.push("<array><![CDATA["), t.push("["); for (var e = 0; e < this.groupbyStatus.groupedRowIndexArr.length; e++) { var i = this.groupbyStatus.groupedRowIndexArr[e]; if ("header" == i.type) { for (var o = this.groupbyStatus.headerValueObj[i.groupId], s = 0; s < o.length; s++)null != o[s] && (t.push('"' + o[s] + '"'), s < o.length - 1 && t.push(",")); o.length > 0 && t.push(",") } } return t.pop(), t.push("]"), t.push("]]></array>"), t.join("") }, S.prototype.getExcelGroupbyFooterValue = function() {
								this.groupbyStatus.footerValueObj = {}, this.getAllGroupbyFooterValueObj(); var t = []; t.push("<array><![CDATA["), t.push("[")
									; for (var e = 0; e < this.groupbyStatus.groupedRowIndexArr.length; e++) { var i = this.groupbyStatus.groupedRowIndexArr[e]; if ("footer" == i.type) { for (var o = this.groupbyStatus.footerValueObj[i.groupId], s = 0; s < o.length; s++)null != o[s] && (t.push('"' + o[s] + '"'), s < o.length - 1 && t.push(",")); o.length > 0 && t.push(",") } } return t.pop(), t.push("]"), t.push("]]></array>"), t.join("")
							}, S.prototype.getExcelGroupbyStatusValue = function() { var t = []; t.push("<array><![CDATA["), t.push("["); for (var e = 0; e < this.groupbyStatus.groupedRowIndexArr.length; e++) { var i = this.groupbyStatus.groupedRowIndexArr[e]; if ("number" == typeof i) t.push('"0B"'); else { switch (i.type) { case "header": var o = '"' + i.depth + 'H"'; break; case "footer": o = '"' + i.depth + 'F"' }t.push(o) } e < this.groupbyStatus.groupedRowIndexArr.length - 1 && t.push(",") } return t.push("]"), t.push("]]></array>"), t.join("") }, S.prototype.getExcelGroupbyStyleData = function() { var t = this.getElementById(this.id + "_body_tbody").childNodes, e = []; e.push("<array><![CDATA["), e.push("["); for (var i = 0; i < this.groupbyStatus.groupedRowIndexArr.length; i++) { var o = this.groupbyStatus.groupedRowIndexArr[i]; if ("number" != typeof o) { var s = t[o.index]; if (!e[o.depth + 2]) { var a, r = '"'; for (var n in 0 != i && (r = ',"'), this.groupbyStatus.excelDisplayOptions) { var l = !1; switch (n) { case "rowNumHeader": l = !0, a = 0; break; case "rowStatusHeader": l = !0, a = this.defaultColCnt - 1; break; case "groupbyHeader": l = !0, a = this.defaultColCnt }if (l) break } var h = s.getElementsByTagName("TD")[a]; r += "background-color:" + WebSquare.style.getStyle(h, "background-color") + ";", r += "font-size:" + WebSquare.style.getStyle(h, "font-size") + ";", r += "color:" + WebSquare.style.getStyle(h, "color") + ";", r += "font-weight:" + WebSquare.style.getStyle(h, "font-weight") + ";", r += "font-family:" + WebSquare.style.getStyle(h, "font-family") + ";", r += '"', e[o.depth + 2] = r } } } return e.push("]"), e.push("]]></array>"), e.join("") }, S.prototype.getAllGroupbyHeaderValueObj = function() { for (var t = 0; t < this.groupbyStatus.groupedRowIndexArr.length; t++)if ("number" != typeof this.groupbyStatus.groupedRowIndexArr[t]) { var e = this.groupbyStatus.groupedRowIndexArr[t], i = 0; this.options.rowNumVisible && (this.setGroupbyData(e, i, this.groupbyStatus.excelDisplayOptions.rowNumHeader), i++), this.options.rowStatusVisible && (this.setGroupbyData(e, i, this.groupbyStatus.excelDisplayOptions.rowStatusHeader), i++); for (var o = 0; o < this.groupbyStatus.excelDisplayOptions.groupbyHeader.length; o++)this.setGroupbyData(e, i, this.groupbyStatus.excelDisplayOptions.groupbyHeader[o]), i++ } }, S.prototype.getAllGroupbyFooterValueObj = function() { for (var t = 0; t < this.groupbyStatus.groupedRowIndexArr.length; t++)if ("number" != typeof this.groupbyStatus.groupedRowIndexArr[t]) { var e = this.groupbyStatus.groupedRowIndexArr[t], i = 0; this.options.rowNumVisible && (this.setGroupbyData(e, i, this.groupbyStatus.excelDisplayOptions.rowNumFooter), i++), this.options.rowStatusVisible && (this.setGroupbyData(e, i, this.groupbyStatus.excelDisplayOptions.rowStatusFooter), i++); for (var o = 0; o < this.groupbyStatus.excelDisplayOptions.groupbyFooter.length; o++)this.setGroupbyData(e, i, this.groupbyStatus.excelDisplayOptions.groupbyFooter[o]), i++ } }, S.prototype.getGroupbyData = function(t) { try { if (this.options.groupbyZone) return !1 === t ? this.groupbyStatus.groupbyOptions : JSON.parse(this.groupbyStatus.groupbyOptions) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setGroupbyData = function(t, e, i) {
								var o, s, a = (i = i || {}).value || "", r = i.inputType || "", n = i.depthVisible || !1, l = i.expression || "", h = i.hidden ? "none" : "", d = i.displayFormatType || "text", p = i.displayFormat || "", u = i.displayFormatter || null; if (r) switch ((p || u) && (o = new WebSquare.format.createFormatter(d, p, u, null, null, null, this.scope_id, this.id)), r) {
									case "toggleButton": s = "open" == t.status ? "-" : "+"; break; case "expression": if (l) {
										var c = this.groupbyInfo[t.groupId].header; c.colIndex = e; var g = 0; if ("open" == c.status) {
											for (var f, m = c.index; m < this.groupbyStatus.groupedRowIndexArr.length; m++) { if ("footer" == (y = this.groupbyStatus.groupedRowIndexArr[m]).type && y.depth == c.depth) { f = y.index; break } } if (!f) {
												for (m = c.index + 1; m < this.groupbyStatus.groupedRowIndexArr.length; m++) { var y; if ("header" == (y = this.groupbyStatus.groupedRowIndexArr[m]).type && y.depth == c.depth) { f = y.index; break } } f || (f = this.groupbyStatus.groupedRowIndexArr.length - 1)
											} g = this.groupExpression(this.groupbyStatus.groupedRowIndexArr, c.index, f, l, c)
										} else g = this.groupExpression(c.closedChildArr, 0, c.closedChildArr.length - 1, l, c); if (o && (g = o.format(g)), "string" == typeof (s = g) && (s.match("w2grid_minus") || s.match("w2grid_plus"))) { var b = s.lastIndexOf("</span>"); b > -1 && (b += 7, s = s.slice(b), "open" == t.status ? s = "-||" + s : "closed" == t.status && (s = "+||" + s)) }
									}
								}if (n && (s = t.groupId), a && (o && (a = o.format(a)), s = a), !s) { s = ""; m = 0; for (var w in i) m++; 0 == m && (h = "none") } "none" != h && ("header" == t.type ? (this.groupbyStatus.headerValueObj[t.groupId] || (this.groupbyStatus.headerValueObj[t.groupId] = []), this.groupbyStatus.headerValueObj[t.groupId][e] = s) : "footer" == t.type && (this.groupbyStatus.footerValueObj[t.groupId] || (this.groupbyStatus.footerValueObj[t.groupId] = []), this.groupbyStatus.footerValueObj[t.groupId][e] = s))
							}, S.prototype.getTotalRow = function() { return this.dataList.getTotalRow() }, S.prototype.getTotalCol = function() { return this.oneRowDataLength }, S.prototype.editEndBeforeGetData = function() { this.editedCell && this.rollbackCommitFlag && 1 == this.options.rollbackCommit && (1 == this.options.moveKeyEditModeAll && 1 == this.checkScrollEnd || (this.rollbackCommitFlag = !1, this.editedCell.handleEndEdit(), this.rollbackCommitFlag = !0)) }, S.prototype.getExtraDataObj = function(t, e, i) { var o = this.extraData; return "grid" == t ? o.grid : "row" == t ? (o.row[e] || (o.row[e] = {}), o.row[e]) : "col" == t ? (o.col[e] || (o.col[e] = {}), o.col[e]) : "cell" == t ? (o.cell[e] || (o.cell[e] = []), o.cell[e][i] || (o.cell[e][i] = {}), o.cell[e][i]) : null }, S.prototype.finalize = function() { try { for (var t in null != this.tempDiv && null != this.tempDiv.parentNode && (this.tempDiv.innerHTML = ""), null != this.tempTr && null != this.tempTr.parentNode && (this.tempTr.innerHTML = ""), n.s.removeCheckResize(this.uuid), r.D.clearInterval(this.id + "_dragSelectAutoScroll"), s.v.clearTimer(this.id + "initializeEvent"), this.dom) { var e = this.dom[t], i = null; null != e && (i = WebSquare.idCache[e.uuid]), i && "function" == typeof i.remove && i.remove(), delete this.dom[t] } this._dataList && this._dataList.childCompHash && delete this._dataList.childCompHash[this.id], null != this._manager && this._manager.destroy(), null != this.customFilter && this.customFilter.remove() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setFixedColumn = function(t) { try { if (t = parseInt(t, 10), t = isNaN(t) ? 0 : t, this.options.fixedColumn > 0) for (var e = this.getColumnCount(), i = 0; i < this.lastIndex + 1; i++) { var o = this.data_td_list[i * e + this.options.fixedColumn]; o && this.removeClass(o, "w2grid_fixedColumn") } this.options.fixedColumn = t, this.arrangeOverflowXScroll() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setFixedRightColumn = function(t) { try { if (t = parseInt(t, 10), t = isNaN(t) ? 0 : t, this.options.fixedRightColumn > 0) for (var e = this.getColumnCount(), i = this.getFixedRightColumnLastIndex(), o = 0; o < this.lastIndex + 1; o++) { var s = this.data_td_list[o * e + (i - this.defaultColCnt)]; s && this.removeClass(s, "w2grid_fixedRightColumn") } this.options.fixedRightColumn = t, this.arrangeOverflowXScroll(), this._handleScrollX() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setFixedRow = function(t) { try { if (t = parseInt(t, 10), t = isNaN(t) ? 0 : t, this.options.fixedRow > 0) { var e = this.dataRowList[this.oneRowLength * (this.options.fixedRow - 1)]; e && this.removeClass(e, "w2grid_fixedRow") } this.options.fixedRow = t, this.applyRowStyleOptions(t - 1) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setLastFixedRow = function(t) { try { if (t = parseInt(t, 10), t = isNaN(t) ? 0 : t, this.options.lastFixedRow > 0) { var e = this.dataRowList[this.oneRowLength * (this.lastIndex - this.options.lastFixedRow)]; e && this.removeClass(e, "w2grid_lastFixedRow") } this.options.lastFixedRow = t, this.drawData(this.rowIndex, this.lastIndex - t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getOverflowX = function() { return this.options.overflowX }, S.prototype.getOverflowY = function() {
								return this.options.overflowY
							}, S.prototype.getColumnVisible = function(t) { var e = t, i = (t = this.getColumnIndex(t), s.v.getConfiguration("/WebSquare/" + this.options.pluginName + "/getColumnVisible/@useRealColIndex")); if (r.D.getBoolean(i)) { if ("number" != typeof e) { for (var o = this.getCellInfo(e), a = this._getRealColIndex("body", e), n = a + this.defaultColCnt, l = !this.hiddenList[n], h = 0; h < o.options.colSpan; h++)l = !this.hiddenList[n + h] || l; return 0 === a || a ? l : void p.k.printLog("[getColumnVisible] 존재하지 않는 body 컬럼입니다.") } t = e % this.columnOrder.length; for (var d = 0; d < this.columnOrder.length; d++)if (this.columnOrder[d] == t) { t = d; break } if (e > this.columnOrder.length || d === this.columnOrder.length) return void p.k.printLog("[getColumnVisible] 존재하지 않는 body 컬럼입니다.") } return !this.hiddenList[this.defaultColCnt + t] }, S.prototype.getColumnWidth = function(t, e) { var i = e ? this.defaultColCnt : 0; if (t = this.getColumnIndex(t) + i, this.colWidthList[t]) return this.colWidthList[t] }, S.prototype.setColumnWidth = function(t, e, i) { if (this.render) { if (0 === this.render.offsetHeight && 0 === this.render.offsetWidth) { var o = !1; if ("string" == typeof t && (o = !0, t = this.getDisplayColumnIndex(t)), this.delayedDrawObj.newColumnOrder) for (var s = 0; s < this.delayedDrawObj.newColumnOrder.length; s++)if (this.delayedDrawObj.newColumnOrder[s] == t) { t = o ? this.delayedDrawObj.newColumnOrder[s] : s; break } } else t = this.getDisplayColumnIndex(t); var a = this.colWidthList[t], r = !0 === i ? 0 : this.defaultColCnt; this.colWidthList[t] && (this.options.autoFit && !this.hiddenList[t + r] ? (this.autoFitColWidthList = null, this._setAutoFit({ exceptCol: r + t, exceptWidth: e })) : this._setColumnWidth(r + t, e)), i && (t -= this.defaultColCnt), d.B.fireEvent(this, "oncolumnwidthchange", { columnIndex: t, columnID: this.getColumnID(t), oldWidth: a, newWidth: e }) } else p.k.printLog("[setColumnWidth] " + this.options.pluginName + " is not initialized yet") }, S.prototype.isColumnResizable = function(t) { try { if (t < this.defaultColCnt) return !0 === this.options.rowNumStatusResize; if (void 0 === t || "" === t) return !1; if (isNaN(t) && (t = this.getColumnIndex(t) + this.defaultColCnt), isNaN(t) || t >= this.getColumnCount() + this.defaultColCnt) return !0; for (var e, i = this.htmlInfo.head.rowArr[0], o = !0, s = 0; s < i.length; s++)if (i[s].colIndex == this.columnOrder[t] && "string" == typeof i[s].fixColumnWidth && "true" === i[s].fixColumnWidth.toLowerCase()) { o = !1; break } if (!this.cellInfoHash || r.D.isEmptyObject(this.cellInfoHash)) (e = this.cellInfoHash2[this.getColumnID(this.columnOrder[t - this.defaultColCnt])]) && !0 === r.D.getBoolean(e.getAttribute("fixColumnWidth")) && (o = !1); else (e = this.cellInfoHash[this.getColumnID(this.columnOrder[t - this.defaultColCnt])]) && e.options.fixColumnWidth && (o = !1); return o } catch (t) { return a.w.printStackTrace(t, null, this), !0 } }, S.prototype.setColumnDisableEdit = function(t, e) { try { var i = this.getCellInfo(t); "autoComplete" == i.options.inputType && i.setColumnDisableEdit(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setColumnNodeSet = function(t, e, i, o) { try { var s = this.getCellInfo(t); ("select" == s.options.inputType || "autoComplete" == s.options.inputType || "checkcombobox" == s.options.inputType) && s.setColumnNodeSet(e, i, o), s.hasRef && (s.refHash = []), s.itemsetObj && s.mainGrid.refresh() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setColumnGridItemset = function(t, e) { try { var i = this.getCellInfo(t); ("select" == i.options.inputType || "autoComplete" == i.options.inputType || "checkcombobox" == i.options.inputType) && i.setColumnGridItemset(e), i.hasRef && (i.refHash = []), i.itemsetObj && i.mainGrid.refresh() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setColumnDisplayFormat = function(t, e) { try { var i = this.getCellInfo(t); return i.options.displayFormat = e, i.initFormatter(), void this.drawColumnData(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setColumnDisplayFormatter = function(t, e) { try { var i = this.getCellInfo(t); return i.options.displayFormatter = e, i.initFormatter(), void this.drawColumnData(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setColumnIoFormat = function(t, e, i) {
								try {
									"object" == typeof arguments[0] ? this._setColumnIoFormat(arguments[0]) : this._setColumnIoFormat({ colIndex: t, ioFormat: e, dateMask: i })
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype._setColumnIoFormat = function(t) { try { var e = t.colIndex, i = t.ioFormat, o = t.dateMask, s = t.useMonthYearFormat, r = t.calendarDisplayFormat, n = this.getCellInfo(e); if (!n || "date" !== n.options.dataType) return; var l = !1, h = n.options.ioFormat; if ("string" == typeof i && (l = i !== h, n.options.ioFormat = i), "string" == typeof o && (n.options.displayFormat = o), "calendar" === n.options.inputType && (n.options.useMonthYearFormat = s, "string" == typeof r && (n.options.calendarDisplayFormat = r)), n.initFormatter(), !0 === l) { var d = this.getInput(n); if (d && "function" == typeof d.setIoFormat) { t = { ioFormat: i, displayFormat: o, useMonthYearFormat: s, calendarDisplayFormat: r }; d.setIoFormat(t) } if (n.options.useMonthYearFormat) this.drawColumnData(e); else for (var p = this.getRowCount(), u = WebSquare.format.createFormatter(n.options.dataType, i, "", h, null, null, this.scope_id, this.id), c = 0; c < p; c++) { var g = this.dataList._getCellData(c, n.colID), f = u.format(g); this.dataList.__setCellData(c, n.colID, f) } } else this.drawColumnData(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setColumnChooseOption = function(t, e, i) { try { var o = this.getCellInfo(t); "select" == o.options.inputType && o.setColumnChooseOption(e, i) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setColumnVisibleColumn = function(t, e, i) { try { var o = this.getCellInfo(t); !0 === { select: !0, checkcombobox: !0, autoComplete: !0 }[o.options.inputType] && (null == o[o.options.inputType] && o._createComponent(0), o[o.options.inputType] && "function" == typeof o[o.options.inputType].setVisibleColumn && o[o.options.inputType].setVisibleColumn(e, i)) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setColumnEnableColumn = function(t, e, i) { try { var o = this.getCellInfo(t); !0 === { select: !0, checkcombobox: !0, autoComplete: !0 }[o.options.inputType] && (null == o[o.options.inputType] && o._createComponent(0), o[o.options.inputType] && "function" == typeof o[o.options.inputType].setEnableColumn && o[o.options.inputType].setEnableColumn(e, i)) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.showChooseOption = function(t, e) { try { var i = this.getCellInfo(t); "select" == i.options.inputType && i.showChooseOption(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setRowNumColumnWidth = function(t) { this.options.rowNumVisible && !isNaN(Number(t)) && this._setColumnWidth(0, t) }, S.prototype.setRowStatusColumnWidth = function(t) { var e = 0; this.options.rowNumVisible && (e = 1), this.options.rowStatusVisible && (this.options.autoFit && !this.hiddenList[e] ? (this.autoFitColWidthList = null, this._setColumnWidth(e, t), this._setAutoFit()) : this._setColumnWidth(e, t)) }, S.prototype.setGridHeight = function(t) { try { parseInt(t) + "" == t && (t += "px"), this._setGridHeightBefore(), this.setStyle("height", t), this.handleScrollY({}, { changedHeight: !0 }), this.handleResize(), this._setGridHeightAfter() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._setGridHeightBefore = function(t) { try { this._onSetHeight = !0, this.lastTopRowIndex = null, -1 !== this.options.initFixedHeightByRowNum && (this.options.initFixedHeightByRowNum = -1, this.options.visibleRowNum = "") } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._setGridHeightAfter = function(t) { try { this._onSetHeight = !1 } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setGridWidth = function(t) { parseInt(t) + "" == t && (t += "px"), this.setStyle("width", t), this.handlerResize_drawInitializer() }, S.prototype.setGridSize = function(t, e) { var i = parseInt(t), o = parseInt(e); i >= 0 && o >= 0 ? (this.setGridWidth(t), this.setGridHeight(e)) : p.k.printLog("[Warning] Number of Entered in the width and height must be a valid integer greater than 0.[" + this.id + "]") }, S.prototype.setGridReadOnly = function(t) { try { t = r.D.getBoolean(t), this.options.readOnly = t, this.notifyDataChanged() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getGridReadOnly = function() { try { return this.options.readOnly } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.initGrid = function() {
								try {
									this.loadCheck = [], this.initFlag = !0, this.skipScrollEndEvent = !0, this.skipScrollStartEvent = !0, this.removeAllFinish = !0, this.lastIndex = -1, this.lastTopRowIndex = null, this.bScrollTop = -1; var t = this.hiddenRowObj.extraRow; this.hiddenRowObj = { length: 0, extraRow: t, row: {}, init: !1 }, this.initHeightCompleted = !1, this.hasFooter && this.initFooterDataObj(), this.initHeaderDataObj(); var e = this.dataList.removeAll(); return this.removeAllFinish = !1, this.dataList.clearFilter(), this.initColumns(), e
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.setInitValue = function() { try { this.initGrid() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setDisplayFormat = function(t, e) { try { var i = this.getCellInfo(t); return i.element && i.element.setAttribute("displayFormat", e), i.options.displayFormat = e, i.initFormatter(), void this.drawColumnData(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setDisplayFormatter = function(t, e) { try { var i = this.getCellInfo(t); return i.options.displayFormatter = e, i.initFormatter(), void this.drawColumnData(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setFormat = function(t, e) { try { var i = this.getCellInfo(t); if (e.ioFormat) { var o = i.mainGridId + i.id, s = this.dom[o]; s && s.setFormat({ ioFormat: e.ioFormat, displayFormat: e.ioFormat }); for (var r = WebSquare.format.createFormatter("date", e.ioFormat, "", i.options.ioFormat, null, null, this.scope_id, this.id), n = 0; n < this.getDataLength(); n++) { var l = this.getColumnID(t), h = this.dataList._getCellData(n, l), d = r.format(h); this.dataList.__setCellData(n, l, d) } } return i.options.ioFormat = e.ioFormat || i.options.ioFormat, i.options.displayFormat = e.displayFormat || i.options.displayFormat, i.options.displayFormatter = e.displayFormatter || i.options.displayFormatter, i.initFormatter(), void this.drawColumnData(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setCustomFormatter = function(t, e) { try { var i = this.getCellInfo(t); return i.options.customFormatter = e, i.initFormatter(), void this.drawColumnData(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setAllowChar = function(t, e) { try { var i = this.getCellInfo(t), o = i.options.inputType; if ("text" != o && "input" != o && "textImage" != o && "secret" != o) return $l("cell의 inputType이 올바르지 않습니다."), !1; var s = this.getInput(i); return i.options.allowChar = e, void (s && s.options && ("input" === s.options.pluginName || "textarea" === s.options.pluginName) && s.setAllowChar(e)) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.changeCurrency = function(t, e, i, o, s, r, n) { try { return 1 === arguments.length && "object" == typeof arguments[0] ? this._changeCurrency(arguments[0]) : this._changeCurrency({ colID: t, type: e, format: i, delimiter: o, decimalDelimiter: s, customModelFormatter: r, customModelUnformatter: n }) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._changeCurrency = function(t) {
								try {
									var e = t.colID || "", i = t.type || "", o = t.format, r = t.delimiter || "", n = t.decimalDelimiter || "", l = t.customModelFormatter, h = t.customModelUnformatter, d = this.getColumnIndex(e), p = this.getCellInfo(d); if (!i || "float" !== i && "number" !== i && "euro" !== i && "rupee" !== i && "tenge" !== i) return; "number" === i && "true" === this.options.floatNumber && (i = "float"); var u = i; switch (i) {
										case "number": case "float": case "bigDecimal": u = "number", o || (this.options.numberMask || (this.options.numberMask = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + u + '"]/numberMask/@value') || ""), o = this.options.numberMask), p.options.delimiter = r || ",", p.options.decimalDelimiter = n || "."; break; case "euro": o || (this.options.euroMask || (this.options.euroMask = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + u + '"]/euroMask/@value') || ""), o = this.options.euroMask), p.options.delimiter = r || ".", p.options.decimalDelimiter = n || ","; break; case "rupee": o || (this.options.rupeeMask || (this.options.rupeeMask = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + u + '"]/rupeeMask/@value') || ""), o = this.options.rupeeMask), p.options.delimiter = r || ",",
											p.options.decimalDelimiter = n || "."; break; case "tenge": o || (this.options.tengeMask || (this.options.tengeMask = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + u + '"]/tengeMask/@value') || ""), o = this.options.tengeMask), p.options.delimiter = r || " ", p.options.decimalDelimiter = n || ","
									}if (!o) return; p.options.dataType = i, p.options.displayFormat = o, void 0 !== l ? p.options.customModelFormatter = l : p.options.customModelFormatter || (p.options.customModelFormatter = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + u + '"]/customModelFormatter/@value') || ""), void 0 !== h ? p.options.customModelUnformatter = h : p.options.customModelUnformatter || (p.options.customModelUnformatter = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + u + '"]/customModelUnformatter/@value') || ""), p.initFormatter(), this.drawColumnData(d), this.subtotalObj = {}, this.refreshSubtotalRow(0, { changeCurrency: !0 }), this.hasFooter && (this.initFooterDataObj(!0), this.drawFooter(d)); var c = p.mainGridId + p.id; delete this.dom[c]
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.setDataType = function(t, e) { try { if (!e || "number" != e && "text" != e && "float" != e) return; var i = this.getCellInfo(t); if (i.options.dataType == e) return; i.options.dataType; i.options.dataType = e; var o = this.getColumnID(t); this.setColumnOption(o, "dataType", e); var s = i.mainGrid.getElementById(i.mainGridId + o); if (i.options.displayFormat = "", s) { switch (s.validator.clearCommand(), e) { case "number": s.validator.addCommand(new WebSquare.validator.allowCharCommand("+\\-.0-9")); break; case "float": s.validator.addCommand(new WebSquare.validator.floatCommand(s.options.delimiter, s.options.decimalDelimiter, s.options.applyFormat)) }var r = s.options.maxlength && parseInt(s.options.maxlength) > -1 ? s.options.maxlength : null; r || (r = s.options.maxLength && parseInt(s.options.maxLength) > -1 ? s.options.maxLength : null), r && ("float" == e ? (i.setFloatMaxLength(r), s.render && "input" == s.render.tagName.toLowerCase() && s.render.removeAttribute("maxLength")) : i.setMaxLength(r)) } i.initFormatter() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setDefaultDate = function(t, e) { try { var i = this.getCellInfo(t); if ("calendar" != i.options.inputType) return $l("cell의 inputType이 올바르지 않습니다."), !1; var o = this.getInput(i); i.options.defaultDate = e, o && o.setDefaultDate(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.disableBeforeDate = function(t, e) { try { var i = this.getCellInfo(t); if ("calendar" != i.options.inputType) return $l("cell의 inputType이 올바르지 않습니다."), !1; var o = this.getInput(i); i.options.disableBeforeDate = e, o && o.disableBeforeDate(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.disableAfterDate = function(t, e) { try { var i = this.getCellInfo(t); if ("calendar" != i.options.inputType) return $l("cell의 inputType이 올바르지 않습니다."), !1; var o = this.getInput(i); i.options.disableAfterDate = e, o && o.disableAfterDate(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setMaxLength = function(t, e) { try { var i = this.getCellInfo(t), o = i.options.inputType; if ("text" != o && "textarea" != o && "input" != o && "textImage" != o && "secret" != o) return; "text" == o && "float" == i.options.dataType ? i.setFloatMaxLength(e) : i.setMaxLength(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getMaxLength = function(t) { try { var e = this.getCellInfo(t), i = e.options.inputType; if ("text" != i && "textarea" != i && "input" != i && "textImage" != i && "secret" != i) return; return e.options.maxLength } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.spanAll = function(t) { try { "number" == typeof t ? this.showDepth = t + "" : (t = r.D.getBoolean(t), this.showDepth = 1 == t ? "9999" : "1"), this.initDrilldown(), this.rowIndex = -1, this.lastIndex = -1, this.lastTopRowIndex = null, this.drawData(0, 0), this.setScrollYHeight({ noDraw: !0 }), this.drawFooter(), this.displayNoResultMessage() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getCellDisplayData = function(t, e) {
								try {
									var i = (this._linkedDataList || this._dataList).getRealRowIndex(t)
									; return this._getDisplayData(i, e)
								} catch (t) { a.w.printStackTrace(t) }
							}, S.prototype._getCellDisplayData = function(t, e, i) { try { i = i || {}, "string" == typeof e && (e = e.trim()); var o = this.getRealRowIndex(t); return this._getDisplayData(o, e, i) } catch (t) { a.w.printStackTrace(t) } }, S.prototype._getDisplayData = function(t, e, i) { try { i = i || {}, this.editEndBeforeGetData(); e = this.getColumnID(e); var o = this.getColumnIndex(e), s = this.cellInfoHash[e]; 0 == s.internal && "custom" == s.options.inputType && s.cellManagerHashByRowIndex[t] && (s = s.cellManagerHashByRowIndex[t]); var n = this.dataList._getData(t, e), l = this.getDisplayRowIndex(t), h = this._getGroupbyDisplayRowIndex(l); if (s.options.customModelUnformatter) { var d = r.D.getGlobalFunction(s.options.customModelUnformatter, this.scope_id); "function" == typeof d && (n = d.call(this, n, h, o)) } if (s.options.maskFormat && (n = this.getInput(s[o]).maskFormatModelUnFormat(n)), s.useEscapeFormatter) { var p = r.D.getGlobalFunction(s.options.escapeFormatter, this.scope_id); "function" == typeof p && (n = p.call(this, n, h, o)) } if (s.useCustomFormatter && 1 != this.options.keepBeforeDisplayData) { var u = "true" === s.getEscape() ? s.getDisplayData(WebSquare.xml._encode(n + ""), t) : s.getDisplayData(n, t), c = r.D.getGlobalFunction(s.options.customFormatter, this.scope_id); "function" == typeof c && (n = this.options.customFormatterRealRowIndex ? c.call(this, n, u, t, o) : c.call(this, n, u, h, o)) } else 0 == s.internal && "custom" == s.options.inputType && (s = s.cellManagerHashByRowIndex[t] ? s.cellManagerHashByRowIndex[t] : s), n = s.getDisplayData(n, t, i); if (!0 === i.removeTag) { var g = document.createElement("div"); g.innerHTML = n, n = g.innerText } return null == n && (n = ""), n } catch (t) { a.w.printStackTrace(t) } }, S.prototype.initPasteDrilldown = function() { try { var t = { showDepth: this.showDepth, depthColumn: this.depthColumn, dataColumn: "" }; "string" == typeof t.depthColumn && (null == this.bodyIdColIndexMap[t.depthColumn] ? (t.dataColumn = "dataList", t.depthColumn = this._dataList.bodyIdColIndexMap[t.depthColumn]) : (t.dataColumn = "gridview", t.depthColumn = this.bodyIdColIndexMap[t.depthColumn])), this.drilldown.pasteDrilldownInitialize(this, t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.initDrilldown = function(t) { try { "string" == typeof (t = { showDepth: this.showDepth, depthColumn: this.depthColumn, dataColumn: "" }).depthColumn && (null == this.bodyIdColIndexMap[t.depthColumn] ? (t.dataColumn = "dataList", t.depthColumn = this._dataList.bodyIdColIndexMap[t.depthColumn]) : (t.dataColumn = "gridview", t.depthColumn = this.bodyIdColIndexMap[t.depthColumn])), this.drilldown.initialize(this, t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getRealRowIndex = function(t) { return this.dataList.getRealRowIndex(t) }, S.prototype.toggle = function(t) { if ("number" != typeof t) return !1; var e = t; if (this.options.drilldownRealRowIndexAll && "number" != typeof (e = this.getDisplayRowIndex(t))) return !1; this._toggle(e) }, S.prototype._toggle = function(t) { t = parseInt(t), this.drilldown.toggle(t); var e = this.options.drilldownToggleScrollFix ? { keepScrollTop: !0 } : null; this.lastTopRowIndex = null, this.setScrollYHeight(e), this.notifyRowChanged(t, e), this.options.autoFit && this.autoFitFunc() }, S.prototype.drillTo = function(t) { try { var e = this.drilldown.drillTo(t), i = this.options.drilldownToggleScrollFix ? { keepScrollTop: !0 } : null; this.setScrollYHeight(i), this.notifyRowChanged(e, i), this.options.autoFit && this.autoFitFunc() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getParentRowIndex = function(t) { return t = parseInt(t), this.drilldown.getParentRowIndex(t) }, S.prototype.getChildrenRowIndexArray = function(t) { return t = parseInt(t), this.drilldown.getChildrenRowArr(t) }, S.prototype.getAncestorRowIndexArray = function(t) { return t = parseInt(t), this.drilldown.getAncestorRowArr(t) }, S.prototype.getDescendantRowIndexArray = function(t) { return t = parseInt(t), this.drilldown.getChildRowArr(t, !0) }, S.prototype.getOpenStatus = function(t) { var e = t = parseInt(t); return (!this.options.drilldownRealRowIndexAll || "number" == typeof (e = this.getDisplayRowIndex(t))) && this.drilldown.isOpen(e) }, S.prototype.getDataLength = function() {
								var t
								; if (this.successBinding) if (this.groupbyStatus.grouped) { for (var e in this.customFilterStatusObj) if (this.customFilterStatusObj[e]) return this._dataList.getDataLength(); t = this.groupbyStatus.groupedRowIndexArr.length } else t = this._dataList.getDataLength(); else t = 0; return t
							}, S.prototype.focusedRowMoveUp = function() { var t = this._getFocusedRowIndex(); this.dataList.rowMoveUp(t) }, S.prototype.focusedRowMoveDown = function() { var t = this._getFocusedRowIndex(); this.dataList.rowMoveDown(t) }, S.prototype.initStyleArr = function(t) { t <= 0 && (this.rowStyleArr = [], this.rowReadOnlyArr = [], this.rowDisabledArr = []); var e = this.getTotalRow(), i = e * this.oneRowDataLength; t <= 0 ? (this.rowStyleArr = new Array(e), this.rowReadOnlyArr = new Array(e), this.rowDisabledArr = new Array(e), this.rowStyleFixedArr = new Array(e), this.rowStyleDataArr = new Array(e), this.cellStyleArr = new Array(i), this.cellClassArr = new Array(i), this.cellReadOnlyArr = new Array(i), this.cellDisabledArr = new Array(i)) : (this.rowStyleArr[e - 1] = void 0, this.rowStyleFixedArr[e - 1] = void 0, this.rowStyleDataArr[e - 1] = void 0, this.rowReadOnlyArr[e - 1] = void 0, this.rowDisabledArr[e - 1] = void 0, this.cellStyleArr[i - 1] = void 0, this.cellClassArr[i - 1] = void 0, this.cellReadOnlyArr[i - 1] = void 0, this.cellDisabledArr[i - 1] = void 0) }, S.prototype.modifyCheckedStatus = function(t, e) { try { var i = this.getCheckedIndex(t); if ("R" == (e = e.toUpperCase()) || "U" == e || "V" == e || "D" == e || "C" == e) { for (var o = 0; o < i.length; o++)this.dataList.modifyRowStatus(i[o], e), this._drawRowStatus(o - this.rowIndex, o), this.displayNoResultMessage(); this.notifyStatusChanged({ rowIndex: i }) } else p.k.printLog("[Warning] Is not exist status Value![" + this.id + "]") } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.modifyUncheckStatus = function(t, e) { try { if ("R" == (e = e.toUpperCase()) || "U" == e || "V" == e || "D" == e || "C" == e) { for (var i = this.getUnCheckedIndex(t), o = 0; o < i.length; o++)this.dataList.modifyRowStatus(i[o], e), this._drawRowStatus(o - this.rowIndex, o), this.displayNoResultMessage(); this.notifyStatusChanged({ rowIndex: i }) } else p.k.printLog("[Warning] Is not exist status Value![" + this.id + "]") } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getVisibleColData = function(t) { var e = []; t = this.getColumnIndex(t); for (var i = this.getColumnID(t), o = this.getDataLength(), s = 0; s < o; s++)e.push(this.dataList._getCellData(s, i)); return e }, S.prototype.getCheckedIndex = function(t, e) { try { var i, o = [], s = [], r = 0, n = this.cellInfoHash[this.getColumnID(t)]; if ("checkbox" == n.options.inputType || "radio" == n.options.inputType || "custom" == n.options.inputType) { i = this.isDrillDown && this._dataList.options.depthColumn ? this.dataList.getColData(t) : this.getVisibleColData(t); for (var l = n, h = 0; h < i.length; h++) { if (0 == n.internal && "custom" == n.options.inputType) { var d = this.dataList.getRealRowIndex(h); if ("checkbox" != (l = n.cellManagerHashByRowIndex[d] ? n.cellManagerHashByRowIndex[d] : n).options.inputType && "radio" != l.options.inputType) continue } else if (this.groupbyStatus.grouped && "object" == typeof this.dataList.getRealRowIndex(h)) continue; if (e) { s.push(h); var p = !(!this.isDrillDown || !this._dataList.options.depthColumn); this.___getEditReadOnly(h, t, p) || this._getEditDisabled(h, t, p) ? r++ : i[h] == l.options.trueValue && o.push(h) } else i[h] == l.options.trueValue && o.push(h) } } return e && r !== s.length && r + o.length == s.length ? s : o } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getUnCheckedIndex = function(t) { return this.getUncheckedIndex(t) }, S.prototype.getUncheckedIndex = function(t) {
								try {
									var e = [], i = this.cellInfoHash[this.getColumnID(t)]; if ("checkbox" == i.options.inputType || "radio" == i.options.inputType || "custom" == i.options.inputType) {
										var o = []; o = this.isDrillDown && this._dataList.options.depthColumn ? this.dataList.getColData(t) : this.getVisibleColData(t); for (var s = i, r = 0; r < o.length; r++) {
											if (0 == i.internal && "custom" == i.options.inputType) {
												var n = this.dataList.getRealRowIndex(r); if ("checkbox" != (s = i.cellManagerHashByRowIndex[n] ? i.cellManagerHashByRowIndex[n] : i).options.inputType && "radio" != s.options.inputType) continue
											} else if (this.groupbyStatus.grouped && "object" == typeof this.dataList.getRealRowIndex(r)) continue; o[r] != s.options.trueValue && e.push(r)
										}
									} return e
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.getAllDisplayData = function() { try { var t = this._linkedDataList || this._dataList; if (t.getTotalRow() == t.getDataLength()) return this.getAllVisibleData(); this._endEdit(); for (var e = this.getTotalRow(), i = this.getColumnCount(), o = [], s = 0; s < e; s++)for (var r = 0; r < i; r++)o.push(this._getDisplayData(s, r)); return o } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getAllDisplayJSON = function(t) { try { t || (t = { emptyValue: "$$_blank_" }); var e = this._linkedDataList || this._dataList; if (e.getTotalRow() == e.getDataLength()) return this.getAllVisibleJSON(t); this._endEdit(); for (var i = this.getTotalRow(), o = this.getColumnCount(), s = [], r = 0; r < i; r++) { for (var n = {}, l = 0; l < o; l++)n[this.tdIdList[l]] = this._getDisplayData(r, l, t); s.push(n) } return s } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getAllVisibleJSON = function(t) { try { this._endEdit(); for (var e = this.options.groupbyDisplayRowIndex && this.groupbyStatus.grouped, i = e ? this.groupbyStatus.groupedRowIndexArr.length : this.getDataLength(), o = this.getColumnCount(), s = [], r = 0; r < i; r++)if (!e || "number" == typeof this.groupbyStatus.groupedRowIndexArr[r]) { for (var n = {}, l = 0; l < o; l++)n[this.tdIdList[l]] = this._grid._getCellDisplayData(r, l, t); s.push(n) } return s } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getAllDisplayXML = function() { try { var t = this._linkedDataList || this._dataList; return t.getTotalRow() == t.getDataLength() ? this.getAllVisibleXML("displayData") : (this._endEdit(), this.getAllArrXML("displayData", this.id)) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getAllVisibleXML = function(t) { try { this._endEdit(); for (var e = this.options.groupbyDisplayRowIndex && this.groupbyStatus.grouped, i = e ? this.groupbyStatus.groupedRowIndexArr.length : this.getDataLength(), o = [], s = 0; s < i; s++)e && "number" != typeof this.groupbyStatus.groupedRowIndexArr[s] || o.push(s); return this.getArrXML(o, t, e) } catch (t) { a.w.printStackTrace(t) } }, S.prototype.getAllVisibleData = function(t) { try { this._endEdit(); for (var e = this.options.groupbyDisplayRowIndex && this.groupbyStatus.grouped, i = e ? this.groupbyStatus.groupedRowIndexArr.length : this.getDataLength(), o = this.getColumnCount(), s = [], r = 0; r < i; r++)if (!e || "number" == typeof this.groupbyStatus.groupedRowIndexArr[r]) for (var n = 0; n < o; n++)"displayData" === t ? s.push(this._getCellDisplayData(r, n)) : s.push(this.dataList.getCellData(r, n)); return s } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.changeToRealRowIndexArr = function(t) { try { for (var e = [], i = 0; i < t.length; i++)e.push(t[i]); return e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getCheckedData = function(t) { try { this._endEdit(); for (var e = [], i = this.getCheckedIndex(t), o = 0; o < i.length; o++)e.push(this.dataList.getRowData(i[o])); return e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getCheckedJSON = function(t) { try { this._endEdit(); for (var e = [], i = this.getCheckedIndex(t), o = 0; o < i.length; o++)e.push(this._dataList.getRowJSON(i[o])); return e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getCheckedXML = function(t) { try { this._endEdit(); var e = this.getCheckedIndex(t); return this.getArrXML(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getUncheckedData = function(t) { try { this._endEdit(); for (var e = [], i = this.getUncheckedIndex(t), o = 0; o < i.length; o++)e.push(this.dataList.getRowData(i[o])); return e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getUncheckedJSON = function(t) { try { this._endEdit(); for (var e = [], i = this.getUncheckedIndex(t), o = 0; o < i.length; o++)e.push(this._dataList.getRowJSON(i[o])); return e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getUncheckedXML = function(t) { try { this._endEdit(); var e = this.getUncheckedIndex(t); return this.getArrXML(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getCellChecked = function(t, e) {
								try {
									var i = this.cellInfoHash[this.getColumnID(e)], o = i.id; if (0 == i.internal && "custom" == i.options.inputType) {
										var s = this.dataList.getRealRowIndex(t); i = i.cellManagerHashByRowIndex[s] ? i.cellManagerHashByRowIndex[s] : i
									} if ("checkbox" != i.options.inputType && "radio" != i.options.inputType) return !1; var r = this.dataList._getCellData(t, o); return r = r == i.options.trueValue
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.hasChild = function(t) { return this.drilldown.hasChild(t) }, S.prototype.comparator = function(t, e) { return parseInt(e) == parseInt(t) ? 0 : parseInt(e) > parseInt(t) ? 1 : -1 }, S.prototype.getExcelAllXML = function(t) { try { var e = new Array; e.push("<array><![CDATA["), e.push('["'); for (var i = 0; i < this.getDataLength(); i++)for (var o = 0; o < this.getTotalCol(); o++)e.push(this.dataList._getCellData(i, this.getColumnID(o))), e.push('","'); return e[e.length - 1] = '"]', e.push("]]></array>"), e.join("") } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getExcelAllXMLDisplay = function(t) { try { null == t && (t = 1); var e = new Array; e.push("<array><![CDATA["), e.push('["'); for (var i = this.getDataLength(), o = this.getColumnCount(), s = 0; s < i; s++)for (var r = 0; r < o; r++) { var n, l = this.getCellInfo(r); if ("custom" == l.options.inputType) { var h = this.dataList.getRealRowIndex(s); l.cellManagerHashByRowIndex[h] || (this.drawData(s), l = l.cellManagerHashByRowIndex[h] || l) } (n = l.useCustomFormatter || "custom" == l.options.inputType ? this._getDisplayData(this.dataList.getRealRowIndex(s), r) : 1 == t ? l.getDisplayData(this.dataList._getCellData(s, this.getColumnID(r)), s) : this.dataList._getCellData(s, this.getColumnID(r)) + "").indexOf("javascript:") > -1 && (n = n.wq_replaceAll("javascript:", "")), e.push(n), e.push('","') } return e[e.length - 1] = '"]', e.push("]]></array>"), e.join("") } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getExcelAllXMLRaw = function(t) { try { var e = this.dataArr.length, i = this.dataArr[0], o = this.dataArr[e - 1]; this.dataArr[0] = '<array><![CDATA[["' + i, this.dataArr[e - 1] = o + '"]]]></array>'; var s = this.dataArr.join('","'); return this.dataArr[0] = i, this.dataArr[e - 1] = o, s } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.makeExcelData = function(t, e, i, o) {
								try {
									var n = e.length, l = t + i.rowsByN; l = l < i.dataLength ? l : i.dataLength; var h, d = this.oneRowDataLength, p = i.separator || ","; if (i.convertIndex && (h = i.convertIndex.split(",")), "" == i.dataProvider && "" == i.splitProvider) if (0 === i.type) for (var u = t; u < l; u++) { if ("number" == typeof (b = this.dataList.getRealRowIndex(u))) for (var c = 0; c < d; c++) { var g = !1; if (h) for (var f = 0; f < h.length; f++)if (h[f] == c.toString()) { g = !0; break } n = g ? (e = this._getExcelDisplayData(b, c, e, i, u)).length : (e = this._getExcelRealData(b, c, e, i)).length } } else if (1 === i.type || 2 == i.type) for (u = t; u < l; u++) { if ("number" == typeof (b = this.dataList.getRealRowIndex(u))) for (c = 0; c < d; c++) { g = !1; if (h) for (f = 0; f < h.length; f++)if (h[f] == c.toString()) { g = !0; break } n = g ? (e = this._getExcelRealData(b, c, e, i)).length : (e = this._getExcelDisplayData(b, c, e, i, u)).length } } else l = i.dataLength, n = (e = this.dataList.getAllData()).length; var m = this; if (l < i.dataLength && "" == i.dataProvider && "" == i.splitProvider) if (!1 !== i.massStorage) this.excelTime = setTimeout((function() { try { !0 === i.showConfirm && window.gridExceldownloadIframe.contentWindow.checkUpload(e.length / m.dataArr.length) } catch (t) { } if (0 != i.multiexcel) return m.makeExcelData(l, e, i, o); m.makeExcelData(l, e, i, o) }), 10); else { if (0 != i.multiexcel) return this.makeExcelData(l, e, i, o); this.makeExcelData(l, e, i, o) } else {
										var y; if ("" == i.dataProvider && "" == i.splitProvider) if (e.length >= 2) { if (i.groupby && this.groupbyStatus.grouped && this.defaultColCnt > 0) { var b = 1, w = this.oneRowDataLength, v = []; for (u = 0; u < e.length; u++) { if ((u % w == 0 || 0 == u) && (b = parseInt(u / w, 10), this.options.rowNumVisible && v.push(b + 1), this.options.rowStatusVisible)) { var C = this.getRowStatus(b); v.push(C) } v.push(e[u]) } n = (e = v).length } if (n > 0) { var I = e[0], _ = e[n - 1]; e[0] = '<array><![CDATA[["' + I, e[n - 1] = _ + '"]]]></array>', y = e.join('"' + p + '"'), e[0] = I, e[n - 1] = _ } else y = "<array><![CDATA[[" + e + "]]]></array>" } else { y = "<array><![CDATA[[" + (1 === e.length ? '"' + e[0] + '"' : "") + "]]]></array>" } else y = "<array><![CDATA[[ ]]]></array>"; if (!0 === i.showConfirm) this.excelOptions = i, this.excelInfoArr = o, this.excelFinalStr = y, this.checkUpload(); else {
											if (0 != i.multiexcel) return this.sendExcelData(i, o, y); this.sendExcelData(i, o, y)
										}
									}
								} catch (t) { var x = s.v.getConfiguration("/WebSquare/" + this.options.pluginName + "/excel/download/errorHandler/@value"), S = r.D.getGlobalFunction(x, this.scope_id); "function" == typeof S && S.call(this, this.id), a.w.printStackTrace(t, null, this) }
							}, S.prototype._getExcelRealData = function(t, e, i, o) { try { var s = o.cellInfo, r = o.isExpCol, n = i; if (r[e]) n.push(s[e].getExpressionValue(t)); else { var l = this.dataList._getData(t, e); n.push(null != l ? l : "") } return n } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._getExcelDisplayData = function(t, e, i, o, s) { try { var r, n = o.cellInfo, l = o.isSelectCol, h = o.isBasicCol, d = o.isExpCol, p = o.isCustomCol, u = o.isCustomModelCol, c = o.isCustomType, g = o.isEscapeFormatter, f = i; if (d[e] && (r = n[e].getExpressionValue(t)), p[e] || u[e] || g[e] ? r = this._getDisplayData(t, e) : (r = this.dataList._getData(t, e), n[e].options.useMonthYearFormat && "calendar" === n[e].options.inputType && (r = WebSquare.date.getIOFormatDate(r, n[e].options.ioFormat, n[e].options.calendarValueType)), r = null != r ? r : ""), h[e] || d[e]) n[e].options.maskFormat && (r = this.getInput(n[e]).maskFormatModelUnFormat(r)), r = n[e].formatter ? n[e].formatter.format(r) : r; else if (!l[e] || p[e] || u[e]) { if (c[e]) { x = null; var m, y = n[e].cellManagerHashByRowIndex[s]; y ? m = (n = y).options.inputType : (n = n[e], m = "text"); var b = n.useCustomFormatter, w = n.useCustomModelFormatter, v = n.useEscapeFormatter, C = "select" === m || "checkcombobox" === m || "autoComplete" === m, I = "expression" === m, _ = !("checkbox" === m || "image" === m || "radio" === m || C || I || b || w || v); if (b || w || v ? r = this._getDisplayData(t, e) : (r = this.dataList._getData(t, e), n.options.useMonthYearFormat && "calendar" === n.options.inputType && (r = WebSquare.date.getIOFormatDate(r, n.options.ioFormat, n.options.calendarValueType)), r = null != r ? r : ""), _ || I) n.options.maskFormat && (r = this.getInput(n).maskFormatModelUnFormat(r)), r = n.formatter ? n.formatter.format(r) : r; else if (C && !b && !w) { x = null; null == (x = 2 == o.type ? this.dataList._getData(t, e) : n.getData(r, t)) && (x = ""), r = x } } } else { var x = null; if (2 == o.type) x = this.dataList._getData(t, e); else { var S = n[e].dataComp, D = t; if (S) { var R = this.modelControl.getDataComp(S); R && "linkedDataList" === R.initializeType && (D = s) } x = n[e].getData(r, D) } null == x && (x = ""), r = x } return "string" == typeof r && r.indexOf("javascript:") > -1 && (r = r.wq_replaceAll("javascript:", "")), f.push(r), f } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._getStyleRowIndex = function(t) { try { var e = !(!this.isDrillDown || !this._dataList.options.depthColumn) ? t : this.dataList.getRealRowIndex(t); return null == e ? e = null : "number" != typeof e && (e = e.type + "_" + e.groupId), e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getRowStyleClassName = function(t, e) { try { var i = e ? t : this._getStyleRowIndex(t); return null == i ? null : this.rowStyleArr[i] } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setRowStyleClassName = function(t, e, i) { try { var o = i ? t : this._getStyleRowIndex(t); if (null == o) return; this.rowStyleArr[o] = e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getCellStyleClassName = function(t, e, i) { try { "number" != typeof e && (e = this.bodyIdColIndexMap[e]); var o = i ? t : this._getStyleRowIndex(t); return null == o ? void 0 : "number" == typeof o ? this.cellStyleArr[o * this.oneRowDataLength + e] : this.cellStyleArr[o + "_" + e] } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setCellStyleClassName = function(t, e, i, o) { try { e = this.getColumnIndex(e); var s = o ? t : this._getStyleRowIndex(t); if (null == s) return; "number" == typeof s ? this.cellStyleArr[s * this.oneRowDataLength + e] = i : this.cellStyleArr[s + "_" + e] = i } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getCellClass = function(t, e) { try { "number" != typeof e && (e = this.bodyIdColIndexMap[e]); var i = this._getStyleRowIndex(t); return null == i ? void 0 : "number" == typeof i ? this.cellClassArr[i * this.oneRowDataLength + e] : this.cellClassArr[i + "_" + e] } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setCellDefaultStyleClassName = function(t, e, i) {
								try {
									e = this.getColumnIndex(e); var o = this.getCellStyleClassName(t, e, i); return null == o && (this.cellStyleIndex++,
										o = this.id + "_cellstyle_" + this.cellStyleIndex + "_", this.setCellStyleClassName(t, e, o, i)), null == this.cellStyleValueObj[o] && (this.cellStyleValueObj[o] = {}), o
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.setCellClass = function(t, e, i, o) { try { var s, r; e = this.getColumnIndex(e); var n, l = !(!this.isDrillDown || !this._dataList.options.depthColumn); if (o ? (s = t, r = this.getDisplayRowIndex(t) - this.rowIndex) : (s = this._getStyleRowIndex(t), r = l ? this.getDisplayRowIndex(t) - this.rowIndex : t - this.rowIndex), r >= 0 && (n = this.data_td_list[r * this.oneRowDataLength + e]), null == s) return; if ("number" == typeof s) { var h = this.tdCellClassArr[r * this.oneRowDataLength + e]; h && this.removeClass(n, h), this.cellClassArr[s * this.oneRowDataLength + e] = i } else this.cellClassArr[s + "_" + e] = i; n && (this.tdCellClassArr[r * this.oneRowDataLength + e] = i, this.addClass(n, i)) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.removeCellClass = function(t, e, i) { try { e = this.getColumnIndex(e); var o, s = this._getStyleRowIndex(t); if (o = !(!this.isDrillDown || !this._dataList.options.depthColumn) ? this.getDisplayRowIndex(t) - this.rowIndex : t - this.rowIndex, null == s) return; "number" == typeof s ? this.cellClassArr[s * this.oneRowDataLength + e] = void 0 : this.cellClassArr[s + "_" + e] = void 0; var r = this.data_td_list[o * this.oneRowDataLength + e]; r && (i || (i = this.tdCellClassArr[o * this.oneRowDataLength + e]), this.tdCellClassArr[o * this.oneRowDataLength + e] = void 0, this.removeClass(r, i)) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._removeAllTDCellClass = function() { try { for (var t = this.tdCellClassArr.length, e = 0; e < t; e++) { var i = this.tdCellClassArr[e], o = this.data_td_list[e]; o && i && this.removeClass(o, i) } this.tdCellClassArr = [] } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._setColumnClass = function(t, e) { try { var i = this.getColumnIndex(t); if (this.columnClassObj[i]) { var o = this.columnClassObj[i].replace(new RegExp(e, "g"), "").wq_trim(); this.columnClassObj[i] = o + " " + e } else this.columnClassObj[i] = e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setColumnClass = function(t, e) { try { if ("string" != typeof e) return; for (var i = e.split(" "), o = 0; o < i.length; o++)this._setColumnClass(t, i[o]); for (o = this.getColumnIndex(t); o < this.data_td_list.length; o += this.oneRowDataLength) { var s = this.data_td_list[o]; s && this.addClass(s, e) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._removeColumnClass = function(t, e) { try { var i = this.getColumnIndex(t); this.columnClassObj[i] = this.columnClassObj[i].replace(new RegExp(e, "g"), "").wq_trim(), this.columnClassObj[i] || delete this.columnClassObj[i]; for (var o = i; o < this.data_td_list.length; o += this.oneRowDataLength) { var s = this.data_td_list[o]; s && this.removeClass(s, e) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.removeColumnClass = function(t, e) { try { if ("string" != typeof e) return; for (var i = e.split(" "), o = 0; o < i.length; o++)this._removeColumnClass(t, i[o]) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getColumnClass = function(t) { try { var e = this.getColumnIndex(t); return this.columnClassObj[e] } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._refreshColumnClass = function() { try { for (var t in this.columnClassObj) this.setColumnClass(this.columnClassObj[t]) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getRowStyleFixedClassName = function(t) { try { var e = this._getStyleRowIndex(t); return null == e ? null : this.rowStyleFixedArr[e] } catch (t) { $l("getRowStyleFixedClassName :" + t.message), a.w.printStackTrace(t, null, this) } }, S.prototype.setRowStyleFixedClassName = function(t, e) { try { var i = this._getStyleRowIndex(t); if (null == i) return; this.rowStyleFixedArr[i] = e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getRowStyleDataClassName = function(t) { try { var e = this._getStyleRowIndex(t); return null == e ? null : this.rowStyleDataArr[e] } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setRowStyleDataClassName = function(t, e) { try { var i = this._getStyleRowIndex(t); if (null == i) return; this.rowStyleDataArr[i] = e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.refreshColumnItemset = function(t) {
								try {
									var e = this.getCellInfo(t)
									; if (e.resetMatchInfo = !0, e.options.embeddedInput) { t = this.getColumnIndex(e.options.col_id); for (var i = 0; i < this.drawedRowLength; i++) { var o = this.data_td_list[t + i * this.oneRowDataLength]; if (o) { var s = this.dom[o.getAttribute("id") + "_select"]; s && s.refreshItemset() } } } else "select" == e.options.inputType ? (e.hasRef && (e.refHash = []), e.select && e.select.refreshItemset(), e.itemsetObj && e.mainGrid.refresh()) : "checkcombobox" == e.options.inputType && (e.refreshItemArr(), e.checkcombobox)
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.refreshRadioGroup = function(t) { try { for (var e = {}, i = [], o = 0; o < this.oneRowDataLength; o++) { "radio" == (l = this.getCellInfo(o)).options.inputType && l.options.groupName == t && (l.options.groupRef && (l.options.groupValue = WebSquare.ModelUtil.getInstanceValue(l.options.groupRef, null, this.scope_id)), e[l.options.groupValue] = l, i.push(l)) } if (0 == i.length) return; var s = this.getDataLength(); for (o = 0; o < s; o++) { var r = e[this.dataList._getCellData(o, t)]; if (r) this.dataList.__setCellData(o, r.id, r.options.trueValue); else { for (var n = 0; n < i.length; n++) { var l = i[n]; this.dataList.__setCellData(o, l.id, l.options.defaultValue) } var h = this.getCellInfo(t); h && this.dataList.__setCellData(o, t, h.options.defaultValue) } } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.resetRadioGroup = function(t, e) { return this._resetRadioGroup.call(this, t, e, !0) }, S.prototype._resetRadioGroup = function(t, e, i) { try { for (var o = [], s = 0; s < this.oneRowDataLength; s++) { "radio" == (h = this.getCellInfo(s)).options.inputType && h.options.groupName == e && o.push(h) } if (0 == o.length) return; if ("number" == typeof t) var r = t, n = t + 1; else r = 0, n = this.getDataLength(); for (s = r; s < n; s++) { for (var l = 0; l < o.length; l++) { var h = o[l]; this.dataList.__setCellData(s, h.id, h.options.defaultValue) } if (i) { var d = this.getCellInfo(e); d && this.dataList.__setCellData(s, e, d.options.defaultValue) } } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.xmlData2ArrData = function(t, e, i) { try { if (null == t) return; if (9 == t.nodeType) s = 1 == e ? t.selectNodes("/" + this.options.repeatNode) : t.selectNodes("/" + this.options.baseNode + "/" + this.options.repeatNode); else if (o = i && i.baseNode ? i.baseNode : this.options.baseNode, i && i.isRepeatNode) s = (t = WebSquare.xml.parse(WebSquare.xml.serialize(t))).selectNodes("/" + i.repeatNode); else if (o.startsWith(t.tagName)) var o = o.replace(t.tagName, "."), s = t.selectNodes(o + "/" + this.options.repeatNode); else t = WebSquare.xml.parse(WebSquare.xml.serialize(t)), s = 1 == e ? t.selectNodes("/" + this.options.repeatNode) : t.selectNodes("/" + this.options.baseNode + "/" + this.options.repeatNode); for (var n = [], l = this.options.valueNode, h = null == l || "" == l, d = r.D.getTextNodeValue, p = s.length, u = this.tdIdList.length, c = [], g = [], f = [], m = 0; m < u; m++) { c[m] = this.getCellInfo(this.tdIdList[m]); var y = c[m].options; null != y.importFormatter && "" != y.importFormatter && (g[m] = !0), null != y.importExp && "" != y.importExp && (f[m] = !0) } for (m = 0; m < p; m++) { for (var b = m, w = s[m], v = n.length, C = 0; C < u; C++) { var I = s[m].selectSingleNode(this.tdIdList[C]); n[v + C] = null != I ? h ? d(I) : I.getAttribute(l) : c[C].options.defaultValue } for (C = 0; C < u; C++)if (g[C]) try { var _ = r.D.getGlobalFunction(c[C].options.importFormatter, this.scope_id); "function" == typeof _ && (n[v + C] = _.call(this, w, b)) } catch (t) { n[v + C] = c[C].options.defaultValue, a.w.printStackTrace(t, null, this) } for (C = 0; C < u; C++)if (f[C]) try { var x = new Function("_this", "obfuscator_rowXml", "return " + c[C].options.importExp)(this, w); n[v + C] = x } catch (t) { n[v + C] = c[C].options.defaultValue, a.w.printStackTrace(t, null, this) } for (C = 0; C < u; C++) { if ("radio" == c[C].options.inputType && c[C].options.groupName && this.cellInfoHash[c[C].options.groupName]) { var S = c[C].options.trueValue, D = c[C].options.falseValue; switch (c[C].options.valueType) { case "binary": S = "1", D = "0"; break; case "boolean": S = "true", D = "false" }this.columnValue(w, c[C].options.groupName) == c[C].options.groupValue ? n[v + C] = S : n[v + C] = D } this.options.xmlEncode && null != n[v + C] && (n[v + C] = WebSquare.xml.decode(n[v + C])) } } return n } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.jsonData2ArrData = function(t) {
								try {
									if (null == t) return
										; for (var e = [], i = t.length, o = this.cellIdList.length, s = [], n = 0; n < o; n++)s[n] = this.getCellInfo(this.cellIdList[n]); for (n = 0; n < i; n++)for (var l = n, h = t[n], d = e.length, p = 0; p < o; p++)if (s[p].options.importFormatter) try { var u = r.D.getGlobalFunction(s[p].options.importFormatter, this.scope_id); "function" == typeof u && (e[d + p] = u.call(this, h, l)) } catch (t) { e[d + p] = s[p].options.defaultValue, a.w.printStackTrace(t, null, this) } else if (s[p].options.importExp) try { var c = new Function("_this", "obfuscator_rowXml", "return " + s[p].options.importExp)(this, h); e[d + p] = c } catch (t) { e[d + p] = s[p].options.defaultValue, a.w.printStackTrace(t, null, this) } else { var g = t[n][this.cellIdList[p]]; e[d + p] = null != g ? g : s[p].options.defaultValue } return e
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.xpathValue = function(t, e) { try { var i = WebSquare.xml.findNode(t, e); if (null == i) return ""; if (1 != i.nodeType) return i.nodeValue; for (var o = i.firstChild; null != o; o = o.nextSibling)if (3 == o.nodeType) return o.nodeValue } catch (t) { $l("xpath exeption"), a.w.printStackTrace(t, null, this) } return "" }, S.prototype.getAllArrXML = function(t) { try { var e = !1; this.tagNmArr = this._dataList.options.baseNode.replace(/\[[^\]]+\]/g, "").split("/"); for (var i = 0; i < this.tagNmArr.length; i++)if (null != this.tagNmArr[i] && "" != this.tagNmArr[i].wq_trim()) if (e) s.push(o.createElement(this.tagNmArr[i])), s[i - 1].appendChild(s[i]); else { var o = WebSquare.xml.parse("<" + this.tagNmArr[i] + "/>"), s = []; s.push(o.documentElement), e = !0 } var n = this._dataList.options.repeatNode.replace(/\[[^\]]+\]/g, "").split("/"), l = null; for (i = 0; i < this.getTotalRow(); i++) { var h = i; l = []; for (var d = null, p = 0; p < n.length; p++)if ("" != n[p]) { var u = o.createElement(n[p]); l.push(u), 0 == p ? s[s.length - 1].appendChild(u) : l[p - 1].appendChild(l[p]) } (d = l[n.length - 1]).setAttribute("status", this.dataList._getRowStatusValue(h)), d.setAttribute("statusValue", this.dataList._getRowStatus(h)), d.setAttribute("id", h); for (var c = this.getColumnCount(), g = new Array(c), f = 0; f < c; f++) { var m = ""; m = "displayData" != t ? this._dataList._getData(h, f) : this._getDisplayData(h, f), this.options.xmlEncode && (m = WebSquare.xml.encode(m)); var y = this.getColumnID(f), b = this.getCellInfo(f); if ("" != b.options.exportFormatter) try { var w = r.D.getGlobalFunction(b.options.exportFormatter, this.scope_id); "function" == typeof w && w(d, m, h, y) } catch (t) { a.w.printStackTrace(t, null, this), $l("xmlDtaGetter - tdObj.exportFormatter error") } else { if (g[f] = o.createElement(this.getColumnID(f)), "" == this._dataList.options.valueAttribute) { var v = o.createTextNode(m); g[f].appendChild(v) } else g[f].setAttribute(this._dataList.options.valueAttribute, m); d.appendChild(g[f]) } } } return o } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getArrXML = function(t, e, i) {
								try {
									if (t instanceof Array) {
										var o = !1; this.tagNmArr = this._dataList.options.baseNode.replace(/\[[^\]]+\]/g, "").split("/"); for (var s = 0; s < this.tagNmArr.length; s++)if (null != this.tagNmArr[s] && "" != this.tagNmArr[s].wq_trim()) if (o) l.push(n.createElement(this.tagNmArr[s])), l[s - 1].appendChild(l[s]); else { var n = WebSquare.xml.parse("<" + this.tagNmArr[s] + "/>"), l = []; l.push(n.documentElement), o = !0 } var h = this._dataList.options.repeatNode.replace(/\[[^\]]+\]/g, "").split("/"), d = null; for (s = 0; s < t.length; s++) {
											var p = t[s]; d = []; for (var u = null, c = 0; c < h.length; c++)if ("" != h[c]) { var g = n.createElement(h[c]); d.push(g), 0 == c ? l[l.length - 1].appendChild(g) : d[c - 1].appendChild(d[c]) } (u = d[h.length - 1]).setAttribute("status", this.dataList.getRowStatusValue(p)), u.setAttribute("statusValue", this.dataList.getRowStatus(p)), !0 === i ? u.setAttribute("id", this._getGroupbyDisplayRowIndex(p)) : u.setAttribute("id", p); for (var f = this.getColumnCount(), m = new Array(f), y = 0; y < f; y++) {
												var b = ""; "displayData" != e ? null == (b = this.dataList._getCellData(p, y)) && (b = "") : null == (b = this._getCellDisplayData(p, y)) && (b = ""), this.options.xmlEncode && (b = WebSquare.xml.encode(b)); var w = this.getColumnID(y), v = this.getCellInfo(y); if ("" != v.options.exportFormatter) try { var C = r.D.getGlobalFunction(v.options.exportFormatter, this.scope_id); "function" == typeof C && C(u, b, p, w) } catch (t) {
													a.w.printStackTrace(t, null, this),
													$l("xmlDtaGetter - tdObj.exportFormatter error")
												} else { if (m[y] = n.createElement(this.getColumnID(y)), "" == this._dataList.options.valueAttribute) { var I = n.createTextNode(b); m[y].appendChild(I) } else m[y].setAttribute(this._dataList.options.valueAttribute, b); u.appendChild(m[y]) }
											}
										} return n
									}
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.getDisplayRowIndex = function(t) { try { return (this._linkedDataList || this._dataList).getFilteredRowIndex(t) } catch (t) { a.w.printStackTrace(t) } }, S.prototype.getOption = function(t) { try { return this.options[t] } catch (t) { a.w.printStackTrace(t) } }, S.prototype.getDataList = function() { try { var t = this._linkedDataList || this._dataList; return t ? t.id : null } catch (t) { a.w.printStackTrace(t) } }, S.prototype.getRowNumVisible = function() { try { return this.options.rowNumVisible } catch (t) { a.w.printStackTrace(t) } }, S.prototype.makeCustomFilter = function(t) {
								try {
									null != this.customFilter && this.customFilter.remove(), this.customFilter = new WebSquare.uiplugin.floatingLayer(this.id + "_customFilter", { style: "position:absolute; border-width:1px;", className: "w2grid_customFilter", useModal: !0, useModalStack: !0, frameModal: this.options.customFilterFrameModal + "", headerLeftClass: "w2grid_customFilter_HL", headerRightClass: "w2grid_customFilter_HR", headerCenterClass: "w2grid_customFilter_HC", bodyLeftClass: "w2grid_customFilter_BL", bodyRightClass: "w2grid_customFilter_BR", bodyCenterClass: "w2grid_customFilter_BC", bodyLeftBottomClass: "w2grid_customFilter_FL", bodyRightBottomClass: "w2grid_customFilter_FR", bodyBottomClass: "w2grid_customFilter_FC", closeButtonClass: "w2grid_customFilter_btnClose", _scope_obj_uuid: this.options._scope_obj_uuid, title: WebSquare.language.getMessage("Grid_filter_title") || "사용자 지정 필터", titleClass: "w2grid_customFilter_title" }); var e = new WebSquare.uiplugin.textbox(this.id + "_text1_" + this.headerID, { style: "position:absolute; margin:10px;", className: "w2grid_customFilter_text", label: WebSquare.language.getMessage("Grid_filter_search_label") || "찾을 조건" }); this.customFilter.addControl(e), this.selectboxItemSet = ["=", "<>", ">", ">=", "<", "<=", WebSquare.language.getMessage("Grid_filter_condition7") || "= (메타문자 사용)", WebSquare.language.getMessage("Grid_filter_condition1") || "시작문자", WebSquare.language.getMessage("Grid_filter_condition2") || "제외할 시작 문자", WebSquare.language.getMessage("Grid_filter_condition3") || "끝 문자", WebSquare.language.getMessage("Grid_filter_condition4") || "제외할 끝 문자", WebSquare.language.getMessage("Grid_filter_condition5") || "포함", WebSquare.language.getMessage("Grid_filter_condition6") || "포함하지 않음"], this._selectboxIgnoreOperatorItemSet = [">", ">=", "<", "<="], this.customFilterItemCnt = 0, this.groupList = []; var i = new WebSquare.uiplugin.group(this.id + "_item_" + this.customFilterItemCnt, { style: "position:absolute; width:100%; height:22px; margin-bottom:5px; background-color:transparent;" }); this.customFilter.addControl(i), this.groupList.push(i); var o = this, s = new WebSquare.uiplugin.selectbox(i.id + "_selectbox_" + this.headerID, { style: "position:absolute;", className: "w2grid_customFilter_selectbox", textAlign: "left", chooseOption: !0, visibleColumn: "true", wheelRows: 1, xmlEvents: [{ name: "onchange", action: "script", param: { handler: function() { var t = o.customFilter.getChildren()[o.customFilter.getChildrenCount() - 2], e = o.customFilter.getChildren()[o.customFilter.getChildrenCount() - 3]; 7 == this.getSelectedIndex() ? (t.setLabel(WebSquare.language.getMessage("Grid_filter_info_Label1") || "? 기호를 사용하여 한문자를 나타낼 수 있습니다."), e.setLabel(WebSquare.language.getMessage("Grid_filter_info_Label2") || "* 기호를 사용하여 여러 문자를 나타낼 수 있습니다."), o.setChildrenPosition(), o.customFilterMetacharPos |= 1) : (o.customFilterMetacharPos &= -2, o.customFilterMetacharPos <= 0 && (t.setLabel(""), e.setLabel(""), o.setChildrenPosition())) } } }] }); i.addControl(s)
										; var n = this.headerInfoHash[this.headerID].options.filterSubmenuSize || "", l = this.getCellInfo(this.targetColID).options.filterDisplayMode || "label", h = this.getCellInfo(this.targetColID).options.delimiter || " ", p = this.getCellInfo(this.targetColID).options.filterSearchTarget || "label", u = new WebSquare.uiplugin.autoComplete(i.id + "_autocomplete_" + this.headerID, { style: "position:absolute;", className: "w2grid_customFilter_autocomplete", noResult: "useData", ignoreBlankOnNoResult: !0, chooseOption: !0, caseSensitive: this.options.caseSensitive, wheelRows: 1, submenuSize: n, displayMode: l, searchTarget: p, delimiter: h }); if (u.__setSelectedIndex1 = u.setSelectedIndex1, u.setSelectedIndex1 = function(t, e) { u.__setSelectedIndex1(t, e); var i = u.getValue(), s = this.parentControl.id; if (s) var a = r.D.getComponentById(s + "_selectbox_" + o.headerID); if (a) { if (isNaN(i)) { for (var n = 0; n < a.itemArr.length; n++)void 0 !== a.itemArr[n]._hidden && (a.itemArr[n]._hidden = !0); for (var l = a.getValue(), h = 0; h < o._selectboxIgnoreOperatorItemSet.length; h++)l === o._selectboxIgnoreOperatorItemSet[h] && a.setSelectedIndex(0) } else for (n = 0; n < a.itemArr.length; n++)!0 === a.itemArr[n]._hidden && (a.itemArr[n]._hidden = !1); a.setSelectOptions(a.itemArr) } }, i.addControl(u), "label" == l || "value delim label" == l || "label delim value" == l) for (var c = this.changeItemValue("label", this.targetColID, this.colDataList, !1), g = 0; g < this.colDataList.length; g++)u.addItem(c[g], this.colDataList[g]); else if (this.colDataList) for (g = 0; g < this.colDataList.length; g++)u.addItem(this.colDataList[g], this.colDataList[g]); for (var f = this.headCellInfoHash[this.headerID].getAttribute("customFilterItemCnt") || 2, m = 0; m < f - 1; m++)this.addCustomFilterItem(m); var y = new WebSquare.uiplugin.textbox(this.id + "_text2_" + this.headerID, { style: "position:absolute; margin-left:10px; margin-top:5px;", className: "w2grid_customFilter_text" }); this.customFilter.addControl(y); var b = new WebSquare.uiplugin.textbox(this.id + "_text3_" + this.headerID, { style: "position:absolute; margin:5px; margin-bottom:10px; margin-left:10px;", className: "w2grid_customFilter_text" }); this.customFilter.addControl(b); var w = new WebSquare.uiplugin.group(this.id + "_buttonGroup_" + this.headerID, { style: "position:absolute;", className: "w2grid_customFilter_buttonGroup" }); if (this.customFilter.addControl(w), this.options.showCustomFilterReset) { var v = new WebSquare.uiplugin.textbox(this.id + "_btnReset_" + this.headerID, { style: "position:absolute; border-width:1px;", className: "w2grid_customFilter_button", label: WebSquare.language.getMessage("Grid_filter_reset") || "초기화", xmlEvents: [{ name: "onclick", action: "script", param: { handler: function(t) { o.groupbyStatus && o.groupbyStatus.grouped && o.options.groupbyFilterBox; for (var e = 0; e < o.groupList.length; e++)for (var i = o.groupList[e].getChildren(), s = 0; s < i.length; s++) { var a = i[s]; if (-1 != a.id.indexOf("_selectbox")) { var r = o.itemValueObj[o.targetColID]["select" + e]; a.setSelectedIndex(r || 0) } else if (-1 != a.id.indexOf("_autocomplete")) { var n = o.itemValueObj[o.targetColID]["auto" + e]; a.setValue(n || "") } else if (-1 != a.id.indexOf("_radio")) { var l = o.itemValueObj[o.targetColID]["radio" + e]; a.setSelectedIndex(l || 0) } } } } }] }); w.addControl(v), v.addEvent("onmousedown", (function() { v.toggleClass("w2grid_customFilter_button_selected"), this.customFilterBtnSelected = !0 })), v.addEvent("onmouseup", (function() { v.toggleClass("w2grid_customFilter_button_selected"), this.customFilterBtnSelected = !1 })), v.addEvent("onmouseout", (function() { v.toggleClass("w2grid_customFilter_button_selected") })) } var C = new WebSquare.uiplugin.textbox(this.id + "_btnConform_" + this.headerID, { style: "position:absolute; border-width:1px;", className: "w2grid_customFilter_button", tabIndex: "0", label: WebSquare.language.getMessage("Grid_filter_confirm") || "확인", xmlEvents: [{ name: "onclick", action: "script", param: { handler: function(t) { o.setCustomFilterExpression() } } }, { name: "onkeydown", action: "script", param: { handler: function(t) { 13 == (t.charCode ? t.charCode : t.keyCode) && (o.setCustomFilterExpression(), o.hideCustomFilterList()) } } }] }); w.addControl(C), C.addEvent("onmousedown", (function() {
											C.toggleClass("w2grid_customFilter_button_selected"), this.customFilterBtnSelected = !0
										})), C.addEvent("onmouseup", (function() { C.toggleClass("w2grid_customFilter_button_selected"), this.customFilterBtnSelected = !1 })), C.addEvent("onmouseout", (function() { C.toggleClass("w2grid_customFilter_button_selected") })); var I = new WebSquare.uiplugin.textbox(this.id + "_btnCancel", { style: "position:absolute; border-width:1px;", className: "w2grid_customFilter_button", tabIndex: "0", label: WebSquare.language.getMessage("Grid_filter_cancel") || "취소", xmlEvents: [{ name: "onclick", action: "script", param: { handler: function(t) { o.options.groupbyZone && o.firstOpenCustomFilter[o.headerID] && (o.firstOpenCustomFilter[o.headerID] = !1), o.customFilter.hide() } } }, { name: "onkeydown", action: "script", param: { handler: function(t) { var e = t.charCode ? t.charCode : t.keyCode; 9 == e ? (I.tabOrderMoveStart = !1, t.shiftKey || (I.tabOrderMoveStart = !0, d.B.preventDefault(t))) : 13 == e && (o.options.groupbyZone && o.firstOpenCustomFilter[o.headerID] && (o.firstOpenCustomFilter[o.headerID] = !1), o.customFilter.hide(), o.hideCustomFilterList()) } } }, { name: "onkeyup", action: "script", param: { handler: function(t) { 9 == (t.charCode ? t.charCode : t.keyCode) && (t.shiftKey || I.tabOrderMoveStart && (I.tabOrderMoveStart = !1, o.customFilter.render.getElementsByClassName("w2floatingLayer_close_button")[0].focus())) } } }] }); w.addControl(I), I.addEvent("onmousedown", (function() { I.toggleClass("w2grid_customFilter_button_selected") })), I.addEvent("onmouseup", (function() { I.toggleClass("w2grid_customFilter_button_selected") })), I.addEvent("onmouseout", (function() { I.toggleClass("w2grid_customFilter_button_selected") })), this.customFilter.writeTo(WebSquare.getBody()), this.customFilter.activate(), this.customFilter.dom.closeButton.addEventListener("keydown", (function(t) { 9 == (t.charCode ? t.charCode : t.keyCode) && t.shiftKey && I.focus() })), this.setChildrenPosition(), this.setDefaultValue(t), I.render.style.left = w.render.offsetWidth - I.render.offsetWidth - 10 + "px", C.render.style.left = parseInt(I.render.style.left, 10) - C.render.offsetWidth - 5 + "px", this.options.showCustomFilterReset && (v.render.style.left = parseInt(C.render.style.left, 10) - I.render.offsetWidth - 17 + "px"), this.customFilter.hide()
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.setDefaultValue = function(t) { for (var e = 0; e < this.groupList.length; e++)for (var i = this.groupList[e].getChildren(), o = 0; o < i.length; o++) { var s, a = i[o]; if (-1 != a.id.indexOf("_selectbox")) { s = a; for (var r = 0; r < this.selectboxItemSet.length; r++)">" === this.selectboxItemSet[r] || ">=" === this.selectboxItemSet[r] || "<" === this.selectboxItemSet[r] || "<=" === this.selectboxItemSet[r] ? a.addItemArr(this.selectboxItemSet[r], this.selectboxItemSet[r], !1) : a.addItemArr(this.selectboxItemSet[r], this.selectboxItemSet[r]); var n = this.itemValueObj[this.targetColID]["select" + e]; a.setSelectedIndex(n || 0) } else if (-1 != a.id.indexOf("_autocomplete")) { var l = this.itemValueObj[this.targetColID]["auto" + e]; a.setValue(l || ""); var h = a.getValue(); if (s) { if (isNaN(h)) for (r = 0; r < s.itemArr.length; r++)void 0 !== s.itemArr[r]._hidden && (s.itemArr[r]._hidden = !0); else for (r = 0; r < s.itemArr.length; r++)!0 === s.itemArr[r]._hidden && (s.itemArr[r]._hidden = !1); s.setSelectOptions(s.itemArr) } s = null } else if (-1 != a.id.indexOf("_radio")) { a.addItem("OR", "OR", "0"), a.addItem("AND", "AND", "0"); var d = this.itemValueObj[this.targetColID]["radio" + e]; a.setSelectedIndex(d || 0) } } }, S.prototype.getUniqueValueOfArray = function(t) { t.sort(); for (var e = [], i = 0; i < t.length; i++)(0 === e.length || e[e.length - 1] !== t[i] && e[e.length - 1] + "" != t[i] + "") && e.push(t[i]); return e }, S.prototype.setAutoCompleteItem = function(t, e) {
								var i = []; if (this.options.useFilterSearch && this.customFilterList && this.customFilterList.filterHistory.column.length > 0) { var o = this.getCustomFilterListJSON({ colID: t, headerID: e }), s = this.headerInfoHash[e], a = 0; s && s.options.hideCustomFilter && (a = 1); for (var n = 2 - a; n < o.length; n++)i.push(o[n].id2) } else i = this.dataList.getColData(t)
									; for (var l in this.itemValueObj[this.targetColID]) -1 != l.indexOf("auto") && "" != this.itemValueObj[this.targetColID][l] && i.push(this.itemValueObj[this.targetColID][l]); this.colDataList = this.getUniqueValueOfArray(i), this.colDataList.sort((function(t, e) { var i = t - e; r.D.isIE("6 7") && (i = (t + "").localeCompare(e + "")); return i }))
							}, S.prototype.showFilterOptions = function(t) { this.options.useFilterList ? (this.options.searchFilter, this.customFilterList && this.customFilterScrollView ? this.toggleCustomFilterList(t) : this.createCustomFilterList(t)) : this.showCustomFilter(t) }, S.prototype.showCustomFilter = function(t) { if (this.noevent = !0, this.options.useFilterList) if (this.groupbyStatus.grouped) if (this.options.groupbyFilterIcon) { var e = {}; e.render = this.getElementById(this.id + "_" + t), e.parentRender = this.render.getElementsByTagName("div")[0], e.headerID = t, e.headerIndex = this.getHeaderIndex(e.headerID), this.groupbyFilterList ? this.toggleGroupbyFilterList(e) : this.createGroupbyFilterList(e) } else this._showCustomFilter(t); else this.showFilterOptions(t); else this._showCustomFilter(t) }, S.prototype.showCustomFilter2 = function(t) { this.noevent = !0, this._showCustomFilter(t) }, S.prototype._showCustomFilter = function(t) { var e, i; (this.headerID = t, this.targetColID = this.getColIdByHeaderId(t), null == this.customFilter && (this.itemValueObj = {}, this.customFilterStatusObj = {}), this.itemValueObj[this.targetColID] || (this.itemValueObj[this.targetColID] = {}), this.setAutoCompleteItem(this.targetColID, t), this.makeCustomFilter(this.targetColID, t), "BODY" == this.render.parentNode.tagName) ? (e = this.render.offsetTop, i = this.render.offsetLeft) : (e = WebSquare.style.getAbsoluteTop(this.render), i = WebSquare.style.getAbsoluteLeft(this.render), r.D.isIEAllVersion("5 6 7") || (e -= WebSquare.style.getAbsoluteTop(document.body))); var o = this.getHeaderPosition(t, "top"), s = this.getHeaderPosition(t, "left"), a = this.getHeaderSize(t, "width"), n = this.getHeaderSize(t, "height"), l = 0, h = 0; "number" == typeof window.innerWidth ? (l = window.innerWidth, h = window.innerHeight) : document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight) ? (l = document.documentElement.clientWidth, h = document.documentElement.clientHeight) : document.body && (document.body.clientWidth || document.body.clientHeight) && (l = document.body.clientWidth, h = document.body.clientHeight); var d, p, u = parseInt(r.D.getStyleProperty(this.customFilter.render, "width"), 10), c = parseInt(r.D.getStyleProperty(this.customFilter.render, "height"), 10), g = 0, f = 0; r.D.isIE("6 7 8") ? (d = document.documentElement.scrollTop, p = document.documentElement.scrollLeft) : (d = window.pageYOffset, p = window.pageXOffset), g = i + s + a + u <= l + p ? i + s + a : i + s - u, f = e + o + n + c <= h + d ? e + o + n : e + this.render.offsetHeight - c, g < p && (g = (l - u) / 2 + p, (f = e + this.render.offsetHeight) + c > h + d && (f = e - c)), f < d && (f = (h - c) / 2 + d), this.customFilter.render.style.left = g + "px", this.customFilter.render.style.top = f + "px", this.customFilter.show(); var m = r.D.getComponentById(this.id + "_item_0_selectbox_" + this.headerID); m && m.focus() }, S.prototype.addCustomFilterItem = function(t) {
								this.customFilterItemCnt++; var e = new WebSquare.uiplugin.group(this.id + "_item_" + this.customFilterItemCnt, { style: "position:absolute;", className: "w2grid_customFilter_item" }); this.customFilter.addControl(e), this.groupList.push(e); var i = new WebSquare.uiplugin.radio(e.id + "_radio", { style: "position:absolute; left:50px; height:20px;", className: "w2grid_customFilter_radio", selectedIndex: 0, cols: 2, rows: 1 }); e.addControl(i); var o = this, s = new WebSquare.uiplugin.selectbox(e.id + "_selectbox", {
									style: "position:absolute; top:25px;", className: "w2grid_customFilter_selectbox", textAlign: "left", chooseOption: !0, visibleColumn: "true", xmlEvents: [{
										name: "onchange", action: "script", param: {
											handler: function() {
												var e = o.customFilter.getChildren()[o.customFilter.getChildrenCount() - 2], i = o.customFilter.getChildren()[o.customFilter.getChildrenCount() - 3]; 7 == this.getSelectedIndex() ? (e.setLabel(WebSquare.language.getMessage("Grid_filter_info_Label1") || "? 기호를 사용하여 한문자를 나타낼 수 있습니다."),
													i.setLabel(WebSquare.language.getMessage("Grid_filter_info_Label2") || "* 기호를 사용하여 여러 문자를 나타낼 수 있습니다."), o.setChildrenPosition(), o.customFilterMetacharPos |= 1 << t + 1) : (o.customFilterMetacharPos &= ~(1 << t + 1), o.customFilterMetacharPos <= 0 && (e.setLabel(""), i.setLabel(""), o.setChildrenPosition()))
											}
										}
									}]
								}); e.addControl(s); var a = this.headerInfoHash[this.headerID].options.filterSubmenuSize || "", n = this.getCellInfo(this.targetColID).options.filterDisplayMode || "label", l = this.getCellInfo(this.targetColID).options.filterSearchTarget || "label", h = this.getCellInfo(this.targetColID).options.delimiter || " ", d = new WebSquare.uiplugin.autoComplete(e.id + "_autocomplete", { style: "position:absolute; top:25px;", className: "w2grid_customFilter_autocomplete", noResult: "useData", ignoreBlankOnNoResult: !0, chooseOption: !0, caseSensitive: this.options.caseSensitive, submenuSize: a, displayMode: n, searchTarget: l, delimiter: h }); if (d.__setSelectedIndex1 = d.setSelectedIndex1, d.setSelectedIndex1 = function(t, e) { d.__setSelectedIndex1(t, e); var i = d.getValue(), s = this.parentControl.id; if (s) var a = r.D.getComponentById(s + "_selectbox"); if (a) { if (isNaN(i)) { for (var n = 0; n < a.itemArr.length; n++)void 0 !== a.itemArr[n]._hidden && (a.itemArr[n]._hidden = !0); for (var l = a.getValue(), h = 0; h < o._selectboxIgnoreOperatorItemSet.length; h++)l === o._selectboxIgnoreOperatorItemSet[h] && a.setSelectedIndex(0) } else for (n = 0; n < a.itemArr.length; n++)!0 === a.itemArr[n]._hidden && (a.itemArr[n]._hidden = !1); a.setSelectOptions(a.itemArr) } }, e.addControl(d), "label" == n || "value delim label" == n || "label delim value" == n) for (var p = this.changeItemValue("label", this.targetColID, this.colDataList, !1), u = 0; u < this.colDataList.length; u++)d.addItem(p[u], this.colDataList[u]); else if (this.colDataList) for (u = 0; u < this.colDataList.length; u++)d.addItem(this.colDataList[u], this.colDataList[u])
							}, S.prototype.setChildrenPosition = function() { for (var t = this.customFilter.getChildren(), e = 1; e <= t.length; e++) { var i = WebSquare.style.getStyle(t[e - 1].render, "top"); if (i = "auto" === i ? "0" : i, e === t.length) break; var o = WebSquare.style.getStyle(t[e - 1].render, "margin-bottom"); o = "auto" === o ? "0" : o, t[e].render.style.top = t[e - 1].render.offsetHeight + 5 + parseInt(i || "0", 10) + parseInt(o || "0", 10) + "px" } var s = this.customFilter.dom.closeButton.parentNode.offsetHeight, a = t[e - 1].render.offsetHeight + 10 + parseInt(i || "0", 10); this.customFilter.setSize(this.customFilter.render.offsetWidth, s + a + 6) }, S.prototype.replacechar = function(t) { return "^" == t || "$" == t || "." == t || "[" == t || "]" == t || "{" == t || "}" == t || "+" == t || "(" == t || ")" == t || "|" == t || "*" == t || "?" == t || "\\" == t ? "\\" + t : void 0 }, S.prototype.setCustomFilterExpression = function() {
								this.dataList.removeColumnFilter(this.targetColID, { noRefreshAfter: !0 }); for (var t = !0, e = [], i = 0; i < this.groupList.length; i++) { for (var o = {}, s = this.groupList[i].getChildren(), a = 0; a < s.length; a++) { var r = s[a]; if (-1 != r.id.indexOf("_selectbox")) o.select = r.getSelectedIndex(), this.itemValueObj[this.targetColID]["select" + i] = r.getSelectedIndex(), t = t && 0 == r.getSelectedIndex(), o.dataType = this.getDataType(this.targetColID); else if (-1 != r.id.indexOf("_autocomplete")) { var n = this; o.auto = r.getValue() != r.options.chooseOptionLabel ? (r.getValue() + "").replace(/[\^\$\.\[\]\{\}\+\(\)\|\*\\\?]/g, (function(t) { return n.replacechar(t) })) : "", this.itemValueObj[this.targetColID]["auto" + i] = r.getValue(), t = t && r.getValue() == r.options.chooseOptionLabel } else -1 != r.id.indexOf("_radio") && (o.radio = r.getSelectedIndex(), this.itemValueObj[this.targetColID]["radio" + i] = r.getSelectedIndex()) } o.select && e.push(o) } this.customFilterStatusObj[this.headerID] = !0; var l = { type: "func", colIndex: this.targetColID, key: this.customFilterOperator, condition: "and", columnfilterchangeFire: !1, param: e }, h = !1; if (this.customFilterList && this.customFilterList.customFilterListFilterInfo) {
									var p = this.customFilterList.customFilterListFilterInfo[this.targetColID]; this.customFilterList.customFilterListFilterInfo[this.targetColID] = JSON.stringify(l, (function(t, e) { return "function" == typeof e || "object" == typeof e && e.constructor === RegExp ? e.toString() : e })),
										p !== this.customFilterList.customFilterListFilterInfo[this.targetColID] && (h = !0, d.B.fireEvent(n._dataList, "onbeforecolumnfilterchange"))
								} this.dataList.setColumnFilter(l), h && d.B.fireEvent(n._dataList, "onaftercolumnfilterchange"); var u = this.getElementById(this.id + "_" + this.headerID + "_filter"); t || 0 == e.length ? WebSquare.style.removeClass(u, "w2grid_customFilter_filter") : WebSquare.style.addClass(u, "w2grid_customFilter_filter"), this.customFilter.hide()
							}, S.prototype.customFilterOperator = function(t, e, i) { for (var o = !0, s = 0; s < e.length; s++) { var a, r = !0, n = e[s].dataType, l = e[s].select, h = e[s].auto, d = e[s].auto.replace(".*", "~~").replace(".", "~"), p = d, u = t; if (l >= 3 && l <= 6) if ("bigDecimal" === n) { d = h.replace("\\.", "."); var c = WebSquare.bigDecimal(d); "NaN" === c.big ? !1 : (p = c, u = WebSquare.bigDecimal(t)) } else "number" !== n && "float" !== n || (p = (d = h.replace("\\.", ".")).toString().indexOf(".") > -1 ? parseFloat(d) : parseInt(d, 10)); switch (e[s].select) { case 1: (a = new RegExp(h, "g")).lastIndex = 0, r = t == a.exec(t); break; case 2: (a = new RegExp(h, "g")).lastIndex = 0, r = t != a.exec(t); break; case 3: r = "bigDecimal" === n ? u.minus(p) > 0 : u > p; break; case 4: r = "bigDecimal" === n ? u.minus(p) >= 0 : u >= p; break; case 5: r = "bigDecimal" === n ? u.minus(p) < 0 : u < p; break; case 6: r = "bigDecimal" === n ? u.minus(p) <= 0 : u <= p; break; case 7: h = (h = h.replace(/\\\*/g, ".*")).replace(/\\\?/g, "."); var g = (a = new RegExp(h, "g")).exec(t); r = t == g || h == g; break; case 8: r = "" == h ? t == h : !!(a = new RegExp("^(" + h + ")", "g")).test(t); break; case 9: r = !!(a = new RegExp("^[^(" + h + ")]", "g")).test(t); break; case 10: r = "" == h ? t == h : !!(a = new RegExp("(" + h + ")$", "g")).test(t); break; case 11: r = !!(a = new RegExp("[^(" + h + ")]$", "g")).test(t); break; case 12: r = "" == h ? t == h : !!(a = new RegExp(h, "g")).test(t); break; case 13: r = "" == h ? t != h : !!(a = new RegExp("^(?!.*" + h + ").*", "g")).test(t); break; default: r = t == h }if (1 === e.length) { o = r; break } 0 !== s ? o = 0 == e[s].radio ? o && r : o || r : o = r } return o }, S.prototype.syncWithSortStatus = function() { try { this.headerSortStatusArr = []; for (var t = this._linkedDataList || this._dataList, e = 0; e < t.sortStatusArr.length; e++) { var i = t.sortStatusArr[e]; "number" == typeof this.getColumnIndex(i.colID) && (this.headerSortStatusArr.push(i), this.headerSortStatusArr[i.colID] = i) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getFixedColumnLastIndex = function(t) { try { if (!this.options.rowNumStatusFixed && 0 === this.options.fixedColumn || !1 === t) var e = this.options.fixedColumn; else e = this.options.fixedColumn + this.defaultColCnt; if (e < 1) return 0; if (!this.options.fixedColumnWithHidden) for (var i = 0, o = 0; o < this.hiddenList.length; o++)if (this.hiddenList[o] || i++, i == e) return o + 1; return e } catch (t) { return a.w.printStackTrace(t, null, this), this.options.fixedColumn + this.defaultColCnt } }, S.prototype.getFixedRightColumnLastIndex = function() { try { var t = this.colWidthList.length - this.options.fixedRightColumn, e = 0; if (this.colWidthList.length != t) for (var i = this.hiddenList.length - 1; i >= 0; i--)if (this.hiddenList[i]) t--; else if (e++, this.options.fixedRightColumn == e) break; return t } catch (t) { return a.w.printStackTrace(t, null, this), this.colWidthList.length - this.options.fixedRightColumn } }, S.prototype.columnValue = function(t, e) { try { return e = this.getColumnID(e), null != t.nodeType && void 0 !== t.selectSingleNode ? null == this.options.valueNode || "" == this.options.valueNode ? r.D.getTextNodeValue(t.selectSingleNode(e)) : t.selectSingleNode(e).getAttribute(this.options.valueNode) : t[e] } catch (t) { a.w.printStackTrace(t, null, this) } return "" }, S.prototype.rowIndexValue = function(t) { return t }, S.prototype.getColumnOption = function(t, e) { try { var i = ""; if (this.successBinding) { var o = this.cellInfoHash[t]; if ("dataType" == e) if (o) { var s = o.options.dataType; i = s || this._dataList.getColumnOption(t, e) } else (i = this._dataList.getColumnOption(t, e)) || (i = "text"); else i = o.options[e] || ""; return i } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setColumnOption = function(t, e, i) { try { this.successBinding && this._dataList.setColumnOption(t, e, i) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getColumnDataListInfo = function(t) {
								try {
									var e = this.getCellInfo(t)
									; return "select" == e.options.inputType || "autoComplete" == e.options.inputType || "checkcombobox" == e.options.inputType ? e.getColumnDataListInfo() : null
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.setInitStyle = function(t) { if (WebSquare.initStyle[this.id]) { for (var e, i = /([\w-]*)\s*:\s*([^;]*)/g, o = {}; e = i.exec(WebSquare.initStyle[this.id].style);)o[e[1]] = e[2].wq_trim(); var s = o[t] ? t : ""; if (s) { var a = s.replace(/-([a-z])/g, (function(t) { return t[1].toUpperCase() })), r = o[s] ? o[s] : o[s.toUpperCase()]; document.getElementById(this.id).style[a] = r } else document.getElementById(this.id).style.cssText = WebSquare.initStyle[this.id].style, this.rowStyleArr = [], this.colStyleArr = [], this.cellStyleArr = [], this.cellClassArr = [], this.rowStyleFixedArr = [], this.rowStyleDataArr = [], this.columnStyleFixedArr = [], this.columnStyleDataArr = [], this.columnClassObj = {}, this._removeAllTDCellClass(), this.applyStyleOptions(this.getTotalRow()); document.getElementById(this.id).className = WebSquare.initStyle[this.id].className } }, S.prototype.refresh = function(t) { try { this._dataList.broadcast({ gridView: ["notifyRefresh", [t]] }) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.checkAdaptiveGridType = function() { try { if (this.options.groupbyZone) { var t = WebSquare.language.getMessage("Grid_warning5", this.id) || "[" + this.id + "] adaptive를 지원하지 않는 Grid 입니다."; return !1 } if (!this.render) return !1; var e = this.htmlInfo.head.rowAttrArr.length, i = this.htmlInfo.body.rowAttrArr.length, o = 0; if (this.hasSubtotal) for (var s = this.htmlInfo.subtotalArr, n = 0; n < s.length; n++)o += s[n].rowAttrArr.length; if (1 == e && 1 == i && (this.adaptiveGridType = 1), 1 == e && 2 == i ? this.adaptiveGridType = 2 : 2 == e && 1 == i ? this.adaptiveGridType = 3 : 2 == e && 2 == i ? this.adaptiveGridType = 4 : 3 == e && 1 == i && (this.adaptiveGridType = 5), e > 3 || i > 2 || o > 3) { t = WebSquare.language.getMessage("Grid_warning5", this.id) || "[" + this.id + "] adaptive를 지원하지 않는 Grid 입니다."; return $l(t), !1 } if (e + (i > o ? i : o) > 4) { t = WebSquare.language.getMessage("Grid_warning5", this.id) || "[" + this.id + "] adaptive를 지원하지 않는 Grid 입니다."; return $l(t), !1 } return !(r.D.isIE(6) || r.D.isIE(7) || r.D.isIE(8) || r.D.isIE(9)) } catch (t) { a.w.printStackTrace(t) } }, S.prototype.setAdaptiveGridBodyHeight = function() { try { for (var t = function(t) { var e = this.getColumnIndex(t), i = parseInt(this.getAdaptiveColumnStyleValue(e, "height"), 10); isNaN(i) || (this.orgBodyHeightObj[t] = this.getColumnStyleValue(e, "height"), this.setColumnStyle(t, "height", i + "px")) }, e = this.htmlInfo.head.rowArr, i = 0; i < e.length; i++)for (var o = e[i], s = 0; s < o.length; s++) { var r = o[s], n = parseInt(r.colSpan, 10), l = r.id, h = this.headerToBodyRelation[l], d = this.getColumnIndex(h); if (!isNaN(n) && n > 1) for (var p = 0; p < n; p++)t.call(this, this.getColumnID(d + p)); else t.call(this, h) } } catch (t) { a.w.printStackTrace(t) } }, S.prototype.removeAdaptiveGridBodyHeight = function() { try { for (var t in this.orgBodyHeightObj) this.setColumnStyle(t, "height", this.orgBodyHeightObj[t]) } catch (t) { a.w.printStackTrace(t) } }, S.prototype.setAdaptiveGridHeaderHeight = function() {
								try {
									var t = this.getHeaderID(0), e = parseInt(this.getHeaderCellStyleValue(t, "padding-top"), 10), i = parseInt(this.getHeaderCellStyleValue(t, "padding-bottom"), 10); 0 === e && null != this.oldOptions.headerPaddingTop && (e = parseInt(this.oldOptions.headerPaddingTop, 10)), 0 === i && null != this.oldOptions.headerPaddingBottom && (i = parseInt(this.oldOptions.headerPaddingBottom, 10)); for (var o = e + i, s = this.htmlInfo.head.rowArr, r = 0; r < s.length; r++)for (var n = s[r], l = 0; l < n.length; l++) {
										var h = n[l], d = parseInt(h.colSpan, 10), p = h.id, u = this.headerToBodyRelation[p], c = this.getColumnIndex(u), g = parseInt(this.getCellInfo(c).options.colSpan, 10), f = 0, m = 0, y = this.headerInfoHash[p]; if (y && y.options && "string" == typeof y.options.style) for (var b = y.options.style.split(";"), w = 0; w < b.length; w++) { if ("height" == (I = b[w].split(":"))[0]) { m = parseInt(I[1], 10); break } } else m = parseInt(this.getHeaderCellStyleValue(p, "height"), 10); if (null != c) if (d > 0) {
											var v = d; for (w = c; w < c + d; w++)this.hiddenList[w] ? v-- : (f += parseInt(this.getColumnStyleValue(w, "height"), 10), f += o); m != (f -= o - (v - 1)) && (null == this.orgHeaderHeightObj[p] && (this.orgHeaderHeightObj[p] = m + "px"),
												v > 0 && this.setHeaderStyle(p, "height", f + "px"))
										} else if (f = parseInt(this.getColumnStyleValue(c, "height"), 10), g > 1) { f -= (o + 1) * (g - 1); var C = Math.round(f / g); for (w = l; w < l + g; w++) { if (p = (h = n[w]).id, this.headerInfoHash[p]) for (b = this.headerInfoHash[p].options.style.split(";"), w = 0; w < b.length; w++) { var I; if ("height" == (I = b[w].split(":"))[0]) { m = parseInt(I[1], 10); break } } else m = parseInt(this.getHeaderCellStyleValue(p, "height"), 10); w == l + g - 1 ? (this.orgHeaderHeightObj[p] = m + "px", this.setHeaderStyle(p, "height", f + "px")) : (this.orgHeaderHeightObj[p] = m + "px", this.setHeaderStyle(p, "height", C + "px"), f -= C) } } else m != f && (null == this.orgHeaderHeightObj[p] && (this.orgHeaderHeightObj[p] = m + "px"), this.hiddenList[c] || this.setHeaderStyle(p, "height", f + "px"))
									} if (this.hasFooter) { var _ = this.htmlInfo.foot.rowArr; for (r = 0; r < _.length; r++) { var x = _[r]; for (l = 0; l < x.length; l++) { var S = x[l], D = parseInt(S.colSpan), R = S.id, L = (c = l, f = 0, parseInt(this.getFooterStyle(R, "height"))); if (D > 0) { for (w = c; w < c + D; w++)f += parseInt(this.getColumnStyleValue(w, "height")), f += o; f -= o - (D - 1) } else f = parseInt(this.getColumnStyleValue(c, "height")); L != f && (this.orgFooterHeightObj[R] = L + "px", this.setFooterStyle(R, "height", f + "px")) } } }
								} catch (t) { a.w.printStackTrace(t) }
							}, S.prototype.removeAdaptiveGridHeaderHeight = function() { try { for (var t in this.orgHeaderHeightObj) this.setHeaderStyle(t, "height", this.orgHeaderHeightObj[t]); for (var t in this.orgFooterHeightObj) this.setFooterStyle(t, "height", this.orgFooterHeightObj[t]) } catch (t) { a.w.printStackTrace(t) } }, S.prototype.setAdaptiveGridSubtotalHeight = function() { try { var t = this.getHeaderID(0), e = parseInt(this.getHeaderCellStyleValue(t, "padding-top")) + parseInt(this.getHeaderCellStyleValue(t, "padding-bottom")); if (0 == Object.keys(this.orgSubtotalHeightObj).length) for (var i = 0; i < this.drawedSubtotal.length; i++)for (var o = 0; o < this.drawedSubtotal[i].length; o++)for (var s = this.drawedSubtotal[i][o].childNodes, r = this.defaultColCnt; r < s.length; r++) { var n = parseInt(s[r].getAttribute("colSpan")), l = s[r].getAttribute("id"), h = 0, d = s[r].style.height; if (null != n && n > 0) { for (var p = r; p < r + n; p++)h += parseInt(this.getColumnStyleValue(p - this.defaultColCnt, "height")), h += e; h -= e - (n - 1) } else h = d; d != h && (this.orgSubtotalHeightObj[l] = d, s[r].style.height = h + "px") } } catch (t) { a.w.printStackTrace(t) } }, S.prototype.removeAdaptiveGridSubtotalHeight = function() { try { for (var t in this.orgSubtotalHeightObj) for (var e = 0; e < this.drawedSubtotal.length; e++)for (var i = 0; i < this.drawedSubtotal[e].length; i++)for (var o = this.drawedSubtotal[e][i].childNodes, s = this.defaultColCnt; s < o.length; s++) { o[s].getAttribute("id") == t && (o[s].style.height = this.orgSubtotalHeightObj[t]) } this.orgSubtotalHeightObj = {} } catch (t) { a.w.printStackTrace(t) } }, S.prototype.setDrillDownDragDrop = function(t) { try { this.drillDownDragDrop = r.D.getBoolean(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getDataListInfo = function() { try { if (this.successBinding) { var t = {}; return t.id = this.options.dataList, t } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getInputType = function(t) { try { return this.getCellInfo(t).options.inputType } catch (t) { a.w.printStackTrace(t) } }, S.prototype.getDataType = function(t) { try { return this.getCellInfo(t).options.dataType || this._dataList.getCellInfo(t).options.dataType } catch (t) { a.w.printStackTrace(t) } }, S.prototype.getFakeExpressionArr = function() { try { for (var t = [], e = [], i = 0; i < this.dataList.getRowCount(); i++)(t = this._dataList.getRowData(i)).push(""), e = e.concat(t); return e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setUseFilterList = function(t) { try { this.options.useFilterList = r.D.getBoolean(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setUseFilter = function(t, e) {
								try {
									var i = t, o = this.headerInfoHash[i]; if (null == o && (i = this.bodyToHeaderRelation[i], null == (o = this.headerInfoHash[i]))) return !1; var s = o.options.useFilter, n = r.D.getBoolean(e); if (s === n) return !1; o.options.useFilter = n; var l, h = this.getHeaderLayer(i)
										; if (!0 === s) null != (l = document.getElementById(this.id + "_" + i + "_filter")) && (l.style.display = "none"); else if (null != (l = document.getElementById(this.id + "_" + i + "_filter"))) l.style.display = ""; else { var d = this.headerObj[i], p = h.innerHTML; if (d && (p = ""), h.innerHTML = "<table style='width:100%;height:100%;'><tr><td style='width:100%;'>" + p + "</td><td><input type='button' id='" + this.id + "_" + i + "_filter' class='w2trigger w2grid_customFilter_open' onclick='" + this.id + '.showCustomFilter("' + i + "\");'/></td></tr></table>", d) h.getElementsByTagName("td")[0].appendChild(d) } return !0
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.getFixedRow = function() { var t = parseInt(this.options.fixedRow, 10); return t = isNaN(t) ? 0 : t }, S.prototype.getLastFixedRow = function() { var t = parseInt(this.options.lastFixedRow, 10); return t = isNaN(t) ? 0 : t }, S.prototype.isVirtualCursor = function() { try { if (1 == this.options.senseReader && "all" != this.options.visibleRowNum) if (this.getLastFocusedCell().focusedRowIndex > this.lastIndex && 0 == this.getElementById(this.id + "_scrollY_div").scrollTop) return !0; return !1 } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeCell = function(t) { try { if (null == t || null == t.rowIndex || null == t.colIndex) return void p.k.printLog("gridView mergeCell error : invalid argument [" + this.id + "]"); null == t.rowSpan && (t.rowSpan = 1), null == t.colSpan && (t.colSpan = 1); var e = parseInt(t.rowIndex, 10), i = parseInt(t.colIndex, 10), o = parseInt(t.rowSpan, 10), s = parseInt(t.colSpan, 10), n = this.getRealRowIndex(e); o > 1 || s > 1 ? (this.cellMergeInfo[e + "_" + i] = { rowSpan: o, colSpan: s }, this.cellMergeRealInfo[e + "_" + i] = n) : null != this.cellMergeInfo[e + "_" + i] && (delete this.cellMergeInfo[e + "_" + i], delete this.cellMergeRealInfo[e + "_" + i]); for (var l = !(!this.isDrillDown || !this._dataList.options.depthColumn), h = l ? e : n, d = this.dataList._getCellData(h, i, "3"), u = 0; u < o; u++)for (var c = 0; c < s; c++)if (0 !== u || 0 !== c) { var g = { filteredRowIndex: e + u, colID: i + c, data: d, useRealRowIndex: l }; this.dataList._setCellData(g), this.cellMergeInfo[e + u + "_" + (i + c)] && delete this.cellMergeInfo[e + u + "_" + (i + c)] } this.dynamicMergeHTML(), this.options.oddEvenColorDisplay && "native" === this.options.drawType && r.D.setTimeout(this.redrawTable, { key: this.id + "_mergeCell", delay: 100, caller: this }) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeFocusedCell = function() { try { if (this.focusedCell.length > 1) { var t = this.focusedCell.length - 1; this.mergeCell({ rowIndex: this.focusedCell[0].focusedRowIndex, colIndex: this.focusedCell[0].focusedColIndex, rowSpan: this.focusedCell[t].focusedRowIndex - this.focusedCell[0].focusedRowIndex + 1, colSpan: this.focusedCell[t].focusedColIndex - this.focusedCell[0].focusedColIndex + 1 }) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeSplitFocusedCell = function() { try { for (var t = 0; t < this.focusedCell.length; t++)this.mergeCell({ rowIndex: this.focusedCell[t].focusedRowIndex, colIndex: this.focusedCell[t].focusedColIndex, rowSpan: 1, colSpan: 1 }) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeClear = function(t) { try { void 0 !== t && null != t || (t = {}), this.cellMergeInfo = {}, this.cellMergeRealInfo = {}, this.options.mergeCells = "never", this.options.mergeCellsFixedCols = "never", this.options.mergeCellsFixedRows = "never", !0 !== t.noDraw && this.dynamicMergeHTML() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._mergeNotifyRowChanged = function(t, e) { try { var i = "removeRow" === t ? -1 : 1, o = {}; for (var s in this.cellMergeInfo) { var r = s.split("_"), n = parseInt(r[0], 10), l = parseInt(r[1], 10), h = this.cellMergeInfo[s]; if (n <= e && e < n + h.rowSpan) if (-1 === i) { if (h.rowSpan--, h.rowSpan <= 0 || 1 == h.rowSpan && h.colSpan <= 1) continue } else if (n < e) { var d = h.rowSpan - (e - n); if ((d > 1 || 1 == d && h.colSpan > 1) && (o[e + 1 + "_" + l] = { rowSpan: d, colSpan: h.colSpan }), h.rowSpan -= d, h.rowSpan <= 0 || 1 == h.rowSpan && h.colSpan <= 1) continue } (n > e || n == e && -1 !== i) && (n += i), o[n + "_" + l] = h } this.cellMergeInfo = o } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._mergeNotifyFilter = function() {
								try {
									if ("never" === this.options.mergeCells && "never" === this.options.mergeCellsFixedRows && "never" === this.options.mergeCellsFixedCols) {
										var t = {}
										; for (var e in this.cellMergeRealInfo._hidden) { var i = e.split("_"), o = parseInt(i[0], 10), s = parseInt(i[1], 10), r = this.getDisplayRowIndex(o); isNaN(r) || (t[r + "_" + s] = this.cellMergeRealInfo._hidden[e], delete this.cellMergeRealInfo._hidden[e], this.cellMergeRealInfo[r + "_" + s] = o) } for (var n in this.cellMergeInfo) { var l = n.split("_"), h = (s = parseInt(l[1], 10), this.cellMergeInfo[n]); o = this.cellMergeRealInfo[n], r = this.getDisplayRowIndex(o); isNaN(r) ? (this.cellMergeRealInfo._hidden || (this.cellMergeRealInfo._hidden = {}), this.cellMergeRealInfo._hidden[o + "_" + s] = h, delete this.cellMergeRealInfo[n]) : (t[r + "_" + s] = h, delete this.cellMergeRealInfo[n], this.cellMergeRealInfo[r + "_" + s] = o) } this.cellMergeInfo = t
									}
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.mergeByFree = function(t, e, i, o) { try { return this.mergeCell({ rowIndex: t, colIndex: e, rowSpan: i - t + 1, colSpan: o - e + 1 }) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.unmergeByFree = function(t, e) { try { return this.mergeCell({ rowIndex: t, colIndex: e, rowSpan: 1, colSpan: 1 }) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeCells = function(t, e) { try { this._mergeCells(t, e, { type: "mergeCells" }) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeByCol = function(t) { try { this._mergeCells("bycol", t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeByRow = function(t) { try { this._mergeCells("byrow", t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeByColRec = function(t) { try { this._mergeCells("bycolrec", t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeByRowRec = function(t) { try { this._mergeCells("byrowrec", t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeByRestricCol = function(t) { try { this._mergeCells("byrestriccol", t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeByRestricRow = function(t) { try { this._mergeCells("byrestricrow", t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._mergeCells = function(t, e, i) { try { var o = t.toLowerCase(); switch (void 0 !== i && null != i || (i = { type: "mergeCells" }), this.options[i.type] = o, o) { case "never": this.cellMergeInfo = {}, this.cellMergeRealInfo = {}, e && !0 === e.noDraw || this.dynamicMergeHTML(); break; case "bycol": this._mergeByCol(e); break; case "byrow": this._mergeByRow(e); break; case "bycolrec": this._mergeByColRec(e); break; case "byrowrec": this._mergeByRowRec(e); break; case "byrestriccol": this._mergeByRestricCol(e); break; case "byrestricrow": this._mergeByRestricRow(e) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._mergeRefresh = function() { try { if ("never" === this.options.mergeCells && "never" === this.options.mergeCellsFixedRows && "never" === this.options.mergeCellsFixedCols) return; var t = { noDraw: !0 }; this.cellMergeInfo = {}, this.cellMergeRealInfo = {}, "never" !== this.options.mergeCells && this.mergeCells(this.options.mergeCells, t), "never" !== this.options.mergeCellsFixedRows && this.mergeCellsFixedRows(this.options.mergeCellsFixedRows, t), "never" !== this.options.mergeCellsFixedCols && this.mergeCellsFixedCols(this.options.mergeCellsFixedCols, t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._mergeByCol = function(t) {
								try {
									void 0 !== t && null != t || (t = {}); var e = this.getRowCount(), i = this.getColumnCount(), o = this.options.fixedRow, s = this.options.fixedColumn, r = i - this.options.fixedRightColumn, n = e, l = {}, h = this.getSubtotalRowList({ returnType: "object" }); !0 !== t.keepMerge && !0 !== t.fixedRows && !0 !== t.fixedCols && (this.cellMergeInfo = {}, this.cellMergeRealInfo = {}); var d = {}; !0 === t.keepMerge && (d = this.getMergedCells()), !0 === t.fixedRows && (o = 0, n = this.options.fixedRow, s = 0, r = i); var p = !1; !0 === t.fixedCols && (0 == this.options.fixedColumn ? (s = i - this.options.fixedRightColumn, r = i) : 0 == this.options.fixedRightColumn ? (s = 0, r = this.options.fixedColumn) : (s = 0, r = i, p = !0), !1 === t.fixedRows ? (o = this.options.fixedRow, n = e) : (o = 0, n = e)); for (var u = s; u < r; u++) {
										if (t.mergeCol) { if (!1 === t.mergeCol[u]) continue } else if (!1 === this.mergeColObj[u]) continue
											; if (!(p && u >= this.options.fixedColumn && u < r - this.options.fixedRightColumn) && !(this.htmlInfo.body.rowAttrArr.length > 1 && 1 == this.colIndexInfo.body.colInfo.rowSpanArr[u])) for (var c = this.tdIdList[u], g = o; g < n; g++) { var f = this.dataList._getCellData(g, c), m = 1; if (!0 === t.keepMerge && (m = 0), !0 === t.upperColumn && (l[g] = !0), t.mergeRow) { if (!1 === t.mergeRow[g]) continue } else if (!1 === this.mergeRowObj[g]) continue; for (; m < n - g && !this._isExcludeValue(f);) { if (t.mergeRow) { if (!1 === t.mergeRow[g + m]) break } else if (!1 === this.mergeRowObj[g + m]) break; if (g + m > n) break; if (f != (0 === m ? f : this.dataList._getCellData(g + m, c))) break; if (!0 === t.keepMerge && !0 === d[g + m + "_" + u]) break; if (!0 === t.upperColumn && !0 === l[g + m]) break; if (!0 === h[g + m]) break; m++ } m > 1 && (this.cellMergeInfo[g + "_" + u] = { rowSpan: m, colSpan: 1 }, g = g + m - 1) }
									} l = void 0, !0 !== t.noDraw && this.dynamicMergeHTML()
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype._mergeByRow = function(t) { try { void 0 !== t && null != t || (t = {}); var e = this.getRowCount(), i = this.getColumnCount(), o = this.options.fixedRow, s = this.options.fixedColumn, r = i - this.options.fixedRightColumn, n = e, l = {}; !0 !== t.keepMerge && !0 !== t.fixedRows && !0 !== t.fixedCols && (this.cellMergeInfo = {}, this.cellMergeRealInfo = {}); var h = {}; !0 === t.keepMerge && (h = this.getMergedCells()), !0 === t.fixedRows && (o = 0, n = this.options.fixedRow, s = 0, r = i); var d = !1; !0 === t.fixedCols && (0 == this.options.fixedColumn ? (s = i - this.options.fixedRightColumn, r = i) : 0 == this.options.fixedRightColumn ? (s = 0, r = this.options.fixedColumn) : (s = 0, r = i, d = !0), !1 === t.fixedRows ? (o = this.options.fixedRow, n = e) : (o = 0, n = e)); for (var p = o; p < n; p++) { if (t.mergeRow) { if (!1 === t.mergeRow[p]) continue } else if (!1 === this.mergeRowObj[p]) continue; for (var u = s; u < r; u++)if (!(d && u >= this.options.fixedColumn && u < r - this.options.fixedRightColumn)) { var c = this.dataList._getCellData(p, this.tdIdList[u]), g = 1; if (!0 === t.keepMerge && (g = 0), !0 === t.upperRow && (l[u] = !0), t.mergeCol) { if (!1 === t.mergeCol[u]) continue } else if (!1 === this.mergeColObj[u]) continue; for (; g < r - u && !this._isExcludeValue(c);) { if (t.mergeCol) { if (!1 === t.mergeCol[u + g]) break } else if (!1 === this.mergeColObj[u + g]) break; if (d) { if (u + g >= this.options.fixedColumn && u + g < r - this.options.fixedRightColumn) break } else if (u + g > r) break; if (c != (0 === g ? c : this.dataList._getCellData(p, this.tdIdList[u + g]))) break; if (!0 === t.keepMerge && !0 === h[p + "_" + (u + g)]) break; if (!0 === t.upperRow && !0 === l[u + g]) break; g++ } g > 1 && (this.cellMergeInfo[p + "_" + u] = { rowSpan: 1, colSpan: g }, u = u + g - 1) } } l = void 0, !0 !== t.noDraw && this.dynamicMergeHTML() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._mergeByColRec = function(t) { try { void 0 !== t && null != t || (t = {}); var e = o.x.extend({}, t), i = o.x.extend({}, t); e.noDraw = !0, i.keepMerge = !0, i.noDraw = !0, this._mergeByCol(e), this._mergeByRow(i), this._mergeAdjacentCell("col"), !0 !== t.noDraw && this.dynamicMergeHTML() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._mergeByRowRec = function(t) { try { void 0 !== t && null != t || (t = {}); var e = o.x.extend({}, t), i = o.x.extend({}, t); e.noDraw = !0, i.keepMerge = !0, i.noDraw = !0, this._mergeByRow(e), this._mergeByCol(i), this._mergeAdjacentCell("row"), !0 !== t.noDraw && this.dynamicMergeHTML() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._mergeAdjacentCell = function(t) {
								try {
									var e = "row" === t ? [0, 1] : "col" === t ? [1, 0] : null; if (null == e) return; var i = {}, o = {}, s = this.getSubtotalRowList({ returnType: "object" }); for (var r in this.cellMergeInfo) { var n = r.split("_"), l = parseInt(n[e[0]], 10), h = parseInt(n[e[1]], 10), d = 0 === e[0] ? this.cellMergeInfo[r].colSpan : this.cellMergeInfo[r].rowSpan, p = 0 === e[0] ? this.cellMergeInfo[r].rowSpan : this.cellMergeInfo[r].colSpan; null != i[h + "_" + d] ? (null == o[h + "_" + d] && (o[h + "_" + d] = [i[h + "_" + d]]), o[h + "_" + d].push({ row: l, rowSpan: p })) : i[h + "_" + d] = { row: l, rowSpan: p } } for (var r in o) {
										var u = parseInt(r.split("_")[0]), c = 0 === e[0] ? "rowSpan" : "colSpan"; o[r].sort((function(t, e) { return t.row > e.row })); for (var g = o[r].length - 1; g >= 1; g--) {
											var f = !0 === s[o[r][g].row]
											; if (o[r][g - 1].row + o[r][g - 1].rowSpan >= o[r][g].row && !f) if ((0 === e[0] ? this.dataList._getCellData(o[r][g - 1].row, u) : this.dataList.getCellData(u, o[r][g - 1].row)) === (0 === e[0] ? this.dataList._getCellData(o[r][g].row, u) : this.dataList.getCellData(u, o[r][g].row))) { o[r][g - 1].rowSpan = o[r][g].row + o[r][g].rowSpan - o[r][g - 1].row; var m = 0 === e[0] ? o[r][g].row + "_" + u : u + "_" + o[r][g].row; delete this.cellMergeInfo[m]; var y = 0 === e[0] ? o[r][g - 1].row + "_" + u : u + "_" + o[r][g - 1].row; this.cellMergeInfo[y][c] = o[r][g - 1].rowSpan }
										}
									}
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype._mergeByRestricCol = function(t) { try { void 0 !== t && null != t || (t = {}); var e = o.x.extend({}, t); e.upperColumn = !0, this._mergeByCol(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._mergeByRestricRow = function(t) { try { void 0 !== t && null != t || (t = {}); var e = o.x.extend({}, t); e.upperRow = !0, this._mergeByRow(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeCellsFixedRows = function(t, e) { try { if (void 0 !== e && null != e || (e = {}), "never" !== this.options.mergeCellsFixedRows) { var i = this.options.mergeCells; this.mergeClear(e), "never" !== i && this.mergeCells(i, { noDraw: !0 }) } e.fixedRows = !0, e.fixedCols = !1, this._mergeCells(t, e, { type: "mergeCellsFixedRows" }) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeCellsFixedCols = function(t, e) { try { if (void 0 !== e && null != e || (e = {}), "never" !== this.options.mergeCellsFixedCols) { var i = this.options.mergeCells; this.mergeClear(e), "never" !== i && this.mergeCells(i, { noDraw: !0 }) } e.fixedCols = !0, e.fixedRows = !1, this._mergeCells(t, e, { type: "mergeCellsFixedCols" }) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeCol = function(t, e) { try { t = this.getColumnIndex(t); isNaN(t) || (this.mergeColObj[t] = e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.mergeRow = function(t, e) { try { this.mergeRowObj[t] = e } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getMerged = function(t, e) { try { if (this.cellMergeInfo[t + "_" + e]) return !0; for (var i in this.cellMergeInfo) { var o = i.split("_"), s = this.cellMergeInfo[i], r = parseInt(o[0], 10), n = parseInt(o[1], 10); if (r <= t && n <= e && r + s.rowSpan - 1 >= t && n + s.colSpan - 1 >= e) return !0 } } catch (t) { a.w.printStackTrace(t, null, this) } return !1 }, S.prototype.getMergedInfo = function(t, e) { try { var i = { merged: !1 }; if (this.cellMergeInfo[t + "_" + e]) i.merged = !0, i.startRowIndex = t, i.startColIndex = e; else for (var o in this.cellMergeInfo) { var s = o.split("_"), r = this.cellMergeInfo[o], n = parseInt(s[0], 10), l = parseInt(s[1], 10); n <= t && l <= e && n + r.rowSpan - 1 >= t && l + r.colSpan - 1 >= e && (i.merged = !0, i.startRowIndex = n, i.startColIndex = l, i.endRowIndex = n + r.rowSpan - 1, i.endColIndex = l + r.colSpan - 1) } } catch (t) { a.w.printStackTrace(t, null, this) } return i }, S.prototype.getMergeAll = function(t, e) { try { for (var i, o = [], s = [], r = t.split(","), n = 0; n < r.length; n++)o[n] = parseInt(r[n], 10); for (var l in !0 === e && this.hasSubtotal && (i = this.getSubtotalRowList().sort((function(t, e) { return t - e }))), this.cellMergeInfo) { var h = l.split("_"), d = this.cellMergeInfo[l], p = parseInt(h[0], 10), u = parseInt(h[1], 10), c = d.rowSpan, g = d.colSpan, f = u + g - 1, m = 0, y = 0, b = 0, w = 0; if (!0 === e && this.hasSubtotal) { for (var v = 0; v < i.length && p >= i[v]; v++)w++; p += w } if ("" != t) { o = o.sort(); for (n = 0; n < o.length; n++)u > (m = o[n]) ? b++ : u <= m && m <= f && (u == m && 1 == g ? g = -1 : y++); g -= y, u -= b } -1 != g && (g > 1 || c > 1) && s.push({ x: u, y: p, r: c, c: g }) } return JSON.stringify(s) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getMergedCells = function() { try { var t = {}; for (var e in this.cellMergeInfo) { var i = e.split("_"), o = this.cellMergeInfo[e], s = parseInt(i[0], 10), r = parseInt(i[1], 10), n = o.rowSpan || 1, l = o.colSpan || 1; if (l > 1 || n > 1) for (var h = 0; h < n; h++)for (var d = 0; d < l; d++)t[s + h + "_" + (r + d)] = !0 } return t } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._isExcludeValue = function(t) { try { if (this.options.mergeExcludeValue) for (var e = this.options.mergeExcludeValue.split(","), i = 0; i < e.length; i++) { if (t.constructor == Number && (t += ""), e[i] == t) return !0; if ("$blank" == e[i] && "" === t) return !0 } return !1 } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.refreshGrid = function(t) {
								try {
									var e = null, i = t.op
									; this.hiddenRowObj.length > 0 && "setInstanceValue" != i && (e = JSON.stringify(this.hiddenRowObj), this.clearRowVisible()); var o, s, r = t.xpath; if ("setInstanceValue" == i) { o = WebSquare.ModelUtil.findInstanceNodes(this.options.ref + "/" + this.options.repeatNode, null, this.scope_id); var n, l = (c = r.split("/"))[c.length - 1], h = this.getColumnIndex(l); if (h >= 0) { n = this.getCellInfo(l), c.pop(); var d = WebSquare.ModelUtil.findInstanceNode(c.join("/"), null, this.scope_id); s = this.getInstanceIndex(o, d); var p = this._dataList.getFilteredRowIndex(s); "radio" == n.options.inputType && t.value + "" == n.options.trueValue && n.resetOthers(p, !0), p >= 0 ? this._dataList.setCellData(p, h, t.value) : this._dataList._setData(s, h, t.value) } } else if ("setInstanceNode" == i) { if (!(m = this.options.ref == t.replacexpath && "replace" == t.type ? this.xmlData2ArrData(t.replaceNode, !0) : this.xmlData2ArrData(t.node, !0)).length) return; this.insertRowByInstance = !0, o = WebSquare.ModelUtil.findInstanceNodes(this.options.ref + "/" + this.repeatNodeTagName[0], null, this.scope_id), "append" == t.type ? this.insertRow(null, { insertData: m }) : "insertBeforeSibling" == t.type ? (s = this.getInstanceIndex(o, t.node), this.insertRow(s, { insertData: m })) : "replace" == t.type && this._dataList.setData(m), this.insertRowByInstance = !1 } else if ("setInstanceChildNodes" == i) { if (this.options.ref == t.replacexpath && "replace" == t.type) m = this.xmlData2ArrData(t.replaceNode, !0); else t.baseNode && t.baseNode != this.options.baseNode && (f = t.baseNode), m = this.xmlData2ArrData(t.node, !0, { baseNode: f }); if (!m.length && "append" == t.type) return; var u = this.getTotalCol(); if (this.insertRowByInstance = !0, o = WebSquare.ModelUtil.findInstanceNodes(this.options.ref + "/" + this.repeatNodeTagName[0], null, this.scope_id), "append" == t.type) for (; m.length > 0;)y = m.splice(0, u), this.insertRow(null, { insertData: y }); else "replace" == t.type && this._dataList.setData(m); this.insertRowByInstance = !1 } else if ("setInstanceLastNodeChildNodes" == i || "copyLastNodeChildrenNodes" == i) { if (!(m = this.xmlData2ArrData(t.node, !0, { repeatNode: t.repeatNode, isRepeatNode: !0 })).length) return; this.insertRowByInstance = !0, "replace" != t.type && "replaceAll" != t.type && "append" != t.type || this.setRowData(parseInt(t.changeIndex) - 1, m, !0), this.insertRowByInstance = !1 } else if ("removeInstanceNode" == i) this.removeRowByInstance = !0, s = t.deleteIndex, this.removeRow(s), this.removeRowByInstance = !1; else if ("removeInstanceNodeAll" == i) this.removeRowByInstance = !0, this.dataList.removeAll(), this.removeRowByInstance = !1; else if ("copyChildrenNodes" == i) { var c, g, f; t.copiedXPath && (g = (c = t.copiedXPath.split("/"))[c.length - 1]), t.baseNode && g != this.options.baseNode && (f = g); var m = this.xmlData2ArrData(t.node, !0, { baseNode: f }); if ("replaceAll" == t.type) this.setData(m); else if ("append" == t.type) { var y; u = this.getTotalCol(); for (this.insertRowByInstance = !0; m.length > 0;)y = m.splice(0, u), this.insertRow(null, { insertData: y }); this.insertRowByInstance = !1 } } e && "setInstanceValue" != i && (this.hiddenRowObj = JSON.parse(e), this._refreshRowVisible({ lastIndex: this.lastIndex, noDraw: !0 }), this.setScrollYHeight(), this._mergeRefresh(), this.applyStyleOptions(this.lastIndex))
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.getInstanceIndex = function(t, e) { try { if (!Array.prototype.indexOf || r.D.isIEAllVersion() && parseInt(s.v.browserVersion(), 10) > 8) { for (var i = t.length; i--;)if (t[i] === e) return i; return } return t.indexOf(e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._getArrayIndexOf = function(t, e) { try { if (Array.prototype.indexOf) return t.indexOf(e); for (var i = 0; i < t.length; i++)if (t[i] == e) return i; return } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setRef = function(t) { try { if (t && t.ref) { this.options.ref = t.ref, t.baseNode && (this.options.baseNode = t.baseNode), t.repeatNode && (this.options.repeatNode = t.repeatNode); var e = null == t.aliasDataCollection ? this.scope_id : t.aliasDataCollection, i = WebSquare.ModelUtil.findInstanceNode(this.options.ref, null, e); this.setXML(i, null, { ref: this.options.ref, aliasDataCollection: e }) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._setRef = function(t, e) {
								try {
									this.filteredRepeatNode = !1,
									this.repeatNodeChildTagName = [], this.repeatNodeTagName = this.options.repeatNode.split("/"), this.filteredRepeatNodeTagName = []; this.options.ref; for (var i = 0; i < this.repeatNodeTagName.length; i++) { var o = this.repeatNodeTagName[i]; i == this.repeatNodeTagName.length - 1 && o.indexOf("[") >= 0 && (o.indexOf("[@") >= 0 || (this.repeatNodeTagNameFilter = !0, o = o.split("[")[0])), 1 == this.repeatNodeTagNameFilter ? this.filteredRepeatNodeTagName.push(o) : this.filteredRepeatNodeTagName.push(this.repeatNodeTagName[i]), i != this.repeatNodeTagName.length - 1 && "/" + this.repeatNodeTagName[i] } for (var s = 0; s < WebSquare.WebSquaredoc.instanceRefElement.length; s++) { var r = WebSquare.WebSquaredoc.instanceRefElement[s].id; try { r == this.id && WebSquare.WebSquaredoc.instanceRefElement.splice(s, 1) } catch (t) { } } var n = this.options.aliasDataCollection ? this.options.aliasDataCollection : this.scope_id; for (var l in WebSquare.WebSquaredoc.instanceRefElement.push(new WebSquare.ModelUtil.createInstanceRefElement(this.options.ref, this.id, this.options.baseNode, this.repeatNodeTagName, this.cellIdList, n)), this.cellInfoHash) this.repeatNodeChildTagName.push(l)
								} catch (t) { a.w.printStackTrace(t, null, this) }
							}, S.prototype.setImageSrc = function(t, e) { try { var i = this.getCellInfo(t), o = i.options.inputType; if (!e || "textImage" != o) return; i.options.imageSrc = e, this.refreshColumn(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setSyncScroll = function(t, e) { try { this.options.syncScroll = t, null != e && (this.options.syncScrollId = e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.resetExpressionFunc = function() { try { if (this.useExpression) for (var t = this.getTotalCol(), e = 0; e < t; e++) { var i = this.getCellInfo(e); if (i && i.options && "expression" == i.options.inputType) for (var o = this.drawedRowLength, s = 0; s < o; s++)i.options.expressionFunc && i.options.expressionFunc[s] && i.options.expressionFunc[s].changeCount && (i.options.expressionFunc[s] = {}) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setCellDataType = function(t, e, i) { try { e = this.getColumnIndex(e); var o = t, s = this.getCellInfo(e), r = s.id; if (0 != s.internal || "custom" != s.options.inputType) return !1; var n = this.dataList.getRealRowIndex(o); s = s.cellManagerHashByRowIndex[n] ? s.cellManagerHashByRowIndex[n] : s, !0; var l = s.options.inputType; if ("text" != l && "textarea" != l && "input" != l && "secret" != l) return $l("cell의 inputType이 올바르지 않습니다."), !1; var h = this.getInput(s); h.setValue(this._dataList.getCellData(o, r)); var d = h.getValue(); h.setDataType(i), s.options.dataType = "float"; var p = h.formatter.unformat(d), u = h.validator.validateString(p); h.setValueNM(u), d !== u && this._dataList.setCellData(o, r, u) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setCellAllowChar = function(t, e, i) { try { e = this.getColumnIndex(e); var o = t, s = this.getCellInfo(e), r = s.id; if (0 != s.internal || "custom" != s.options.inputType) return !1; var n = this.dataList.getRealRowIndex(o); s = s.cellManagerHashByRowIndex[n] ? s.cellManagerHashByRowIndex[n] : s, !0; var l = s.options.inputType; if ("text" != l && "input" != l && "textImage" != l && "secret" != l) return $l("cell의 inputType이 올바르지 않습니다."), !1; var h = this.getInput(s); if (h && h.options && ("input" === h.options.pluginName || "textarea" === h.options.pluginName)) { h.setValue(this._dataList.getCellData(o, r)), h.setAllowChar(i); var d = h.getValue(); this._dataList.setCellData(o, r, d) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setCellDisplayFormat = function(t, e, i) { try { e = this.getColumnIndex(e); var o = t, s = this.getCellInfo(e); if (0 != s.internal || "custom" != s.options.inputType) return !1; var r = this.dataList.getRealRowIndex(o); s = s.cellManagerHashByRowIndex[r] ? s.cellManagerHashByRowIndex[r] : s, !0; var n = s.options.inputType; if ("text" != n && "textarea" != n && "input" != n && "textImage" != n && "secret" != n) return $l("cell의 inputType이 올바르지 않습니다."), !1; if (s.options.displayFormat = i, s.initFormatter(), s.options.embeddedInput) { var l = this.data_td_list[e + (o - this.rowIndex) * this.oneRowDataLength]; if (l) { var h = this.getInput(s, l); h && "function" == typeof h.setDisplayFormat && h.setDisplayFormat(i) } } this.refreshCell(o, e) } catch (t) { a.w.printStackTrace(t, null, this) } },
								S.prototype.setCellDisplayFormatter = function(t, e, i) { try { e = this.getColumnIndex(e); var o = t, s = this.getCellInfo(e); if (0 != s.internal || "custom" != s.options.inputType) return !1; var r = this.dataList.getRealRowIndex(o); s = s.cellManagerHashByRowIndex[r] ? s.cellManagerHashByRowIndex[r] : s, !0; var n = s.options.inputType; if ("text" != n && "textarea" != n && "input" != n && "textImage" != n && "secret" != n) return $l("cell의 inputType이 올바르지 않습니다."), !1; s.options.displayFormatter = i, s.initFormatter(), this.refreshCell(o, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setCellMaxLength = function(t, e, i) { try { e = this.getColumnIndex(e); var o = t, s = this.getCellInfo(e), r = s.id; if (0 != s.internal || "custom" != s.options.inputType) return !1; var n = this.dataList.getRealRowIndex(o); s = s.cellManagerHashByRowIndex[n] ? s.cellManagerHashByRowIndex[n] : s, !0; var l = s.options.inputType; if ("text" != l && "textarea" != l && "input" != l && "textImage" != l && "secret" != l) return $l("cell의 inputType이 올바르지 않습니다."), !1; var h = this.getInput(s); h.setValue(this._dataList.getCellData(o, r)), "float" === s.options.dataType ? s.setFloatMaxLength(i.toString()) : s.setMaxLength(i); var d = h.getValue(); this._dataList.setCellData(o, r, d) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setCellCustomFormatter = function(t, e, i) { try { e = this.getColumnIndex(e); var o = t, s = this.getCellInfo(e); if (0 != s.internal || "custom" != s.options.inputType) return !1; var r = this.dataList.getRealRowIndex(o); s = s.cellManagerHashByRowIndex[r] ? s.cellManagerHashByRowIndex[r] : s, !0; var n = s.options.inputType; if ("text" != n && "textarea" != n && "input" != n && "textImage" != n && "secret" != n) return $l("cell의 inputType이 올바르지 않습니다."), !1; s.options.customFormatter = i, s.initFormatter(), this.refreshCell(o, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setCellDisableEdit = function(t, e, i) { try { e = this.getColumnIndex(e); var o = t, s = this.getCellInfo(e); if ("custom" != s.options.inputType) return !1; var r = this.dataList.getRealRowIndex(o); if ("autoComplete" != (s = s.cellManagerHashByRowIndex[r] ? s.cellManagerHashByRowIndex[r] : s).options.inputType) return $l("cell의 inputType이 올바르지 않습니다."), !1; s.options.disableEdit = i, s.autoComplete && (s.autoComplete.options.disableEdit = i), this.refreshCell(o, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setCellInputType = function(t, e, i) { try { if (i && i.inputType) { e = this.getColumnID(e); if (this._linkedDataList) { var o = this._linkedDataList.filteredRowIndexArr[t]; "number" != typeof (t = this._dataList.getFilteredRowIndex(o)) && (t = o) } var s = {}; for (var r in i) s[r] = i[r]; this._setCellInputType(t, e, null, s) } } catch (t) { a.w.printStackTrace(t) } }, S.prototype._setCellInputType = function(t, e, i, o) {
									try {
										null == i && (i = ""), null == this.editedCell || this.getCellOption(t, e, "embeddedInput") || this.editedCell.handleCancelEdit(); var s = this._dataList.getTotalRow(); this.groupbyStatus && this.groupbyStatus.grouped && (s = this._dataList.filteredRowIndexArr.length); var r, n = this._dataList.getTotalCol(), l = !0; r = this.options && "grid" === this.options.pluginName && this.isDrillDown && this.options.drilldownRealRowIndex ? t : this.dataList.getRealRowIndex(t); var h = this.getDisplayRowIndex(r); (isNaN(h) || h < 0) && (l = !1); var d = t, p = (e = this.getColumnID(e), this.getColumnIndex(e)), u = this._dataList.getColumnIndex(e); if (t >= 0 && t < s && u >= 0 && u < n) {
											var c = this.cellInfoHash[this.tdIdList[p]]; if ("custom" == c.options.inputType && !c.options.embeddedInput) {
												var g, f = t - (this.rowIndex > 0 ? this.rowIndex : 0), m = this.data_td_list[p + f * this.oneRowDataLength]; if (m && l) !1 === (g = c.getCellManager({ element: c.element, rowIndex: d, realRowIndex: r, options: o, dynamicInputType: !0 })) ? m.innerHTML = this.dataTagOpen + o.value + this.dataTagClose : (c.clearStyle(g, m), null == o.value || !0 === g.existGridViewItemsetNode ? i = this.dataList._getCellData(d, e) : (i = o.value, this.dataList.setCellData(d, e, i, null, !0, !0)), g.setInnerHTML(m, i, d, p)); else (g = c.getCellManager({ element: c.element, rowIndex: d, realRowIndex: r, options: o, dynamicInputType: !0 })) && (null != g.customValue ? (i = g.customValue, this.dataList.setCellData(d, e, i, null, !0, !0)) : null == o.value || !0 === g.existGridViewItemsetNode ? i = this.dataList._getCellData(d, e) : (i = o.value,
													this.dataList.setCellData(d, e, i, null, !0, !0)))
											}
										}
									} catch (t) { a.w.printStackTrace(t) }
								}, S.prototype.setDataDragDrop = function(t) { try { if ("boolean" == typeof t && (this.options.dataDragDrop = t, t)) if (1 == this.isMobile) { if (this.isHammerEnabled()) { var e = Promise.resolve(); "undefined" != typeof Hammer && null != Hammer || (e = inquires("externalJS/hammer.min.js")); var i = this.uuid; e.then((function(t, e) { var o = WebSquare.idCache[i]; o._manager = new Hammer.Manager(o.getElementById(o.id + "_dataLayer")), o._manager.add(new Hammer.Press({ time: o.options.hammerPressTime })), o._manager.on("press", o.event.bindAsEventListener(o, (function(t) { o.handleDragEvent(t) }))), o._bindPressEvent = !0 })) } } else !1 === this._bindDrag && (this.event.addListener(this.render, "onmousedown", this.event.bindAsEventListener(this, this.handleDragEvent)), this._bindDrag = !0) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getDataDragDrop = function() { try { return this.options.dataDragDrop } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._fireOnviewchange = function(t, e, i, o) { try { var s, r = this.getCellInfo(t), n = r.editRowIndex, l = this._dataList.getColumnIndex(r.id), h = this.getColumnIndex(r.id), p = this.getRealRowIndex(n), u = this._dataList.dataArr[p * this._dataList.getColumnCount() + l], c = r.comp && r.comp.selectedIndex; if (o && o.beforeFunc && o.beforeFunc.apply(o.beforeFunc, o.beforeFuncArgs), e && (s = r[e].apply(r, i)), o && o.checkFunc && !1 === o.checkFunc(s)) return !1; var g = this._dataList.dataArr[p * this._dataList.getColumnCount() + l]; if (0 === u && (u = "0"), 0 === g && (g = "0"), u != g) { var f = { oldValue: u, newValue: g, rowIndex: n, colIndex: h }; isNaN(c) || (f.oldSelectedIndex = c, f.newSelectedIndex = r.comp && r.comp.selectedIndex), d.B.fireEvent(this, "onviewchange", f) } return !0 } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._refreshInstance = function(t, e) { try { if (!this.options.ref) return; e || WebSquare.ModelUtil.removeInstanceNodes({ xpath: this.options.ref + "/" + this.repeatNodeTagName[0], scopeId: this.scope_id, gridNoRefresh: !0 }), t || (t = this._dataList.dataArr); var i, o = t.length / this.oneRowDataLength, s = [], r = this.repeatNodeTagName[0], n = WebSquare.xml.parse("<" + r + "></" + r + ">").documentElement, l = this._dataList.getBroadcast(); this._dataList.setBroadcast(!1); for (var h = 0; h < o; h++)if (this.repeatNodeChildTagName && this.repeatNodeChildTagName.length > 0) { if (0 == h) { var d, p = n, u = r; this.repeatNodeTagName.length > 1 && (u = this.repeatNodeTagName.slice(1, this.repeatNodeTagName.length).join("/")); for (var c = 1; c < this.repeatNodeTagName.length; c++)p = WebSquare.xml.createNode(p, this.repeatNodeTagName[c], !1); i = this.repeatNodeTagName.length > 1 ? WebSquare.xml.findNode(n, u) : n; for (c = 0; c < this.repeatNodeChildTagName.length; c++) { if (d = WebSquare.xml.createNode(i, this.repeatNodeChildTagName[c], !1), s.push(d), f = void 0 === (f = t[h * this.oneRowDataLength + c]) || null == f ? "" : f + "", this.options.valueNode.length) d.setAttribute(this.options.valueNode, f); else if (null == d.firstChild) { var g = d.ownerDocument.createTextNode(f); WebSquare.xml.appendChild(d, g) } else d.firstChild.nodeValue = f } } else for (c = 0; c < this.repeatNodeChildTagName.length; c++) { var f; if (d = s[c], f = void 0 === (f = t[h * this.oneRowDataLength + c]) || null == f ? "" : f + "", this.options.valueNode.length) d.setAttribute(this.options.valueNode, f); else if (null == d.firstChild) { g = d.ownerDocument.createTextNode(f); WebSquare.xml.appendChild(d, g) } else d.firstChild.nodeValue = f } WebSquare.ModelUtil.setInstanceNode(n, this.options.ref, null, "append", !1, this.scope_id) } this._dataList.setBroadcast(l) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.isHammerEnabled = function() { try { return (this.isMobile || r.D.isTouchDevice()) && this.options.hammerEnabled } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.endEdit = function() { try { this._endEdit() } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getColumnIdListMultiRow = function() {
									try { for (var t = [], e = this.colIndexes.bodyColInfo.colIndexMatch, i = {}, o = this.defaultColCnt; o < e.length; o++)for (var s = e[o], r = 0; r < s.length; r++) { null == t[r] && (t[r] = []); var n = this.getColumnID(s[r] - this.defaultColCnt); null == i[n] && (t[r].push(n), i[n] = !0) } return t } catch (t) {
										a.w.printStackTrace(t, null, this)
									}
								}, S.prototype.getLocationRowCol = function(t, e) { try { var i, o, s = this.struct.body.rowAttrArr.length, r = this.getColumnOrder(), n = []; for (var l in r) n[r[l]] = parseInt(l, 10); var h, d = this.cellMergeInfo; for (var p in d) { var u = p.split("_"), c = parseInt(u[0]), g = parseInt(u[1]), f = d[p].rowSpan, m = d[p].colSpan; if (t >= c && t < c + f && e >= g && e < g + m) { i = f, o = m; break } } for (var y = 0, b = e; b >= 0;)h = b, b -= this.struct.body.rowArr[y].length, y++; return y--, o = o || parseInt(this.struct.body.rowArr[y][h].colSpan || 1), i = i || parseInt(this.struct.body.rowArr[y][h].rowSpan || 1), { rowIndex: t * s + y, colIndex: h = n[h = this.struct.body.rowArr[y][h]["@col"]], rowSize: i, colSize: o } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.getOriginalRowCol = function(t, e) { try { for (var i = this.htmlInfo.body.rowAttrArr.length, o = (this.getColumnOrder(), !1), s = !0, r = t % i, n = 1, l = 1, h = [], d = [], p = 0; p < i; p++) { for (var u = [], c = 0; c < this.htmlInfo.body.rowArr[p].length; c++)u.push({ colSpan: parseInt(this.htmlInfo.body.rowArr[p][c].colSpan || 1), rowSpan: parseInt(this.htmlInfo.body.rowArr[p][c].rowSpan || 1), oriColIndex: parseInt(this.bodyIdColIndexMap[this.htmlInfo.body.rowArr[p][c].col_id]) }); h.push(u), d.push([]) } for (p = 0; p < i; p++) { var g = 0; for (c = 0; c < h[p].length; c++) { if (h[p][c].rowSpan > 1) for (var f = 1; f < h[p][c].rowSpan; f++)p + f < d.length && d[p + f].push({ oriRowAttrNum: p, rowIndex: p + f, oriColIndex: h[p][c].oriColIndex, colIndex: g, rowSpan: 1, colSpan: h[p][c].colSpan, oriRowSpan: h[p][c].rowSpan }); for (var m = 0; m < d[p].length; m++)g == d[p][m].colIndex && (h[p].splice(c, 0, d[p][m]), d[p].splice(m, 1)); g += h[p][c].colSpan } for (m = 0; m < d[p].length; m++)g == d[p][m].colIndex && (h[p].splice(c, 0, d[p][m]), d[p].splice(m, 1)) } var y, b = h[r], w = 0; for (c = 0; c < b.length; c++) { var v = parseInt(b[c].colSpan); if ((w += v) > e) { e !== w - v && (e = w - v, o = !0, s = !1), l = v, y = c; break } } n = b[y].rowSpan, void 0 !== b[y].oriRowAttrNum && (r += b[y].oriRowAttrNum - b[y].rowIndex, n = b[y].oriRowSpan, o = !0), y = b[y].oriColIndex; var C = Math.floor(t / i), I = this.cellMergeInfo; for (var _ in I) { var x = _.split("_"), S = (u = parseInt(x[0]), parseInt(x[1])), D = I[_].rowSpan, R = I[_].colSpan; if (C >= u && C < u + D && y >= S && y < S + R) { if (C == u && y == S) { n = D, l = R; break } y != S && (s = !1), C = u, y = S, n = D, l = R, o = !0; break } } return { rowIndex: C, colIndex: y, rowSize: n, colSize: l, noLeftTop: o, leftCell: s } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setImeMode = function(t, e) { try { var i = this.getCellInfo(t); "text" != i.options.inputType && "textImage" != i.options.inputType && "textArea" != i.options.inputType && "drilldown" != i.options.inputType || (i.options.imeMode = e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._isGridViewItemTable = function() { try { return !(!this.parentControl || !this.parentControl.options || "gridItemTable" !== this.parentControl.options.pluginName && "gridViewItemTable" !== this.parentControl.options.pluginName) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.searchData = function(t) {
									try {
										void 0 !== t && null != t || (t = {}), this.clearSearchData({ noRefresh: !0 }); var e = t.column; e = e ? e.split(",") : this.tdIdList.slice(0); for (var i = this.getRowCount(), o = [], s = [], r = 0; r < i; r++) { for (var n = !1, l = this.__getGroupbyGroupedRowIndex(r), h = this.getRealRowIndex(l), d = 0; d < e.length; d++) { var p = this.getColumnIndex(e[d]); this.getCellDisplayData(r, p).indexOf(t.data) >= 0 && (n = !0, s.unshift([h, p])) } n && o.push(h) } if (this.groupbyStatus.grouped) { var u = {}; for (r = 0; r < o.length; r++)u[o[r] + ""] = !0; this.groupbyStatus.groupbyRowIndexArr = o.slice(0); var c = this.groupbyStatus.groupedRowIndexArr; this._beforeSearch = { groupbyRowIndexArr: o.slice(0), groupedRowIndexArr: c.slice(0) }; var g = []; for (r = 0; r < c.length; r++)if ("object" == typeof c[r]) { if (0 === c[r].depth && g.length > 0 && "object" == typeof g[g.length - 1]) for (; g.length > 0 && "object" == typeof g[g.length - 1];)g.pop(); g.push(c[r]) } else !0 === u[c[r] + ""] && g.push(c[r]); for (; g.length > 0 && "object" == typeof g[g.length - 1];)g.pop(); this.groupbyStatus.groupedRowIndexArr = g } var f = { type: "direct", key: o, filterId: this.id + "_searchData" }; this.dataList.setFilter(f); for (r = 0; r < s.length; r++) { var m = this.getDisplayRowIndex(s[r][0]), y = this.__getGroupbyGroupedRowIndex(m); this.setFocusedCell(y, s[r][1], !1, { ctrled: !0 }) }
									} catch (t) { a.w.printStackTrace(t, null, this) }
								}, S.prototype.clearSearchData = function(t) { try { if (!this.options.groupbyZoneSearch || !this.groupbyZone_searchinput) return; void 0 !== t && null != t || (t = {}); var e = { filterId: this.id + "_searchData", noRefresh: t.noRefresh }; this.groupbyStatus.grouped && this._beforeSearch && (this.groupbyStatus.groupbyRowIndexArr = this._beforeSearch.groupbyRowIndexArr.slice(0), this.groupbyStatus.groupedRowIndexArr = this._beforeSearch.groupedRowIndexArr.slice(0)), this._beforeSearch = null, this.dataList.removeFilter(e), this.removeFocusedCell(), !0 === t.clearValue && this.groupbyZone_searchinput.setValue("") } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._groupbyZoneSearch = function() { try { if (!this.options.groupbyZoneSearch || !this.groupbyZone_searchinput) return; var t = this.groupbyZone_searchinput.getValue(); if ("" === t) this.clearSearchData(); else { var e = {}; e.data = t, this.searchData(e) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setBlockSelect = function(t, e) { try { if (!0 !== e && !1 !== e) return; var i = this.getCellInfo(t); if (i && i.options.blockSelect !== e) { var o = this.getColumnIndex(t); i.options.blockSelect = e; for (var s = 0; s < this.focusedCell.length; s++)if (this.focusedCell[s].focusedColIndex === o) { var r = this.focusedCell[s]; this._applyFocusedCellOut(r) } } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype.setVisibleRowNum = function(t) { try { if (t = parseInt(t, 10), isNaN(t) || t <= 0) return !1; this.options.initFixedHeightByRowNum > -1 && (this.options.initFixedHeightByRowNum = t), this.options.visibleRowNum = t, this._dynamicVisibleRowNum = t; var e = this._getVisibleRowNumHeight(!0); this.setTrRowTable(), this.setSize(null, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._setRedrawTextAreaColumn = function(t) { try { for (var e = !1, i = 0; i < this.getColumnCount(); i++) { var o = this.getCellInfo(i); "textarea" == o.options.inputType && "all" == o.options.displayType && (e = !0, t || this.redrawColumn(i)) } if (t && e && "all" === this.options.visibleRowNum && "native" !== this.options.drawType && this.getRowCount() > 0) { var s = document.getElementById(this.id + "_body_table").offsetHeight; this.render.offsetHeight != s && this.setSize(null, s) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._setFirsCellFocus = function(t) { try { for (var e = 0, i = this.getRowCount() - 1, o = this.getLeftMostFocusableColIndex(e); e < i && null == o;)e += 1, o = this.getRightMostFocusableColIndex(e); var s = this.getCellInfo(o); if ("button" === s.options.inputType || "radio" === s.options.inputType || "checkbox" === s.options.inputType || "user" === s.options.inputType) { var r = 0, n = this.getCheckedIndex(s.colID)[0]; n > 0 && (r = n), this._setFocusedCell(r, o, !1, { tabDirection: "right" }), WebSquare.event.stopEvent(t) } } catch (t) { a.w.printStackTrace(t, null, this) } }, S.prototype._isNumberType = function(t) { try { return !(!t || "float" != t && "number" != t && "bigDecimal" != t && "euro" != t && "tenge" != t && "rupee" != t) } catch (t) { a.w.printStackTrace(t, null, this) } }; var D = function() { }; D.prototype.getColumnReadOnly = function(t) { var e = this.getCellInfo(t); return "" != e.options.readOnly ? r.D.getBoolean(e.options.readOnly) : "" }, D.prototype.setColumnReadOnly = function(t, e) { try { var i = this.getCellInfo(t); "" != e && (e = r.D.getBoolean(e)); var o = i.options.readOnly; if (i.options.readOnly = e, o !== e) { if (null != this.editedCell) { var s = r.D.getDataPrefix("tdindex"), n = parseInt(this.editedCell.editTd.getAttribute(s)) % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength); this.rollbackCommitFlag = n == t } else this.rollbackCommitFlag = !1; this.drawColumnData(t), this.applyStyleOptions(this.lastIndex) } } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.getRowReadOnly = function(t, e) { try { var i = !(!this.isDrillDown || !this.options.drilldownRealRowIndexAll) || !0 === e ? t : this.dataList.getRealRowIndex(this._getGroupbyGroupedRowIndex(t)), o = this.rowReadOnlyArr[i]; return 1 != o && 0 != o ? "" : o } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.setRowReadOnly = function(t, e, i) {
									try {
										var o = !(!this.isDrillDown || !this.options.drilldownRealRowIndexAll), s = o || !0 === i ? t : this.dataList.getRealRowIndex(this._getGroupbyGroupedRowIndex(t)); "" != e && (e = r.D.getBoolean(e))
											; var n = o || !0 === i ? this.getDisplayRowIndex(s) : this._getGroupbyGroupedRowIndex(t), l = this.rowReadOnlyArr[s]; this.rowReadOnlyArr[s] = e, l !== e && (null != this.editedCell && this.editedCell.editRowIndex == s ? this.rollbackCommitFlag = !0 : this.rollbackCommitFlag = !1, n >= 0 && (this.drawRowData(n - this.rowIndex, n, !0), this.applyRowStyleOptions(n)))
									} catch (t) { a.w.printStackTrace(t, null, this) }
								}, D.prototype.getCellReadOnly = function(t, e, i) { try { e = this.getColumnIndex(e); var o = !(!this.isDrillDown || !this.options.drilldownRealRowIndexAll) || !0 === i ? t : this.dataList.getRealRowIndex(this._getGroupbyGroupedRowIndex(t)), s = this.cellReadOnlyArr[o * this.oneRowDataLength + e]; return 1 != s && 0 != s ? "" : s } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.setCellReadOnly = function(t, e, i) { try { "" != i && (i = r.D.getBoolean(i)); e = this.getColumnIndex(e); var o = !(!this.isDrillDown || !this.options.drilldownRealRowIndexAll), s = o ? t : this.dataList.getRealRowIndex(this._getGroupbyGroupedRowIndex(t)), n = o ? this.getDisplayRowIndex(s) : this._getGroupbyGroupedRowIndex(t), l = this.cellReadOnlyArr[s * this.oneRowDataLength + e]; if (this.cellReadOnlyArr[s * this.oneRowDataLength + e] = i, l !== i) { var h = this.rollbackCommitFlag; if (null != this.editedCell && this.editedCell.editRowIndex == s) { var d = r.D.getDataPrefix("tdindex"), p = parseInt(this.editedCell.editTd.getAttribute(d)) % this.realRowDataLength - (this.realRowDataLength - this.oneRowDataLength); this.rollbackCommitFlag = p == e } else this.rollbackCommitFlag = !1; n >= 0 && (this.notifyCellChanged(n, e), this.rollbackCommitFlag = h, this.applyCellStyleOptions(n, e)) } } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.getColumnDisabled = function(t) { var e = this.getCellInfo(t); return r.D.getBoolean(e.options.disabled) }, D.prototype.setColumnDisabled = function(t, e) { try { e = r.D.getBoolean(e); var i = this.getCellInfo(t), o = i.options.disabled; i.options.disabled = e, o !== e && (this.drawColumnData(t), this.applyColumnStyleOptions(t)) } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.getRowDisabled = function(t) { try { var e = !(!this.isDrillDown || !this._dataList.options.depthColumn) ? t : this.dataList.getRealRowIndex(this._getGroupbyGroupedRowIndex(t)); return r.D.getBoolean(this.rowDisabledArr[e]) } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.setRowDisabled = function(t, e) { try { e = r.D.getBoolean(e); var i = !(!this.isDrillDown || !this._dataList.options.depthColumn), o = i ? t : this.dataList.getRealRowIndex(this._getGroupbyGroupedRowIndex(t)), s = i ? this.getDisplayRowIndex(o) : this._getGroupbyGroupedRowIndex(t), n = this.rowDisabledArr[o]; this.rowDisabledArr[o] = e, n !== e && s >= 0 && (this.drawRowData(s - this.rowIndex, s, !0), this.applyRowStyleOptions(s)) } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.getCellDisabled = function(t, e, i) { try { e = this.getColumnIndex(e); var o = !(!this.isDrillDown || !this._dataList.options.depthColumn) ? t : this.dataList.getRealRowIndex(this._getGroupbyGroupedRowIndex(t)); i && (o = t); var s = this.cellDisabledArr[o * this.oneRowDataLength + e]; return 1 != s && 0 != s ? "" : s } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.setCellDisabled = function(t, e, i, o) { try { i = r.D.getBoolean(i); e = this.getColumnIndex(e); var s = !(!this.isDrillDown || !this._dataList.options.depthColumn), n = s ? t : this.dataList.getRealRowIndex(this._getGroupbyGroupedRowIndex(t)), l = s ? this.getDisplayRowIndex(n) : this._getGroupbyGroupedRowIndex(t); o && (n = t, l = this.getDisplayRowIndex(t)); var h = this.cellDisabledArr[n * this.oneRowDataLength + e]; this.cellDisabledArr[n * this.oneRowDataLength + e] = i, h !== i && l >= 0 && (this.notifyCellChanged(l, e), this.applyCellStyleOptions(l, e)) } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.setTDStyle = function(t, e, i, o, s) { "" != this.options.readOnlyBackgroundColor && this.___getEditReadOnly(e, i) && (s = "background-color:" + this.options.readOnlyBackgroundColor + ";" + s), this._getEditDisabled(e, i) ? (t.disabled = !0, "" != this.options.disabledBackgroundColor && (s += ";background-color:" + this.options.disabledBackgroundColor), "" != this.options.disabledFontColor && (s += ";color:" + this.options.disabledFontColor)) : t.disabled = !1, t.style.cssText = o + ";" + s },
									D.prototype.setStyleAll = function(t) { try { var e = t.type, i = e.charAt(0).toUpperCase() + e.slice(1), o = t.target || ""; "all" !== o && "default" !== e && "init" !== e || (o = ""), "cell" !== e && "disabledCell" !== e || (o = ""); var s = o ? o.charAt(0).toUpperCase() + o.slice(1) : "", r = t.styleName, n = t.styleValue, l = t.noRefresh, h = t.rowIndex, d = t.useRealRowIndex; d || (h = this._getGroupbyGroupedRowIndex(h)); var u, c = t.colIndex; if ("column" === e || "cell" === e || "default" === e || "init" === e) { if (c = this.getColumnIndex(c), !this.getColumnID(c) && !this.successBinding) return; if (!this.getColumnID(c) && !this._dataList.getColumnID(c)) return void p.k.printLog("[Warning] Invalid colIndex(" + c + ").[" + this.id + "] set" + i + "Style" + s) } var g = "ValueObj"; "column" === e || "adaptiveColumn" === e || "default" === e || "init" === e ? (u = c, i = "Column") : "disabledCell" === e ? (u = h + "_" + c, i = "Cell", g = "Obj") : null == (u = null == c ? this["get" + i + "Style" + s + "ClassName"](h, d) : this["get" + i + "Style" + s + "ClassName"](h, c, d)) && (this[e + "Style" + s + "Index"]++, u = this.id + "_" + e + "style" + o + "_" + this[e + "Style" + s + "Index"] + "_", null == c ? this["set" + i + "Style" + s + "ClassName"](h, u, d) : this["set" + i + "Style" + s + "ClassName"](h, c, u)), null == (t = this[e + "Style" + s + g][u]) && (t = {}), t[r] = n; var f = []; for (var r in t) { var m = t[r]; "style" != r && "" != m && f.push(r + ":" + m) } if (t.style = f.join(";"), this[e + "Style" + s + g][u] = t, !0 !== l) if (null == h) this["apply" + i + "StyleOptions"](c); else !(!this.isDrillDown || !this._dataList.options.depthColumn) && !d && (h = this.getDisplayRowIndex(h)), !d || "cell" != e && "row" != e ? this["apply" + i + "StyleOptions"](h, c) : "cell" == e ? this["apply" + i + "StyleOptions"](h, c, void 0, void 0, d) : this["apply" + i + "StyleOptions"](h, d) } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.setRowBackgroundColor = function(t, e, i) { this.setRowStyle(t, "background-color", e, i) }, D.prototype.setRowColor = function(t, e, i) { this.setRowStyle(t, "color", e, i) }, D.prototype.setRowStyle = function(t, e, i, o) { this.setStyleAll({ type: "row", rowIndex: t, styleName: e, styleValue: i, useRealRowIndex: o }) }, D.prototype.getRowBackgroundColor = function(t) { return this.getRowStyleValue(t, "background-color") }, D.prototype.getRowColor = function(t) { return this.getRowStyleValue(t, "color") }, D.prototype.getRowStyleValue = function(t, e) { t = this._getGroupbyGroupedRowIndex(t); var i = this.getRowStyleClassName(t); return null == i ? "" : this.rowStyleValueObj[i][e] || "" }, D.prototype._getRowStyleStr = function(t) { return this.rowStyleValueObj[t].style }, D.prototype.setColumnBackgroundColor = function(t, e) { this.setColumnStyle(t, "background-color", e) }, D.prototype.setColumnColor = function(t, e) { this.setColumnStyle(t, "color", e) }, D.prototype.setColumnStyle = function(t, e, i) { this.setStyleAll({ type: "column", colIndex: t, styleName: e, styleValue: i }) }, D.prototype.setDefaultStyle = function(t, e, i) { this.setStyleAll({ type: "default", colIndex: t, styleName: e, styleValue: i }) }, D.prototype._setInitStyle = function(t, e, i) { this.setStyleAll({ type: "init", colIndex: t, styleName: e, styleValue: i }) }, D.prototype.setAdaptiveColumnStyle = function(t, e, i) { this.setStyleAll({ type: "adaptiveColumn", colIndex: t, styleName: e, styleValue: i, noRefresh: !0 }) }, D.prototype.getColumnBackgroundColor = function(t) { return this.getColumnStyleValue(t, "background-color") }, D.prototype.getColumnColor = function(t) { return this.getColumnStyleValue(t, "color") }, D.prototype.getColumnStyleValue = function(t, e) { var i = this.columnStyleValueObj[t]; return null == i ? this.getDefaultStyleValue(t, e) : i[e] || this.getDefaultStyleValue(t, e) }, D.prototype._getColumnStyleStr = function(t) { return this.columnStyleValueObj[t].style }, D.prototype.getDefaultStyleValue = function(t, e) { var i = this.defaultStyleValueObj[t]; return null == i ? "" : i[e] || "" }, D.prototype._getInitStyleValue = function(t, e) { var i = this.initStyleValueObj[t]; return null == i ? "" : i[e] || "" }, D.prototype._getDefaultStyleStr = function(t) { return this.defaultStyleValueObj[t].style }, D.prototype.getAdaptiveColumnStyleValue = function(t, e) { var i = this.adaptiveColumnStyleValueObj[t]; return null == i ? "" : i[e] || "" }, D.prototype.setCellBackgroundColor = function(t, e, i, o) { this.setCellStyle(t, e, "background-color", i, void 0, o) }, D.prototype.setCellColor = function(t, e, i, o) {
										this.setCellStyle(t, e, "color", i, void 0, o)
									}, D.prototype.setCellStyle = function(t, e, i, o, s, a) { var r = this.getColumnID(e); if (this.mergeCellBkStatus && this.mergeCellBkStatus[r]) { var n = !(!this.isDrillDown || !this._dataList.options.depthColumn) ? t : this.dataList.getRealRowIndex(t); this.mergeCellBkStatus[r][n] = null, delete this.mergeCellBkStatus[r][n] } this.setStyleAll({ type: "cell", rowIndex: t, colIndex: e, styleName: i, styleValue: o, noRefresh: s, useRealRowIndex: a }) }, D.prototype._refreshCellStyle = function(t) { var e = [], i = this.cellStyleValueObj[t]; for (var o in i) { var s = i[o]; "style" != o && "" != s && e.push(o + ":" + s) } i.style = e.join(";"), this.cellStyleValueObj[t] = i }, D.prototype.setDisabledCellStyle = function(t, e, i, o) { e = this.getColumnIndex(e); this._getEditDisabled(t, e) && this.setStyleAll({ type: "disabledCell", rowIndex: t, colIndex: e, styleName: i, styleValue: o }) }, D.prototype.getCellBackgroundColor = function(t, e) { return this.getCellStyleValue(t, e, "background-color") }, D.prototype.getCellColor = function(t, e) { return this.getCellStyleValue(t, e, "color") }, D.prototype.getCellStyleValue = function(t, e, i, o) { try { t = this._getGroupbyGroupedRowIndex(t); var s = this.getCellStyleClassName(t, e); return null == s ? (!0 !== o && p.k.printLog("[Warning] Is not exist cell![" + this.id + "]"), "") : this.cellStyleValueObj[s][i] || "" } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype._getCellStyleStr = function(t) { return this.cellStyleValueObj[t].style }, D.prototype.setHeaderCellStyle = function(t, e, i) { try { var o = this.getHeaderLayer(t); WebSquare.style.setStyle(o, e, i) } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.setHeaderBackgroundColor = function(t, e) { try { var i = this.getHeaderLayer(t); WebSquare.style.setStyle(i, "background-color", e), this.headerCellStyleValueObj[t] = { "background-color": e } } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.setHeaderColor = function(t, e) { try { var i = this.getHeaderLayer(t); WebSquare.style.setStyle(i, "color", e) } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.getHeaderCellStyleValue = function(t, e) { try { var i = this.getHeaderLayer(t); return WebSquare.style.getStyle(i, e) } catch (t) { a.w.printStackTrace(t, null, this) } }, D.prototype.getHeaderBackgroundColor = function(t) { return this.getHeaderCellStyleValue(t, "background-color") }, D.prototype.getHeaderColor = function(t) { return this.getHeaderCellStyleValue(t, "color") }, D.prototype._setMergeCellBackground = function(t, e, i) { var o = !(!this.isDrillDown || !this._dataList.options.depthColumn) ? t : this.dataList.getRealRowIndex(t), s = this.getColumnID(e), a = this.getColumnIndex(e); if (this.options.groupbyZone && (this.mergeCellBkStatus || (this.mergeCellBkStatus = {}), this.mergeCellBkStatus[s] || (this.mergeCellBkStatus[s] = {}), null == this.mergeCellBkStatus[s][o])) { var r = this.getCellStyleValue(t, s, "background-color", !0) || this.getColumnStyleValue(a, "background-color"); this.mergeCellBkStatus[s][o] = r } var n = this.setCellDefaultStyleClassName(o, a, !0); this.cellStyleValueObj[n]["background-color"] = i, this._refreshCellStyle(n) }, D.prototype._clearMergeCellBackground = function() { if (this.mergeCellBkStatus) { for (var t in this.mergeCellBkStatus) for (var e in this.mergeCellBkStatus[t]) { var i = parseInt(e, 10), o = this.mergeCellBkStatus[t][e], s = this.setCellDefaultStyleClassName(i, t, !0); this.cellStyleValueObj[s]["background-color"] = o, this._refreshCellStyle(s), o || delete this.cellStyleValueObj[s]["background-color"] } delete this.mergeCellBkStatus } }; var R = function(t) { this.statusArr = [], this.mainGrid = null, this.options = null, this.mode = null }; R.prototype.initialize = function(t, e) {
										if (this.mainGrid = t, t._linkedDataList ? this.mode = "linkedDataList" : this.mode = "dataList", "linkedDataList" === this.mode) {
											this.statusArr = [], this.options = o.x.extend({ showDepth: -1, depthColumn: -1 }, e || {}), t._linkedDataList.initialRowIndexArr.length !== t._linkedDataList.filteredRowIndexArr.length && (p.k.printLog("경고 : drilldown에서는 filter기능을 사용할 수 없습니다. 개별 filter를 자동으로 전부 해제합니다.[" + this.id + "]"), t._linkedDataList.clearFilter()), t._linkedDataList.filteredRowIndexArr = []
											; for (var i = this.options.depthColumn, s = t._linkedDataList.initialRowIndexArr.length, a = 0; a < s; a++) { var r = t._linkedDataList.initialRowIndexArr[a]; this.statusArr[r] = !1; ("dataList" == this.options.dataColumn ? parseInt(this.mainGrid.dataList._getData(r, this.mainGrid._dataList.getColumnID(i))) : parseInt(this.mainGrid.dataList._getData(r, this.mainGrid.getColumnID(i)))) <= parseInt(this.options.showDepth, 10) && (this.mainGrid._linkedDataList.filteredRowIndexArr.push(r), this.statusArr[r] = !0) }
										} else { t._dataList.filteredRowIndexArr = [], this.statusArr = [], this.options = o.x.extend({ showDepth: -1, depthColumn: -1 }, e || {}); for (i = this.options.depthColumn, s = this.mainGrid.getTotalRow(), r = 0; r < s; r++) { this.statusArr[r] = !1; ("dataList" == this.options.dataColumn ? parseInt(this.mainGrid.dataList._getData(r, this.mainGrid._dataList.getColumnID(i))) : parseInt(this.mainGrid.dataList._getData(r, this.mainGrid.getColumnID(i)))) <= parseInt(this.options.showDepth, 10) && (this.mainGrid._dataList.filteredRowIndexArr.push(r), this.statusArr[r] = !0) } }
									}, R.prototype.getDepth = function(t) { return "dataList" == this.options.dataColumn ? parseInt(this.mainGrid.dataList._getData(t, this.mainGrid._dataList.getColumnID(this.options.depthColumn))) : parseInt(this.mainGrid.dataList._getData(t, this.mainGrid.getColumnID(this.options.depthColumn))) }, R.prototype.isOpen = function(t) { var e = this.getDepth(this.mainGrid.getRealRowIndex(t)), i = 0; i = "linkedDataList" === this.mode ? this.mainGrid._linkedDataList.filteredRowIndexArr[t + 1] : this.mainGrid._dataList.filteredRowIndexArr[t + 1]; var o = this.getDepth(i); return !isNaN(e) && !isNaN(o) && e < o }, R.prototype.hasChild = function(t) { if ("linkedDataList" === this.mode) { var e = this.mainGrid._linkedDataList.filteredRowIndexArr[t], i = this.mainGrid._linkedDataList.getLinkedRowIndex(t), o = this.mainGrid._linkedDataList.initialRowIndexArr[i + 1], s = this.mainGrid.getColumnID(this.options.depthColumn); "dataList" == this.options.dataColumn && (s = this.mainGrid._dataList.getColumnID(this.options.depthColumn)); var a = parseInt(this.mainGrid.dataList._getData(e, s)), r = parseInt(this.mainGrid.dataList._getData(o, s)); return a < (r = isNaN(r) ? 0 : r) } o = (e = this.mainGrid.getRealRowIndex(t)) + 1, s = this.mainGrid.getColumnID(this.options.depthColumn); "dataList" == this.options.dataColumn && (s = this.mainGrid._dataList.getColumnID(this.options.depthColumn)); a = parseInt(this.mainGrid.dataList._getData(e, s)), r = parseInt(this.mainGrid.dataList._getData(o, s)); return a < (r = isNaN(r) ? 0 : r) }, R.prototype.getOriginalRowIndex = function(t) { return this.openRowIndexArr[t] }, R.prototype.getDisplayRowIndex = function(t) { if ("linkedDataList" === this.mode) { if (this.mainGrid._linkedDataList.filteredRowIndexArr) for (var e = 0; e < this.mainGrid._linkedDataList.filteredRowIndexArr.length; e++)if (parseInt(t, 10) === this.mainGrid._linkedDataList.filteredRowIndexArr[e]) return e } else if (this.mainGrid._dataList.filteredRowIndexArr) for (e = 0; e < this.mainGrid._dataList.filteredRowIndexArr.length; e++)if (parseInt(t, 10) === this.mainGrid.getRealRowIndex(e)) return e; return t }, R.prototype.getChildRowArr = function(t, e) { var i = t, o = this.getDepth(t), s = this.mainGrid.getTotalRow(), a = [], r = this.options.depthColumn, n = this.mainGrid.getColumnID(r); if ("dataList" == this.options.dataColumn && (n = this.mainGrid._dataList.getColumnID(r)), "linkedDataList" === this.mode) for (var l = i + 1; l < s; l++) { var h = this.mainGrid._linkedDataList.initialRowIndexArr[l]; if (this.mainGrid.dataList._getData(h, n) == o + 1 && a.push(h), e && this.mainGrid.dataList._getData(h, n) > o + 1 && a.push(h), this.mainGrid.dataList._getData(h, n) <= o) break } else for (h = i + 1; h < s && (this.mainGrid.dataList._getData(h, n) == o + 1 && a.push(h), e && this.mainGrid.dataList._getData(h, n) > o + 1 && a.push(h), !(this.mainGrid.dataList._getData(h, n) <= o)); h++); return a }, R.prototype.pasteDrilldownInitialize = function(t, e) {
										if (this.mainGrid = t, t._linkedDataList ? this.mode = "linkedDataList" : this.mode = "dataList", "linkedDataList" === this.mode) {
											this.statusArr = [], this.options = o.x.extend({ showDepth: -1, depthColumn: -1 }, e || {}),
											t._linkedDataList.initialRowIndexArr.length !== t._linkedDataList.filteredRowIndexArr.length && (p.k.printLog("경고 : drilldown에서는 filter기능을 사용할 수 없습니다. 개별 filter를 자동으로 전부 해제합니다.[" + this.id + "]"), t._linkedDataList.clearFilter()), t._linkedDataList.filteredRowIndexArr = []; for (var i = this.options.depthColumn, s = t._linkedDataList.initialRowIndexArr.length, a = 0; a < s; a++) { var r = t._linkedDataList.initialRowIndexArr[a]; this.statusArr[r] = !1; ("dataList" == this.options.dataColumn ? parseInt(this.mainGrid.dataList._getData(r, this.mainGrid._dataList.getColumnID(i))) : parseInt(this.mainGrid.dataList._getData(r, this.mainGrid.getColumnID(i)))) <= parseInt(this.options.showDepth, 10) && (this.mainGrid._linkedDataList.filteredRowIndexArr.push(r), this.statusArr[r] = !0) }
										} else { this.statusArr = [], this.options = o.x.extend({ showDepth: -1, depthColumn: -1 }, e || {}); for (i = this.options.depthColumn, s = this.mainGrid.getTotalRow(), r = 0; r < s; r++)this.statusArr[r] = !0 }
									}, R.prototype.getChildrenRowArr = function(t) { var e = []; if (this.mainGrid) { var i = this.mainGrid.getTotalRow(), o = this.options.depthColumn, s = this.mainGrid.getColumnID(o); if ("dataList" == this.options.dataColumn && (s = this.mainGrid._dataList.getColumnID(o)), "linkedDataList" === this.mode) { var a = this.mainGrid._linkedDataList.initialRowIndexArr[t + 1], r = parseInt(this.mainGrid.dataList._getData(this.mainGrid._linkedDataList.initialRowIndexArr[t], s), 10); if (a < i && this.mainGrid.dataList._getData(a, s) > r) { e.push(a); var n = parseInt(this.mainGrid.dataList._getData(a, s), 10), l = !0 } if (l) for (var h = t + 2; h < i; h++) { a = this.mainGrid._linkedDataList.initialRowIndexArr[h]; if (this.mainGrid.dataList._getData(a, s) < r + 1) break; this.mainGrid.dataList._getData(a, s) < n + 1 && (e.push(a), n = parseInt(this.mainGrid.dataList._getData(a, s), 10)) } } else { a = t + 1, r = parseInt(this.mainGrid.dataList._getData(t, s), 10); if (a < i && this.mainGrid.dataList._getData(a, s) > r) { e.push(a); n = parseInt(this.mainGrid.dataList._getData(a, s), 10), l = !0 } if (l) for (a = t + 2; a < i && !(this.mainGrid.dataList._getData(a, s) < r + 1); a++)this.mainGrid.dataList._getData(a, s) < n + 1 && (e.push(a), n = parseInt(this.mainGrid.dataList._getData(a, s), 10)) } } return e }, R.prototype.getParentRowIndex = function(t) { if (this.mainGrid) { var e = this.options.depthColumn, i = this.mainGrid.getColumnID(e); "dataList" == this.options.dataColumn && (i = this.mainGrid._dataList.getColumnID(e)); var o = parseInt(this.mainGrid.dataList._getData(t, i)); if ("linkedDataList" === this.mode) for (var s = this.mainGrid._linkedDataList.getLinkedRealRowIndex(t) - 1; s >= 0; s--) { var a = this.mainGrid._linkedDataList.initialRowIndexArr[s]; if (this.mainGrid.dataList._getData(a, i) < o) return a } else for (a = t - 1; a >= 0; a--)if (this.mainGrid.dataList._getData(a, i) < o) return a } return -1 }, R.prototype.makeOpenRowIndexArr = function() { if ("linkedDataList" === this.mode) { this.mainGrid._linkedDataList.filteredRowIndexArr = []; for (var t = 0; t < this.statusArr.length; t++)1 == this.statusArr[t] && this.mainGrid._linkedDataList.filteredRowIndexArr.push(t) } else { this.mainGrid._dataList.filteredRowIndexArr = []; for (t = 0; t < this.statusArr.length; t++)1 == this.statusArr[t] && this.mainGrid._dataList.filteredRowIndexArr.push(t) } }, R.prototype.toggle = function(t) { var e = this.isOpen(t), i = []; t = "linkedDataList" === this.mode ? this.mainGrid._linkedDataList.getLinkedRealRowIndex(t) : this.mainGrid.getRealRowIndex(t), i = e ? this.getChildRowArr(t, !0) : this.getChildrenRowArr(t); for (var o = 0; o < i.length; o++)this.statusArr[i[o]] = !e; this.makeOpenRowIndexArr(), d.B.fireEvent(this.mainGrid, "ontoggleclick", e, t) }, R.prototype.getAncestorRowArr = function(t) { if ("number" != typeof t) return !1; for (var e = [], i = t; i >= 0;)e.push(i), i = this.getParentRowIndex(i); return e.shift(), e }, R.prototype.drillTo = function(t) { if ("number" != typeof t) return !1; var e = this.getAncestorRowArr(t); e.unshift(t); for (var i = 0; i < e.length; i++) { var o = e[i]; if (this.statusArr[o] = !0, 0 != i) for (var s = this.getChildrenRowArr(o), a = 0; a < s.length; a++)this.statusArr[s[a]] = !0 } return this.makeOpenRowIndexArr(), this.getDisplayRowIndex(e[e.length - 1]) }, R.prototype.isLastChild = function(t) {
										var e = this.options.depthColumn, i = this.mainGrid.getColumnID(e)
										; "dataList" == this.options.dataColumn && (i = this.mainGrid._dataList.getColumnID(e)); var o = this.mainGrid.dataList._getData(t, i); if ("linkedDataList" === this.mode) for (var s = this.mainGrid._linkedDataList.getLinkedRealRowIndex(t) - 1; s >= 0; s--) { var a = this.mainGrid._linkedDataList.initialRowIndexArr[s]; if (this.mainGrid.dataList._getData(a, i) < o) return a } else for (a = t + 1; a < this.mainGrid.getTotalRow(); a++) { if (this.mainGrid.dataList._getData(a, i) == o) return !1; if (this.mainGrid.dataList._getData(a, i) < o) return !0 } return !0
									}, R.prototype.getRecursiveRowIndex = function(t) { try { for (var e = [], i = this.getChildrenRowArr(t), o = 0; o < i.length; o++) { var s = i[o]; e.push(s), e = e.concat(this.getRecursiveRowIndex(s)) } return e } catch (t) { a.w.printStackTrace(t, null, this) } }, R.prototype.getRecursiveRowCount = function(t) { try { for (var e = 0, i = this.getChildrenRowArr(t), o = 0; o < i.length; o++)e += this.getRecursiveRowCount(i[o]), e++; return e } catch (t) { a.w.printStackTrace(t, null, this) } }, R.prototype.appendChild = function(t, e) { try { if (e) { var i = t + this.getRecursiveRowCount(t); return this.mainGrid._toggle(this.getDisplayRowIndex(t)), this.mainGrid.dataList.setRowData(i + 1, e) } $l("data is null. check data.[" + this.id + "]") } catch (t) { a.w.printStackTrace(t, null, this) } }, R.prototype.moveNode = function(t, e) { try { var i; if (t < e) { if (!this.bodyDrop) i = e - (this.getRecursiveRowCount(t) + 1) } else (t > e || t == e) && (i = e); var o = this.detachNode(t), s = this.appendNode(i, o); return "number" != typeof i && (i = this.mainGrid.getRealRowIndex(this.mainGrid.getRowCount() - 1)), this.bodyDrop = !1, { detachedData: o, insertedData: s, insertedRowIndex: i } } catch (t) { a.w.printStackTrace(t, null, this) } }, R.prototype.appendNode = function(t, e) { try { var i, o, s, r = this.mainGrid._dataList.getColumnCount(), n = e.length / r, l = this.mainGrid._dataList.getColumnID(this.options.depthColumn); if (this.options.depthColumn = parseInt(this.options.depthColumn, 10), this.bodyDrop) { this.bodyDrop = !1; var h = this, d = function(t) { var e = h.getParentRowIndex(t); return e = e > -1 ? d(e) : t }, p = this.mainGrid.getRealRowIndex(this.mainGrid.getRowCount() - 1), u = this.getDisplayRowIndex(d(p)); i = parseInt(this.mainGrid.dataList.getCellData(u, l), 10), o = parseInt(e[r * (n - 1) + parseInt(this.options.depthColumn)], 10), t = p + this.getRecursiveRowCount(p) + 1, s = i - o } else { u = this.getDisplayRowIndex(t - 1); s = (i = parseInt(this.mainGrid.dataList.getCellData(u, l), 10)) - (o = parseInt(e[r * (n - 1) + parseInt(this.options.depthColumn)], 10)) + 1 } for (var c = [], g = 0; g < n; g++)for (var f = 0; f < r; f++) { var m = e[r * g + f]; f == this.options.depthColumn && (m -= 0, m += s), c.push(m) } this.mainGrid.dataList._insertData(t, c, -1); var y = this.getDisplayRowIndex(t); return this.isOpen(y) && this.mainGrid._toggle(y), c } catch (t) { a.w.printStackTrace(t, null, this) } }, R.prototype.detachNode = function(t) { try { for (var e = [], i = this.mainGrid.dataList.removeRow(t, { skipNotify: !0 }), o = 0; o < i.length; o++)e = e.concat(i[o]); return e } catch (t) { a.w.printStackTrace(t, null, this) } }, R.prototype.insertNextSibling = function(t, e) { try { this.options.depthColumn = parseInt(this.options.depthColumn, 10); var i = this.mainGrid.dataList.getColumnCount(), o = e.length / this.mainGrid.dataList.getColumnCount(), s = this.mainGrid.getDisplayRowIndex(t), r = parseInt(this.mainGrid.dataList.getCellData(s, this.options.depthColumn), 10) - parseInt(e[i * (o - 1) + parseInt(this.options.depthColumn)], 10), n = []; t += this.getRecursiveRowCount(t) + 1; for (var l = 0; l < o; l++)for (var h = 0; h < i; h++) { var d = e[i * l + h]; h == this.options.depthColumn && (d -= 0, d += r), n.push(d) } if (this.mainGrid.dataList._insertData(t, n, -1), this.mainGrid.options.closeDrillDownSibling) for (l = 0; l < o; l++) { var p = this.getDisplayRowIndex(t + l); this.isOpen(p) && this.mainGrid._toggle(p) } return n } catch (t) { a.w.printStackTrace(t, null, this) } }; var L = i(2712), T = function(t) { this._linkedDataList._grid = t }; T.prototype.getLinkedRowIndex = function(t) { return this._linkedDataList.getLinkedRowIndex(t) }, T.prototype.getRealRowIndex = function(t) { return this._linkedDataList.filteredRowIndexArr[t] }, T.prototype.getFilteredRowIndex = function(t) { return this._linkedDataList.getFilteredRowIndex(t) }, T.prototype.getTotalRow = function() {
										try {
											return this._linkedDataList.initialRowIndexArr.length
										} catch (t) { a.w.printStackTrace(t) }
									}, T.prototype.getTotalCol = function() { try { return this._linkedDataList._dataList.getTotalCol() } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getRowCount = function() { try { return this._linkedDataList.getDataLength() } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getCellData = function(t, e) { try { var i = this._linkedDataList.getRealRowIndex(t); return this._linkedDataList._dataList.getCellData(i, e) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getOriginalCellData = function(t, e) { try { var i = this._linkedDataList.getRealRowIndex(t); return this._linkedDataList._dataList.getOriginalCellData(i, e) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getDataLength = function() { return this._linkedDataList.filteredRowIndexArr.length }, T.prototype.getColCnt = function() { try { for (var t = 0, e = this._grid.htmlInfo ? this._grid.htmlInfo.head.rowArr[0] : this._grid.struct.head.rowArr[0], i = 0; i < e.length; i++) { var o = e[i]; t += parseInt(o.colSpan, 10) || 1 } return t } catch (t) { a.w.printStackTrace(t, null, this) } }, T.prototype.getRowPosition = function() { try { return this._linkedDataList._dataList.getRowPosition() } catch (t) { a.w.printStackTrace(t, null, this) } }, T.prototype.getColData = function(t) { try { for (var e = [], i = 0; i < this._linkedDataList.initialRowIndexArr.length; i++)e.push(this._linkedDataList.getCellData(i, t)); return e } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getRowData = function(t) { try { var e = this._linkedDataList.getRealRowIndex(t); return this._linkedDataList._dataList.getRowData(e) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getDataRow = function(t) { try { var e = this._linkedDataList.getRealRowIndex(t); return this._linkedDataList._dataList.getDataRow(e) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getMatchedData = function(t, e, i, o, s) { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var r = [], n = this._linkedDataList.getMatchedIndex(t, e, i, o, s), l = 0; l < n.length; l++)r.push(this._linkedDataList.getRowData(n[l])); return r } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getUnmatchedData = function(t, e, i, o, s) { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var r = [], n = this._linkedDataList.getUnmatchedIndex(t, e, i, o, s), l = 0; l < n.length; l++)r.push(this._linkedDataList.getRowData(n[l])); return r } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getMatchedColumnData = function(t, e, i, o, s, r) { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var n = [], l = this._linkedDataList.getMatchedIndex(t, e, o, s, r), h = 0; h < l.length; h++)n.push(this._linkedDataList.getCellData(l[h], i)); return n } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getUnmatchedColumnData = function(t, e, i, o, s, r) { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var n = [], l = this._linkedDataList.getUnmatchedIndex(t, e, o, s, r), h = 0; h < l.length; h++)n.push(this._linkedDataList.getCellData(l[h], i)); return n } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getFilteredColData = function(t) { for (var e = [], i = 0; i < this._linkedDataList.getDataLength(); i++)e.push(this._linkedDataList.getCellData(this._linkedDataList.filteredRowIndexArr[i], t)); return e }, T.prototype.getMatchedIndex = function(t, e, i, o, s) { try { i = void 0 === i || null == i || i, 0 != (i = r.D.getBoolean(i)) && (i = !0); var n = this._linkedDataList._dataList.getColumnIndex(t), l = this._linkedDataList.getFilteredColData(n), h = []; "number" != typeof o && (o = 0), "number" != typeof s && (s = l.length), s > l.length && (s = l.length); for (var d = o; d < s; d++) { var p = l[d], u = this._linkedDataList.getRealRowIndex(d); 1 == i ? p === e && h.push(u) : p.indexOf(e) > -1 && h.push(u) } return h } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getUnmatchedIndex = function(t, e, i, o, s) { try { 0 != i && (i = !0); var r = this._linkedDataList._dataList.getColumnIndex(t), n = this._linkedDataList.getFilteredColData(r), l = []; "number" != typeof o && (o = 0), "number" != typeof s && (s = n.length), s > n.length && (s = n.length); for (var h = o; h < s; h++) { var d = n[h], p = this._linkedDataList.getRealRowIndex(h); 1 == i ? d !== e && l.push(p) : d.indexOf(e) <= -1 && l.push(p) } return l } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getRangeData = function(t, e) {
										try {
											var i = []; if (t > e) { var o = e; e = t, t = o } t < 0 && (t = 0), e > this._linkedDataList.getDataLength() && (e = this._linkedDataList.getDataLength()); for (var s = t; s < e; s++) { var r = this._linkedDataList.getRealRowIndex(s); i = i.concat(this._linkedDataList.getRowData(r)) } return i
										} catch (t) { a.w.printStackTrace(t) }
									}, T.prototype.getAllData = function() { try { return this._linkedDataList._dataList.getAllFilteredData() } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getAllFilteredData = function() { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = 0; e < this._linkedDataList.getDataLength(); e++)t = t.concat(this._linkedDataList.getRowData(e)); return t }, T.prototype.getColumnDistinctDataArray = function(t) { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); var e = [], i = []; "string" == typeof t && (t = this._linkedDataList._dataList.bodyIdColIndexMap[t]); for (var o = this._linkedDataList._dataList.getCellInfo(t), s = this._linkedDataList.getColData(t), r = 0; r < s.length; r++) { i[s[r]] = 1 } for (var n in i) e.push(n); return "text" == o.options.dataType ? e.sort() : e.sort(this._linkedDataList.comparator), e } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getRangeXML = function(t, e) { try { return this._linkedDataList.getRangeXML(t, e) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getMatchedXML = function(t, e, i, o, s) { try { return this._linkedDataList.getMatchedXML(t, e, i, o, s) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getUnmatchedXML = function(t, e, i, o, s) { try { return this._linkedDataList.getUnmatchedXML(t, e, i, o, s) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getRowXML = function(t) { try { return this._linkedDataList.getRowXML(t) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getAllXML = function(t) { try { return this._linkedDataList.getAllXML(t) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getAllFilteredXML = function(t) { return this._linkedDataList.getAllFilteredXML(t) }, T.prototype.getRowJSON = function(t, e) { try { return this._linkedDataList.getRowJSON(t, e) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getAllJSON = function(t) { try { return this._linkedDataList.getAllJSON(t) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getRangeJSON = function(t, e, i) { try { return this._linkedDataList.getRangeJSON(t, e, i) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getMatchedJSON = function(t, e, i, o, s) { try { return this._linkedDataList.getMatchedJSON(t, e, i, o, s) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getUnmatchedJSON = function(t, e, i, o, s) { try { return this._linkedDataList.getUnmatchedJSON(t, e, i, o, s) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getFusionChartData = function(t, e, i) { return this._linkedDataList.getFusionChartData(t, e, i) }, T.prototype.getRowStatusValue = function(t) { try { return this._linkedDataList.getRowStatusValue(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, T.prototype.getRowStatus = function(t) { try { return this._linkedDataList.getRowStatus(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, T.prototype.getRowIndexByStatus = function(t) { try { for (var e = [], i = 0; i < this._linkedDataList.getDataLength(); i++) { var o = this._linkedDataList.getRealRowIndex(i); t.indexOf(this._linkedDataList._dataList.getRowStatus(o)) > -1 && e.push(o) } return e } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getInsertedIndex = function() { try { return this._linkedDataList.getRowIndexByStatus("C") } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getUpdatedIndex = function() { try { return this._linkedDataList.getRowIndexByStatus("U") } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getDeletedIndex = function() { try { return this._linkedDataList.getRowIndexByStatus("DV") } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getOnlyDeletedIndex = function() { try { return this._linkedDataList.getRowIndexByStatus("D") } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getVoidIndex = function() { try { return this._linkedDataList.getRowIndexByStatus("V") } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getModifiedIndex = function() { try { return this._linkedDataList.getRowIndexByStatus("CUD") } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getInsertedData = function() {
										try {
											this._linkedDataList.broadcast({ gridView: ["_endEdit"] })
											; for (var t = [], e = this._linkedDataList.getInsertedIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowData(e[i])); return t
										} catch (t) { a.w.printStackTrace(t) }
									}, T.prototype.getInsertedXML = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); var t = this._linkedDataList.getInsertedIndex(); return this._linkedDataList._dataList.getArrXML(t) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getInsertedJSON = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getInsertedIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowJSON(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getDeletedData = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getDeletedIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowData(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getDeletedXML = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); var t = this._linkedDataList.getDeletedIndex(); return this._linkedDataList._dataList.getArrXML(t) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getDeletedJSON = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getDeletedIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowJSON(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getVoidData = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getVoidIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowData(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getVoidXML = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); var t = this._linkedDataList.getVoidIndex(); return this._linkedDataList._dataList.getArrXML(t) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getVoidJSON = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getVoidIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowJSON(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getOnlyDeletedData = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getOnlyDeletedIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowData(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getOnlyDeletedXML = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); var t = this._linkedDataList.getOnlyDeletedIndex(); return this._linkedDataList._dataList.getArrXML(t) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getOnlyDeletedJSON = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getOnlyDeletedIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowJSON(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getUpdatedData = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getUpdatedIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowData(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getUpdatedXML = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); var t = this._linkedDataList.getUpdatedIndex(); return this._linkedDataList._dataList.getArrXML(t) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getUpdatedJSON = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getUpdatedIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowJSON(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getModifiedData = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getModifiedIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowData(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.getModifiedXML = function() {
										try {
											this._linkedDataList.broadcast({
												gridView: ["_endEdit"]
											}); var t = this._linkedDataList.getModifiedIndex(); return this._linkedDataList._dataList.getArrXML(t)
										} catch (t) { a.w.printStackTrace(t) }
									}, T.prototype.getModifiedJSON = function() { try { this._linkedDataList.broadcast({ gridView: ["_endEdit"] }); for (var t = [], e = this._linkedDataList.getModifiedIndex(), i = 0; i < e.length; i++)t.push(this._linkedDataList.getRowJSON(e[i])); return t } catch (t) { a.w.printStackTrace(t) } }, T.prototype.setColumnFilter = function(t, e, i, o) { return "object" != typeof t || r.D.isString(t) || (t.internal = !0), this._linkedDataList.setColumnFilter(t, e, i, o) }, T.prototype.removeColumnFilter = function(t) { return this._linkedDataList.removeColumnFilter(t, { internal: !0 }) }, T.prototype.clearSortFilter = function() { return this._linkedDataList.clearSortFilter() }, T.prototype.removeColumnFilterAll = function() { return this._linkedDataList.removeColumnFilterAll() }, T.prototype.setFilter = function(t) { return t && (t.internal = !0), this._linkedDataList.setFilter(t) }, T.prototype.removeFilter = function(t, e) { return t && (t.internal = !0), this._linkedDataList.removeFilter(t, e) }, T.prototype.clearFilter = function() { return this._linkedDataList.clearFilter() }, T.prototype.sort = function(t, e) { return this._linkedDataList.sort(t, e) }, T.prototype.clearSort = function() { return this._linkedDataList.clearSort() }, T.prototype.multisort = function(t) { return this._linkedDataList.multisort(t) }, T.prototype.getRowArray = function(t) { try { return this._linkedDataList.getRowArray(t) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.removeRow = function(t, e) { try { var i = this._linkedDataList.getRealRowIndex(t); return this._grid._dataList.removeRow(i, e) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.removeRows = function(t) { try { for (var e = [], i = 0; i < t.length; i++)e.push(this._linkedDataList.getRealRowIndex(t[i])); return this._grid._dataList.removeRows(e) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.setRowData = function(t, e, i) { try { var o = this._linkedDataList.getRealRowIndex(t); this._grid._dataList.setRowData(o, e, i) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.setRowXML = function(t, e, i) { try { var o = this._linkedDataList.getRealRowIndex(t); this._grid._dataList.setRowXML(o, e, i) } catch (t) { a.w.printStackTrace(t) } }, T.prototype.insertData = function(t, e) { try { var i = this._linkedDataList.getRealRowIndex(t); this._grid._dataList.insertData(i, e) } catch (t) { a.w.printStackTrace(t) } }; var k = i(3729), A = function(t, e, i) {
										var a; this.options = {}, o.x.extend(this.options, WebSquare.uiplugin.cellInfo.prototype.defaultOptions), t && (a = t.getAttribute("escape")), !a && e.element && (a = e.element.getAttribute("escape")); var n = r.D.getEscape(a, e.options.pluginName); this.options.escape = n ? r.D.getBoolean(n) : this.options.escape, this.internal = !1, (i || "TD" == t.getTagName().toUpperCase()) && (this.internal = !0), this.mainGrid = e, this.mainGridId = "G_" + this.mainGrid.id + "__", t && this.setOptions(t), null != this.mainGrid.scope_obj && (this.options._scope_obj_uuid = this.mainGrid.scope_obj.uuid, this.scope_id = this.mainGrid.scope_obj.id), "" != this.options.value && "" == this.options.defaultValue && (this.options.defaultValue = this.options.value), "" == this.options.value && "" != this.options.defaultValue && (this.options.value = this.options.defaultValue), this.colID = this.options.col_id, this.id = this.options.col_id, this.options.id = this.options.col_id, this.setController(), this.initFormatter(t), this.initializeCellInfo(t, i), this.expressionStr = null, this.style = "", this.heightGap = 0; var l = s.v.browserVersion(); if (s.v.browserCheck.ie && "8" != l && (this.heightGap = 2), "" != this.options.importExp && (this.options.importExp = this.options.importExp.replace(/[cC][oO][lL][\s]*[(]/g, "_this.columnValue(obfuscator_rowXml, "), this.options.importExp = this.options.importExp.replace(/[xX][pP][aA][tT][hH][\s]*[(]/g, "_this.xpathValue(obfuscator_rowXml, "), this.options.importExp = this.options.importExp.replace(/[rR][oO][wW][iI][nN][dD][eE][xX][\s]*[(]/g, "_this.rowIndexValue(obfuscator_i")), 0 == this.options.colSpan && (this.options.colSpan = 1), 0 == this.options.rowSpan && (this.options.rowSpan = 1), t) {
											var h = !this.options.groupName || !this.options.groupValue, d = this.options.inputType; if (h && ("button" != d && "image" != d) && this.mainGrid.successBinding) { var p = e._dataList.getCellInfo(this.id); !(!p || !p.element && p.id !== this.id) || (this.options.readOnly = !0) }
										} "radio" == this.options.inputType && this.options.groupName && (this.mainGrid.radioGroupRepChk[this.options.groupName] = !0), "$blank" == this.options.NaNFormat && (this.options.NaNFormat = ""), this.changedCellHeight = 0, this.dynamicAttrInfo = {}, "custom" == this.options.inputType && (this.mainGrid.hasCustomInputType = !0), "expression" === this.options.inputType && "true" !== this.options.expressionSort && (this.mainGrid.expressionHeaderInfo[this.mainGrid.bodyToHeaderRelation[this.id]] = !0)
									}; A.prototype.defaultOptions = { id: "", col_id: "", colIndex: "", colSpan: 0, rowSpan: 0, defaultValue: "", value: "", inputType: "text", useFilter: !1, blockSelect: !1, dataType: "", valueType: "binary", viewType: "", trueValue: null, falseValue: null, editType: "", applyFormat: "display", displayFormat: "", displayFormatter: "", chooseOptionLabel: "-선택-", chooseOptionValue: "", chooseOption: !1, allOption: !1, title: "", voidNull: !1, adjustMaxLength: !1, useMaxLength: !1, depthColumn: "", showDepth: 0, importExp: "", importFormatter: "", expression: "", colMerge: !1, colMergeEdit: !1, upperColumn: "", readOnly: "", imageWidth: "", imageHeight: "", imageClickFunction: "", imageSrc: "", imageSrcDisabled: "", imageSrcReadOnly: "", useImageClick: !1, alt: "", calendarValueType: "yearMonthDate", disabled: "", textAlign: "", exportFormatter: "", imeMode: "", selectSetter: "", ignoreStatus: !1, dateValidCheck: "", embeddedInput: "", groupName: "", escape: "false" !== s.v.getConfiguration("/WebSquare/escape/@value"), setRecursive: !1, showReadOnly: !1, customFormatter: "", escapeFormatter: "", depthType: "nbsp", moveFocusByChoice: "", directItemChoice: "", directOpen: !1, focusOutOnCheckHeaderClick: !0, usePartialCheck: !0, partialCheckNextClick: "", footerDiv: !1, displayRowIndex: !1, NaNFormat: "NaN", disabledClass: "", hiddenClass: "", displayMode: "0", delimiter: "\t", skipKeyMoveEditMode: !1, skipKeyMove: !1, checkboxLabel: "", checkboxLabelPosition: "right", checkboxLabelColumn: "", checkboxLabelFormatter: "", radioLabel: "", radioLabelPosition: "right", radioLabelColumn: "", radioLabelFormatter: "", checkAlways: !1, fixColumnWidth: !1, sortLabel: !1, useIOFormatLength: !1, tooltipDisplayItem: !1, itemTooltipDisplay: !1, itemTooltipFormatter: "", tooltipTime: 1, minWidth: 20, eventPriority: "onviewchange", customModelFormatter: "", customModelUnformatter: "", useMonthYearFormat: !1, editModeEventIcon: "", keepCellClass: !1, inputReadOnly: !1, keyMoveListSync: !1, tableRender: "", copyOption: "", invalidMessageFunc: "", dateValidSetCustom: !1, checkcomboboxUseDrag: !1, checkcomboboxUseEdit: !1, checkcomboboxRangeSeparator: "", checkcomboboxValidateOnInput: !1, checkcomboboxVisibleRowNum: 0, checkcomboboxVisibleColNum: 1, checkcomboboxVisibleColMax: 1, placeholder: "", refInitSync: !1, eventPropagation: !1, autoDecimalPoint: !1, noDisabledOnReadOnly: !1 }, A.prototype.setOptions = function(t) {
										var e = this.mainGrid.options.pluginName, i = t.getAttribute("calendarValueType") || this.options.calendarValueType, a = t.getAttribute("inputType") || "text"; this.configOptions = o.x.extend({}, s.v.getConfig(e + "/column[@inputType='" + a + "']")); var n = t.getAttribute("dataType") || "text"; this.configOptions2 = o.x.extend({}, s.v.getConfig(e + "/column[@dataType='" + n + "']")), "calendar" == a && "grid" == e ? this.configOptions.displayFormat = s.v.getConfiguration('/WebSquare/grid/column[@inputType="calendar"]/displayFormat[@valueType="' + i + '"]/@value') || s.v.getConfiguration('/WebSquare/grid/column[@inputType="calendar"]/displayFormat/@value') : "calendar" == a && "gridView" == e && (this.configOptions.displayFormat = s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="calendar"]/displayFormat[@valueType="' + i + '"]/@value') || s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="calendar"]/displayFormat/@value') || s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="calendar"]/displayFormat[@valueType="' + i + '"]/@defaultValue')),
											"textarea" === a && (this.configOptions.keepCellClass = s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="textarea"]/keepCellClass/@value')), this.options = o.x.extendKeepingType(o.x.extendKeepingType(this.options, this.configOptions2), this.configOptions); var l = []; for (var h in this.options) l[h.toLowerCase()] = h; var d = WebSquare.Parser.parseAttribute(t); for (var p in d) { var u = d[p]; "class" == p ? this.options.className = u : "" != String(u).wq_trim() && (l[p] && (p = l[p]), "boolean" == typeof this.options[p] ? u = r.D.getBoolean(u) : "number" == typeof this.options[p] && (u = r.D.getNumber(u)), this.options[p] = u) } if (!(n = this.options.dataType) && this.mainGrid.successBinding && (n = this.mainGrid._dataList.getColumnOption(this.options.col_id, "dataType")), "date" == n && !this.options.displayFormat) { if (this.options.displayFormatFunc) { var c = r.D.getGlobalFunction(this.options.displayFormatFunc, this.scope_id); "function" == typeof c && (this.options.displayFormat = c.call(this, this.options.calendarValueType)) } this.options.displayFormat || (this.options.displayFormat = s.v.getConfiguration("/WebSquare/" + e + "/dataType/date/@displayFormat")) } if ("date" == n && this.options.calendarDisplayFormatFunc && !this.options.calendarDisplayFormat) { var g = r.D.getGlobalFunction(this.options.calendarDisplayFormatFunc, this.scope_id); "function" == typeof g && (this.options.calendarDisplayFormat = g.call(this, this.options.calendarValueType)) } if ("time" != n || this.options.displayFormat || (this.options.displayFormat = "HH:mm"), this.mainGrid.options.senseReader && "false" !== this.options.embeddedInput) switch (this.options.inputType || "text") { case "secret": case "text": "none" == this.mainGrid.options.focusMode && "false" != this.options.readOnly && (this.options.readOnly = !0); case "select": case "checkbox": case "radio": case "calendar": this.options.embeddedInput = !0 } else this.options.embeddedInput = r.D.getBoolean(this.options.embeddedInput); if ("textarea" == this.options.inputType && (this.options.showReadOnly = !0), this.element = t, "expression" == this.options.inputType) { var f = this.options.expression; "" != f && (f = f.replace(/rowStatus[\s]*[(]/gi, "this.rowStatus(")).match("rowStatus") && this.mainGrid.rowStatusColIDArr.push(this.options.col_id) } this.options.editModeEventIcon || (this.options.editModeEventIcon = this.mainGrid.options.editModeEventIcon); !0 !== { onclick: !0, ondblclick: !0 }[this.options.editModeEventIcon] && (this.options.editModeEventIcon = "onclick"), this.options.copyOption || (this.options.copyOption = this.mainGrid.options.copyOption)
									}, A.prototype.setController = function() {
										switch (this.mainGrid.options.useTextMultiLink && "text" === this.options.inputType && this.options.customFormatter && (this.options.inputType = "user"), this.options.inputType) {
											case "text": o.x.extend(this, WebSquare.uiplugin.cellInfo.text.prototype); break; case "link": o.x.extend(this, WebSquare.uiplugin.cellInfo.link.prototype); break; case "checkbox": o.x.extend(this, WebSquare.uiplugin.cellInfo.checkbox.prototype); break; case "button": o.x.extend(this, WebSquare.uiplugin.cellInfo.button.prototype); break; case "image": o.x.extend(this, WebSquare.uiplugin.cellInfo.image.prototype); break; case "radio": o.x.extend(this, WebSquare.uiplugin.cellInfo.radio.prototype); break; case "select": o.x.extend(this, WebSquare.uiplugin.cellInfo.itemsetControl.prototype), o.x.extend(this, WebSquare.uiplugin.cellInfo.select.prototype); break; case "calendar": o.x.extend(this, WebSquare.uiplugin.cellInfo.calendar.prototype); break; case "textarea": o.x.extend(this, WebSquare.uiplugin.cellInfo.textarea.prototype); break; case "expression": o.x.extend(this, WebSquare.uiplugin.cellInfo.expression.prototype); break; case "drilldown": o.x.extend(this, WebSquare.uiplugin.cellInfo.text.prototype), o.x.extend(this, WebSquare.uiplugin.cellInfo.drilldown.prototype); break; case "textImage": o.x.extend(this, WebSquare.uiplugin.cellInfo.textImage.prototype); break; case "checkcombobox": o.x.extend(this, WebSquare.uiplugin.cellInfo.itemsetControl.prototype), o.x.extend(this, WebSquare.uiplugin.cellInfo.checkcombobox.prototype); break; case "autoComplete":
												o.x.extend(this, WebSquare.uiplugin.cellInfo.itemsetControl.prototype), o.x.extend(this, WebSquare.uiplugin.cellInfo.autoComplete.prototype); break; case "spinner": o.x.extend(this, WebSquare.uiplugin.cellInfo.spinner.prototype); break; case "custom": o.x.extend(this, WebSquare.uiplugin.cellInfo.custom.prototype); break; case "user": o.x.extend(this, WebSquare.uiplugin.cellInfo.user.prototype); break; default: o.x.extend(this, WebSquare.uiplugin.cellInfo.text.prototype)
										}
									}, A.prototype.setInnerHTML = function(t, e, i, o, s) { t.innerHTML = this.mainGrid.dataTagOpen + this.getDisplayData(e) + this.mainGrid.dataTagClose }, A.prototype.setEditMode = function(t, e) { this.mainGrid.editedCell = null, this.mainGrid.editMode = !1 }, A.prototype.initFormatter = function(t) {
										try {
											var e = this.options.dataType; if (!e && this.mainGrid.successBinding && (e = this.mainGrid._dataList.getColumnOption(this.options.col_id, "dataType")), !e && this.options.expression) { var i = this.options.expression; (i = (i = (i = (i = (i = (i = (i = (i = i.replace(/[sS][uU][mM][\s]*[(]/g, "NUMBER(")).replace(/[aA][vV][gG][\s]*[(]/g, "NUMBER(")).replace(/[mM][aA][xX][\s]*[(]/g, "NUMBER(")).replace(/[mM][iI][nN][\s]*[(]/g, "NUMBER(")).replace(/rowStatus[\s]*[(]/gi, "NUMBER(")).replace(/[cC][aA][lL][cC][\s]*[(]/g, "STRING(")).replace(/[dD][iI][sS][pP][lL][aA][yY][\s]*[(]/g, "STRING(")).replace(/[dD][aA][tT][aA][lL][iI][sS][tT][\s]*[(]/g, "STRING(")).indexOf("NUMBER(") > -1 ? e = "number" : i.indexOf("STRING(") > -1 && (e = "text") } var o = e, r = this.mainGrid._isNumberType(e); r && "\t" === this.options.delimiter && (this.options.delimiter = ""); var n, l, h = this.options.displayFormat; if ("text" == this.options.inputType && !h) if (r) "euro" == e ? (h || (h = this.mainGrid.options.euroMask || s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + e + '"]/euroMask/@value') || ""), n = ".", l = ",") : "rupee" == e ? (h || (h = this.mainGrid.options.rupeeMask || s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + e + '"]/rupeeMask/@value') || ""), n = ",", l = ".") : "tenge" == e ? (h || (h = this.mainGrid.options.tengeMask || s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + e + '"]/tengeMask/@value') || ""), n = " ", l = ",") : "number" != e && "float" != e && "bigDecimal" != e || (h || (h = this.mainGrid.options.numberMask || s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + e + '"]/numberMask/@value') || ""), n = ",", l = "."), this.options.displayFormat = h, this.options.delimiter || (this.options.delimiter = n), this.options.decimalDelimiter || (this.options.decimalDelimiter = l), this.options.customModelFormatter || (this.options.customModelFormatter = s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + e + '"]/customModelFormatter/@value') || ""), this.options.customModelUnformatter || (this.options.customModelUnformatter = s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="text"]/dataType[@valueType="' + e + '"]/customModelUnformatter/@value') || ""); "date" != o || "calendar" != this.options.inputType || this.options.ioFormat || (this.options.ioFormat = s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="calendar"]/ioFormat[@valueType="' + this.options.calendarValueType + '"]/@defaultValue'), this.options.ioFormat || ("yearMonthDate" == this.options.calendarValueType ? this.options.ioFormat = "yyyyMMdd" : "yearMonth" == this.options.calendarValueType ? this.options.ioFormat = "yyyyMM" : "yearMonthDateTime" == this.options.calendarValueType ? this.options.ioFormat = "yyyyMMddHHmm" : "yearMonthDateTimeSec" == this.options.calendarValueType && (this.options.ioFormat = "yyyyMMddHHmmSS"))),
												"default" == this.options.maskFormat ? "number" == this.options.dataType || "bigDecimal" == this.options.dataType ? this.formatter = WebSquare.format.createFormatter("numberMask", this.options.displayFormat, this.options.displayFormatter, this.options.ioFormat, this.options.delimiter, this.options.decimalDelimiter, this.scope_id, this.id) : (this.formatter = WebSquare.format.createFormatter("textMask", this.options.displayFormat, this.options.displayFormatter, this.options.ioFormat, this.options.delimiter, this.options.decimalDelimiter, this.scope_id, this.id), this.formatter.setAllowChar(this.options.allowChar)) : "reverse" == this.options.maskFormat ? "number" == this.options.dataType || "bigDecimal" == this.options.dataType ? this.formatter = WebSquare.format.createFormatter("reverseNumberMask", this.options.displayFormat, this.options.displayFormatter, this.options.ioFormat, this.options.delimiter, this.options.decimalDelimiter, this.scope_id, this.id) : (this.formatter = WebSquare.format.createFormatter("reverseTextMask", this.options.displayFormat, this.options.displayFormatter, this.options.ioFormat, this.options.delimiter, this.options.decimalDelimiter, this.scope_id, this.id), this.formatter.setAllowChar(this.options.allowChar)) : this.formatter = "float" === o || "bigDecimal" === o ? WebSquare.format.createFormatter(o, this.options.displayFormat, this.options.displayFormatter, this.options.ioFormat, this.options.delimiter, this.options.decimalDelimiter, this.mainGrid.scope_id, this.mainGrid.id) : WebSquare.format.createFormatter(o, this.options.displayFormat, this.options.displayFormatter, this.options.ioFormat, null, null, this.mainGrid.scope_id, this.mainGrid.id), this.emptyFormatter = WebSquare.format.createFormatter(o, "", null, null, null, null, this.mainGrid.scope_id, this.mainGrid.id)
										} catch (t) { a.w.printStackTrace(t) }
									}, A.prototype.getDisplayData = function(t) { return this.formatter && (t = this.formatter.format(t)), "secret" == this.options.inputType && (t = t.replace(/./gi, "●")), t }, A.prototype.initializeCellInfo = function() { }, A.prototype.handleEndEdit = function(t, e, i) { try { if (t = t || {}, i = i || {}, this.options.embeddedInput) return !0; if (this.mainGrid.rollbackCommitFlag = !1, this.mainGrid.editedCell && 0 == this.mainGrid.editMode && (this.mainGrid.editMode = !0), this.mainGrid.editMode) { var o = this.mainGrid.editedCell; if (o._getEditedValue) { var r = this.mainGrid.getColumnIndex(this.mainGrid.editedCell.id), n = this.editRowIndex, l = this.mainGrid._getGroupbyDisplayRowIndex(n), h = o._getEditedValue(); if ((p = d.B.fireEvent(this.mainGrid, "oneditend", l, r, h, t)) + "" == "false") return this.mainGrid.getInput(this).focus(), d.B.stopEvent(t), !1 } if (!o.validate()) return d.B.stopEvent(t), !1; if (this.mainGrid.editedCell = null, this.mainGrid.editMode = !1, !i.otherClick) { c = null; null != this.editTd && (c = this.mainGrid.dataList.getCellData(this.editRowIndex, o.options.id), this._handleEndEdit(t, e, i)); var p = this._afterEndEdit(o, c); return o = null, p } var u = null, c = null; null != this.editTd && (c = this.mainGrid.dataList.getCellData(this.editRowIndex, o.options.id), u = this._handleEndEdit(t, e, i)), s.v.setTimer((function(t, e) { null != this.editTd && this._handleEndEdit_focus(e), this._afterEndEdit(t, c), t = null, e = null }), { key: this.id + "_handleClickEventDocument", caller: this, args: [o, u] }), u = null, o = null } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.prototype._afterEndEdit = function(t, e) {
										var i, o = this.mainGrid.dataList._getCellData(this.editRowIndex, t.options.id), s = this.editRowIndex, a = t.options.id, n = s, l = this.mainGrid.getColumnIndex(a); if (this.editTd) { var h = r.D.getDataPrefix("colMerged"); i = this.editTd.getAttribute(h) } if ("0" == i && !t.options.colMergeEdit && !this.mainGrid.groupbyStatus.grouped) {
											var p = function(t, i, o, s) {
												for (var a = t; t + 1 < this.mainGrid.getDataLength();) {
													t += 1; var r = this.mainGrid.upperGroupingTest(t, i), n = this.mainGrid.dataList._getCellData(t, i); if (!r) { l = this.mainGrid.tdIdList.length; (h = this.mainGrid.data_td_list[(t - this.mainGrid.rowIndex) * l + o]) && this.setInnerHTML(h, n, t, this.id); break } if (n != e) {
														var l = this.mainGrid.tdIdList.length; (h = this.mainGrid.data_td_list[(t - this.mainGrid.rowIndex) * l + o]) && this.setInnerHTML(h, n, t, this.id)
															; break
													} this.mainGrid.dataList.__setCellData(t, i, s)
												} for (t = a; t - 1 >= 0;) { r = this.mainGrid.upperGroupingTest(t, i); t -= 1; n = this.mainGrid.dataList._getCellData(t, i); if (!r) { l = this.mainGrid.tdIdList.length; (h = this.mainGrid.data_td_list[(t - this.mainGrid.rowIndex) * l + o]) && this.setInnerHTML(h, n, t, this.id); break } if (n != e) { var h, l = this.mainGrid.tdIdList.length; (h = this.mainGrid.data_td_list[(t - this.mainGrid.rowIndex) * l + o]) && this.setInnerHTML(h, n, t, this.id); break } this.mainGrid.dataList.__setCellData(t, i, s) } i = this.mainGrid.getColumnIndex(i); this.mainGrid.applyColumnStyleOptions(i)
											}; p.call(this, s, a, l, o); var u = this.mainGrid.upperToLowerColumnRelation[a]; if (u) for (var c = 0; c < u.length; c++) { var g = u[c], f = this.mainGrid.dataList._getCellData(s, g), m = this.mainGrid.getColumnIndex(g), y = this.mainGrid.getCellInfo(g); p.call(y, s, g, m, f) }
										} t.options.colMergeEdit && !this.mainGrid.groupbyStatus.grouped && this.mainGrid.setColMergeCellData(n - this.mainGrid.rowIndex, n, l); var b = this.mainGrid.dataList._getCellData(n, l), w = n + "_" + l; if (null != this.mainGrid.cellMergeInfo[w]) { var v = this.mainGrid.cellMergeInfo[w].rowSpan, C = this.mainGrid.cellMergeInfo[w].colSpan; for (c = 0; c < v; c++)for (var I = 0; I < C; I++)0 === c && 0 === I || this.mainGrid.dataList.__setCellData(n + c, l + I, b) } Math.abs(this.changedCellHeight) > 3 && this.mainGrid.notifyRowChanged(n); var _ = this.mainGrid._getGroupbyDisplayRowIndex(n), x = d.B.fireEvent(this.mainGrid, "onafteredit", _, l, b, this.mainGrid.lastEvent); return this.mainGrid.lastEvent = null, x = 0 != x, this.mainGrid.rollbackCommitFlag = !0, x
									}, A.prototype.handleScrollY = function(t) { return this.validate() ? this.handleEndEdit(t) : this.handleCancelEdit(t) }, A.prototype.validate = function() { return !0 }, A.prototype._handleEndEdit = function(t, e, i) { var o = this._handleEndEdit_common(t); if ((i = i || {}).otherClick) return o; this._handleEndEdit_focus(o, e, i.focuseChanged) }, A.prototype._handleEndEdit_common = function(t, e) { return null }, A.prototype._handleEndEdit_focus = function(t) { return null }, A.prototype.handleCancelEdit = function(t) { this.options.embeddedInput || (this.mainGrid.editedCell = null, this.mainGrid.editMode = !1, this._handleCancelEdit(t)) }, A.prototype._handleCancelEdit = function(t) { }, A.prototype.removeCellData = function(t, e) { }, A.prototype.doDefaultAction = function(t) { }, A.prototype.setMergedCol = function(t, e, i, o) { var s = t, a = new Array; for (a[t] = !0; t < this.mainGrid.getDataLength();) { if (t += 1, !(r = this.mainGrid.upperGroupingTest(t, e))) break; if (this.mainGrid.dataList._getCellData(t, e) != i) break; this.mainGrid.dataList.__setCellData(t, e, o), a[t] = !0 } for (t = s; t > 0;) { var r = this.mainGrid.upperGroupingTest(t, e); if (t -= 1, !r) break; if (this.mainGrid.dataList._getCellData(t, e) != i) break; this.mainGrid.dataList.__setCellData(t, e, o), a[t] = !0 } e = this.mainGrid.getColumnIndex(e); return this.mainGrid.applyColumnStyleOptions(e), a }, A.prototype.getEscape = function() { return "" != this.options.escape ? this.options.escape : this.mainGrid.options.escape }, A.prototype.getColumnIndex = function(t) { return t || (t = this.colID), this.mainGrid.getColumnIndex(t) }, A.prototype.setMaxLength = function(t) { try { this.options.maxlength = this.options.maxLength = t, this.mainGrid.getInput(this).setMaxLength(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.prototype.setFloatMaxLength = function(t) { try { this.options.maxlength = this.options.maxLength = "-1", this.mainGrid.getInput(this).setFloatMaxLength(t) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.prototype.refreshCell = function() { }, A.prototype._checkFastScroll = function(t, e, i, o) { try { var s = "string" != typeof t || !1 === this.mainGrid._regDetectDOM.test(t); return e && null != e.textContent && this.mainGrid.hasClass(e, i) && s && !0 === o } catch (t) { a.w.printStackTrace(t, null, this) } }, A.itemsetControl = function() { }, A.itemsetControl.prototype.initializeCellInfo = function(t) {
										try {
											if (this.internal && this.initializeInfo ? this.compID = this.mainGridId + "_" + this.options.inputType + "_" + this.initializeInfo.rowIndex + "_" + this.colID + "_" + this.id : this.compID = this.mainGridId + "_" + this.options.inputType + "_" + this.colID, "select" === this.options.inputType && "" != this.options.selectSetter) this.selectSetted = !1,
												this.resetMatchInfo = !0; else { var e, i = ""; if ("json" === t._elementType) t._element.N = "w2:" + this.options.inputType, this.xml = t; else { var s = (i = r.D.isIE("6 7") && this.internal && t._element.outerHTML ? WebSquare.xml.nodeWellFormed(t._element.outerHTML) : WebSquare.xml.serialize(t._element)).indexOf("xmlns:w2") < 0 ? ' xmlns:w2="http://www.inswave.com/websquare"' : "", n = this.options.inputType; i = (i = i.wq_replaceAll("<w2:column", "<w2:" + n + s)).wq_replaceAll("</w2:column", "</w2:" + n); var l = WebSquare.xml.parse(i, !0); this.xml = new WebSquare.Elem(l.documentElement) } o.x.extend(this, k.E.prototype), this.hasRef = !1, "checkcombobox" !== this.options.inputType && (this.selectedIndex = void 0 === this.options.selectedIndex ? -1 : parseInt(this.options.selectedIndex, 10)), this.options.selectedData = "false" != this.options.selectedData && !1 !== this.options.selectedData, "select" === this.options.inputType ? e = "SelectBox" : "autoComplete" === this.options.inputType ? e = "AutoComplete" : "checkcombobox" === this.options.inputType && (e = "CheckCombobox"), e && (this.options.chooseOptionLabel = "-선택-" === this.options.chooseOptionLabel ? WebSquare.language.getMessage(e + "_choose") : this.options.chooseOptionLabel), this.internal ? this.itemsetObj = this.initializeInfo.itemSet ? this.initializeInfo.itemSet : { nodeset: "", label: "", value: "" } : this.itemsetObj = WebSquare.WebSquareparser.parseItemset(this.xml), this.resetMatchInfo = !0; var h = this.itemsetObj.nodeset.wq_replaceAll(" ", ""); if (this.internal && "gridViewItemset" == this.options.itemTableType ? this.existGridViewItemsetNode = !0 : this.existGridViewItemsetNode = WebSquare.Elem.api.getElementsByTagName(this.xml, "w2:gridViewItemset")[0], "" != this.itemsetObj.nodeset && h.indexOf("ref(") >= 0) { this.hasRef = !0; var d = this.itemsetObj.nodeset; this.refStr = '"' + this.refReplace(d) + '"'; for (var p = d.match(/ref\('([^']*)'\)/g), u = 0; u < p.length; u++) { var c = p[u].slice(5, -2), g = this.mainGrid.getCellInfo(c); g.refArr || (g.refArr = []), g.refArr.push(this.colID) } if (this.refHash = [], this.refItemArr = [], "select" === this.options.inputType && this.options.embeddedInput) WebSquare.Elem.api.getElementsByTagName(this.xml, "w2:itemset")[0].setAttribute("nodeset", "") } else if ("" != this.itemsetObj.nodeset && h.indexOf("data:") >= 0) { var f = this.itemsetObj.nodeset.replace("data:", "").split("."); this.dataComp = f[0] } else this.matchInfo = this.setMatchInfo() } this.refArr || (this.refArr = []), this._initializeCellInfo()
										} catch (t) { a.w.printStackTrace(t, null, this) }
									}, A.itemsetControl.prototype.getItemText = function(t) { try { var e = ""; if (t > -1 && t < this.itemArr.length) { switch (e = this.itemArr[t].label, this.options.displayMode) { case "0": case "1": case "2": case "3": break; case "value delim label": this.options.displayMode = "1"; break; case "label delim value": this.options.displayMode = "2"; break; case "value": this.options.displayMode = "3"; break; default: this.options.displayMode = "0" }switch (this.options.displayMode) { case "0": break; case "1": e = this.itemArr[t].value + this.options.delimiter + e; break; case "2": e = e + this.options.delimiter + this.itemArr[t].value; break; case "3": e = this.itemArr[t].value } } return e } catch (t) { a.w.printStackTrace(t, null, this) } }, A.itemsetControl.prototype.setColumnNodeSet = function(t, e, i, o) {
										try {
											if (this.internal) this.itemsetObj.nodeset = t, this.itemsetObj.label = e, this.itemsetObj.value = i; else {
												if ("json" === this.xml._elementType) { var r = []; r.push({ N: "w2:label", T: 1, A: { ref: e } }), r.push({ N: "w2:value", T: 1, A: { ref: i } }); var n = WebSquare.Elem.api.getElementsByTagName(this.xml, "itemset", s.v._XML_NAMESPACE.W2)[0]; n ? (n._element.A.nodeset = t, n._element.E = r) : this.xml._element.E = [{ T: 1, N: "w2:choices", E: [{ T: 1, N: "w2:itemset", A: { nodeset: t }, E: r }] }] } else {
													var l = WebSquare.xml.findNode(this.xml, "*['choices'=local-name()]['" + s.v._XML_NAMESPACE.W2 + "'=namespace-uri()]"); for (null == l && (l = WebSquare.xml.createNode(this.xml, "w2:choices"), WebSquare.xml.appendChild(this.xml, l)); l && l.firstChild;)l.removeChild(l.firstChild); var h = "<w2:itemset xmlns:w2='http://www.inswave.com/websquare' nodeset='" + t + "'><w2:label ref='" + e + "'></w2:label><w2:value ref='" + i + "'></w2:value></w2:itemset>", d = WebSquare.xml.parse(h, !0).documentElement
														; WebSquare.xml.appendChild(l, d)
												} this.itemArr = [], this.initializeCellInfo(this.xml)
											} var p = this.options.inputType; if (1 == this.options.embeddedInput) { var u = this.mainGrid.tdIdList.length, c = this.mainGrid.getColumnIndex(this.options.id); if (isNaN(o)) for (var g = this.mainGrid.getRowCount(), f = this.mainGrid.rowIndex; f < g; f++) { (m = this.mainGrid.data_td_list[(f - this.mainGrid.rowIndex) * u + c]) && this.mainGrid.getInput(this, m).setNodeSet(t, e, i) } else { var m, y = o - this.mainGrid.rowIndex; if (y >= 0) (m = this.mainGrid.data_td_list[y * u + c]) && this.mainGrid.getInput(this, m).setNodeSet(t, e, i) } } else this[p] && this[p].setNodeSet(t, e, i); t.indexOf("data:") >= 0 && (this.dataComp = t.slice("data:".length))
										} catch (t) { a.w.printStackTrace(t, null, this) }
									}, A.itemsetControl.prototype.setColumnGridItemset = function(t) { try { if ("select" !== this.options.inputType && "autoComplete" !== this.options.inputType) return; var e = t.nodeset, i = t.label, o = t.value; if (this.internal) this.itemsetObj.nodeset = e, this.itemsetObj.label = i, this.itemsetObj.value = o; else { if ("json" === this.xml._elementType) { var r = [], n = {}; for (var l in t) "object" != typeof t[l] && "function" != typeof t[l] && null != t[l] && (n[l] = t[l]); for (var h = 0; h < t.item.length; h++)r.push({ N: "w2:item", T: 1, A: t.item[h] }); var d = WebSquare.Elem.api.getElementsByTagName(this.xml, "gridViewItemset", s.v._XML_NAMESPACE.W2)[0]; if (d) { for (var l in n) d._element.A[l] = n[l]; d._element.E = r } else this.xml._element.E = [{ T: 1, N: "w2:choices", E: [{ T: 1, N: "w2:gridViewItemset", A: n, E: r }] }] } else { var p = WebSquare.Elem.api.getElementsByTagName(this.xml, "choices", s.v._XML_NAMESPACE.W2); for (null == p && (p = WebSquare.xml.createNode(this.xml, "w2:choices"), WebSquare.xml.appendChild(this.xml, p)); p && p.firstChild;)p.removeChild(p.firstChild); if (s.v.isXML(t)) WebSquare.xml.appendChild(p, t); else { var u = "<w2:gridViewItemset xmlns:w2='http://www.inswave.com/websquare' nodeset='" + e + "'></w2:gridViewItemset>", c = WebSquare.xml.parse(u, !0), g = c.documentElement; for (var f in t) if ("item" === f) for (h = 0; h < t.item.length; h++) { var m = WebSquare.xml.createElement(c, "w2:item"), y = t.item[h]; for (var b in y) m.setAttribute(b, y[b]); WebSquare.xml.appendChild(g, m) } else "nodeset" !== f && g.setAttribute(f, t[f]); WebSquare.xml.appendChild(p, g) } } this.initializeCellInfo(this.xml) } if ("select" === this.options.inputType && 1 == this.options.embeddedInput) { var w = this.mainGrid.tdIdList.length, v = this.mainGrid.getColumnIndex(this.options.id), C = this.mainGrid.getRowCount(); for (h = 0; h < C; h++)this.mainGrid.getInput(this, this.mainGrid.data_td_list[h * w + v]).setGridItemset(t) } this[this.options.inputType] && this[this.options.inputType].setGridItemset(t), e.indexOf("data:") >= 0 && (this.dataComp = e.slice("data:".length)) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.itemsetControl.prototype.getColumnDataListInfo = function() { try { if (this[this.options.inputType]) return this[this.options.inputType].getDataListInfo(); var t = WebSquare.Elem.api.getElementsByTagName(this.xml, "choices", s.v._XML_NAMESPACE.W2)[0]; if (t) { var e = WebSquare.WebSquareparser.parseItemset(t), i = {}; return e && "" !== e.nodeset ? (e.nodeset.match("data:") ? (i.nodeset = e.nodeset.slice(0), i.id = i.nodeset.wq_replaceAll("data:", ""), i.value = e.value, i.label = e.label) : (i.nodeset = e.nodeset.slice(0), i.value = e.value, i.label = e.label), i) : null } return null } catch (t) { a.w.printStackTrace(t, null, this) } }, A.itemsetControl.prototype.getDisplayData = function(t, e, i) { var o = this.getData(t, e, i); return null == o && (o = ""), i && i.emptyValue && o === i.emptyValue ? o = "" : o != t && "" == o && (o = t), o }, A.itemsetControl.prototype.setMatchInfo = function(t) {
										if (this.modelControl = new WebSquare.modelControl(this.colID, this.options.model, this.options.ref, this.options.bind, this.options._scope_obj_uuid), this.existGridViewItemsetNode ? this.initializeGridViewItemArr(this.xml) : this.initializeItemArr(this.xml), 0 == this.itemArr.length ? this.resetMatchInfo = !0 : this.resetMatchInfo = !1, "0" != this.options.displayMode) for (var e = 0; e < this.itemArr.length; e++)this.itemArr[e].label = this.getItemText(e); var i = {}; if (1 == this.options.allOption) {
											var o = WebSquare.language.getMessage("Grid_all") || "-전체-"; this.itemArr = [{
												label: o,
												value: WebSquare.allValue
											}].concat(this.itemArr)
										} if (1 == this.options.chooseOption && "checkcombobox" !== this.options.inputType) { var s = this.options.chooseOptionLabel; "$blank" == s && (s = ""), this.itemArr = [{ label: s, value: this.options.chooseOptionValue }].concat(this.itemArr) } this.hasRef && (this.refItemArr[this.itemsetObj.nodeset] = this.itemArr); var a = this.options.inputType.toUpperCase(); for (e = 0; e < this.itemArr.length; e++) { var r = this.itemArr[e]; i[a + "_" + r.value] = r.label } return i
									}, A.itemsetControl.prototype.getMatchInfo = function(t) { var e = []; return "select" === this.options.inputType && "" != this.options.selectSetter ? e = this.matchInfo : this.hasRef ? e = this.getRefMatchInfo(t) : this.hasRef || (this.resetMatchInfo && (this.matchInfo = this.setMatchInfo(t)), e = this.matchInfo), e }, A.itemsetControl.prototype.getRefMatchInfo = function(t) { this.targetRowIndex = t; var e = new Function("_this", "return " + this.refStr)(this); if (null == this.refHash[e] || this.resetMatchInfo) { this.itemsetObj.nodeset = e, WebSquare.Elem.api.getElementsByTagName(this.xml, "w2:itemset")[0].setAttribute("nodeset", e); var i = this.setMatchInfo(t); return this.refHash[e] = i, i } return this.refHash[e] }, A.itemsetControl.prototype.getRefItemArr = function(t) { this.getRefMatchInfo(t); var e = new Function("_this", "return " + this.refStr)(this); return this.refItemArr[e] }, A.itemsetControl.prototype.getRefValue = function(t) { return '"' + this.mainGrid.dataList._getCellData(this.targetRowIndex, t) + '"' }, A.itemsetControl.prototype.refReplace = function(t) { try { var e = t.replace(/ref\('([^']*)'\)/, "\"+_this.getRefValue('$1')+\""); return e != t ? this.refReplace(e) : e } catch (t) { a.w.printStackTrace(t, null, this) } }, A.itemsetControl.prototype.refXmlReplace = function(t) { try { var e = t.replace(/ref\('([^']*)'\)/, "'+_this.getRefValue('$1')+'"); return e != t ? this.refXmlReplace(e) : e } catch (t) { a.w.printStackTrace(t, null, this) } }, A.text = function() { }, A.text.prototype.setInnerHTML = function(t, e, i, o, n) {
										var l = this.mainGrid._getGroupbyDisplayRowIndex(i); if (!this.options.embeddedInput || this.mainGrid._getEditDisabled(i, o) || this.mainGrid.___getEditReadOnly(i, o)) {
											if (this.mainGrid.options.titleFormatter) try { var h; if ("function" != typeof this.mainGrid.options.titleFormatter) { var d = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof d && (this.mainGrid.options.titleFormatter = d, h = d.call(this, i, o, e)) } else h = this.mainGrid.options.titleFormatter.call(this, i, o, e); t.setAttribute("title", h) } catch (t) { a.w.printStackTrace(t, null, this) } else if (this.options.title) t.setAttribute("title", this.options.title); else if (this.mainGrid.options.titleAuto) { var p = this.mainGrid.getHeaderValue(this.mainGrid.bodyToHeaderRelation[this.id]) || ""; "" !== e ? t.setAttribute("title", p + " " + e) : t.setAttribute("title", p + WebSquare.language.getMessage("Grid_text")) } var u = null; if (this.options.escapeFormatter) try { "function" == typeof this.options.escapeFormatter ? u = this.options.escapeFormatter : "function" == typeof (u = r.D.getGlobalFunction(this.options.escapeFormatter, this.scope_id)) && (this.options.escapeFormatter = u) } catch (t) { u = null } B = null; if (this.options.customFormatter) try { "function" == typeof this.options.customFormatter ? B = this.options.customFormatter : "function" == typeof (B = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id)) && (this.options.customFormatter = B) } catch (t) { B = null } var c = null; if (this.options.customModelUnformatter) try { "function" == typeof this.options.customModelUnformatter ? c = this.options.customModelUnformatter : "function" == typeof (c = r.D.getGlobalFunction(this.options.customModelUnformatter, this.scope_id)) && (this.options.customModelUnformatter = c) } catch (t) { c = null } var g = e; c && this.options.customModelUnformatter ? (this.useCustomModelFormatter = !0, g = c.call(this.mainGrid, e, l, o)) : this.useCustomModelFormatter = !1, this.options.maskFormat && (g = this.mainGrid.getInput(this, t, e).maskFormatModelUnFormat(g)), "function" == typeof u ? (this.useEscapeFormatter = !0, g = u.call(this.mainGrid, e, l, o)) : this.useEscapeFormatter = !1; var f = "" !== this.options.escape ? this.options.escape : this.mainGrid.options.escape
												; (f = r.D.getBoolean(f)) && (g = this.useCustomModelFormatter ? WebSquare.xml._encode(g + "") : WebSquare.xml._encode(e + "")); G = g; if (this.options.editFormat && this.options.editFormat.length > 0) { var m = this.options.editFormat.split("||").sort((function(t, e) { return t.replace(/[^a-z^A-Z^0-9]/g, "").length - e.replace(/[^a-z^A-Z^0-9]/g, "").length })); G = WebSquare.text.dynamicMask(G, m, { "#": { pattern: /\d/ }, X: { pattern: /[0-9a-zA-Z]/ }, S: { pattern: /[a-zA-Z]/ }, "!": { escape: !0 } }).value } H = this.options.displayFormat || this.options.displayFormatter || this.options.ioFormat; if (this.formatter && H && (G = this.formatter.format(g)), "secret" == this.options.inputType && (G = G.replace(/./gi, "●")), "function" == typeof B ? (this.useCustomFormatter = !0, W = B.call(this.mainGrid, e, G, l, o)) : (this.useCustomFormatter = !1, W = G), this.mainGrid.options.plainText && !1 === this.useCustomFormatter && !this.options.displayFormatter && t.firstChild && t.firstChild.firstChild) t.firstChild.firstChild.data = W; else { var y = this.mainGrid.___getEditReadOnly(i, o), b = this.mainGrid._getEditDisabled(i, o), w = "", v = []; v.push("w2grid_input"), this.mainGrid.options.checkEditableInputClass && (y || b) && (v = []), "secret" == this.options.inputType && s.v.browserCheck.ieAllVersion && v.push("w2grid_secret"), y && v.push("w2grid_input_readonly"), b && v.push("w2grid_input_disabled"); var C = t.firstChild, I = this._checkFastScroll(W, C, "w2grid_input", n && !0 === n.scroll); if (C && (!b && C.className.indexOf("w2grid_input_disabled") > -1 || b && -1 === C.className.indexOf("w2grid_input_disabled") || !y && C.className.indexOf("w2grid_input_readonly") > -1 || y && -1 === C.className.indexOf("w2grid_input_readonly")) && (I = !1), I && f) { var _ = "string" == typeof W ? WebSquare.xml.__decode(W) : W; C.textContent = _ } else { "span" == this.mainGrid.options.dataTag && v.push("w2grid_span"), w = " class='", w += v.join(" "), w += "'"; var x = !1, S = t.firstChild; f && S && ("NOBR" === S.tagName || "SPAN" === S.tagName && S.className.indexOf("w2grid_span") > -1) && " class='" + S.getAttribute("class") + "'" === w && 1 === S.attributes.length && (x = !0), x ? t.firstChild.innerHTML = W : t.innerHTML = "<" + this.mainGrid.options.dataTag + " " + w + ">" + W + this.mainGrid.dataTagClose } this.mainGrid.hasClass(t, "w2grid_input_table") || (t.className = "w2grid_input_table " + t.className) }
										} else {
											var D = this.mainGrid.getInput(this, t, e); null == D.render.parentNode && (t.innerHTML = "", t.appendChild(D.render)), D.blur(); var R = r.D.getDataPrefix("rowindex"); D.render.setAttribute(R, i); var L = !1; if (this.mainGrid.options.autoResizeEmbeddedInput) { var T = !1; this.mainGrid.__bResizeObj && (T = this.mainGrid.__bResizeObj.width !== this.mainGrid.resizeObj.width || this.mainGrid.__bResizeObj.height !== this.mainGrid.resizeObj.height), this.mainGrid.__bResizeObj = { width: this.mainGrid.resizeObj.width, height: this.mainGrid.resizeObj.height }, L = !0 !== D._autoResizeEmbeddedInput && !1 === T } if (!0 === L) {
												var k = 0, A = 0, F = !1; "none" == t.parentNode.style.display && (t.parentNode.style.display = "", F = !0), null == D.render.parentNode && (t.innerHTML = "", t.appendChild(D.render)), this.mainGrid.embeddedStyleObj || (this.mainGrid.embeddedStyleObj = { top: parseInt(WebSquare.style.getStyle(t, "padding-top"), 10), bottom: parseInt(WebSquare.style.getStyle(t, "padding-bottom"), 10), left: parseInt(WebSquare.style.getStyle(t, "padding-left"), 10), right: parseInt(WebSquare.style.getStyle(t, "padding-right"), 10), inputTop: parseInt(WebSquare.style.getStyle(D.render, "padding-top"), 10), inputBottom: parseInt(WebSquare.style.getStyle(D.render, "padding-bottom"), 10), inputLeft: parseInt(WebSquare.style.getStyle(D.render, "padding-left"), 10), inputRight: parseInt(WebSquare.style.getStyle(D.render, "padding-right"), 10) }); var E = parseInt(WebSquare.style.getStyle(D.render, "border-top-width"), 10), M = parseInt(WebSquare.style.getStyle(D.render, "border-bottom-width"), 10), O = parseInt(WebSquare.style.getStyle(D.render, "border-left-width"), 10), N = parseInt(WebSquare.style.getStyle(D.render, "border-right-width"), 10); k = t.offsetHeight - parseInt(WebSquare.style.getStyle(t, "border-top-width"), 10) - parseInt(WebSquare.style.getStyle(t, "border-bottom-width"), 10), k -= this.mainGrid.embeddedStyleObj.top + this.mainGrid.embeddedStyleObj.bottom, k -= E + M,
													this.mainGrid.embeddedWidthObj[o] && !this.mainGrid.embeddedWidthObj[o].isChanged || (this.mainGrid.embeddedWidthObj[o] = { isChanged: !1, width: t.clientWidth }), A = this.mainGrid.embeddedWidthObj[o].width, A -= this.mainGrid.embeddedStyleObj.left + this.mainGrid.embeddedStyleObj.right, A -= O + N, A -= this.mainGrid.embeddedStyleObj.inputLeft + this.mainGrid.embeddedStyleObj.inputRight, F ? t.parentNode.style.display = "none" : (r.D.isIE("6 7") || r.D.isSpartan()) && (k -= 2), r.D.isOpera() && (k += 2), D.setSize(A - 2, k - (this.mainGrid.embeddedStyleObj.inputTop + this.mainGrid.embeddedStyleObj.inputBottom)), D.setStyle("lineHeight", k + "px"), D._autoResizeEmbeddedInput = !0
											} else null == D.render.parentNode && (t.innerHTML = "", t.appendChild(D.render)); "all" == this.options.applyFormat || this.options.displayFormat || this.options.displayFormatter || (e = this.getDisplayData(e)); var B = null; if (this.options.customFormatter) try { "function" == typeof this.options.customFormatter ? B = this.options.customFormatter : "function" == typeof (B = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id)) && (this.options.customFormatter = B) } catch (t) { B = null } var G = e, H = this.options.displayFormat || this.options.displayFormatter || this.options.ioFormat; if (this.formatter && H && (G = this.formatter.format(G)), D.setValue(e), "function" == typeof B) { this.useCustomFormatter = !0; var W = B.call(this.mainGrid, e, G, l, o); D.render.value = W } this.options.textAlign ? D.setStyle("text-align", this.options.textAlign) : D.setStyle("text-align", ""), t.removeAttribute("tabIndex"), t.removeAttribute("title")
										}
									}, A.text.prototype.setEditMode = function(t, e) { try { if (this.options.embeddedInput) return; this.editRowIndex = e, this.editTd = t, this.internal && (this.parentColumnInfo.editRowIndex = e, this.parentColumnInfo.editTd = t), this.setPosition(); var i = this.mainGrid.getInput(this); this.comp = i, this.options.maskFormat || (i.formatter = "all" == this.options.applyFormat ? this.formatter : this.emptyFormatter, i.options.applyFormat = this.options.applyFormat); var o = this.mainGrid.dataList._getCellData(e, this.colID); if ("all" === this.options.applyFormat && this.options.displayFormat && "text" != this.options.dataType && "date" != this.options.dataType && "time" != this.options.dataType) { var s = this.options.decimalDelimeter || ".", n = (o + "").split(s); n[1] && 0 == parseInt(n[1]) && (o = n[0]) } i.setValue(o), document.activeElement != i.render && i.focus(), "native" !== this.mainGrid.options.drawType && (this.mainGrid.render.scrollLeft = 0, this.mainGrid.render.scrollTop = 0), "select" == i.options.editType ? i.select() : "focus" == i.options.editType && (r.D.isIEAllVersion() || r.D.isFF() || r.D.isSpartan()) && WebSquare.text.setCaretPos(i.render, i.render.value.length) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.text.prototype.setPosition = function() {
										var t = { top: 0, left: 0, width: 0, height: 0 }; if (r.D.isFF() ? t = { top: -1, left: 0, width: 0, height: 0 } : r.D.isOpera() ? t = { top: 0, left: 0, width: 0, height: 1 } : r.D.isIEAllVersion("9 10 11") ? t = { top: -1, left: -1, width: 0, height: 0 } : r.D.isSpartan() && (t = { top: 0, left: -1, width: 0, height: 0 }), "native" === this.mainGrid.options.drawType) { var e = document.getElementById(this.mainGrid.id + "_dataLayer"); t.top -= e.scrollTop, t.left -= e.scrollLeft } var i = this.editTd, o = i.offsetTop + 1 + t.top, s = i.offsetLeft + 1 + t.left, a = i.clientWidth - 6 + t.width, n = i.clientHeight - 2 + t.height, l = this.mainGrid.getInput(this); if ("" != this.options.imeMode) l.render.style.imeMode = this.options.imeMode; else { var h = this.mainGrid.getColumnOption(this.options.col_id, "dataType"); l.render.style.imeMode = "number" == h ? "disabled" : "" } if (l.show(), this.mainGrid.options.groupbyZone) { var d = this.mainGrid.groupbyZoneStatus.groupbyZoneRender.offsetHeight; this.mainGrid.options.groupbyFilterBox && "top" === this.mainGrid.options.groupbyFilterBoxLocation && (d = parseInt(this.mainGrid.options.groupbyZoneHeight, 10) + document.getElementById(this.mainGrid.id + "_groupbyFilterBox_div").offsetHeight), o += d } this.mainGrid.hasClass("w2grid_adaptive_crosstab") && (s -= document.getElementById(this.mainGrid.id + "_body_tbody").scrollLeft, l.render.style.lineHeight = n + "px"); l.render.style.top = o + "px", l.render.style.left = s + "px", l.render.style.width = a + "px",
											l.render.style.height = n + "px", r.D.isIE() && (l.render.style.lineHeight = n + "px"), l.render.style.textAlign = "" == i.style.textAlign ? "center" : i.style.textAlign
									}, A.text.prototype.removeCellData = function(t, e) { this.mainGrid.dataList.__setCellData(t, e, "") }, A.text.prototype._handleEndEdit_common = function(t) { try { var e = this.mainGrid.getInput(this); return this.setEditData(e), e } catch (t) { a.w.printStackTrace(t, null, this) } }, A.text.prototype._handleEndEdit_focus = function(t, e) { !this.mainGrid.isMobile && e || t && t.hide() }, A.text.prototype._getEditedValue = function(t) { return "bigDecimal" == this.mainGrid.getColumnOption(this.options.col_id, "dataType") ? WebSquare.bigDecimal(this.mainGrid.getInput(this).getValue()).toString() : this.mainGrid.getInput(this).getValue() }, A.text.prototype._handleCancelEdit = function(t) { try { var e, i = this.mainGrid.dataList._getCellData(this.editRowIndex, this.colID); this.setInnerHTML(this.editTd, i, this.editRowIndex, this.getColumnIndex(this.colID)), this.mainGrid.getInput(this).hide(), e = window.getSelection ? window.getSelection() : document.selection; var o = document.createRange(); o.selectNodeContents(this.editTd), e.removeAllRanges(), e.addRange(o), e.collapseToStart() } catch (t) { a.w.printStackTrace(t, null, this) } }, A.text.prototype.doDefaultAction = function(t) { t.ctrlKey || this.mainGrid.setEditHtml(t) }, A.text.prototype.setEditData = function(t) { try { var e = t.getValue(); if ("number" == (o = this.mainGrid.getColumnOption(this.id, "dataType")) || "float" == o) { var i = e.wq_trim(); "." !== i && "-" !== i && "+" !== i || (e = "") } e = t.validator.validateString(e), t.setValueNM(e, !0), this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)); var o = this.mainGrid.getColumnOption(this.options.col_id, "dataType"); this.mainGrid.options.numberCasting && "number" == o && "" != e && (e = Number(e)); var s = {}; s[this.mainGrid.id] = !0; var n = r.D.getGlobalFunction(this.options.customModelFormatter, this.scope_id); if ("function" == typeof n) { this.useCustomModelFormatter = !0; var l = this.getDisplayData(e); e = n.call(this.mainGrid, e, l, this.editRowIndex, this.getColumnIndex(this.colID)) } else this.useCustomModelFormatter = !1; if (e = this.maskFormatModelFormat(e), "float" === o && e[e.length - 1] === t.options.decimalDelimiter) { var h = e.split(t.options.decimalDelimiter); e = h[0] } this.mainGrid.dataList.__setCellData(this.editRowIndex, this.colID, e, null, null, null, s) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.text.prototype.maskFormatModelFormat = function(t) { try { if (!t) return t; var e = ""; if (this.options.maskFormat) if (this.options.maskFormatModelExcludeChar) for (var i = this.options.maskFormatModelExcludeChar.split(""), o = 0; o < t.length; o++) { for (var s = !1, r = 0; r < i.length; r++)if (t[o] == i[r]) { s = !0; break } s || (e += t[o]) } else e = t; else e = t; return e } catch (t) { a.w.printStackTrace(t, null, this) } }, A.link = function() { }, A.link.prototype.setInnerHTML = function(t, e, i, o, s) {
										var n = " tabIndex='-1' "; "none" == this.mainGrid.options.focusMode ? n = " tabIndex='0' " : 1 == this.mainGrid.options.keyMoveEditMode && (n = ""); var l = "" !== this.options.escape ? this.options.escape : this.mainGrid.options.escape; (l = r.D.getBoolean(l)) && (e = WebSquare.xml._encode(e + "")); var h, d, p = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id), u = this.getDisplayData(e); if ("function" == typeof p ? (this.useCustomFormatter = !0, h = p.call(this.mainGrid, e, u, i, o)) : (this.useCustomFormatter = !1, h = u), this.mainGrid.options.titleFormatter) try { if ("function" != typeof this.mainGrid.options.titleFormatter) { var c = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof c && (this.mainGrid.options.titleFormatter = c, d = c.call(this, i, o, e)) } else d = this.mainGrid.options.titleFormatter.call(this, i, o, e) } catch (t) { a.w.printStackTrace(t, null, this) } var g = ""; (d ? g = " title='" + d + "'" : this.options.title && (g = " title='" + this.options.title + "'"), g) || this.mainGrid.options.titleAuto && (g = " title='" + (this.mainGrid.getHeaderValue(this.mainGrid.bodyToHeaderRelation[this.id]) || "") + WebSquare.language.getMessage("Grid_link") + "'"); var f = this.options.voidNull ? "javascript:void(null);" : ""
											; t.innerHTML = h || g ? this.mainGrid.dataTagOpen + "<a href='" + f + "' onclick='event.returnValue=false; return false;'" + n + " " + g + ">" + h + "</a>" + this.mainGrid.dataTagClose : this.mainGrid.dataTagOpen + this.mainGrid.dataTagClose
									}, A.link.prototype.doDefaultAction = function(t) { if ("none" == this.mainGrid.options.focusMode) { for (var e = d.B.getTarget(t); e && "TD" != e.tagName;)e = e.parentNode; if (!e) return; var i = this.mainGrid.getElemRowIndex(e), o = this.mainGrid._getGroupbyDisplayRowIndex(i), s = r.D.getDataPrefix("col_id"), a = this.mainGrid.getColumnIndex(e.getAttribute(s)) } else { var n = this.mainGrid.getLastFocusedCell(); i = n.focusedRowIndex, o = this.mainGrid._getGroupbyDisplayRowIndex(i), a = n.focusedColIndex } this.mainGrid._getEditDisabled(i, a) || this.mainGrid.___getEditReadOnly(i, a) || d.B.fireEvent(this.mainGrid, "oncellclick", o, a, this.options.id) }, A.checkbox = function() { }, A.checkbox.prototype.initializeCellInfo = function(t) { switch (this.options.valueType) { case "binary": this.setBooleanValue("1", "0"); break; case "boolean": this.setBooleanValue("true", "false"); break; case "other": "$blank" == this.options.trueValue && (this.options.trueValue = ""), "$blank" == this.options.falseValue && (this.options.falseValue = ""), this.setBooleanValue(this.options.trueValue, this.options.falseValue) }if (this.options.embeddedInput && (this.mainGrid.options.preventMultipleClick = !1), this.options.checkboxLabelColumn) for (var e = this.options.checkboxLabelColumn.split(","), i = 0; i < e.length; i++) { var o = e[i]; this.mainGrid.getColumnIndex(o) && this.mainGrid.setLabelColumnAssociation(e[i], this.id) } }, A.checkbox.prototype.setBooleanValue = function(t, e) { this.options.trueValue = t + "", this.options.falseValue = e + "" }, A.checkbox.prototype.setInnerHTML = function(t, e, i) {
										var o, s = e + "" == this.options.trueValue, n = r.D.getDataPrefix("col_id"), l = r.D.getDataPrefix("rowindex"); if (o = this.options.noDisabledOnReadOnly ? this.mainGrid._getEditDisabled(i, t.getAttribute(n)) : this.mainGrid.__getEditReadOnly(t, i) || this.mainGrid._getEditDisabled(i, t.getAttribute(n)), this.options.embeddedInput) { var h = this.mainGrid.getInput(this, t, s); h.setAttribute(l, i), h.checked = s, h.disabled = o } else {
											var u, c; if (this.mainGrid.options.titleFormatter) try { if ("function" != typeof this.mainGrid.options.titleFormatter) { var g = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof g && (this.mainGrid.options.titleFormatter = g, c = this.mainGrid.getColumnIndex(this.options.id), u = g.call(this, i, c, e)) } else u = this.mainGrid.options.titleFormatter.call(this, i, c, e) } catch (t) { a.w.printStackTrace(t, null, this) } var f = u || this.options.title || ""; if (f) f = " title='" + f + "'"; else if (this.mainGrid.options.titleAuto) { var m = this.mainGrid.getHeaderValue(this.mainGrid.bodyToHeaderRelation[this.id]) || ""; f = s ? " title='" + m + WebSquare.language.getMessage("Grid_title") + "'" : " title='" + m + WebSquare.language.getMessage("Grid_title_not_choose") + "'" } var y = "none" == this.mainGrid.options.focusMode ? "" : " tabIndex='-1'", b = s ? " checked" : "", w = o ? " disabled='true'" : "", v = this.options.visibleFunc, C = ""; if (this.options.checkboxLabel || this.options.checkboxLabelColumn || this.options.checkboxLabelFormatter) {
												var I = this.mainGridId + "_checkbox_" + this.id, _ = I + "_" + i, x = this.options.checkboxLabel || ""; if (this.options.checkboxLabelColumn) { for (var S = this.options.checkboxLabelColumn.split(","), D = "", R = this.options.checkboxLabelDelimiter || this.mainGrid.options.labelDelimiter || " ", L = 0; L < S.length; L++) { var T = this.mainGrid.bodyToHeaderRelation[S[L]]; if (L === S.length - 1) this.mainGrid.options.showCheckboxLabelUserFormat ? D += " " + this.mainGrid.getHeaderValue(T) + " " + this.mainGrid._getCellDisplayData(i, S[L], { removeTag: !0 }) : D += this.mainGrid._getCellDisplayData(i, S[L], { removeTag: !0 }); else if (this.mainGrid.options.showCheckboxLabelUserFormat) D += (0 === L ? i + 1 + "행" + R : "") + " " + this.mainGrid.getHeaderValue(T) + " " + this.mainGrid._getCellDisplayData(i, S[L], { removeTag: !0 }) + R; else D += this.mainGrid._getCellDisplayData(i, S[L], { removeTag: !0 }) + R } x = x ? D + R + x : D } if (this.options.checkboxLabelFormatter) try {
													var k = r.D.getGlobalFunction(this.options.checkboxLabelFormatter, this.scope_id); "function" == typeof k && (x = k.call(this.mainGrid, i, this.mainGrid.getColumnIndex(this.colID), x))
												} catch (t) { p.k.printLog(this.mainGrid.id + "_" + this.id + " checkboxLabelFormatter error : " + t.message) } x && this.mainGrid.options.titleAuto && !this.options.title && (f = f.substring(0, f.length - 1) + " " + x + "'"), C = "<INPUT type='checkbox' " + f + y + b + w + " id='" + _ + "' name='" + I + "'/>"; var A = "<label class='w2checkbox_label ' for='" + _ + "'>" + x + "</label>"; "left" === this.options.checkboxLabelPosition ? C = A + C : C += A
											} else C = "<INPUT type='checkbox' " + f + y + b + w + " />"; if (v) { var F, E = r.D.getGlobalFunction(v, this.scope_id); "function" == typeof E && (F = E(i)), t.innerHTML = F ? C : "" } else t.innerHTML = C; if (this.options.noDisabledOnReadOnly) (M = t.getElementsByTagName("input")[0]) && (d.B.addListener(M, "onclick", function(t, e, i) { return function(o) { t.options.noDisabledOnReadOnly && t.mainGrid._getEditReadOnly(e, i) && d.B.preventDefault(o) } }(this, i, this.getColumnIndex(this.options.id))), this.mainGrid._getEditReadOnly(i, this.options.id) ? this.mainGrid.addClass(M, this.mainGrid.options.readOnlyClass + "_nodisabled") : this.mainGrid.removeClass(M, this.mainGrid.options.readOnlyClass + "_nodisabled")); if (this.mainGrid.options.preventMultipleClick) { var M = t.getElementsByTagName("input")[0], O = t.getElementsByTagName("label")[0]; this.labelClicked = !1, M && d.B.addListener(M, "onclick", function(t, e, i) { return function(o) { t.options.eventPropagation || d.B.stopPropagation(o), e[2] = o.detail, i.apply(t, e, o) } }(this, [i, t], (function(t, e, i) { i = this.labelClicked ? 0 : 1, this.labelClicked = !1; var o, s, a, r, n, l, h, p = null != this.mainGrid.editedCell; p && (o = this.mainGrid.editedCell.editRowIndex, s = this.mainGrid._dataList.getColumnIndex(this.mainGrid.editedCell.id), h = this.mainGrid.getCellInfo(this.mainGrid.editedCell.id), a = this.mainGrid.getColumnIndex(this.mainGrid.editedCell.id), r = this.mainGrid._grid.getRealRowIndex(o), n = this.mainGrid._dataList.dataArr[r * this.mainGrid._dataList.getColumnCount() + s], l = h.comp && h.comp.selectedIndex); var u, g, f, m = e.getElementsByTagName("input")[0]; if (m && (u = m.checked, g = this.options.falseValue, u && (g = this.options.trueValue), "" != (f = this.mainGrid.dataList._getCellData(t, this.colID)) || u || (g = f)), this.options.blockSelect || (this.mainGrid.options.preventDuplicateFocusedCell && "linear" === this.mainGrid.options.focusFlow ? 1 == i && this.mainGrid._addFocus(e) : this.mainGrid._addFocus(e)), this.handleClick(e, t, !0), this.options.blockSelect || (this.mainGrid.options.preventDuplicateFocusedCell && "linear" === this.mainGrid.options.focusFlow ? 1 == i && (this.mainGrid.focusedCell.pop(), this.mainGrid.__setFocusedCell({}, e, { editMode: "none" == this.options.focusMode })) : (this.mainGrid.focusedCell.pop(), this.mainGrid.__setFocusedCell({}, e, { editMode: "none" == this.options.focusMode }))), t = this.mainGrid._getGroupbyDisplayRowIndex(t), m && f != g) { var y = { oldValue: f, newValue: g, rowIndex: t, colIndex: this.mainGrid.getColumnIndex(this.options.id) }; d.B.fireEvent(this.mainGrid, "onviewchange", y) } if (this.mainGrid.options.preventMultipleClick && !this.mainGrid._getEditDisabled(t, c) && d.B.fireEvent(this.mainGrid, "oncellclick", this.mainGrid._getGroupbyDisplayRowIndex(t), this.mainGrid.getColumnIndex(this.options.id), this.options.id, { checked: u }), p) { var b = this.mainGrid._dataList.dataArr[r * this.mainGrid._dataList.getColumnCount() + s]; if (n != b) { var w = { oldValue: n, newValue: b, rowIndex: o, colIndex: a }; isNaN(l) || (w.oldSelectedIndex = l, w.newSelectedIndex = h && h.comp && h.comp.selectedIndex), d.B.fireEvent(this.mainGrid, "onviewchange", w) } } }))), O && d.B.addListener(O, "onclick", function(t, e, i) { return function(o) { i.apply(t, e, o) } }(this, [i, t], (function(t, e) { this.labelClicked = !0 }))) }
										}
									}, A.checkbox.prototype.getDisplayData = function(t) { return t }, A.checkbox.prototype.handleClick = function(t, e, i) {
										var o = r.D.getDataPrefix("col_id"); if (this.mainGrid.__getEditReadOnly(t, e) || this.mainGrid._getEditDisabled(e, t.getAttribute(o)) || !this.options.embeddedInput && this.mainGrid.options.preventMultipleClick && !i && !this.mainGrid.options.checkOnCellClick) return !0
											; null != this.mainGrid.editedCell && this.mainGrid.editedCell.handleEndEdit(); var s = t.getElementsByTagName("input")[0]; if (s) { var a = this.options.id, n = s.checked, l = this.options.falseValue; n && (l = this.options.trueValue); var h = this.mainGrid.dataList._getCellData(e, this.colID); "" != h || n || (l = h); var p = null; (p = {})[this.mainGrid.id] = !0, this.mainGrid._isGridViewItemTable() || this.mainGrid.dataList.__setCellData(e, this.colID, l, null, null, null, p); var u = r.D.getDataPrefix("colMerged"); if ("0" == t.getAttribute(u) && this.setMergedCol(e, a, h, l), h != l && !i) { var c = { oldValue: h, newValue: l, rowIndex: e, colIndex: this.mainGrid.getColumnIndex(this.options.id) }; d.B.fireEvent(this.mainGrid, "onviewchange", c) } this.mainGrid.checkHeader(this.mainGrid.bodyToHeaderRelation[this.colID]) } return !0
									}, A.checkbox.prototype.checkHeader = function() { try { return this.mainGrid.checkHeader(this.mainGrid.bodyToHeaderRelation[this.colID]) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.checkbox.prototype.doDefaultAction = function(t) { if (!this.options.embeddedInput) { var e = d.B.getTarget(t); if ("none" == this.mainGrid.options.focusMode) { for (e.focus(); e && "TD" != e.tagName;)e = e.parentNode; if (!e) return; var i = this.mainGrid.getElemRowIndex(e), o = this.mainGrid._getGroupbyDisplayRowIndex(i), s = this.colID } else i = this.mainGrid.getLastFocusedCell().focusedRowIndex, o = this.mainGrid._getGroupbyDisplayRowIndex(i), s = this.colID; var a = !1; if (!this.mainGrid._getEditDisabled(i, s) && !this.mainGrid.___getEditReadOnly(i, s)) { var r, n, l = e.getElementsByTagName("input")[0]; l && (l.checked ? (r = this.options.falseValue, l.checked = !1) : (r = this.options.trueValue, l.checked = !0), n = this.mainGrid.dataList._getCellData(i, s)), this.handleClick(e, i, !0), r != n && d.B.fireEvent(this.mainGrid, "onviewchange", { oldValue: n, newValue: r, rowIndex: o, colIndex: this.mainGrid.getColumnIndex(s) }), a = !0 } this.mainGrid.checkHeader(this.mainGrid.bodyToHeaderRelation[this.colID]), this.mainGrid.options.preventMultipleClick && a && d.B.fireEvent(this.mainGrid, "oncellclick", i, this.mainGrid.getColumnIndex(s), this.options.id, { checked: l.checked }) } }, A.checkbox.prototype.refreshCell = function() { try { if (!this.options.refInitSync || "other" !== this.options.valueType) return; for (var t = this.mainGrid._dataList.getRowCount(), e = 0; e < t; e++) { this.mainGrid._dataList.getCellData(e, this.colID) != this.options.trueValue && this.mainGrid._dataList.setCellData(e, this.colID, this.options.falseValue) } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.button = function() { }, A.button.prototype.setInnerHTML = function(t, e, i) {
										var o = r.D.getDataPrefix("col_id"), s = (this.mainGrid._getEditDisabled(i, t.getAttribute(o)), " tabIndex='-1'"); "none" == this.mainGrid.options.focusMode ? s = " tabIndex='0'" : 1 == this.mainGrid.options.keyMoveEditMode && (s = ""); var n, l = this.mainGrid.getColumnIndex(t.getAttribute(o)); if (this.mainGrid.options.titleFormatter) try { if ("function" != typeof this.mainGrid.options.titleFormatter) { var h = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof h && (this.mainGrid.options.titleFormatter = h, n = h.call(this, i, l, e)) } else n = this.mainGrid.options.titleFormatter.call(this, i, l, e) } catch (t) { a.w.printStackTrace(t, null, this) } var p = n || this.options.title || ""; p ? p = " title='" + p + "'" : this.mainGrid.options.titleAuto && (p = " title='" + (this.mainGrid.getHeaderValue(this.mainGrid.bodyToHeaderRelation[this.id]) || "") + WebSquare.language.getMessage("Grid_button") + "'"); var u = "" !== this.options.escape ? this.options.escape : this.mainGrid.options.escape; if ((u = r.D.getBoolean(u)) && (e = WebSquare.xml._encode(e + "")), t.innerHTML = "<button type='button' style='width:100%;height:100%' " + s + p + ">" + this.getDisplayData(e) + "</button>", 1 == this.internal) { var c = t.childNodes[0]; if (0 == c.clientHeight) { var g = t.clientHeight - 2; WebSquare.style.setSize(c, "height", g) } } var f, m, y; l = this.mainGrid.getColumnIndex(t.getAttribute(o)); this._listener = (f = this, m = [i, l, t], y = function(t, e, i, o) {
											this.mainGrid._getEditDisabled(e, i) || this.mainGrid.___getEditReadOnly(e, i) || (null != this.mainGrid.editedCell && this.mainGrid.editedCell.handleEndEdit(),
												this.options.blockSelect || this.mainGrid.__setFocusedCell(t, o, { editMode: "none" == this.options.focusMode })), this.mainGrid._getEditDisabled(e, i) || d.B.fireEvent(this.mainGrid, "oncellclick", this.mainGrid._getGroupbyDisplayRowIndex(e), i, this.options.id)
										}, function(t) { y.apply(f, [t || window.event].concat(m)) }), d.B.addListener(t.getElementsByTagName("button")[0], "onclick", this._listener)
									}, A.button.prototype.doDefaultAction = function(t) { if ("none" == this.mainGrid.options.focusMode) { for (var e = d.B.getTarget(t); e && "TD" != e.tagName;)e = e.parentNode; if (!e) return; var i = this.mainGrid.getElemRowIndex(e), o = this.mainGrid._getGroupbyDisplayRowIndex(i), s = r.D.getDataPrefix("col_id"), a = this.mainGrid.getColumnIndex(e.getAttribute(s)) } else { var n = this.mainGrid.getLastFocusedCell(); i = n.focusedRowIndex, o = this.mainGrid._getGroupbyDisplayRowIndex(i), a = n.focusedColIndex } this.mainGrid._getEditDisabled(i, a) || this.mainGrid.___getEditReadOnly(i, a) || d.B.fireEvent(this.mainGrid, "oncellclick", o, a, this.options.id) }, A.image = function() { }, A.image.prototype.setInnerHTML = function(t, e, i, o, s) { var n = ""; "" != this.options.imageWidth && (n += ";width:" + parseInt(this.options.imageWidth) + "px"), "" != this.options.imageHeight && (n += ";height:" + parseInt(this.options.imageHeight) + "px"), t.removeAttribute("alt"); var l = ""; "" != this.options.alt && (l = "alt='" + this.options.alt + "' "); var h = r.D.getDataPrefix("col_id"), p = this.mainGrid._getEditDisabled(i, t.getAttribute(h)), u = ""; p && (u = " disabled='true' "), null == e || "" == e ? e = this.options.imageSrc ? this.options.imageSrc.startsWith("javascript:void") ? this.options.imageSrc : this.mainGrid.getImageURL(this.options.imageSrc) : "" : "string" != typeof e || e.startsWith("javascript:void") || (e = this.mainGrid.getImageURL(e)); var c = ""; try { this.options.onerror && (c = ' onerror="(' + this.options.onerror + ').call(this,event);" ') } catch (t) { a.w.printStackTrace(t, null, this) } var g, f = this.options.imageTabIndex ? " tabIndex='" + this.options.imageTabIndex + "'" : ""; if (this.mainGrid.options.senseReader && this.mainGrid.options.focusImage ? t.innerHTML = "<IMG src='" + e + "' class='w2grid_image" + (p ? " w2grid_image_disabled" : "") + "' style='" + n + "' " + l + u + c + f + "tabIndex='0' />" : t.innerHTML = "<IMG src='" + e + "' class='w2grid_image" + (p ? " w2grid_image_disabled" : "") + "' style='" + n + "' " + l + u + c + f + " />", this.options.imageClickFunction && (g = this.mainGrid._getEditDisabled(i, o)), this.options.imageClickFunction && (this.options.useImageClick || 0 == g)) { var m = t.firstChild, y = function(t, e, i) { return function(o) { d.B.stopPropagation(o), t._setFocusedCell(e, i), t.fireImageClick(e, i) } }(this.mainGrid, i, this.colID); d.B.addListener(m, "onclick", y) } if (this.mainGrid.options.titleFormatter) try { var b; o = this.mainGrid.getColumnIndex(t.getAttribute(h)); if ("function" != typeof this.mainGrid.options.titleFormatter) { var w = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof w && (this.mainGrid.options.titleFormatter = w, b = w.call(this, i, o, e)) } else b = this.mainGrid.options.titleFormatter.call(this, i, o, e); t.setAttribute("title", b) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.image.prototype.getDisplayData = function(t) { return t }, A.radio = function() { }, A.radio.prototype.initializeCellInfo = function(t) { switch (this.options.valueType) { case "binary": this.setBooleanValue("1", "0"); break; case "boolean": this.setBooleanValue("true", "false"); break; case "other": this.setBooleanValue(this.options.trueValue, this.options.falseValue) }if (this.options.groupRef && (this.options.groupValue = WebSquare.ModelUtil.getInstanceValue(this.options.groupRef, null, this.scope_id)), this.options.radioLabelColumn) for (var e = this.options.radioLabelColumn.split(","), i = 0; i < e.length; i++) { var o = e[i]; this.mainGrid.getColumnIndex(o) && this.mainGrid.setLabelColumnAssociation(e[i], this.id) } }, A.radio.prototype.setBooleanValue = function(t, e) { this.options.trueValue = t + "", this.options.falseValue = e + "" }, A.radio.prototype.setInnerHTML = function(t, e, i) {
										var o, s, n, l, h = r.D.getDataPrefix("col_id"), u = r.D.getDataPrefix("rowindex"), c = this.mainGridId + "_radio_" + (this.options.groupName ? this.options.groupName + "_" + i : this.colID), g = e + "" == this.options.trueValue; if (o = this.options.noDisabledOnReadOnly ? this.mainGrid._getEditDisabled(i, t.getAttribute(h)) : this.mainGrid.__getEditReadOnly(t, i) || this.mainGrid._getEditDisabled(i, t.getAttribute(h)), this.options.embeddedInput) { var f = this.mainGrid.getInput(this, t, g); f.setAttribute(u, i), f.checked = !1, f.name = c, f.checked = g, f.disabled = o } else {
											var m, y; if (this.mainGrid.options.titleFormatter) try { if ("function" != typeof this.mainGrid.options.titleFormatter) { var b = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof b && (this.mainGrid.options.titleFormatter = b, y = this.mainGrid.getColumnIndex(this.options.id), m = b.call(this, i, y, e)) } else m = this.mainGrid.options.titleFormatter.call(this, i, y, e) } catch (t) { a.w.printStackTrace(t, null, this) } var w = m || this.options.title || ""; if (w) w = " title='" + w + "'"; else if (this.mainGrid.options.titleAuto) { var v = this.mainGrid.getHeaderValue(this.mainGrid.bodyToHeaderRelation[this.id]) || ""; w = g ? " title='" + v + WebSquare.language.getMessage("Grid_title") + "'" : " title='" + v + WebSquare.language.getMessage("Grid_title_not_choose") + "'" } var C = "none" == this.mainGrid.options.focusMode ? "" : " tabIndex='-1'", I = g ? " checked" : "", _ = o ? " disabled='true'" : "", x = ""; if (this.options.radioLabel || this.options.radioLabelColumn || this.options.radioLabelFormatter) { var S = this.mainGridId + "_radio_" + this.id + "_" + i, D = this.options.radioLabel || ""; if (this.options.radioLabelColumn) { for (var R = this.options.radioLabelColumn.split(","), L = "", T = this.options.radioLabelDelimiter || this.mainGrid.options.labelDelimiter || " ", k = 0; k < R.length; k++) { var A = this.mainGrid.bodyToHeaderRelation[R[k]]; if (k === R.length - 1) this.mainGrid.options.showRadioLabelUserFormat ? L += " " + this.mainGrid.getHeaderValue(A) + " " + this.mainGrid._getCellDisplayData(i, R[k], { removeTag: !0 }) : L += this.mainGrid._getCellDisplayData(i, R[k], { removeTag: !0 }); else if (this.mainGrid.options.showRadioLabelUserFormat) L += (0 === k ? i + 1 + "행" + T : "") + " " + this.mainGrid.getHeaderValue(A) + " " + this.mainGrid._getCellDisplayData(i, R[k], { removeTag: !0 }) + T; else L += this.mainGrid._getCellDisplayData(i, R[k], { removeTag: !0 }) + T } D = D ? L + T + D : L } if (this.options.radioLabelFormatter) try { var F = r.D.getGlobalFunction(this.options.radioLabelFormatter, this.scope_id); "function" == typeof F && (D = F.call(this.mainGrid, i, this.mainGrid.getColumnIndex(this.colID), D)) } catch (t) { p.k.printLog(this.mainGrid.id + "_" + this.id + " radioLabelFormatter error : " + t.message) } D && this.mainGrid.options.titleAuto && !this.options.title && (w = w.substring(0, w.length - 1) + " " + D + "'"), x = "<INPUT type='radio' " + w + C + I + _ + " id='" + S + "' name='" + c + "'/>"; var E = "<label class='w2radio_label ' for='" + S + "'>" + D + "</label>"; "left" === this.options.radioLabelPosition ? x = E + x : x += E } else x = "<INPUT type='radio' name='" + c + "'" + w + C + I + _ + " />"; if (t.innerHTML = x, this.options.noDisabledOnReadOnly) (M = t.getElementsByTagName("input")[0]) && (d.B.addListener(M, "onclick", function(t, e, i) { return function(o) { t.options.noDisabledOnReadOnly && t.mainGrid._getEditReadOnly(e, i) && d.B.preventDefault(o) } }(this, i, this.getColumnIndex(this.options.id))), this.mainGrid._getEditReadOnly(i, this.options.id) ? this.mainGrid.addClass(M, this.mainGrid.options.readOnlyClass + "_nodisabled") : this.mainGrid.removeClass(M, this.mainGrid.options.readOnlyClass + "_nodisabled")); if (this.mainGrid.options.preventDuplicateFocusedCell && this.mainGrid.options.preventMultipleClick) {
												var M = t.getElementsByTagName("input")[0], O = t.getElementsByTagName("label")[0]; this.labelClicked = !1, M && d.B.addListener(M, "onclick", (s = this, n = [i, t], l = function(t, e, i) {
													i = this.labelClicked ? 0 : 1, this.labelClicked = !1; var o, s, a, r, n, l, h, p = null != this.mainGrid.editedCell; if (p && (o = this.mainGrid.editedCell.editRowIndex, s = this.mainGrid._dataList.getColumnIndex(this.mainGrid.editedCell.id), h = this.mainGrid.getCellInfo(this.mainGrid.editedCell.id), a = this.mainGrid.getColumnIndex(this.mainGrid.editedCell.id),
														r = this.mainGrid._grid.getRealRowIndex(o), n = this.mainGrid._dataList.dataArr[r * this.mainGrid._dataList.getColumnCount() + s], l = h.comp && h.comp.selectedIndex), this.options.blockSelect || (this.mainGrid.options.preventDuplicateFocusedCell && "linear" === this.mainGrid.options.focusFlow ? 1 == i && this.mainGrid._addFocus(e) : this.mainGrid._addFocus(e)), this.handleClick(e, t), this.options.blockSelect || (this.mainGrid.options.preventDuplicateFocusedCell && "linear" === this.mainGrid.options.focusFlow ? 1 == i && (this.mainGrid.focusedCell.pop(), this.mainGrid.__setFocusedCell({}, e, { editMode: "none" == this.options.focusMode })) : (this.mainGrid.focusedCell.pop(), this.mainGrid.__setFocusedCell({}, e, { editMode: "none" == this.options.focusMode }))), this.mainGrid.options.preventMultipleClick && !this.mainGrid._getEditDisabled(t, y) && d.B.fireEvent(this.mainGrid, "oncellclick", this.mainGrid._getGroupbyDisplayRowIndex(t), this.mainGrid.getColumnIndex(this.options.id), this.options.id, { checked: g }), p) { var u = this.mainGrid._dataList.dataArr[r * this.mainGrid._dataList.getColumnCount() + s]; if (n != u) { var c = { oldValue: n, newValue: u, rowIndex: o, colIndex: a }; isNaN(l) || (c.oldSelectedIndex = l, c.newSelectedIndex = h && h.comp && h.comp.selectedIndex), d.B.fireEvent(this.mainGrid, "onviewchange", c) } }
												}, function(t) { s.options.eventPropagation || d.B.stopPropagation(t), n[2] = t.detail, l.apply(s, n, t) })), O && d.B.addListener(O, "onclick", function(t, e, i) { return function(o) { i.apply(t, e, o) } }(this, [i, t], (function(t, e) { this.labelClicked = !0 })))
											}
										}
									}, A.radio.prototype.getDisplayData = function(t) { return t }, A.radio.prototype.handleClick = function(t, e) { var i = t.getElementsByTagName("input")[0]; if (!i) return !0; if (this.options.noDisabledOnReadOnly && this.mainGrid._getEditReadOnly(e, this.colID)) return !0; this.mainGrid.options.preventDuplicateFocusedCell && null != this.mainGrid.editedCell && this.mainGrid.editedCell.handleEndEdit(); var o = this.mainGrid.dataList._getCellData(e, this.colID), s = o; if (o == this.options.trueValue) return !0; i.checked && (s = this.options.trueValue, this.resetOthers(e), this.options.groupName && this.mainGrid.radioGroupRepChk[this.options.groupName] && this.mainGrid.dataList.__setCellData(e, this.options.groupName, this.options.groupValue)), this.mainGrid.dataList.__setCellData(e, this.colID, s); var a = r.D.getDataPrefix("colMerged"); if ("0" != t.getAttribute(a) || this.mainGrid.groupbyStatus.grouped || this.setMergedCol(e, this.colID, o, s), o != s) { var n = { oldValue: o, newValue: s, colIndex: this.mainGrid.getColumnIndex(this.options.id), rowIndex: e }; d.B.fireEvent(this.mainGrid, "onviewchange", n) } return !0 }, A.radio.prototype.resetOthers = function(t) { if (this.options.groupName) for (var e = this.mainGrid.getColumnCount(), i = 0; i < e; i++) { var o = this.mainGrid.getCellInfo(i); "custom" == o.options.inputType && (o = o.cellManagerHashByRowIndex[this.mainGrid.dataList.getRealRowIndex(t)]), o != this && "radio" == o.options.inputType && o.options.groupName == this.options.groupName && this.mainGrid.dataList.__setCellData(t, i, o.options.falseValue) } else if (this.mainGrid.isDrillDown && this.mainGrid._dataList.options.depthColumn) for (var s = 0; s < this.mainGrid.getTotalRow(); s++)this.mainGrid._dataList.getCellData(s, this.colID) + "" == this.options.trueValue && this.mainGrid._dataList.setCellData(s, this.colID, this.options.falseValue); else for (s = 0; s < this.mainGrid.getDataLength(); s++)this.mainGrid.dataList._getCellData(s, this.colID) + "" == this.options.trueValue && this.mainGrid.dataList.__setCellData(s, this.colID, this.options.falseValue) }, A.radio.prototype.doDefaultAction = function(t) {
										var e = d.B.getTarget(t); if ("none" == this.mainGrid.options.focusMode) { for (; e && "TD" != e.tagName;)e = e.parentNode; if (!e) return; var i = this.mainGrid.getElemRowIndex(e), o = r.D.getDataPrefix("col_id"), s = this.mainGrid.getColumnIndex(e.getAttribute(o)) } else { var a = this.mainGrid.getLastFocusedCell(); i = a.focusedRowIndex, s = a.focusedColIndex } if (!this.mainGrid._getEditDisabled(i, s) && !this.mainGrid.___getEditReadOnly(i, s)) {
											var n = this.mainGrid.dataList._getCellData(i, this.colID)
											; ("INPUT" == e.tagName.toUpperCase() ? e : e.getElementsByTagName("input")[0]).checked = n == this.options.trueValue ? this.options.falseValue : this.options.trueValue, this.handleClick(e, i)
										}
									}, A.radio.prototype.refreshCell = function() { try { if (!this.options.refInitSync || "other" !== this.options.valueType) return; for (var t = this.mainGrid._dataList.getRowCount(), e = 0; e < t; e++) { this.mainGrid._dataList.getCellData(e, this.colID) != this.options.trueValue && this.mainGrid._dataList.setCellData(e, this.colID, this.options.falseValue) } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.select = function() { }, A.select.prototype._initializeCellInfo = function() { try { this.col_index = this.mainGrid.getColumnIndex(this.colID), "auto" === this.options.renderType && r.D.isMobile() && !0 !== this.options.embeddedInput && (this.options.embeddedInput = !0) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.select.prototype._createComponent = function(t) {
										try {
											if (this.comp) return; var e = this; if (this.xml.setAttribute("class", this.mainGridId + "_select_" + this.colID), this.xml.setAttribute("chooseOption", this.options.chooseOption + ""), this.xml.setAttribute("chooseOptionLabel", this.options.chooseOptionLabel), this.xml.setAttribute("chooseOptionValue", this.options.chooseOptionValue), this.xml.setAttribute("allOption", this.options.allOption + ""), this.xml.setAttribute("tableRender", this.options.tableRender), this.xml.setAttribute("submenuSize", this.options.submenuSize ? this.options.submenuSize : "auto"), this.xml.setAttribute("direction", "auto"), this.xml.setAttribute("style", this.style), this.setFirst = !0, this.hasRef && !this.useLinkedDataList) WebSquare.Elem.api.getElementsByTagName(this.xml, "w2:itemset")[0].setAttribute("nodeset", new Function("_this", "return " + this.refStr)(this)); this.setFirst = !1, this.configOptions.chooseOption = this.options.chooseOption, this.configOptions.chooseOptionLabel = this.options.chooseOptionLabel, this.configOptions.labelWidthAuto = !1, this.configOptions.displayMode = this.options.displayMode, this.configOptions.itemTooltipDisplay = this.options.tooltipDisplayItem ? this.options.tooltipDisplayItem : this.options.itemTooltipDisplay, this.configOptions.itemTooltipFormatter = this.options.itemTooltipFormatter, this.options.itemTooltipFormatter && (this.configOptions._rowIndex = t, this.configOptions._colIndex = this.mainGrid.getColumnIndex(this.colID)), this.configOptions.tooltipTime = this.options.tooltipTime, this.configOptions._scope_obj_uuid = this.options._scope_obj_uuid, this.configOptions.tableRender = this.options.tableRender, this.internal && (this.options.visibleRowNum && (this.configOptions.visibleRowNum = this.options.visibleRowNum), this.options.textAlign && (this.configOptions.textAlign = this.options.textAlign), this.options.itemTableType && (this.configOptions.itemTableType = this.options.itemTableType), this.options.itemSet && (this.configOptions.itemSet = this.options.itemSet), this.options.item && (this.configOptions.item = this.options.item), this.options.gridViewOptions && (this.configOptions.gridViewOptions = this.options.gridViewOptions)); var i = this.internal ? this.mainGridId + "_selectbox_" + t + "_" + this.colID + "_" + this.id : this.mainGridId + "_selectbox_" + this.colID; this.internal && this.options.emptyItem && (this.configOptions.emptyItem = this.options.emptyItem), this.select = new WebSquare.uiplugin.selectbox(i, this.configOptions, this.xml), this.mainGrid.dom[this.select.id] = this.select, this.comp = this.select, this.select.setSelectedIndex1 = function(t, i) {
												void 0 !== i && null != i || (i = {}); var o = this.selectedIndex, s = this.getValue(), a = e.mainGrid.getColumnIndex(e.mainGrid.editedCell.id); if (this.setSelectedIndex(t), "oneditend" === e.options.eventPriority) { if (!0 !== i.skipClose && (this.closeSubLayer(), e.handleEndEdit()), o != this.selectedIndex) { var r = e.editRowIndex, n = { oldValue: s, newValue: this.getValue(), oldSelectedIndex: o, newSelectedIndex: this.selectedIndex, rowIndex: r, colIndex: a }; d.B.fireEvent(e.mainGrid, "onviewchange", n) } } else {
													if (o != this.selectedIndex) {
														r = e.editRowIndex, n = { oldValue: s, newValue: this.getValue(), oldSelectedIndex: o, newSelectedIndex: this.selectedIndex, rowIndex: r, colIndex: a }
														; d.B.fireEvent(e.mainGrid, "onviewchange", n)
													} !0 !== i.skipClose && (this.closeSubLayer(), e.handleEndEdit())
												}
											}, this.existGridViewItemsetNode && (this.select._setSubLayer = this.select.setSubLayer, this.select.setSubLayer = function(t) { this._setSubLayer(t), this.itemTable.addKeyDownEventListener((function(t) { switch (t.keyCode) { case 27: e.handleCancelEdit(t) } })) }), this.select.__openSubLayer = this.select.openSubLayer, this.select.openSubLayer = function() { this.__openSubLayer() }, this.select.__closeSubLayer = this.select.closeSubLayer, this.select.closeSubLayer = function(t) { this.__closeSubLayer(t), e.mainGrid._setFocusedCell() }, this.select._handleClickEvent = this.select.handleClickEvent, this.select.handleClickEvent = function(t) { this._handleClickEvent(t), d.B.stopEvent(t), e.handleEndEdit() }, this.select._refreshItemset = this.select.refreshItemset, this.select.refreshItemset = function(t) { e.resetMatchInfo = !0, !0 !== this.refreshStopItemTable && this._refreshItemset(t) }
										} catch (t) { a.w.printStackTrace(t, null, this) }
									}, A.select.prototype.createSelectbox = function(t, e) { this.style = "position:relative;left:0px;top:0px;background-color:#ffffff;", this._createComponent(e), t.innerHTML = this.select.toHTML(); try { !this.select.modelControl.isBinded() && -1 === this.select.selectedIndex && this.select.getItemCount() > 0 && !this.select.options.chooseOption && this.select.options.allOption } catch (t) { } if (this.select.activate(), this.internal && "gridViewItemset" !== this.options.itemTableType && this.comp.setNodeSet(this.initializeInfo.itemSet.nodeset, this.initializeInfo.itemSet.label, this.initializeInfo.itemSet.value), "" != this.options.selectSetter) for (var i = 0; i < this.itemArr.length; i++)this.select.addItem(this.itemArr[i].value, this.itemArr[i].label); this._setSize(t), this.select.render.style.border = "1px solid " + this.mainGrid.options.selectedCellColor }, A.select.prototype._setSize = function(t) { try { var e = { top: 0, left: 0, bottom: 0, right: 0 }; if (r.D.isIEAllVersion("6 7 8")) WebSquare.style.getComputedStyle(t, "padding") && (e.left = parseInt(WebSquare.style.getComputedStyle(t, "padding-left"), 10), e.right = parseInt(WebSquare.style.getComputedStyle(t, "padding-right"), 10), e.top = parseInt(WebSquare.style.getComputedStyle(t, "padding-top"), 10), e.bottom = parseInt(WebSquare.style.getComputedStyle(t, "padding-bottom"), 10)); else { var i = WebSquare.style.getComputedStyle(t); i && (i.padding || i.paddingTop || i.paddingBottom || i.paddingLeft || i.paddingRight) && (e.left = parseInt(i.paddingLeft, 10), e.right = parseInt(i.paddingRight, 10), e.top = parseInt(i.paddingTop, 10), e.bottom = parseInt(i.paddingBottom, 10)) } this.select.setSize(t.clientWidth - (2 + e.left + e.right), t.clientHeight - (2 + e.top + e.bottom)) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.select.prototype.createItemTable = function(t, e) {
										var i = this; this.existGridViewItemsetNode && this.select._openOtherLayer(), this.select.setSubLayer(); var o = this.select.itemTable; o.addClickEventListener((function(t, e) { i.select.setSelectedIndex1(e); var o = i.mainGrid.getLastFocusedCell(); if (i.editRowIndex != o.focusedRowIndex || i.col_index != o.focusedColIndex || i.options.moveEditModeByChoice || i.mainGrid.isVirtualCursor() || i.mainGrid._setFocusedCell(), i.options.moveEditModeByChoice) { var s = i.options.moveEditModeByChoice; switch (s) { case "down": i.mainGrid.moveVertical({}, s, true); break; case "right": i.mainGrid.moveHorizontal({ byApi: !0 }, s, true) } } })), this.existGridViewItemsetNode ? o.addKeyDownEventListener((function(t) { switch (t.keyCode) { case 9: this.fireClick(t); var e = i.mainGrid.getLastFocusedCell(); i.editRowIndex == e.focusedRowIndex && i.col_index == e.focusedColIndex && ("down" == i.mainGrid.options.tabKeyMove ? i.mainGrid.moveVertical(t, t.shiftKey ? "up" : "down", i.mainGrid.options.keyMoveEditMode) : "none" == i.mainGrid.options.tabKeyMove || i.mainGrid.moveHorizontal(t, t.shiftKey ? "left" : "right", i.mainGrid.options.keyMoveEditMode)); break; case 27: i.handleCancelEdit(t) } })) : o.addKeyDownEventListener((function(t) {
											switch (t.keyCode) {
												case 9: if ("ul" == this.options.tableRender) {
													var e = this.getSelectedIndex(); e = parseInt(e), this.endReached && (this.endReached = !1,
														i.mainGrid.editedCell.handleCancelEdit(t), i.mainGrid._setFocusedCell())
												} else { this.fireClick(t); var o = i.mainGrid.getLastFocusedCell(); i.editRowIndex == o.focusedRowIndex && i.col_index == o.focusedColIndex && ("down" == i.mainGrid.options.tabKeyMove ? i.mainGrid.moveVertical(t, t.shiftKey ? "up" : "down", i.mainGrid.options.keyMoveEditMode) : "none" == i.mainGrid.options.tabKeyMove || i.mainGrid.moveHorizontal(t, t.shiftKey ? "left" : "right", i.mainGrid.options.keyMoveEditMode)) } break; case 13: o = i.mainGrid.getLastFocusedCell(); i.editRowIndex != o.focusedRowIndex || i.col_index != o.focusedColIndex || i.options.moveEditModeByChoice || (i.mainGrid.options.fastEditMode ? "none" == i.mainGrid.options.enterKeyMove || ("right" == i.mainGrid.options.enterKeyMove ? i.mainGrid.moveHorizontal(t, t.shiftKey ? "left" : "right", i.mainGrid.options.keyMoveEditMode) : i.mainGrid.moveVertical(t, t.shiftKey ? "up" : "down", i.mainGrid.options.keyMoveEditMode)) : i.mainGrid.isVirtualCursor() || i.mainGrid._setFocusedCell()); break; case 27: i.mainGrid.editedCell.handleCancelEdit(t), i.mainGrid.isVirtualCursor() || i.mainGrid._setFocusedCell()
											}
										})), r.D.isOpera() && o.event.addListener(o.render, "onkeypress", (function(t) { 9 != t.keyCode && 27 != t.keyCode || d.B.preventDefault(t) })), this.mainGrid._moveKeyEdit(o.uuid, "keyDownFunc", { itemTable: !0 }), WebSquare.WebSquaredoc.itemsetElement.length > 0 && WebSquare.WebSquaredoc.itemsetElement[WebSquare.WebSquaredoc.itemsetElement.length - 1].id == this.mainGridId + "_selectbox_" + this.colID && WebSquare.WebSquaredoc.itemsetElement.pop()
									}, A.select.prototype.setInnerHTML = function(t, e, i, o, s) {
										var n = r.D.getDataPrefix("col_id"), l = r.D.getDataPrefix("rowindex"), h = this.mainGrid._getGroupbyDisplayRowIndex(i); if (this.options.embeddedInput) { var p = this.mainGrid.getInput(this, t, e); if (p.render.setAttribute(l, i), "" == this.options.selectSetter || this.dataComp || (this.initSelectSetter(), p.itemArr = this.itemArr, p.setSelectOptions()), this.hasRef && !this.dataComp) { var u = this.mainGrid.getElemRowIndex(t); p.itemArr = this.getRefItemArr(u), p.setSelectOptions() } if (this.dataComp) { var c = this.mainGrid.modelControl.getDataComp(this.dataComp); if ("linkedDataList" === c.initializeType && null != c.conditionInfo && c.conditionInfo.filterInfo.useRef) { var g = c.conditionInfo.targetInfo, f = {}; for (var m in g) { var y = this.mainGrid.modelControl.getDataComp(m); if (y && null != y.initializeType && "dataMap" !== y.initializeType) { var b = y.getRowPosition(); b != i && (f[m] = b, "linkedDataList" === y.initializeType ? y._dataList.rowPosition = y.filteredRowIndexArr[i] : y.rowPosition = i) } } for (var w in p.stopRefreshItemTable(!0), c.syncWithParent(), p.stopRefreshItemTable(!1), f) { var v = this.mainGrid.modelControl.getDataComp(w); "linkedDataList" === v.initializeType ? v._dataList.rowPosition = v.filteredRowIndexArr[f[w]] : v.rowPosition = f[w] } for (var C = c.getAllJSON(), I = [], _ = 0; _ < C.length; _++)I.push({ label: C[_][this.itemsetObj.label], value: C[_][this.itemsetObj.value] }); p.setNodeSet("", this.itemsetObj.label, this.itemsetObj.value), p.itemArr = I, p.setSelectOptions() } } if (p.setValue(e), !p.setValueNM(e) && !this.dataComp) { var x = {}; x[this.mainGrid.id] = !0, this.mainGrid.dataList.__setCellData(p.render.getAttribute(l), o, p.getValue(), null, null, null, x) } if ("function" == typeof (R = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id))) { this.useCustomFormatter = !0; var S = R.call(this.mainGrid, e, T, h, o); p.dom.label.innerHTML = S } var D = !1; this.mainGrid._getEditDisabled(i, o) ? (p.setDisabled(!0), D = !0) : p.setDisabled(!1), this.mainGrid.__getEditReadOnly(t, i) ? (p.setReadOnly(!0), D = !0) : p.setReadOnly(!1), p.dom.select.disabled = !!D, t.removeAttribute("tabIndex") } else {
											this.initSelectSetter(); u = i; null == e && (e = ""); var R, L = "" !== this.options.escape ? this.options.escape : this.mainGrid.options.escape; if (L = r.D.getBoolean(L), "function" == typeof (R = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id))) { this.useCustomFormatter = !0; var T = this.getDisplayData(e, u); L && (T = WebSquare.xml._encode(T + "")), S = R.call(this.mainGrid, e, T, h, o) } else this.useCustomFormatter = !1, S = this.getData(e, u), L && (S = WebSquare.xml._encode(S + ""))
												; var k, A = this.internal ? this.mainGridId + "_selectbox_" + i + "_" + this.colID + "_" + this.id : this.mainGridId + "_selectbox_" + this.colID; if (this.mainGrid.options.titleFormatter) try { if ("function" != typeof this.mainGrid.options.titleFormatter) { var F = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof F && (this.mainGrid.options.titleFormatter = F, k = F.call(this, i, o, e)) } else k = this.mainGrid.options.titleFormatter.call(this, i, o, e) } catch (t) { a.w.printStackTrace(t, null, this) } var E = k || this.options.title || ""; if (E) t.setAttribute("title", E); else if (this.mainGrid.options.titleAuto) { var M = this.mainGrid.getHeaderValue(this.mainGrid.bodyToHeaderRelation[this.id]) || ""; E = "" !== e ? " title='" + M + " " + e + "'" : " title='" + M + WebSquare.language.getMessage("Grid_select") + "'" } if (r.D.isSafari() && -1 != navigator.userAgent.indexOf("Windows")) if (this.mainGrid.options.plainText && t.firstChild && t.firstChild.firstChild) t.firstChild.firstChild.data = S; else { t.innerHTML = ""; var O = document.createElement(this.mainGrid.options.dataTag); "span" == this.mainGrid.options.dataTag && (O.className = "w2grid_span"), O.style.cssText = "overflow : hidden; text-overflow:ellipsis; display:block; width:100%;", "ul" == this.options.tableRender ? O.innerHTML = "<a href='#" + A + "_itemTable' onclick='event.returnValue=false; return false;' class='w2selectbox_ul_table_main'" + E + ">" + S + "</a>" : O.textContent = S, t.appendChild(O) } else if (this.mainGrid.options.plainText && t.firstChild && t.firstChild.firstChild) t.firstChild.firstChild.data = S; else if ("icon" == this.options.viewType) { t.innerHTML = ""; O = document.createElement(this.mainGrid.options.dataTag); "span" == this.mainGrid.options.dataTag && (O.className = "w2grid_span"), O.style.cssText = "overflow : hidden; text-overflow:ellipsis; display:block; width:auto;", "ul" == this.options.tableRender ? O.innerHTML = "<a href='#" + A + "_itemTable' onclick='event.returnValue=false; return false;' class='w2selectbox_ul_table_main'" + E + ">" + S + "</a>" : O.innerHTML = S, t.appendChild(O) } else { var N = ""; if ("span" == this.mainGrid.options.dataTag && (N = " w2grid_span"), "ul" == this.options.tableRender) t.innerHTML = "<" + this.mainGrid.options.dataTag + "style='overflow : hidden; text-overflow:ellipsis; display:block; width:auto;'><a href='#" + A + "_itemTable' onclick='event.returnValue=false; return false;' class='w2selectbox_ul_table_main" + N + "'" + E + ">" + S + "</a>" + this.mainGrid.dataTagClose; else { var B = t.firstChild, G = "w2grid_select" + N; if (this._checkFastScroll(S, B, G, s && !0 === s.scroll)) { var H = "string" == typeof S ? WebSquare.xml.__decode(S) : S; B.textContent = H } else t.innerHTML = "<" + this.mainGrid.options.dataTag + " class='" + G + "'>" + S + this.mainGrid.dataTagClose } } var W = this.mainGrid.dataList.getRealRowIndex(i), V = this.mainGrid.getCellOption(W, o, "viewType"), q = this.mainGrid.getColumnOption(this.options.col_id, "dataType"), j = r.D.getDataPrefix("editModeEvent"); if ("icon" == V || "" == V && "own" == q ? (this.mainGrid.addClass(t, this.mainGrid.options.bodyTdClass + "_select"), t.setAttribute(j, this.options.editModeEventIcon)) : "onclick" == this.options.editModeEvent ? t.setAttribute(j, "onclick") : "ondblclick" == this.options.editModeEvent ? t.setAttribute(j, "ondblclick") : "onsecondclick" == this.options.editModeEvent ? t.setAttribute(j, "onsecondclick") : (this.mainGrid.removeClass(t, this.mainGrid.options.bodyTdClass + "_select"), t.setAttribute(j, "")), "ul" == this.options.tableRender) { var P = this; this.mainGrid.event.addListener(t, "onfocus", this.mainGrid.event.bindAsEventListener(this.mainGrid, (function(t) { var e = d.B.getTarget(t); P.mainGrid.lastEvent = t; var o = P.mainGrid.getLastFocusedCell(); if ((0 != o.focusedColIndex || 0 != o.focusedRowIndex) && (!r.D.isIEAllVersion() || !o.focusedRowIndex || o.focusedRowIndex == i) && (o.focusedTd == e || P.mainGrid.focusedByApi || P.mainGrid._setFocusedCell(i, e.getAttribute(n)), P.mainGrid.focusedByApi = !1, e.childNodes[0] && e.childNodes[0].childNodes[0])) { var s = e.childNodes[0].childNodes[0]; "A" == s.tagName && s.focus() } }))) }
										}
									}, A.select.prototype.setColumnChooseOption = function(t, e) {
										this.options.chooseOption = !0, this.options.chooseOptionValue = t,
										this.options.chooseOptionLabel = e, this.select && this.select.changeChooseOption(t, e)
									}, A.select.prototype.showChooseOption = function(t) { this.options.chooseOption = t, this.matchInfo = this.setMatchInfo(), this.select && t ? this.select.showChooseOption(t) : this.select && !t && (this.select.showChooseOption(t), this.select.itemArr.length > 1 && 0 != this.select.selectedIndex ? this.select.selectedIndex -= 1 : this.select.selectedIndex = 0, this.editTd.innerHTML = this.mainGrid.dataTagOpen + this.getData(this.select.getValue(), this.select.selectedIndex) + this.mainGrid.dataTagClose) }, A.select.prototype.getData = function(t, e, i) {
										try {
											var o, r = "", n = this.dataComp; if (this.existGridViewItemsetNode || "gridViewItemset" === this.options.itemTableType) { var l = this.itemsetObj.nodeset; l.indexOf("data:") >= 0 && (n = l.slice("data:".length)) } if (n && (o = this.mainGrid.modelControl.getDataComp(n)), n && o) {
												if ("linkedDataList" === o.initializeType && null != o.conditionInfo && o.conditionInfo.filterInfo.useRef) { var h = o.conditionInfo.targetInfo, d = {}; for (var p in h) { var u = this.mainGrid.modelControl.getDataComp(p); if (u && null != u.initializeType && "dataMap" !== u.initializeType) { var c = u.getRowPosition(); c != e && (d[p] = c, "linkedDataList" === u.initializeType ? u._dataList.rowPosition = u.filteredRowIndexArr[e] : u.rowPosition = e) } } for (var g in this.select && this.select.stopRefreshItemTable(!0), o.syncWithParent(), this.select && this.select.stopRefreshItemTable(!1), d) { var f = this.mainGrid.modelControl.getDataComp(g); "linkedDataList" === f.initializeType ? f._dataList.rowPosition = f.filteredRowIndexArr[d[g]] : f.rowPosition = d[g] } } var m = null, y = null, b = null; if ("linkedDataList" === o.initializeType) m = o._dataList, y = o.initialRowIndexArr, b = o.initialRowIndexArr; else if ("dataList" === o.initializeType) { if (m = o, o.options && o.options.validateAllItemsetData) { var w = m.getTotalRow(); y = []; for (var v = 0; v < w; v++)y.push(v) } else y = m.filteredRowIndexArr; b = m.filteredRowIndexArr } var C = !1; if ("linkedDataList" === o.initializeType && this.select) { var I = this.select.getItemCount(), _ = this.select.itemArr; 0 === I ? C = !0 : 1 != I || _[0].label !== this.select._getChooseOptionLabel() && _[0].label !== this.select.defaultAllOptionLabel ? 2 == I && _[0].label === this.select._getChooseOptionLabel() && _[1].label === this.select.defaultAllOptionLabel && (C = !0) : C = !0 } if ((!this.select || C) && null != m) try {
													var x, S; r = ""; if (this.internal || this.existGridViewItemsetNode || "gridViewItemset" === this.options.itemTableType) x = this.itemsetObj.label, S = this.itemsetObj.value; else { var D = WebSquare.Elem.api.getElementsByTagName(this.xml, "label", s.v._XML_NAMESPACE.W2), R = WebSquare.Elem.api.getElementsByTagName(this.xml, "value", s.v._XML_NAMESPACE.W2); D.length > 0 && R.length > 0 && (x = WebSquare.Elem.api.getAttribute(D[0], "ref"), S = WebSquare.Elem.api.getAttribute(R[0], "ref")) } var L = null != x ? m.bodyIdColIndexMap[x] : m.bodyIdColIndexMap[this.itemsetObj.label], T = null != S ? m.bodyIdColIndexMap[S] : m.bodyIdColIndexMap[this.itemsetObj.value]; for (v = 0; v < y.length; v++) { var k = y[v] * m.cellIdList.length; if (t == m.dataArr[k + T]) return r = m.dataArr[k + L], "value delim label" === this.options.displayMode || "1" === this.options.displayMode ? r = t + this.options.delimiter + r : "label delim value" === this.options.displayMode || "2" === this.options.displayMode ? r = r + this.options.delimiter + t : "value" !== this.options.displayMode && "3" !== this.options.displayMode || (r = t), i && i.emptyValue && ("" === r || "$blank" == r) ? r = i.emptyValue : void 0 !== r && "$blank" != r || (r = ""), r } if (this.selectedIndex >= 0 && this.selectedIndex < b.length && !this.options.chooseOption) {
														r = m.dataArr[b[this.selectedIndex] * m.cellIdList.length + L], "value delim label" === this.options.displayMode || "1" === this.options.displayMode ? r = t + this.options.delimiter + r : "label delim value" === this.options.displayMode || "2" === this.options.displayMode ? r = r + this.options.delimiter + t : "value" !== this.options.displayMode && "3" !== this.options.displayMode || (r = t); k = 0; k = this.mainGrid._linkedDataList ? this.mainGrid._linkedDataList.filteredRowIndexArr[e] : this.mainGrid._dataList.filteredRowIndexArr[e]
															; var A = this.mainGrid._dataList.cellIdList.length, F = this.mainGrid._dataList.bodyIdColIndexMap[this.colID], E = m.dataArr[y[this.selectedIndex] * m.cellIdList.length + T]; this.mainGrid._dataList.dataArr[k * A + F] = E
													} else if (this.options.allOption && t == WebSquare.allValue) { r = WebSquare.language.getMessage("Grid_all") || "-전체-" } else if (this.options.chooseOption && t == this.options.chooseOptionValue) r = this.options.chooseOptionLabel; else if (this.options.selectedData) if ("" == t) r = ""; else { k = 0; k = this.mainGrid._linkedDataList ? this.mainGrid._linkedDataList.filteredRowIndexArr[e] : this.mainGrid._dataList.filteredRowIndexArr[e]; A = this.mainGrid._dataList.cellIdList.length, F = this.mainGrid._dataList.bodyIdColIndexMap[this.colID]; this.mainGrid._dataList.dataArr[k * A + F] = "", r = "" } else r = t; return i && i.emptyValue && ("" === r || "$blank" == r) ? r = i.emptyValue : void 0 !== r && "$blank" != r || (r = ""), r
												} catch (e) { return a.w.printStackTrace(e, null, this), t } var M = !1; for (v = 0; v < this.select.itemArr.length; v++)if (this.select.itemArr[v].value == t) { M = !0, r = this.select.itemArr[v].label; break } if (!M && o.options && o.options.validateAllItemsetData) for (v = 0; v < this.select.allItemArr.length; v++)if (this.select.allItemArr[v].value == t) { M = !0, r = this.select.allItemArr[v].label; break } if (!M) if ("" != t || -1 == this.selectedIndex || this.options.chooseOption) if (this.options.allOption && t == WebSquare.allValue) { r = WebSquare.language.getMessage("Grid_all") || "-전체-" } else this.options.chooseOption && t == this.options.chooseOptionValue ? r = this.options.chooseOptionLabel : this.options.selectedData || (r = t); else this.select.itemArr.length > 0 ? (r = this.select.itemArr[this.selectedIndex].label, this.mainGrid.dataList.__setCellData(e, this.colID, r)) : r = t
											} else { var O = this.getMatchInfo(e); "" != t || -1 == this.selectedIndex || this.options.chooseOption ? r = O["SELECT_" + t] : (this.mainGrid.dataList.__setCellData(e, t), r = O["SELECT_" + this.itemArr[this.selectedIndex].label]) } if (i && i.emptyValue && ("" === r || "$blank" == r)) r = i.emptyValue; else if (void 0 === r || "$blank" == r) return ""; return r
										} catch (t) { a.w.printStackTrace(t, null, this) }
									}, A.select.prototype.initSelectSetter = function() { if (0 == this.selectSetted && "" != this.options.selectSetter && !this.dataComp) { this.selectSetted = !0; var t = []; try { this.options.selectSetter = this.options.selectSetter.wq_trim(), this.options.selectSetter.indexOf("(") < 0 && (this.options.selectSetter += "()"), t = new Function("return " + this.options.selectSetter)() } catch (t) { a.w.printStackTrace(t) } this.itemArr = t, this.matchInfo = []; for (var e = 0; e < t.length; e++) { var i = t[e]; null == i.value && (i.value = ""), this.matchInfo["SELECT_" + i.value] = i.label } } }, A.select.prototype.setEditMode = function(t, e) {
										if (!this.options.embeddedInput) {
											if (this.dataComp) { var i = this.mainGrid.modelControl.getDataComp(this.dataComp); i && "linkedDataList" === i.initializeType && null != i.conditionInfo && i.conditionInfo.filterInfo.useRef && i.syncWithParent() } if (!0 !== this._init ? (this.createSelectbox(t, e), this._init = !0) : (t.innerHTML = "", this.mainGrid.cellMergeInfo && this._setSize(t), t.appendChild(this.select.render), this.options.itemTooltipFormatter && (this.select.options._rowIndex = e)), this.mainGrid.directItemChoiceKeyObj.select) { this.editTd = t, this.editRowIndex = e, this.internal && (this.parentColumnInfo.editRowIndex = e, this.parentColumnInfo.editTd = t), this.select.setValue(this.mainGrid.dataList._getCellData(e, this.colID)); var o = this.select.findItemStartedWithKeyChar(this.mainGrid.directItemChoiceKeyObj.select); if (this.mainGrid.dataList.__setCellData(e, this.colID, this.select.getValue()), this.mainGrid.directItemChoiceKeyObj.select = null, this.options.moveFocusByChoice && o && this.moveFocus(this.editRowIndex, this.colID), o) return; this.mainGrid.editedCell = this.mainGrid.getCellInfo(t), t.innerHTML = "", t.appendChild(this.select.render) } if (this.select.itemTable || this.mainGrid.directItemChoiceKeyObj.select || (this.existGridViewItemsetNode && (this.editTd = t), this.createItemTable(t, e)), this.hasRef && !this.dataComp) { var s = this.mainGrid.getElemRowIndex(t); this.select.itemArr = this.getRefItemArr(s), this.select.itemTable.show(), this.select.setSelectOptions() }
											if (this.editRowIndex = e, this.editTd = t, this.internal && (this.parentColumnInfo.editRowIndex = e, this.parentColumnInfo.editTd = t), this.select.setValue(this.mainGrid.dataList._getCellData(e, this.colID)), 0 == this.select.getItemCount() && (this.select.selectedIndex = -1, this.select.dom.label.innerHTML = ""), this.existGridViewItemsetNode && this.select.gridViewOptions.width) this.select.openSubLayer(); else { var a = t.clientWidth - 2, n = { top: 0, left: 0, bottom: 0, right: 0 }; if (r.D.isIEAllVersion("6 7 8")) WebSquare.style.getComputedStyle(t, "padding") && (n.left = parseInt(WebSquare.style.getComputedStyle(t, "padding-left"), 10), n.right = parseInt(WebSquare.style.getComputedStyle(t, "padding-right"), 10), n.top = parseInt(WebSquare.style.getComputedStyle(t, "padding-top"), 10), n.bottom = parseInt(WebSquare.style.getComputedStyle(t, "padding-bottom"), 10)); else (p = WebSquare.style.getComputedStyle(t)) && (p.padding || p.paddingTop || p.paddingBottom || p.paddingLeft || p.paddingRight) && (n.left = parseInt(p.paddingLeft, 10), n.right = parseInt(p.paddingRight, 10), n.top = parseInt(p.paddingTop, 10), n.bottom = parseInt(p.paddingBottom, 10)); this.select.setSize(t.clientWidth - (2 + n.left + n.right), t.clientHeight - (2 + n.top + n.bottom)), this.select.itemTable.setStyle("width", t.clientWidth - 4 + "px"), this.select.openSubLayer(); var l = this.mainGrid.render.offsetWidth, h = this.select.itemTable.render.offsetWidth, d = this.select.itemTable.render.firstChild.offsetWidth; if (h - 2 > a && (a = h - 2), this.select.itemTable.render.clientHeight >= this.select.itemTable.render.scrollHeight || this.select.getItemCount() <= this.select.options.visibleRowNum) this.select.itemTable.render.firstChild.style.width = a + "px", l > h && d < h && this.select.itemTable.render.firstChild.firstChild && this.select.itemTable.render.firstChild.firstChild.offsetWidth <= a && this.select.itemTable.setStyle("width", a + "px"); else { this.select.itemTable.render.firstChild.style.width = a - 17 + "px"; var p; n = { top: 0, left: 0, bottom: 0, right: 0 }; if (r.D.isIEAllVersion("6 7 8")) WebSquare.style.getComputedStyle(t, "padding") && (n.left = parseInt(WebSquare.style.getComputedStyle(t, "padding-left"), 10), n.right = parseInt(WebSquare.style.getComputedStyle(t, "padding-right"), 10), n.top = parseInt(WebSquare.style.getComputedStyle(t, "padding-top"), 10), n.bottom = parseInt(WebSquare.style.getComputedStyle(t, "padding-bottom"), 10)); else (p = WebSquare.style.getComputedStyle(t)) && (p.padding || p.paddingTop || p.paddingBottom || p.paddingLeft || p.paddingRight) && (n.left = parseInt(p.paddingLeft, 10), n.right = parseInt(p.paddingRight, 10), n.top = parseInt(p.paddingTop, 10), n.bottom = parseInt(p.paddingBottom, 10)); this.select.setSize(t.clientWidth - (2 + n.left + n.right), t.clientHeight - (2 + n.top + n.bottom)), l > h && d + 17 <= h - 2 && this.select.itemTable.render.firstChild.firstChild.offsetWidth <= a && this.select.itemTable.setStyle("width", a + "px") } } t.style.textOverflow = "ellipsis"
										}
									}, A.select.prototype._handleEndEdit_common = function(t) { try { this.select.closeSubLayer(); var e = this.select.getValue(); try { this.select.render.parentNode && this.editTd.removeChild(this.select.render) } catch (t) { return } this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)); var i = {}; i[this.mainGrid.id] = !0, this.mainGrid.dataList.__setCellData(this.editRowIndex, this.colID, e, null, null, null, i) } catch (t) { a.w.printStackTrace(t, null, this.mainGrid) } }, A.select.prototype._handleEndEdit_focus = function() { this.options.moveFocusByChoice && this.moveFocus(this.editRowIndex, this.colID) }, A.select.prototype._getEditedValue = function(t) { return this.select.getValue() }, A.select.prototype._handleCancelEdit = function(t) { this.select.closeSubLayer(); var e = this.mainGrid.dataList._getCellData(this.editRowIndex, this.colID); this.editTd.removeChild(this.select.render), this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)) }, A.select.prototype.doDefaultAction = function(t) { t.ctrlKey || this.mainGrid.setEditHtml(t) }, A.select.prototype.moveFocus = function(t, e) {
										if (this.options.moveFocusByChoice) switch (this.options.moveFocusByChoice) {
											case "down": this.mainGrid._setFocusedCell(t + 1, e, !1); break; case "right":
												var i = this.mainGrid.getColumnIndex(e) + 1; this.mainGrid._setFocusedCell(t, i, !1)
										}
									}, A.select.prototype.refreshCell = function() { try { if (!this.options.selectedData) return; if (!this.dataComp) return; var t = this.mainGrid.modelControl.getDataComp(this.dataComp); if (!t) return; var e, i = null, o = null; if ("linkedDataList" === t.initializeType ? (i = t._dataList, o = t.initialRowIndexArr) : "dataList" === t.initializeType && (o = (i = t).filteredRowIndexArr), null == i) return; if (this.internal) this.itemsetObj.label, e = this.itemsetObj.value; else { var r = WebSquare.Elem.api.getElementsByTagName(this.xml, "label", s.v._XML_NAMESPACE.W2), n = WebSquare.Elem.api.getElementsByTagName(this.xml, "value", s.v._XML_NAMESPACE.W2); r.length > 0 && n.length > 0 && (WebSquare.Elem.api.getAttribute(r[0], "ref"), e = WebSquare.Elem.api.getAttribute(n[0], "ref")) } var l, h = null != e ? i.bodyIdColIndexMap[e] : i.bodyIdColIndexMap[this.itemsetObj.value]; l = this.mainGrid.groupbyStatus.grouped ? this.mainGrid.groupbyStatus.groupbyRowIndexArr : this.mainGrid._linkedDataList ? this.mainGrid._linkedDataList.filteredRowIndexArr : this.mainGrid._dataList.filteredRowIndexArr; for (var d = this.mainGrid._dataList.cellIdList.length, p = this.mainGrid._dataList.bodyIdColIndexMap[this.id], u = 0; u < l.length; u++) { var c = l[u]; if ("object" != typeof c) { var g = this.mainGrid._dataList.dataArr[c * d + p]; if (!(this.options.allOption && g == WebSquare.allValue || this.options.chooseOption && g == this.options.chooseOptionValue || !("" !== g || this.selectedIndex >= 0))) { var f = !1; if ("linkedDataList" === t.initializeType && null != t.conditionInfo && t.conditionInfo.filterInfo.useRef) { var m = t.conditionInfo.targetInfo, y = {}; for (var b in m) { var w = this.mainGrid.modelControl.getDataComp(b); if (null != w.initializeType && "dataMap" != w.initializeType) { var v = w.getRowPosition(); v != u && (y[b] = v, "linkedDataList" === w.initializeType ? w._dataList.rowPosition = w.filteredRowIndexArr[u] : w.rowPosition = u) } } var C = t.getBroadcast(); for (var I in t.setBroadcast(!1), t.syncWithParent(), t.setBroadcast(C), y) { var _ = this.mainGrid.modelControl.getDataComp(I); "linkedDataList" === _.initializeType ? _._dataList.rowPosition = _.filteredRowIndexArr[y[I]] : _.rowPosition = y[I] } o = t.initialRowIndexArr } for (var x = 0; x < o.length; x++)if (g == i.dataArr[o[x] * i.cellIdList.length + h]) { f = !0; break } if (!f) { var S = ""; this.selectedIndex >= 0 && this.selectedIndex < o.length && !this.options.chooseOption && (S = i.dataArr[o[this.selectedIndex] * i.cellIdList.length + h]), this.mainGrid._dataList.dataArr[c * d + p] = S } } } } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.checkcombobox = function() { }, A.checkcombobox.prototype._initializeCellInfo = function() { try { this.separator = this.options.separator || " " } catch (t) { a.w.printStackTrace(t, null, this) } }, A.checkcombobox.prototype.setInnerHTML = function(t, e, i, o, s) { try { null == e && (e = ""); var n = "" !== this.options.escape ? this.options.escape : this.mainGrid.options.escape; n = WebSquare.util.getBoolean(n); var l = this.getData(e, i); n && (l = WebSquare.xml._encode(l + "")), t.innerHTML = this.mainGrid.dataTagOpen + l + this.mainGrid.dataTagClose; var h, d = this.mainGrid.dataList.getRealRowIndex(i), p = this.mainGrid.getCellOption(d, o, "viewType"), u = this.mainGrid.getColumnOption(this.options.col_id, "dataType"), c = r.D.getDataPrefix("editModeEvent"); if ("icon" == p || "" == p && "own" == u ? (this.mainGrid.addClass(t, this.mainGrid.options.bodyTdClass + "_checkcombobox"), t.setAttribute(c, this.options.editModeEventIcon)) : "onclick" == this.options.editModeEvent ? t.setAttribute(c, "onclick") : (this.mainGrid.removeClass(t, this.mainGrid.options.bodyTdClass + "_checkcombobox"), t.setAttribute(c, "")), this.mainGrid.options.titleFormatter) try { if ("function" != typeof this.mainGrid.options.titleFormatter) { var g = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof g && (this.mainGrid.options.titleFormatter = g, h = g.call(this, i, o, e)) } else h = this.mainGrid.options.titleFormatter.call(this, i, o, e); t.setAttribute("title", h) } catch (t) { a.w.printStackTrace(t, null, this) } } catch (t) { WebSquare.exception.printStackTrace(t, null, this) } }, A.checkcombobox.prototype.getData = function(t, e, i) {
										try {
											var o = ""; t = t.split(this.separator)
												; var r, n, l = [], h = this.dataComp; if (this.existGridViewItemsetNode || "gridViewItemset" === this.options.itemTableType) { var d = this.itemsetObj.nodeset; d.indexOf("data:") >= 0 && (h = d.slice("data:".length)) } if (h && (n = this.mainGrid.modelControl.getDataComp(h)), h && n) { if ("linkedDataList" === n.initializeType && null != n.conditionInfo && n.conditionInfo.filterInfo.useRef) { var p = n.conditionInfo.targetInfo, u = {}; for (var c in p) { var g = this.mainGrid.modelControl.getDataComp(c); if (null != g.initializeType && "dataMap" != g.initializeType) { var f = g.getRowPosition(); f != e && (u[c] = f, "linkedDataList" === g.initializeType ? g._dataList.rowPosition = g.filteredRowIndexArr[e] : g.rowPosition = e) } } var m = n.getBroadcast(); for (var y in n.setBroadcast(!1), n.syncWithParent(), n.setBroadcast(m), u) { var b = this.mainGrid.modelControl.getDataComp(y); "linkedDataList" === b.initializeType ? b._dataList.rowPosition = b.filteredRowIndexArr[u[y]] : b.rowPosition = u[y] } } var w = null, v = null; if ("linkedDataList" === n.initializeType ? (w = n._dataList, v = n.initialRowIndexArr) : "dataList" === n.initializeType && (v = (w = n).filteredRowIndexArr), !this.checkcombobox && null != w) try { var C, I; o = ""; if (this.internal || this.existGridViewItemsetNode || "gridViewItemset" === this.options.itemTableType) C = this.itemsetObj.label, I = this.itemsetObj.value; else { var _ = WebSquare.Elem.api.getElementsByTagName(this.xml, "label", s.v._XML_NAMESPACE.W2), x = WebSquare.Elem.api.getElementsByTagName(this.xml, "value", s.v._XML_NAMESPACE.W2); 0 != _.length && 0 != x.length && (C = WebSquare.Elem.api.getAttribute(_[0], "ref"), I = WebSquare.Elem.api.getAttribute(x[0], "ref")) } for (var S = w.bodyIdColIndexMap[C], D = w.bodyIdColIndexMap[I], R = 0; R < v.length; R++)for (var L = v[R] * w.cellIdList.length, T = 0; T < t.length; T++)t[T] == w.dataArr[L + D] && (o = w.dataArr[L + S], "value delim label" === this.options.displayMode || "1" === this.options.displayMode ? o = t[T] + this.options.delimiter + o : "label delim value" === this.options.displayMode || "2" === this.options.displayMode ? o = o + this.options.delimiter + t[T] : "value" !== this.options.displayMode && 3 != this.options.displayMode || (o = t[T]), i && i.emptyValue && ("" === o || "$blank" == o) ? o = i.emptyValue : void 0 !== o && "$blank" != o || (o = ""), l.push(o)); if (l.length > 0) return l.join(this.separator); if (this.options.allOption && t == WebSquare.allValue) o = WebSquare.language.getMessage("Grid_all") || "-전체-"; else if (this.options.chooseOption && t == this.options.chooseOptionValue) o = this.options.chooseOptionLabel; else if (this.options.selectedData) if ("" == t) o = ""; else { L = 0; L = this.mainGrid._linkedDataList ? this.mainGrid._linkedDataList.filteredRowIndexArr[e] : this.mainGrid._dataList.filteredRowIndexArr[e]; var k = this.mainGrid._dataList.cellIdList.length, A = this.mainGrid._dataList.bodyIdColIndexMap[this.id]; this.mainGrid._dataList.dataArr[L * k + A] = "", o = "" } else o = t; return i && i.emptyValue && ("" === o || "$blank" == o) ? o = i.emptyValue : void 0 !== o && "$blank" != o || (o = ""), o } catch (e) { return a.w.printStackTrace(e, null, this), t } var F = !1; r = {}; for (R = 0; R < this.checkcombobox.itemArr.length; R++)for (T = 0; T < t.length; T++)this.checkcombobox.itemArr[R].value == t[T] && (l.push(this.checkcombobox.itemArr[R].label), r[R + "_"] = !0, F = !0); if (!F) { if ("" == l && 1 == this.options.chooseOption) { if (o = this.options.chooseOptionLabel || this.defaultChooseOptionLabel, this.options.useLocale && this.options.chooseOptionLabelLocaleRef) (M = this.getLocaleValue(this.options.chooseOptionLabelLocaleRef)) && (o = M); o = WebSquare.xml.decode(o).replace("&nbsp;", " ") } else this.options.selectedData || (o = t); l.push(o), r = null } o = l.join(this.separator) } else {
													var E = this.getMatchInfo(e); for (F = !1, R = 0; R < t.length; R++)void 0 !== (o = E["CHECKCOMBOBOX_" + t[R]]) && (l.push(o), F = !0); if (F) { if (this.options.checkcomboboxRangeSeparator && this.checkcombobox) { r = {}; for (R = 0; R < this.checkcombobox.itemArr.length; R++)for (T = 0; T < t.length; T++)this.checkcombobox.itemArr[R].value == t[T] && (r[R + "_"] = !0) } } else {
														if ("" == l && 1 == this.options.chooseOption) {
															var M; if (o = this.options.chooseOptionLabel || this.defaultChooseOptionLabel, this.options.useLocale && this.options.chooseOptionLabelLocaleRef) (M = this.getLocaleValue(this.options.chooseOptionLabelLocaleRef)) && (o = M)
																; o = WebSquare.xml.decode(o).replace("&nbsp;", " ")
														} else this.options.selectedData || (o = t); l.push(o)
													} o = l.join(this.separator)
												} if (i && i.emptyValue && ("" === o || "$blank" == o)) o = i.emptyValue; else if (void 0 === o || "$blank" == o) return ""; return this.options.checkcomboboxRangeSeparator && this.checkcombobox && r ? this.checkcombobox._getRangeText(this.checkcombobox.itemArr, this.checkcombobox.itemArr.length, this.separator, r) : o
										} catch (t) { a.w.printStackTrace(t, null, this) }
									}, A.checkcombobox.prototype._createComponent = function(t) { try { if (this.comp) return; this.style = "position:relative;left:0px;top:0px;background-color:#ffffff;", this.xml.setAttribute("class", this.mainGridId + "_checkcombobox_" + this.colID), this.xml.setAttribute("chooseOption", this.options.chooseOption + ""), this.xml.setAttribute("chooseOptionLabel", this.options.chooseOptionLabel), this.xml.setAttribute("allOption", this.options.allOption + ""), "column" === this.options.submenuSize ? this.xml.setAttribute("submenuSize", "column") : this.xml.setAttribute("submenuSize", "auto"), this.xml.setAttribute("style", this.style), this.xml.setAttribute("disabled", this.mainGrid.getDisabled("cell", this.mainGrid._getGroupbyDisplayRowIndex(t), this.colID)), this.xml.setAttribute("useDrag", this.options.checkcomboboxUseDrag), this.xml.setAttribute("useEdit", this.options.checkcomboboxUseEdit), this.xml.setAttribute("rangeSeparator", this.options.checkcomboboxRangeSeparator), this.xml.setAttribute("validateOnInput", this.options.checkcomboboxValidateOnInput), this.options.checkcomboboxVisibleRowNum > 1 && this.xml.setAttribute("visibleRowNum", this.options.checkcomboboxVisibleRowNum), this.options.checkcomboboxVisibleColNum > 1 && this.xml.setAttribute("visibleColNum", this.options.checkcomboboxVisibleColNum), this.options.checkcomboboxVisibleColMax > 1 && this.xml.setAttribute("visibleColMax", this.options.checkcomboboxVisibleColMax), this.configOptions.separator = this.separator, this.configOptions._scope_obj_uuid = this.options._scope_obj_uuid, this.existGridViewItemsetNode && !this.configOptions.submenuSize && (this.configOptions.submenuSize = "auto"), this.internal && (this.options.itemTableType && (this.configOptions.itemTableType = this.options.itemTableType), this.options.itemSet && (this.configOptions.itemSet = this.options.itemSet), this.options.item && (this.configOptions.item = this.options.item), this.options.gridViewOptions && (this.configOptions.gridViewOptions = this.options.gridViewOptions)), this.checkcombobox = new WebSquare.uiplugin.checkcombobox(this.mainGridId + "_checkcombobox_" + this.id, this.configOptions, this.xml), this.comp = this.checkcombobox; var e = this; this.checkcombobox.__closeSubLayer = this.checkcombobox.closeSubLayer, this.checkcombobox.closeSubLayer = function() { this.__closeSubLayer(), e.handleEndEdit() }, this.checkcombobox.toggle = function() { if (this.isOpen) { var i = this.getValue(), o = this.getInfoArray(); this.__closeSubLayer(); var s = this.getValue(), a = e.mainGrid.getColumnIndex(e.options.id); if (i != s) { var r = { oldInfo: o, newInfo: this.getInfoArray(), oldValue: i, newValue: s, rowIndex: t, colIndex: a }; d.B.fireEvent(e.mainGrid, "onviewchange", r) } e.handleEndEdit() } else this.openSubLayer() }, this.checkcombobox._parent_uuid = this.mainGrid.uuid } catch (t) { a.w.printStackTrace(t, null, this.mainGrid) } }, A.checkcombobox.prototype.setEditMode = function(t, e) {
										try {
											if (!0 !== this._init) {
												if (this._createComponent(e), t.innerHTML = this.checkcombobox.toHTML(), this.checkcombobox.activate(), this.internal && "gridViewItemset" !== this.options.itemTableType && this.comp.setNodeSet(this.initializeInfo.itemSet.nodeset, this.initializeInfo.itemSet.label, this.initializeInfo.itemSet.value), this.checkcombobox.setSize(t.clientWidth - 2, t.clientHeight - 2), this.checkcombobox.setSubLayer(), !this.existGridViewItemsetNode) {
													var i = this.checkcombobox.itemTable, o = this; i.addKeyDownEventListener((function(t) {
														switch (t.keyCode) {
															case 9: o.checkcombobox.closeSubLayer(), o.mainGrid.moveHorizontal(t, t.shiftKey ? "left" : "right", o.mainGrid.options.keyMoveEditMode); break; case 13:
																o.mainGrid.options.fastEditMode ? "none" == o.mainGrid.options.enterKeyMove || ("right" == o.mainGrid.options.enterKeyMove ? o.mainGrid.moveHorizontal(t, t.shiftKey ? "left" : "right", o.mainGrid.options.keyMoveEditMode) : o.mainGrid.moveVertical(t, t.shiftKey ? "up" : "down", o.mainGrid.options.keyMoveEditMode)) : o.checkcombobox.closeSubLayer(); break; case 27: o.mainGrid.editedCell.handleCancelEdit(t)
														}
													})), this.mainGrid._moveKeyEdit(i.uuid, "keyDownFunc", { itemTable: !0 })
												} this._init = !0
											} else t.innerHTML = "", this.mainGrid.cellMergeInfo && this.checkcombobox.setSize(t.clientWidth - 2, t.clientHeight - 2), t.appendChild(this.checkcombobox.render); if (this.hasRef && !this.dataComp) { var s = this.mainGrid.getElemRowIndex(t); this.checkcombobox.itemArr = this.getRefItemArr(s), this.checkcombobox.setSelectOptions() } this.existGridViewItemsetNode ? (this.checkcombobox.openSubLayer(), this.checkcombobox.setValue(this.mainGrid.dataList._getCellData(e, this.colID))) : (this.checkcombobox.setValue(this.mainGrid.dataList._getCellData(e, this.colID)), this.checkcombobox.openSubLayer()), this.editRowIndex = e, this.editTd = t, this.internal && (this.parentColumnInfo.editRowIndex = e, this.parentColumnInfo.editTd = t); var r = this.checkcombobox.itemTable.render.firstChild.clientWidth; r < t.clientWidth - 2 && (r = t.clientWidth - 2), r < this.checkcombobox.itemTable.render.offsetWidth - 2 && (r = this.checkcombobox.itemTable.render.offsetWidth - 2), this.checkcombobox.setSize(t.clientWidth - 2, t.clientHeight - 2), this.checkcombobox.setItemTable(), t.style.textOverflow = "ellipsis"
										} catch (t) { a.w.printStackTrace(t, null, this.mainGrid) }
									}, A.checkcombobox.prototype._handleEndEdit_common = function(t) { try { this.checkcombobox.__closeSubLayer && this.checkcombobox.__closeSubLayer(); var e = this.checkcombobox.getValue(); try { this.editTd.removeChild(this.checkcombobox.render) } catch (t) { return } this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)); var i = {}; i[this.mainGrid.id] = !0, this.mainGrid.dataList.__setCellData(this.editRowIndex, this.colID, e, null, null, null, i) } catch (t) { a.w.printStackTrace(t, null, this.mainGrid) } }, A.checkcombobox.prototype._handleEndEdit_focus = function() { this.mainGrid._setFocusedCell() }, A.checkcombobox.prototype.doDefaultAction = function(t) { t.ctrlKey || this.mainGrid.setEditHtml(t) }, A.checkcombobox.prototype._handleCancelEdit = function(t) { this.checkcombobox.__closeSubLayer(); var e = this.mainGrid.dataList._getCellData(this.editRowIndex, this.colID); this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)), this.mainGrid._setFocusedCell() }, A.checkcombobox.prototype._getEditedValue = function(t) { return this.checkcombobox.getValue() }, A.checkcombobox.prototype.refreshItemArr = function(t) { var e = WebSquare.WebSquareparser.parseChoices(this.xml, ""); if (e.length > 0 ? this.itemArr = e : this.itemArr = this.modelControl.getItemsetData(), 1 == this.options.allOption) { var i = WebSquare.language.getMessage("Grid_all") || "-전체-"; this.itemArr = [{ label: i, value: WebSquare.allValue }].concat(this.itemArr) } }, A.autoComplete = function() { }, A.autoComplete.prototype.setInnerHTML = function(t, e, i, o, s) {
										try {
											var n; null == e && (e = ""); var l = this.mainGrid._getGroupbyDisplayRowIndex(i), h = "" !== this.options.escape ? this.options.escape : this.mainGrid.options.escape; h = r.D.getBoolean(h); var p = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id); if ("function" == typeof p) { this.useCustomFormatter = !0; var u = this.getDisplayData(e, i); h && (u = WebSquare.xml._encode(u + "")), n = p.call(this.mainGrid, e, u, l, o) } else { this.useCustomFormatter = !1, n = this.getData(e, i), h && (n = WebSquare.xml._encode(n + "")); var c = this.options.displayFormat || this.options.displayFormatter || this.options.ioFormat; n && this.formatter && c && (n = this.formatter.format(n)) } var g = this.mainGrid.dataList.getRealRowIndex(i), f = this.mainGrid.getCellOption(g, o, "viewType"), m = r.D.getDataPrefix("col_id"), y = r.D.getDataPrefix("rowIndex"), b = r.D.getDataPrefix("colIndex"); if ("icon" == f && "true" == this.options.viewTypeIconImage) {
												t.innerHTML = ["<table style='border-collapse:collapse; border-spacing:0px; width:100%; table-layout:fixed;'>", "<td " + m + "='" + this.colID + "' " + y + "='" + i + "' " + b + "='" + o + "' class='" + this.mainGrid.options.bodyTdClass + "_autoComplete_table' style='width:90%; overflow:hidden; text-overflow:ellipsis;'>", this.mainGrid.dataTagOpen + n + this.mainGrid.dataTagClose, "</td>", "<td " + m + "='" + this.colID + "' " + y + "='" + i + "'  " + b + "='" + o + "' class='" + this.mainGrid.options.bodyTdClass + "_autoComplete_img'>", "<div class='" + this.mainGrid.options.bodyTdClass + "_autoComplete_div_img' />", "</td>", "</table>"].join(""); var w = this, v = t, C = t.getElementsByTagName("div")[0]; d.B.addListener(C, "onclick", (function(t) { w.mainGrid._getEditDisabled(i, o) || w.mainGrid.___getEditReadOnly(i, o) || (w.autoCompleteImageClicked = !0, w.options.directOpen && (w.mainGrid.__setFocusedCell(t, v), w.mainGrid.setEditMode(v))) }))
											} else { t.innerHTML = this.mainGrid.dataTagOpen + n + this.mainGrid.dataTagClose; var I, _ = this.mainGrid.getColumnOption(this.options.col_id, "dataType"), x = r.D.getDataPrefix("editModeEvent"); if ("icon" == f || "" == f && "own" == _ ? (this.mainGrid.addClass(t, this.mainGrid.options.bodyTdClass + "_autoComplete"), t.setAttribute(x, this.options.editModeEventIcon)) : "onclick" == this.options.editModeEvent ? t.setAttribute(x, "onclick") : (this.mainGrid.removeClass(t, this.mainGrid.options.bodyTdClass + "_autoComplete"), t.setAttribute(x, "")), this.mainGrid.options.titleFormatter) try { if ("function" != typeof this.mainGrid.options.titleFormatter) { var S = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof S && (this.mainGrid.options.titleFormatter = S, I = S.call(this, i, o, e)) } else I = this.mainGrid.options.titleFormatter.call(this, i, o, n); t.setAttribute("title", I) } catch (t) { a.w.printStackTrace(t, null, this) } }
										} catch (t) { a.w.printStackTrace(t, null, this.mainGrid) }
									}, A.autoComplete.prototype._initializeCellInfo = function(t) { try { "useData" == this.options.noResult && (this.useDataInfo = {}) } catch (t) { a.w.printStackTrace(t, null, this.mainGrid) } }, A.autoComplete.prototype.getData = function(t, e, i) {
										try {
											var o, r = "", n = this.dataComp; if (this.existGridViewItemsetNode || "gridViewItemset" === this.options.itemTableType) { var l = this.itemsetObj.nodeset; l.indexOf("data:") >= 0 && (n = l.slice("data:".length)) } if (n && (o = this.mainGrid.modelControl.getDataComp(n)), n && o) {
												if ("linkedDataList" === o.initializeType && null != o.conditionInfo && o.conditionInfo.filterInfo.useRef) { var h = o.conditionInfo.targetInfo, d = {}; for (var p in h) { var u = this.mainGrid.modelControl.getDataComp(p); if (null != u.initializeType && "dataMap" != u.initializeType) { var c = u.getRowPosition(); c != e && (d[p] = c, "linkedDataList" === u.initializeType ? u._dataList.rowPosition = u.filteredRowIndexArr[e] : u.rowPosition = e) } } for (var g in o.syncWithParent(), d) { var f = this.mainGrid.modelControl.getDataComp(g); "linkedDataList" === f.initializeType ? f._dataList.rowPosition = f.filteredRowIndexArr[d[g]] : f.rowPosition = d[g] } } var m = null, y = null, b = null; if ("linkedDataList" === o.initializeType) m = o._dataList, y = o.initialRowIndexArr, b = o.initialRowIndexArr; else if ("dataList" === o.initializeType) { if (m = o, o.options && o.options.validateAllItemsetData) { var w = m.getTotalRow(); y = []; for (var v = 0; v < w; v++)y.push(v) } else y = m.filteredRowIndexArr; b = m.filteredRowIndexArr } if (!this.autoComplete && null != m) try {
													var C, I; r = ""; if (this.internal || this.existGridViewItemsetNode || "gridViewItemset" === this.options.itemTableType) C = this.itemsetObj.label, I = this.itemsetObj.value; else { var _ = WebSquare.Elem.api.getElementsByTagName(this.xml, "label", s.v._XML_NAMESPACE.W2), x = WebSquare.Elem.api.getElementsByTagName(this.xml, "value", s.v._XML_NAMESPACE.W2); _.length > 0 && x.length > 0 && (C = WebSquare.Elem.api.getAttribute(_[0], "ref"), I = WebSquare.Elem.api.getAttribute(x[0], "ref")) } var S = null != C ? m.bodyIdColIndexMap[C] : m.bodyIdColIndexMap[this.itemsetObj.label], D = null != I ? m.bodyIdColIndexMap[I] : m.bodyIdColIndexMap[this.itemsetObj.value]; for (v = 0; v < y.length; v++) {
														var R = y[v] * m.cellIdList.length; if (t == m.dataArr[R + D]) return r = m.dataArr[R + S],
															"value delim label" === this.options.displayMode || 1 == this.options.displayMode ? r = t + this.options.delimiter + r : "label delim value" === this.options.displayMode || 2 == this.options.displayMode ? r = r + this.options.delimiter + t : "value" !== this.options.displayMode && 3 != this.options.displayMode || (r = t), i && i.emptyValue && ("" === r || "$blank" == r) ? r = i.emptyValue : void 0 !== r && "$blank" != r || (r = ""), r
													} if (this.selectedIndex >= 0 && this.selectedIndex < b.length && !this.options.chooseOption) r = m.dataArr[b[this.selectedIndex] * m.cellIdList.length + S], "value delim label" === this.options.displayMode || "1" === this.options.displayMode ? r = t + this.options.delimiter + r : "label delim value" === this.options.displayMode || "2" === this.options.displayMode ? r = r + this.options.delimiter + t : "value" !== this.options.displayMode && "3" !== this.options.displayMode || (r = t); else if (this.options.allOption && t == WebSquare.allValue) { r = WebSquare.language.getMessage("Grid_all") || "-전체-" } else if (this.options.chooseOption && t == this.options.chooseOptionValue) r = this.options.chooseOptionLabel; else if (this.options.selectedData) if ("" == t) r = ""; else { R = 0; R = this.mainGrid._linkedDataList ? this.mainGrid._linkedDataList.filteredRowIndexArr[e] : this.mainGrid._dataList.filteredRowIndexArr[e]; var L = this.mainGrid._dataList.cellIdList.length, T = this.mainGrid._dataList.bodyIdColIndexMap[this.colID]; this.mainGrid._dataList.dataArr[R * L + T] = "", r = "" } else r = t; return i && i.emptyValue && ("" === r || "$blank" == r) ? r = i.emptyValue : void 0 !== r && "$blank" != r || (r = ""), r
												} catch (e) { return a.w.printStackTrace(e, null, this), t } var k = !1; for (v = 0; v < this.autoComplete.itemArr.length; v++)if (this.autoComplete.itemArr[v].value == t) { k = !0, r = this.autoComplete.itemArr[v].label; break } if (!k && o.options && o.options.validateAllItemsetData) for (v = 0; v < this.autoComplete.allItemArr.length; v++)if (this.autoComplete.allItemArr[v].value == t) { k = !0, r = this.autoComplete.allItemArr[v].label; break } if (!k) if ("" != t || -1 == this.selectedIndex || this.options.chooseOption) if (this.options.allOption && t == WebSquare.allValue) { r = WebSquare.language.getMessage("Grid_all") || "-전체-" } else this.options.chooseOption && t == this.options.chooseOptionValue ? r = this.options.chooseOptionLabel : this.options.selectedData || (r = t); else r = this.autoComplete.itemArr[this.selectedIndex].label, this.mainGrid.dataList.__setCellData(e, this.colID, r)
											} else { var A = this.getMatchInfo(e); "useData" == this.options.noResult && (this.useDataInfo["AUTOCOMPLETE_" + t] || (this.useDataInfo["AUTOCOMPLETE_" + t] = t), A["AUTOCOMPLETE_" + t] || (this.matchInfo["AUTOCOMPLETE_" + t] = t, this.itemArr = [{ label: t, value: "" }].concat(this.itemArr))), r = A["AUTOCOMPLETE_" + t] } if (i && i.emptyValue && ("" === r || "$blank" == r)) r = i.emptyValue; else if (void 0 === r || "$blank" == r) return ""; return r
										} catch (t) { a.w.printStackTrace(t, null, this) } return t
									}, A.autoComplete.prototype._createComponent = function(t) {
										try {
											if (this.comp) return; if (this.options.disableEdit ? this.style = "position:relative;left:0px;top:0px;" : this.style = "position:relative;left:0px;top:0px;background-color:#ffffff;", this.xml.setAttribute("class", this.mainGridId + "_autoComplete_" + this.colID), this.xml.setAttribute("style", this.style), this.configOptions = {}, this.options.interactionMode && (this.configOptions.interactionMode = this.options.interactionMode), this.options.submission && (this.configOptions.submission = this.options.submission), this.options.sortOption && (this.configOptions.sortOption = this.options.sortOption), this.options.displayMode && (this.configOptions.displayMode = this.options.displayMode), this.options.search && (this.configOptions.search = this.options.search), this.options.searchTarget && (this.configOptions.searchTarget = this.options.searchTarget), this.options.useKeywordHighlight && (this.configOptions.useKeywordHighlight = this.options.useKeywordHighlight), this.options.submenuSize && (this.configOptions.submenuSize = this.options.submenuSize), this.options.searchTarget && (this.configOptions.searchTarget = this.options.searchTarget), this.options.useKeywordHighlight && (this.configOptions.useKeywordHighlight = this.options.useKeywordHighlight),
												this.options.allOption && (this.configOptions.allOption = this.options.allOption), this.options.chooseOptionLabel && (this.configOptions.chooseOptionLabel = this.options.chooseOptionLabel), this.options.noResult && (this.configOptions.noResult = this.options.noResult), this.options.disableEdit && (this.configOptions.disableEdit = this.options.disableEdit), this.options.findItemFirstKey && (this.configOptions.findItemFirstKey = this.options.findItemFirstKey), this.options.findItemKor && (this.configOptions.findItemKor = this.options.findItemKor), r.D.isIEAllVersion() && this.xml.removeAttribute("readOnly"), this.internal && (this.options.displayFormatter && (this.configOptions.displayFormatter = this.options.displayFormatter), this.options.itemTableType && (this.configOptions.itemTableType = this.options.itemTableType), this.options.itemSet && (this.configOptions.itemSet = this.options.itemSet), this.options.item && (this.configOptions.item = this.options.item), this.options.gridViewOptions && (this.configOptions.gridViewOptions = this.options.gridViewOptions), this.options.caseSensitive && (this.configOptions.caseSensitive = this.options.caseSensitive)), this.existGridViewItemsetNode && !this.configOptions.submenuSize && (this.configOptions.submenuSize = "auto"), this.hasRef) this.targetRowIndex = t, WebSquare.Elem.api.getElementsByTagName(this.xml, "w2:itemset")[0].setAttribute("nodeset", new Function("_this", "return " + this.refStr)(this)); this.configOptions._scope_obj_uuid = this.options._scope_obj_uuid, this.autoComplete = new WebSquare.uiplugin.autoComplete(this.mainGridId + "_autoComplete_" + t + "_" + this.colID + "_" + this.id, this.configOptions, this.xml), this.autoComplete.options.disabled = !1, this.comp = this.autoComplete, this.internal && "gridViewItemset" !== this.options.itemTableType && this.comp.setItemSet(this.initializeInfo.itemSet.nodeset, this.initializeInfo.itemSet.label, this.initializeInfo.itemSet.value); var e = this; this.autoComplete._handleClickEvent = this.autoComplete.handleClickEvent, this.autoComplete.handleClickEvent = function(t) { this._handleClickEvent(t), d.B.stopEvent(t) }, this.existGridViewItemsetNode ? (this.autoComplete._setSubLayer = this.autoComplete.setSubLayer, this.autoComplete.setSubLayer = function(t) { this._setSubLayer(t); var i = this.itemTable; i.addKeyDownEventListener((function(t) { switch (t.keyCode) { case 9: this.fireClick(t), "down" == e.mainGrid.options.tabKeyMove ? e.mainGrid.moveVertical(t, t.shiftKey ? "up" : "down", e.mainGrid.options.keyMoveEditMode) : "none" == e.mainGrid.options.tabKeyMove || e.mainGrid.moveHorizontal(t, t.shiftKey ? "left" : "right", e.mainGrid.options.keyMoveEditMode); break; case 27: e.handleCancelEdit(t) } })), i.addClickEventListener((function(t, i) { e.autoComplete.dom.input.value = e.autoComplete.viewArr[i].label, e.autoComplete.selectedText = e.autoComplete.viewArr[i].orgLabel, e.autoComplete.selectedValue = e.autoComplete.viewArr[i].value; var o = e.autoComplete.selectedText + "|" + e.autoComplete.selectedValue; i = e.autoComplete.findinItemArr(o, "all"); e.autoComplete.setSelectedIndex1(i), e.autoComplete.editmode = !1, e.handleEndEdit() })) }) : (this.autoComplete._setSubLayer = this.autoComplete.setSubLayer, this.autoComplete.setSubLayer = function(t) {
													this._setSubLayer(t); var i = this.itemTable; i.addKeyDownEventListener((function(t) { switch (t.keyCode) { case 9: this.fireClick(t), "down" == e.mainGrid.options.tabKeyMove ? e.mainGrid.moveVertical(t, t.shiftKey ? "up" : "down", e.mainGrid.options.keyMoveEditMode) : "none" == e.mainGrid.options.tabKeyMove || e.mainGrid.moveHorizontal(t, t.shiftKey ? "left" : "right", e.mainGrid.options.keyMoveEditMode); break; case 13: e.mainGrid.options.fastEditMode && ("none" == e.mainGrid.options.enterKeyMove || ("right" == e.mainGrid.options.enterKeyMove ? e.mainGrid.moveHorizontal(t, t.shiftKey ? "left" : "right", e.mainGrid.options.keyMoveEditMode) : e.mainGrid.moveVertical(t, t.shiftKey ? "up" : "down", e.mainGrid.options.keyMoveEditMode))); break; case 27: e.handleCancelEdit(t) } })), i.addClickEventListener((function(t, i) {
														e.autoComplete.dom.input.value = e.autoComplete.viewArr[i].label, e.autoComplete.selectedText = e.autoComplete.viewArr[i].orgLabel,
														e.autoComplete.selectedValue = e.autoComplete.viewArr[i].value; var o = e.autoComplete.selectedText + "|" + e.autoComplete.selectedValue; i = e.autoComplete.findinItemArr(o, "all"); e.autoComplete.setSelectedIndex1(i), e.autoComplete.editmode = !1, e.handleEndEdit(), e.options.directOpen && e.mainGrid._setFocusedCell()
													})), e.mainGrid._moveKeyEdit(i.uuid, "keyDownFunc", { itemTable: !0 })
												}), this.autoComplete.showEditMode = function(t) { try { t ? (this.dom.label.style.display = "none", this.dom.label.style.visibility = "hidden", this.dom.input.style.display = "block", this.dom.input.style.visibility = "visible") : (this.dom.input.style.display = "none", this.dom.input.style.visibility = "hidden", this.dom.label.style.display = "block", this.dom.label.style.visibility = "visible") } catch (t) { } }, this.autoComplete._inputKeyDown = this.autoComplete.inputKeyDown, this.autoComplete.inputKeyDown = function(t, i) { 27 == t.keyCode || (e.autoComplete._inputKeyDown(t, i), 13 === t.keyCode && e.options.directOpen && (e.mainGrid._setFocusedCell(), d.B.stopPropagation(t))) }, this.mainGrid._moveKeyEdit(this.autoComplete.uuid, "_inputKeyDown", { skipVertical: !0 }), this.autoComplete.setSelectedIndex1 = function(t) { var i = this.selectedIndex, o = this.getValue(); if (this.setSelectedIndex(t), i != this.selectedIndex) { var s = e.mainGrid.getColumnIndex(e.options.id), a = e.editRowIndex, r = { oldValue: o, newValue: this.getValue(), oldSelectedIndex: i, newSelectedIndex: this.selectedIndex, rowIndex: a, colIndex: s }; d.B.fireEvent(e.mainGrid, "onviewchange", r) } this.closeSubLayer(), e.editTd && e.handleEndEdit(), e.existGridViewItemsetNode && e.options.directOpen && e.mainGrid._setFocusedCell() }, this.autoComplete._refreshItemset = this.autoComplete.refreshItemset, this.autoComplete.refreshItemset = function(t) { "gridViewItemset" !== this.options.itemTableType && (e.matchInfo = e.setMatchInfo()), this._refreshItemset(t) }, this.autoComplete.options.handleOtherClick = !1
										} catch (t) { a.w.printStackTrace(t, null, this) }
									}, A.autoComplete.prototype.setEditMode = function(t, e) { try { if (!0 !== this._init ? (this._createComponent(e), t.innerHTML = this.autoComplete.toHTML(), this.autoComplete.activate(), this.autoComplete.setSize(t.clientWidth - 2 + "px", t.clientHeight - 2 + "px"), this._init = !0, this.options.placeholder && this.autoComplete.dom.input.setAttribute("placeholder", this.options.placeholder)) : (t.innerHTML = "", this.mainGrid.cellMergeInfo && this.autoComplete.setSize(t.clientWidth - 2 + "px", t.clientHeight - 2 + "px"), t.appendChild(this.autoComplete.render)), this.autoComplete.setSize(t.clientWidth - 2 + "px", t.clientHeight - 2 + "px"), this.hasRef) { var i = this.mainGrid.getElemRowIndex(t); this.autoComplete.itemArr = this.getRefItemArr(i) } if (this.editRowIndex = e, this.editTd = t, this.internal && (this.parentColumnInfo.editRowIndex = e, this.parentColumnInfo.editTd = t), this.autoComplete.itemArr.length > 0 || this.autoComplete.allItemArr.length > 0) { var o = this.mainGrid.dataList._getCellData(e, this.colID); if (this.autoComplete.setValue(o), !0 === this.autoComplete.options.disableEdit || !0 === this.autoCompleteImageClicked) { if (this.autoCompleteImageClicked && this.options.directOpen) if (this.autoComplete.viewArr = [], this.existGridViewItemsetNode); else for (var s = 0; s < this.autoComplete.itemArr.length; s++)this.autoComplete.viewArr.push({ label: this.autoComplete.itemArr[s].label, value: this.autoComplete.itemArr[s].value, orgLabel: this.autoComplete.itemArr[s].orgLabel, index: s, _hidden: this.autoComplete.itemArr[s]._hidden }); this.autoComplete.openSubLayer(), this.autoCompleteImageClicked = !1 } else this.autoComplete.setInputFocus() } else this.autoComplete.options.disableEdit || this.autoComplete.setInputFocus(), this.autoComplete.dom.input.value = ""; 0 == this.autoComplete.getItemCount() && (this.autoComplete.selectedIndex = -1, this.autoComplete.dom.label.innerHTML = "") } catch (t) { a.w.printStackTrace(t, null, this.mainGrid) } }, A.autoComplete.prototype.setColumnDisableEdit = function(t) { try { this.options.disableEdit = !0, this.autoComplete && this.autoComplete.disableEdit(t) } catch (t) { a.w.printStackTrace(t, null, this.mainGrid) } }, A.autoComplete.prototype._handleEndEdit_common = function(t) {
										try {
											this.autoComplete.endEdit({
												noEvent: !0
											}), this.autoComplete.closeSubLayer(); var e = this.autoComplete.getValue(); try { this.editTd.removeChild(this.autoComplete.render) } catch (t) { return } this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)); var i = {}; i[this.mainGrid.id] = !0, this.mainGrid.dataList.__setCellData(this.editRowIndex, this.colID, e, null, null, null, i), this.options.directOpen && (this.autoComplete.editmode = !1)
										} catch (t) { a.w.printStackTrace(t, null, this.mainGrid) }
									}, A.autoComplete.prototype._handleEndEdit_focus = function(t, e, i) { !1 === i && this.mainGrid._setFocusedCell() }, A.autoComplete.prototype._handleCancelEdit = function(t) { this.autoComplete.closeSubLayer(); var e = this.mainGrid.dataList._getCellData(this.mainGrid.getRealRowIndex(this.editRowIndex), this.colID); this.editTd.removeChild(this.autoComplete.render), this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)), this.mainGrid._setFocusedCell() }, A.autoComplete.prototype._getEditedValue = function(t) { return this.autoComplete.getValue() }, A.autoComplete.prototype.doDefaultAction = function(t) { t.ctrlKey || this.mainGrid.setEditHtml(t) }, A.calendar = function() { }, A.calendar.prototype.initializeCellInfo = function(t) { try { this.options.useIOFormatLength && this.refreshDataArr() } catch (t) { a.w.printStackTrace(t, null, this) } }, A.calendar.prototype.setInnerHTML = function(t, e, i, o, s) {
										if (this.options.embeddedInput) { var n = this.mainGrid.getInput(this, t, e); null == n.render.parentNode && (t.innerHTML = "", t.appendChild(n.render)); var l = 0, h = 0, p = !1; "none" == t.parentNode.style.display && (t.parentNode.style.display = "", p = !0), this.mainGrid.embeddedCalendarStyleObj || (this.mainGrid.embeddedCalendarStyleObj = { top: parseInt(WebSquare.style.getStyle(t, "padding-top"), 10), bottom: parseInt(WebSquare.style.getStyle(t, "padding-bottom"), 10), left: parseInt(WebSquare.style.getStyle(t, "padding-left"), 10), right: parseInt(WebSquare.style.getStyle(t, "padding-right"), 10) }), l = t.offsetHeight - parseInt(WebSquare.style.getStyle(t, "border-top-width"), 10) - parseInt(WebSquare.style.getStyle(t, "border-bottom-width"), 10), l -= this.mainGrid.embeddedCalendarStyleObj.top + this.mainGrid.embeddedCalendarStyleObj.bottom, this.mainGrid.embeddedWidthObj[o] && !this.mainGrid.embeddedWidthObj[o].isChanged || (this.mainGrid.embeddedWidthObj[o] = { isChanged: !1, width: t.clientWidth }), h = this.mainGrid.embeddedWidthObj[o].width, h -= this.mainGrid.embeddedCalendarStyleObj.left + this.mainGrid.embeddedCalendarStyleObj.right, p ? t.parentNode.style.display = "none" : r.D.isIE("6 7") && (l -= 2); var u = r.D.getDataPrefix("rowindex"); n.setSize(h - 2, l), n.render.setAttribute(u, i), "all" == this.options.applyFormat || this.options.displayFormat || (e = this.getDisplayData(e)), n._setValue(e, { skipValidate: !0 }), this.mainGrid.__getEditReadOnly(t, i) || this.mainGrid._getEditDisabled(i, o) ? n.setDisabled(!0) : n.setDisabled(!1), t.removeAttribute("tabIndex") } else {
											var c = "" !== this.options.escape ? this.options.escape : this.mainGrid.options.escape; (c = r.D.getBoolean(c)) && (e = WebSquare.xml._encode(e + "")), this.options.useMonthYearFormat && (e = WebSquare.date.getIOFormatDate(e, this.options.ioFormat, this.options.calendarValueType)); var g = this.getDisplayData(e), f = this.mainGrid._dataList.filteredRowIndexArr[i], m = this.mainGrid.getCellOption(f, o, "viewType"), y = r.D.getDataPrefix("rowIndex"), b = r.D.getDataPrefix("colIndex"), w = r.D.getDataPrefix("col_id"); if ("icon" == m && "true" == this.options.viewTypeIconImage) {
												t.innerHTML = ["<table style='border-collapse:collapse; border-spacing:0px; width:100%; table-layout:fixed;'>", "<td " + w + "='" + this.colID + "' " + y + "='" + i + "' " + b + "='" + o + "' class='" + this.mainGrid.options.bodyTdClass + "_calendar_table' style='width:90%; overflow:hidden; text-overflow:ellipsis;'>", this.mainGrid.dataTagOpen + g + this.mainGrid.dataTagClose, "</td>", "<td " + w + "='" + this.colID + "' " + y + "='" + i + "'  " + b + "='" + o + "' class='" + this.mainGrid.options.bodyTdClass + "_calendar_img'>", "<div class='" + this.mainGrid.options.bodyTdClass + "_calendar_div_img' />", "</td>", "</table>"].join(""); var v = this, C = t.getElementsByTagName("div")[0]
													; d.B.addListener(C, "onclick", (function(t) { v.mainGrid._getEditDisabled(i, o) || v.mainGrid.___getEditReadOnly(i, o) || (v.calendarImageClicked = !0) }))
											} else { var I = r.D.getDataPrefix("editModeEvent"); t.innerHTML = this.mainGrid.dataTagOpen + g + this.mainGrid.dataTagClose, "icon" == m || "" == m && "own" == this.options.dataType ? (this.mainGrid.addClass(t, this.mainGrid.options.bodyTdClass + "_calendar"), t.setAttribute(I, this.options.editModeEventIcon)) : this.mainGrid.removeClass(t, this.mainGrid.options.bodyTdClass + "_calendar") }
										} var _; if (this.mainGrid.options.titleFormatter) try { if ("function" != typeof this.mainGrid.options.titleFormatter) { var x = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof x && (this.mainGrid.options.titleFormatter = x, _ = x.call(this, i, o, e)) } else _ = this.mainGrid.options.titleFormatter.call(this, i, o, e) } catch (t) { a.w.printStackTrace(t, null, this) } var S = _ || this.options.title || ""; S && t.setAttribute("title", S)
									}, A.calendar.prototype.setEditMode = function(t, e) { try { if (this.options.embeddedInput) return; if ("true" == this.options.viewTypeIconImage) { var i = t.getElementsByTagName("div")[0]; this.mainGrid.removeClass(i, this.mainGrid.options.bodyTdClass + "_calendar_div_img") } else this.mainGrid.removeClass(t, this.mainGrid.options.bodyTdClass + "_calendar"); this.editTd = t, this.editRowIndex = e, this.internal && (this.parentColumnInfo.editRowIndex = e, this.parentColumnInfo.editTd = t), this.setPosition(); var o = this.mainGrid.getInput(this); this.comp = o; for (var s = t.firstChild; null != s; s = s.nextSibling)if ("NOBR" == s.nodeName.toUpperCase() || "SPAN" == s.nodeName.toUpperCase() && s.className.indexOf("w2grid_span") > -1) { WebSquare.style.setStyle(s, "visibility", "hidden"); break } if (1 == o.options.renderDiv || "true" == o.options.renderDiv) { var r = document.getElementById(this.mainGridId + this.id), n = t.offsetWidth - 6, l = t.offsetHeight, h = document.getElementById(this.mainGridId + this.id + "_div_input"), d = n - 18 - 5, p = l - 3, u = document.getElementById(this.mainGridId + this.id + "_input"), c = d - (parseInt(WebSquare.style.getStyle(u, "border-right-width"), 10) + parseInt(WebSquare.style.getStyle(u, "border-left-width"), 10) + parseInt(WebSquare.style.getStyle(u, "padding-right"), 10) + parseInt(WebSquare.style.getStyle(u, "padding-left"), 10)), g = p - 2, f = document.getElementById(this.mainGridId + this.id + "_img"), m = p / 2 - f.offsetHeight / 2; if (1 == this.options.useAnchor || "true" == this.options.useAnchor) { var y = document.getElementById(this.mainGridId + this.id + "_a"); WebSquare.style.setStyle(y, "top", m + "px") } else WebSquare.style.setStyle(f, "top", m + "px"); WebSquare.style.setStyle(r, "width", Math.max(n, 0) + "px"), WebSquare.style.setStyle(h, "width", Math.max(d, 0) + "px"), WebSquare.style.setStyle(u, "width", Math.max(c, 0) + "px"), WebSquare.style.setStyle(r, "height", Math.max(l - 3, 0) + "px"), WebSquare.style.setStyle(h, "height", Math.max(p, 0) + "px"), WebSquare.style.setStyle(u, "height", Math.max(g, 0) + "px") } var b = this.mainGrid.dataList._getCellData(e, this.colID); this.options.useMonthYearFormat && (b = WebSquare.date.getIOFormatDate(b, this.options.ioFormat, this.options.calendarValueType)), o._setValue(b, { noFormat: !0, skipValidate: !0 }), "icon" == this.options.viewType && "true" == this.options.viewTypeIconImage && 1 == this.calendarImageClicked ? (this.calendarImageClicked = !1, o.toggle()) : o.focus(), "native" !== this.mainGrid.options.drawType && (this.mainGrid.render.scrollLeft = 0, this.mainGrid.render.scrollTop = 0), "select" == o.options.editType && o.select() } catch (t) { a.w.printStackTrace(t, null, this) } }, A.calendar.prototype.setPosition = function() {
										try {
											var t = { top: 0, left: 0, width: 0, height: 0 }; if (r.D.isIE(8) ? t = { top: 1, left: 0, width: 0, height: 0 } : r.D.isFF() ? t = { top: 0, left: -1, width: 0, height: 0 } : r.D.isChrome() || r.D.isSafari() ? t = { top: 1, left: 0, width: 0, height: 0 } : r.D.isOpera() && (t = { top: 1, left: 0, width: 0, height: 1 }), "native" === this.mainGrid.options.drawType) { var e = document.getElementById(this.mainGrid.id + "_dataLayer"); t.top -= e.scrollTop, t.left -= e.scrollLeft } var i = this.editTd, o = i.offsetTop + t.top, s = i.offsetLeft + 1 + t.left, n = i.clientWidth - 5 + t.width, l = i.clientHeight - 3 + t.height, h = l - 1
												; if (this.mainGrid.options.groupbyZone) { var d = this.mainGrid.groupbyZoneStatus.groupbyZoneRender.offsetHeight; this.mainGrid.options.groupbyFilterBox && "top" === this.mainGrid.options.groupbyFilterBoxLocation && (d = parseInt(this.mainGrid.options.groupbyZoneHeight, 10) + document.getElementById(this.mainGrid.id + "_groupbyFilterBox_div").offsetHeight), o += d } if (this.mainGrid.hasClass("w2grid_adaptive_crosstab")) s -= document.getElementById(this.mainGrid.id + "_body_tbody").scrollLeft; var p = this.mainGrid.getInput(this); p.show(), p.render.style.top = o + "px", p.render.style.left = s + "px", p.render.style.width = n + "px", p.render.style.height = l + "px", p.render.firstChild.style.height = l + "px", p.dom.input.style.height = h + "px", p.dom.input.style.textAlign = "" == i.style.textAlign ? "center" : i.style.textAlign, r.D.isIE() && (p.dom.input.style.lineHeight = l + "px")
										} catch (t) { a.w.printStackTrace(t, null, this) }
									}, A.calendar.prototype.removeCellData = function(t, e) { this.mainGrid.dataList.__setCellData(t, e, "") }, A.calendar.prototype._handleEndEdit_common = function(t) { try { var e = this.mainGrid.getInput(this); e.hideCalendar(); var i = e.getValue(); i = e.validator.validateString(i), this.options.useIOFormatLength || (i = e.sub_validator.validateString(i)), this.options.useMonthYearFormat && (i = WebSquare.date.getIOUnFormatDate(i, e.options.ioFormat, e.options.calendarValueType)), this.setInnerHTML(this.editTd, i, this.editRowIndex, this.getColumnIndex(this.colID)); var o = {}; return o[this.mainGrid.id] = !0, this.mainGrid.dataList.__setCellData(this.editRowIndex, this.colID, i, null, null, null, o), e } catch (t) { a.w.printStackTrace(t, null, this) } }, A.calendar.prototype._handleEndEdit_focus = function(t, e) { !0 !== e && t.hide() }, A.calendar.prototype.validate = function(t) { var e = this.mainGrid.getInput(this); if (e.validate()) return !0; if ("" == e.getValue()) return !0; if (this.mainGrid.getInput(this).blur(), this.options.dateValidSet && this.options.dateValidSetCustom); else if ("false" !== this.options.displaymessage) { var i = WebSquare.language.getMessage("IC_invalidCalendarSelect") || "날짜 형식이 잘못 되었습니다."; alert(i) } return this.mainGrid.getInput(this).focus(), !1 }, A.calendar.prototype._getEditedValue = function(t) { return this.mainGrid.getInput(this).getValue() }, A.calendar.prototype._handleCancelEdit = function(t) { try { var e = this.mainGrid.dataList._getCellData(this.editRowIndex, this.colID); this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)), this.mainGrid.getInput(this).hide() } catch (t) { a.w.printStackTrace(t, null, this) } }, A.calendar.prototype.doDefaultAction = function(t) { t.ctrlKey || this.mainGrid.setEditHtml(t) }, A.calendar.prototype.refreshDataArr = function() { try { var t; t = this.mainGrid.groupbyStatus.grouped ? this.mainGrid.groupbyStatus.groupbyRowIndexArr : this.mainGrid._linkedDataList ? this.mainGrid._linkedDataList.filteredRowIndexArr : this.mainGrid._dataList.filteredRowIndexArr; for (var e = this.mainGrid._dataList.cellIdList.length, i = this.mainGrid._dataList.bodyIdColIndexMap[this.id], o = this.mainGrid.getInput(this), s = 0; s < t.length; s++) { var r = t[s], n = this.mainGrid._dataList.dataArr[r * e + i], l = o.sub_validator.validateString(n); this.mainGrid._dataList.dataArr[r * e + i] = l } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.expression = function() { }, A.expression.prototype.initializeCellInfo = function() {
										var t = this.options.expression; if (this.mainGrid.useExpression = !0, this.expIdArr = [], "" != t) {
											var e = t.match(/(sum|avg|max|min|display|rowindex|rowstatus|datalist)[\s]*[(][\S\s]*?[)]/gi); if (null != e) { t = ""; for (var i = 0; i < e.length; i++)t += e[i], i < e.length - 1 && (t += "+") }
											t = (t = (t = (t = (t = (t = (t = (t = (t = t.replace(/[sS][uU][mM][\s]*[(]/g, "_this.getExpressionTarget(")).replace(/[aA][vV][gG][\s]*[(]/g, "_this.getExpressionTarget(")).replace(/[mM][aA][xX][\s]*[(]/g, "_this.getExpressionTarget(")).replace(/[mM][iI][nN][\s]*[(]/g, "_this.getExpressionTarget(")).replace(/[cC][aA][lL][cC][\s]*[(]/g, "_this.getCalcExpressionTarget(")).replace(/[dD][iI][sS][pP][lL][aA][yY][\s]*[(]/g, "_this.getExpressionTarget(")).replace(/[dD][aA][tT][aA][lL][iI][sS][tT][\s]*[(]/g, "_this.getExpressionTarget(")).replace(/[rR][oO][wW][iI][nN][dD][eE][xX][\s]*[(]/g, "_this.getExpressionTarget(")).replace(/rowStatus[\s]*[(]/gi, "_this.getExpressionTarget(")
										} try { new Function("_this", t)(this) } catch (t) { }
									}, A.expression.prototype.getExpressionTarget = function() { for (var t = 0; t < arguments.length; t++)null == this.expIdArr[arguments[t]] && (this.expIdArr[arguments[t]] = arguments[t], this.mainGrid.setExpressionAssociation(arguments[t], this.colID)); return 1 }, A.expression.prototype.getCalcExpressionTarget = function(t) { var e = t.wq_replaceAll("(", ",").wq_replaceAll(")", ",").wq_replaceAll("+", ",").wq_replaceAll("-", ",").wq_replaceAll("*", ",").wq_replaceAll("/", ",").wq_replaceAll("%", ",").wq_replaceAll(" ", ""); e = e.split(","); for (var i = 0; i < e.length; i++)"" !== e[i] && null == this.expIdArr[e[i]] && (this.expIdArr[e[i]] = e[i], this.mainGrid.setExpressionAssociation(e[i], this.colID)); return 1 }, A.expression.prototype.setInnerHTML = function(t, e, i, o, s) { try { var n, l = this.mainGrid.dataList.getRealRowIndex(i), h = this.mainGrid._getGroupbyDisplayRowIndex(i), d = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id), p = this.getDisplayData(null, l); "function" == typeof d ? (this.useCustomFormatter = !0, n = d.call(this.mainGrid, e, p, h, o)) : (this.useCustomFormatter = !1, n = p); var u = t.innerHTML.replace(/\r(\n)?/, "\n"), c = this.mainGrid.dataTagOpen + n + this.mainGrid.dataTagClose; u !== c && (t.innerHTML = c.replace("NaN", this.options.NaNFormat), this.mainGrid.drawFooter(this.colID)) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.expression.prototype.getDisplayData = function(t, e, i) { return t = this.getExpressionValue(e), this.formatter && !0 !== i ? this.formatter.format(t) : t }, A.expression.prototype.getExpressionValue = function(t) { if (this.rowIndex = t, !this.options.expressionFunc) { var e = this.options.expression; "" != e && (e = (e = (e = (e = (e = (e = (e = (e = (e = e.replace(/[sS][uU][mM][\s]*[(]/g, "this.colsum(rowIndex,")).replace(/[aA][vV][gG][\s]*[(]/g, "this.colavg(rowIndex,")).replace(/[mM][aA][xX][\s]*[(]/g, "this.colmax(rowIndex,")).replace(/[mM][iI][nN][\s]*[(]/g, "this.colmin(rowIndex,")).replace(/[cC][aA][lL][cC][\s]*[(]/g, "this.colcalc(rowIndex,")).replace(/[dD][iI][sS][pP][lL][aA][yY][\s]*[(]/g, "this.display(rowIndex,")).replace(/[dD][aA][tT][aA][lL][iI][sS][tT][\s]*[(]/g, "this.datalist(rowIndex,")).replace(/[rR][oO][wW][iI][nN][dD][eE][xX][\s]*[(]/g, "this.getRowIndex(rowIndex")).replace(/rowStatus[\s]*[(]/gi, "this.rowStatus(rowIndex"), e = r.D.scopingFuncBody(e, this.scope_id)), this.options.expressionFunc = Function("rowIndex", e), this.options.expressionFunc.changeCount = 0 } var i = this.mainGrid.changeCount, o = ""; return this.options.expressionFunc[t] && i == this.options.expressionFunc[t].changeCount ? o = this.options.expressionFunc[t].oldValue : (this.options.expressionFunc[t] || (this.options.expressionFunc[t] = {}), this.options.expressionFunc[t].changeCount = i, o = this.options.expressionFunc.call(this, t), this.options.expressionFunc[t].oldValue = o), o }, A.expression.prototype.colsum = function() { for (var t = arguments[0], e = 0, i = 1; i < arguments.length; i++) { var o = this.mainGrid.getColumnIndex(arguments[i]), s = this.options.dataType; "gridView" == this.mainGrid.options.pluginName && (s = this.mainGrid._dataList.getCellInfo(this.options.col_id).options.dataType), "bigDecimal" === s ? e = WebSquare.bigDecimal(e).plus(WebSquare.bigDecimal(this.mainGrid.dataList._getData(t, o))) || 0 : e += parseFloat(this.mainGrid.dataList._getData(t, o)) || 0 } return e }, A.expression.prototype.colavg = function() {
										for (var t = arguments[0], e = 0, i = this.mainGrid.getColumnOption(this.options.col_id, "dataType"), o = 1; o < arguments.length; o++) { var s = this.mainGrid.getColumnIndex(arguments[o]); "bigDecimal" === i ? e = WebSquare.bigDecimal(e).plus(WebSquare.bigDecimal(this.mainGrid.dataList._getData(t, s))) || 0 : e += parseFloat(this.mainGrid.dataList._getData(t, s)) || 0 } return "bigDecimal" === i ? e = WebSquare.bigDecimal(e).divide(WebSquare.bigDecimal(arguments.length - 1)).toString() : e /= arguments.length - 1, e
									}, A.expression.prototype.colmax = function() { for (var t = arguments[0], e = 0, i = this.mainGrid.getColumnOption(this.options.col_id, "dataType"), o = 1; o < arguments.length; o++) { var s = this.mainGrid.getColumnIndex(arguments[o]); if ("bigDecimal" === i) e = WebSquare.bigDecimal(e).compare(WebSquare.bigDecimal(this.mainGrid.dataList._getData(t, s))) || 0; else { var a = parseFloat(this.mainGrid.dataList._getData(t, s)) || 0; a > e && (e = a) } } return e }, A.expression.prototype.colmin = function() { for (var t = arguments[0], e = 0, i = this.mainGrid.getColumnOption(this.options.col_id, "dataType"), o = 1; o < arguments.length; o++) { var s = this.mainGrid.getColumnIndex(arguments[o]); if ("bigDecimal" === i) e = "0" === WebSquare.bigDecimal(e).toString() ? WebSquare.bigDecimal(this.mainGrid.dataList._getData(t, s)) : WebSquare.bigDecimal(e), e = WebSquare.bigDecimal(e).compare(WebSquare.bigDecimal(this.mainGrid.dataList._getData(t, s)), !0) || 0; else { var a = parseFloat(this.mainGrid.dataList._getData(t, s)) || 0; (1 == o || a < e) && (e = a) } } return e }, A.expression.prototype.colcalc = function(t, e) { function i(t, e) { t[t.length] = e } function o(t) { var e = t[t.length - 1]; return delete t[t.length - 1], t.length--, e } function s(t) { return !r(t) && "(" != t && ")" != t } function r(t) { return "+" == t || "-" == t || "*" == t || "/" == t || "^" == t || "%" == t } function n(t) { return t[t.length - 1] } function l(t) { return 0 == t.length } function h(t) { return "^" == t ? 5 : "*" == t || "/" == t || "%" == t ? 4 : "+" == t || "-" == t ? 3 : "(" == t ? 2 : ")" == t ? 1 : void 0 } function d(t, e, i) { var o; try { return "+" == i && (o = t.plus(e)), "-" == i && (o = t.minus(e)), "*" == i && (o = t.times(e)), "/" == i && (o = t.divide(e)), "^" == i && (o = t.pow(e)), "%" == i && (o = t.mod(e)), o } catch (t) { a.w.printStackTrace(t) } } var p = function(t, e, a) { e = new Array; var d = new Array, p = 0; t = function(t) { for (var e = t.split(""), i = "", o = new Array, a = 0, n = 0; n < e.length; n++)s(e[n]) && null == e[n].match(/\s/) && (i += e[n]), (r(e[n]) || ")" == e[n] || "(" == e[n]) && ("" != i && (o[a] = i, a++), i = "", o[a] = e[n], a++), n == e.length - 1 && "" != i && (o[a] = i); return o }(t); for (var u = 0; u < t.length; u++) { if (s(t[u]) && (e[p] = t[u], p++), r(t[u])) { if ("^" != t[u]) for (; !l(d) && h(t[u]) <= h(n(d));)e[p] = n(d), o(d), p++; else for (; !l(d) && h(t[u]) < h(n(d));)e[p] = n(d), o(d), p++; i(d, t[u]) } if ("(" == t[u] && i(d, t[u]), ")" == t[u]) { for (; "(" != n(d);)e[p] = o(d), p++; o(d) } } for (; !l(d);)"(" == n(d) ? o(d) : e[e.length] = o(d); var c = ""; for (u = 0; u < e.length; u++)c += e[u]; return 0 == a ? c : e }(e); for (var u in p) { var c = this.mainGrid.getColumnIndex(p[u]); p[u] = null != c ? WebSquare.bigDecimal(this.mainGrid.dataList._getData(t, c)) : p[u] } return function(t) { for (var e, a, r = new Array, l = 0; l < t.length; l++)if (s(t[l])) i(r, t[l]); else { (e = new Function("return " + n(r))()).constructor != WebSquare.bigDecimalObj && (e = WebSquare.bigDecimal(e)), o(r), (a = new Function("return " + n(r))()).constructor != WebSquare.bigDecimalObj && (a = WebSquare.bigDecimal(a)); var h = d(a, e, t[l]); o(r), i(r, h) } return n(r) }(p) }, A.expression.prototype.display = function() { var t = arguments[0], e = this.mainGrid.getColumnIndex(arguments[1]), i = this.mainGrid.dataList._getData(t, e); return i }, A.expression.prototype.datalist = function(t, e) { return e = this.mainGrid._dataList.getColumnIndex(e), this.mainGrid._dataList._getCellData(t, e, !0) }, A.expression.prototype.getRowIndex = function() { var t = arguments[0]; return this.mainGrid.getDisplayRowIndex(t) }, A.expression.prototype.rowStatus = function() { var t = arguments[0], e = this.mainGrid.dataList.getRowStatusValue(t); switch (e) { case 0: return "R"; case 1: return "U"; case 2: return "C"; case 3: return "D"; case 4: return "V" } }, A.textarea = function() { }, A.textarea.prototype.initializeCellInfo = function(t) {
										if (t) {
											var e = t.getAttribute("showReadOnly"); if (e) this.options.showReadOnly = r.D.getBoolean(e); else {
												var i = s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + '/column[@inputType="textarea"]/showReadOnly/@value') || "true"; this.options.showReadOnly = r.D.getBoolean(i)
											}
										}
									}, A.textarea.prototype.setInnerHTML = function(t, e, i, o, s) { var n, l = r.D.getDataPrefix("displayType"); if (this.options.embeddedInput) { var h = this.mainGrid.getInput(this, t); h.show(), t.innerHTML = "", t.appendChild(h.render); var d = r.D.getDataPrefix("rowindex"); h.render.setAttribute(d, i), h.render.style.top = "0", h.render.style.left = "0", h.render.style.width = "100%", h.render.style.height = "100%", h.render.style.imeMode = this.options.imeMode, this.options.placeholder && (h.render.placeholder = this.options.placeholder), h.setValue(this.mainGrid.dataList._getCellData(i, this.id)), this.mainGrid._getEditDisabled(i, o) ? h.setDisabled(!0) : h.setDisabled(!1), this.mainGrid.__getEditReadOnly(t, i) ? h.setReadOnly(!0) : h.setReadOnly(!1) } else { var p = t.clientWidth - 8 + "", u = this.getDisplayData(e), c = this.mainGrid._getGroupbyDisplayRowIndex(i), g = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id), f = u, m = this.options.textAlign ? "text-align:" + this.options.textAlign + ";" : "", y = "pre-wrap"; r.D.isIEAllVersion("6 7") && (y = "normal"); var b = "all" === t.getAttribute(l) ? "word-break:break-all;white-space:" + y + ";" : ""; "function" == typeof g ? (this.useCustomFormatter = !0, f = g.call(this.mainGrid, e, u, c, o)) : this.useCustomFormatter = !1, t.innerHTML = "<div class='w2grid_textarea' style='" + m + " width:" + p + "px; " + b + "' >" + (this.options.escape + "" == "true" ? this.getDisplayData(WebSquare.xml._encode(f + "")) : this.getDisplayData(f)) + "</div>" } if (this.mainGrid.options.titleFormatter) try { if ("function" != typeof this.mainGrid.options.titleFormatter) { var w = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof w && (this.mainGrid.options.titleFormatter = w, n = w.call(this, i, o, e)) } else n = this.mainGrid.options.titleFormatter.call(this, i, o, e); t.setAttribute("title", n) } catch (t) { a.w.printStackTrace(t, null, this) } if ("all" === t.getAttribute(l) && "all" === this.mainGrid.options.visibleRowNum && "native" !== this.mainGrid.options.drawType && this.mainGrid.getRowCount() > 0) { var v = document.getElementById(this.mainGrid.id + "_body_table").offsetHeight; this.mainGrid.render.offsetHeight != v && this.mainGrid.setSize(null, v) } }, A.textarea.prototype.setEditMode = function(t, e) { this.options.embeddedInput || this._setEditMode(t, e) }, A.textarea.prototype._setEditMode = function(t, e) { try { this.editRowIndex = e, this.editTd = t, this.internal && (this.parentColumnInfo.editRowIndex = e, this.parentColumnInfo.editTd = t), this.setPosition(); var i = this.mainGrid.getInput(this); i.setValue(this.mainGrid.dataList._getCellData(e, this.colID)), this.options.disabled || i.focus(), "native" !== this.mainGrid.options.drawType && (this.mainGrid.render.scrollLeft = 0, this.mainGrid.render.scrollTop = 0), this.options.disabled || "select" != this.options.editType && "select" != this.mainGrid.options.editType || i.select() } catch (t) { a.w.printStackTrace(t, null, this) } }, A.textarea.prototype.setPosition = function() {
										try {
											var t = { top: 0, left: 0, width: 0, height: 0 }; r.D.isIE(8) ? t = { top: -1, left: -1, width: 0, height: 0 } : r.D.isFF() ? t = { top: -2, left: 0, width: 0, height: 0 } : r.D.isOpera() ? t = { top: 0, left: 0, width: 0, height: 1 } : r.D.isChrome() && (t = { top: 0, left: 0, width: 0, height: 0 }); var e = this.editTd; if ("native" === this.mainGrid.options.drawType) { var i = document.getElementById(this.mainGrid.id + "_dataLayer"); t.top -= i.scrollTop, t.left -= i.scrollLeft } var o = e.offsetTop + 1 + t.top, s = e.offsetLeft + 1 + t.left, n = e.clientWidth > 150 ? e.clientWidth - 5 + t.width : 150, l = e.clientHeight > 60 ? e.clientHeight - 2 + t.height : 60; if (this.mainGrid.options.groupbyZone) { var h = this.mainGrid.groupbyZoneStatus.groupbyZoneRender.offsetHeight; this.mainGrid.options.groupbyFilterBox && "top" === this.mainGrid.options.groupbyFilterBoxLocation && (h = parseInt(this.mainGrid.options.groupbyZoneHeight, 10) + document.getElementById(this.mainGrid.id + "_groupbyFilterBox_div").offsetHeight), o += h } if (this.mainGrid.gridWidth < s + n) { var d = (e.clientWidth > 150 ? 0 : 5 + t.width) - 2; s -= s + n - (e.offsetLeft + e.clientWidth) + d }
											var p = this.mainGrid.scrollX_right; if (this.mainGrid.render.offsetHeight - p.offsetHeight < o + l) { var u = e.clientHeight > 60 ? 0 : 2 - t.top; (o -= o + l - (e.offsetTop + e.clientHeight) + u) < 0 && (o = 1 + t.top), l > this.mainGrid.render.offsetHeight && (l = this.mainGrid.render.offsetHeight - 6 + t.height) } if (this.mainGrid.hasClass("w2grid_adaptive_crosstab")) s -= document.getElementById(this.mainGrid.id + "_body_tbody").scrollLeft; var c = this.mainGrid.getInput(this); this.comp = c, c.show(), c.render.style.top = o + "px", c.render.style.left = s + "px", c.render.style.width = n + "px", c.render.style.height = l + "px", c.render.style.imeMode = this.options.imeMode
										} catch (t) { a.w.printStackTrace(t, null, this) }
									}, A.textarea.prototype.removeCellData = function(t, e) { this.mainGrid.dataList.__setCellData(t, e, "") }, A.textarea.prototype.showReadonly = function(t, e) { var i = this.mainGrid.getInput(this), o = r.D.getDataPrefix("col_id"), s = t.getAttribute(o); (this.options.disabled || this.mainGrid._getEditDisabled(e, s)) && i.setDisabled(!0), (this.options.readOnly || this.mainGrid.___getEditReadOnly(e, s)) && i.setReadOnly(!0), this._setEditMode(t, e), this.mainGrid.editedCell = this }, A.textarea.prototype._handleEndEdit_common = function(t) { try { var e = this.mainGrid.getInput(this), i = e.getValue(); "number" == this.mainGrid.getColumnOption(this.options.col_id, "dataType") && "" != i && (i = Number(i)); var o = this.editTd.offsetHeight; this.setInnerHTML(this.editTd, i, this.editRowIndex, this.getColumnIndex(this.colID)); var s = this.editTd.offsetHeight; this.changedCellHeight = s - o; var r = {}; return r[this.mainGrid.id] = !0, this.mainGrid.dataList.__setCellData(this.editRowIndex, this.colID, i, null, null, null, r), e } catch (t) { a.w.printStackTrace(t, null, this) } }, A.textarea.prototype._handleEndEdit_focus = function(t) { t.hide(), t.setDisabled(!1), t.setReadOnly(!1) }, A.textarea.prototype._getEditedValue = function(t) { return this.mainGrid.getInput(this).getValue() }, A.textarea.prototype._handleCancelEdit = function(t) { try { var e = this.mainGrid.dataList._getCellData(this.editRowIndex, this.colID); this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)); var i = this.mainGrid.getInput(this); i.hide(), i.setDisabled(!1), i.setReadOnly(!1) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.textarea.prototype.doDefaultAction = function(t) { t.ctrlKey || this.mainGrid.setEditHtml(t) }, A.drilldown = function() { }, A.drilldown.prototype.setInnerHTML = function(t, e, i) {
										var o = i, s = 100, a = this.options.depthColumn; if ("linkedDataList" === this.mode) { if (null != this.mainGrid._linkedDataList.filteredRowIndexArr && this.mainGrid._linkedDataList.filteredRowIndexArr.length > 0) { o = this.mainGrid._linkedDataList.filteredRowIndexArr[i]; var n = this.mainGrid._linkedDataList.filteredRowIndexArr.length - 1; s = o < this.mainGrid._linkedDataList.filteredRowIndexArr[n] ? parseInt(this.mainGrid.dataList._getCellData(i + 1, a), 10) : null } } else null != this.mainGrid._dataList.filteredRowIndexArr && this.mainGrid._dataList.filteredRowIndexArr.length > 0 && (s = (o = this.mainGrid.dataList.getRealRowIndex(i)) < this.mainGrid.dataList.getRealRowIndex(this.mainGrid.getDataLength() - 1) ? parseInt(this.mainGrid.dataList._getCellData(i + 1, a), 10) : null); for (var l = parseInt(this.mainGrid.dataList._getCellData(i, a), 10), h = "", d = o, p = 1; p < l; p++)"div" == this.options.depthType ? h += "<div class='w2grid_depthBlank'></div>" : "line" == this.options.depthType ? (h = "<div class='w2grid_depth" + (1 === p ? this.mainGrid.drilldown.isLastChild(d) ? "_line_L" : "_line_T" : this.mainGrid.drilldown.isLastChild(d) ? "Blank" : "_line_I") + "'></div>" + h, d = this.mainGrid.drilldown.getParentRowIndex(d)) : "none" == this.options.depthType ? h += "" : h += "&nbsp;&nbsp;"; var u = 0, c = "w2grid_plus"; null != s && l < s ? (u = 1, c = "w2grid_minus") : this.mainGrid.hasChild(i) || (u = 2, c = "w2grid_leaf"), 1 == l && (c += " w2grid_root"); var g = "", f = r.D.getDataPrefix("openStatus"); g = r.D.isMobile() ? "<span class='" + c + "' style='display:inline-block;' " + f + "='" + u + "' ontouchstart='this.clicked=true'></span>" : "<span class='" + c + "' style='display:inline-block;' " + f + "='" + u + "' onclick='this.clicked=true'></span>"; var m = "<div class='w2grid_depthBlank"; "1" == l && (m += " w2grid_depthBlank_root"),
											2 === u && (m += " w2grid_depthBlank_leaf"), m += "'>"; var y = this.options.escape + "" == "true" ? this.getDisplayData(WebSquare.xml._encode(e + "")) : this.getDisplayData(e), b = ""; "span" == this.mainGrid.options.dataTag && (b = " w2grid_span"), "div" == this.options.depthType ? (g = m + g + "</div>", t.innerHTML = "<" + this.mainGrid.options.dataTag + " class='w2grid_drilldown_nobr" + b + "'>" + h + g + y + this.mainGrid.dataTagClose) : "line" == this.options.depthType ? (g = m + g + "</div>", t.innerHTML = h + g + "<" + this.mainGrid.options.dataTag + " class='w2grid_drilldown_nobr" + b + "'>" + y + this.mainGrid.dataTagClose) : (this.options.depthType, t.innerHTML = this.mainGrid.dataTagOpen + h + g + y + this.mainGrid.dataTagClose)
									}, A.drilldown.prototype.handleClick = function(t, e) { for (var i, o = t.getElementsByTagName("span"), s = 0; s < o.length; s++)if (-1 == o[s].className.indexOf("w2grid_span")) { i = o[s]; break } if (1 == i.clicked) { i.clicked = !1; var a = r.D.getDataPrefix("openStatus"); return "2" != i.getAttribute(a) && this.mainGrid._toggle(e), !0 } return !1 }, A.drilldown.prototype.setEditMode = function(t, e) { try { this.editRowIndex = e, this.editTd = t, this.setPosition(); var i = this.mainGrid.getInput(this); i.formatter = "all" == this.options.applyFormat ? this.formatter : this.emptyFormatter, i.options.applyFormat = this.options.applyFormat, i.setValue(this.mainGrid.dataList._getCellData(e, this.colID)), document.activeElement != i.render && i.focus(), "native" !== this.mainGrid.options.drawType && (this.mainGrid.render.scrollLeft = 0, this.mainGrid.render.scrollTop = 0), "select" == i.options.editType && i.select() } catch (t) { a.w.printStackTrace(t, null, this) } }, A.drilldown.prototype.setPosition = function() { var t = { top: 0, left: 0, width: 0, height: 0 }; if (r.D.isFF() ? t = { top: -1, left: -1, width: 0, height: 0 } : r.D.isOpera() ? t = { top: 0, left: 0, width: 0, height: 1 } : r.D.isIE(9) && (t = { top: -1, left: -1, width: 0, height: 0 }), "native" === this.mainGrid.options.drawType) { var e = document.getElementById(this.mainGrid.id + "_dataLayer"); t.top -= e.scrollTop, t.left -= e.scrollLeft } var i = this.editTd, o = i.offsetTop + 1 + t.top, s = i.offsetLeft + 1 + t.left, a = i.clientWidth - 6 + t.width, n = i.clientHeight - 2 + t.height, l = this.mainGrid.getInput(this); if ("" != this.options.imeMode) l.render.style.imeMode = this.options.imeMode; else { var h = this.mainGrid.getColumnOption(this.options.col_id, "dataType"); l.render.style.imeMode = "number" == h ? "disabled" : "" } if (l.show(), this.mainGrid.options.groupbyZone) { var d = this.mainGrid.groupbyZoneStatus.groupbyZoneRender.offsetHeight; this.mainGrid.options.groupbyFilterBox && "top" === this.mainGrid.options.groupbyFilterBoxLocation && (d = parseInt(this.mainGrid.options.groupbyZoneHeight, 10) + document.getElementById(this.mainGrid.id + "_groupbyFilterBox_div").offsetHeight), o += d } l.render.style.top = o + "px", l.render.style.left = s + "px", l.render.style.width = a + "px", l.render.style.height = n + "px", r.D.isIE() && (l.render.style.lineHeight = n + "px"), l.render.style.textAlign = "" == i.style.textAlign ? "center" : i.style.textAlign }, A.drilldown.prototype.removeCellData = function(t, e) { this.mainGrid.dataList.__setCellData(t, e, "") }, A.drilldown.prototype._handleEndEdit_common = function(t) { try { var e = this.mainGrid.getInput(this); return this.setEditData(e), e } catch (t) { a.w.printStackTrace(t, null, this) } }, A.drilldown.prototype._handleEndEdit_focus = function(t, e) { !this.mainGrid.isMobile && e || t.hide() }, A.drilldown.prototype._getEditedValue = function(t) { return this.mainGrid.getInput(this).getValue() }, A.drilldown.prototype._handleCancelEdit = function(t) { try { var e = this.mainGrid.dataList._getCellData(this.editRowIndex, this.colID); this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)), this.mainGrid.getInput(this).hide() } catch (t) { a.w.printStackTrace(t, null, this) } }, A.drilldown.prototype.doDefaultAction = function(t) { t.ctrlKey || this.mainGrid.setEditHtml(t) }, A.drilldown.prototype.setEditData = function(t) {
										try {
											var e = t.getValue(); e = t.validator.validateString(e), t.setValueNM(e, !0), this.setInnerHTML(this.editTd, e, this.editRowIndex, this.getColumnIndex(this.colID)); var i = this.mainGrid.getColumnOption(this.options.col_id, "dataType")
												; this.mainGrid.options.numberCasting && "number" == i && "" != e && (e = Number(e)); var o = {}; o[this.mainGrid.id] = !0, this.mainGrid.dataList.__setCellData(this.editRowIndex, this.colID, e, null, null, null, o)
										} catch (t) { a.w.printStackTrace(t, null, this) }
									}, A.textImage = function() { }, A.textImage.prototype.setInnerHTML = function(t, e, i, o, s) {
										var n = this.mainGrid.getElemRowIndex(t), l = this.mainGrid.dataList.getRealRowIndex(n), h = this.mainGrid._getGroupbyDisplayRowIndex(i), p = this.mainGrid.getColumnIndex(this.colID), u = this.mainGrid.getCellOption(l, p, "viewType"), c = this.options.imageSrc ? this.mainGrid.getImageURL(this.options.imageSrc) : "", g = this.mainGrid.getColumnID(o), f = !1, m = !1; this.mainGrid._getEditDisabled(i, g) ? (f = !0, this.options.imageSrcDisabled && (c = this.mainGrid.getImageURL(this.options.imageSrcDisabled))) : this.mainGrid.___getEditReadOnly(i, g) && (m = !0, this.options.imageSrcReadOnly && (c = this.mainGrid.getImageURL(this.options.imageSrcReadOnly))); var y = e, b = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id), w = r.D.getGlobalFunction(this.options.customModelUnformatter, this.scope_id); "function" == typeof w && (y = w.call(this.mainGrid, e, h, o)); var v = "" !== this.options.escape ? this.options.escape : this.mainGrid.options.escape; (v = r.D.getBoolean(v)) && (y = WebSquare.xml._encode(y + "")); var C, I, _ = this.getDisplayData(y); if ("function" == typeof b ? (this.useCustomFormatter = !0, C = b.call(this.mainGrid, e, _, h, o)) : (this.useCustomFormatter = !1, C = _), this.mainGrid.options.titleFormatter) try { if ("function" != typeof this.mainGrid.options.titleFormatter) { var x = r.D.getGlobalFunction(this.mainGrid.options.titleFormatter, this.scope_id); "function" == typeof x && (this.mainGrid.options.titleFormatter = x, I = x.call(this, i, o, e)) } else I = this.mainGrid.options.titleFormatter.call(this, i, o, e); t.setAttribute("title", I) } catch (t) { a.w.printStackTrace(t, null, this) } if ("icon" == u || "" == u && "own" == this.options.dataType) {
											var S = ""; try { this.options.onerror && (S = ' onerror="(' + this.options.onerror + ').call(this,event);" ') } catch (t) { a.w.printStackTrace(t, null, this) } var D = "w2grid_textImage_image"; f ? D += " w2grid_textImage_disabled" : m && (D += " w2grid_textImage_readonly"); var R = r.D.getDataPrefix("tdIndex"), L = r.D.getDataPrefix("col_id"), T = r.D.getDataPrefix("rowIndex"), k = r.D.getDataPrefix("colIndex"), A = t.getAttribute(R); t.removeAttribute("alt"); var F = ""; "" != this.options.alt && (F = " alt='" + this.options.alt + "' "), t.innerHTML = ["<table style='border-collapse:collapse; border-spacing:0px; width:100%; table-layout:fixed;'>", "<td " + L + "='" + this.colID + "' " + T + "='" + i + "' " + k + "='" + o + "' tdIndex='" + A + "' class='w2grid_textImage' style='overflow:hidden; text-overflow:ellipsis;'>", this.mainGrid.dataTagOpen + C + this.mainGrid.dataTagClose, "</td>", "<td " + L + "='" + this.colID + "' " + T + "='" + i + "'  " + k + "='" + o + "' class='" + D + "' style='", "" != this.options.imageWidth ? "width:" + parseInt(this.options.imageWidth) + "px;" : "", "" != this.options.imageHeight ? "height:" + parseInt(this.options.imageHeight) + "px;" : "", "'>", "<img src='" + c + "' " + S + "style='", "" != this.options.imageWidth ? "width:" + parseInt(this.options.imageWidth) + "px;" : "", "" != this.options.imageHeight ? "height:" + parseInt(this.options.imageHeight) + "px;" : "", "'" + F + " />", "</td>", "</table>"].join(""); var E = this, M = t.getElementsByTagName("img")[0]; d.B.addListener(M, "onclick", (function(t) { d.B.stopPropagation(t); var s = E.mainGrid._getEditDisabled(i, o); if (E.options.useImageClick || 0 == s) { if (E.mainGrid.editedCell) { var a = E.mainGrid._getGroupbyDisplayRowIndex(E.mainGrid.editedCell.editRowIndex), n = E.mainGrid.editedCell.colID, p = E.mainGrid._dataList.getCellData(a, n); E.mainGrid.editedCell.handleEndEdit(); var u = E.mainGrid._dataList.getCellData(a, n); u != p && d.B.fireEvent(E.mainGrid, "onviewchange", { oldValue: p, newValue: u, rowIndex: a, colIndex: E.mainGrid.getColumnIndex(n) }) } var c = E.getDisplayData(e), g = r.D.getGlobalFunction(E.options.imageClickFunction, E.scope_id); d.B.fireEvent(E.mainGrid, "ontextimageclick", i, o), E.mainGrid._setFocusedCell(i, o), "function" == typeof g && (E.options.displayRowIndex ? g.call(E.mainGrid, h, E.colID, c) : g.call(E.mainGrid, l, E.colID, c)) } }))
										} else t.innerHTML = this.mainGrid.dataTagOpen + C + this.mainGrid.dataTagClose
									}, A.textImage.prototype.setEditMode = function(t, e) { try { var i = ""; try { this.options.onerror && (i = ' onerror="(' + this.options.onerror + ').call(this,event);" ') } catch (t) { a.w.printStackTrace(t, null, this) } var o = this.options.imageSrc ? this.mainGrid.getImageURL(this.options.imageSrc) : ""; t.innerHTML = ["<table style='border-collapse:collapse; border-spacing:0px;'><td></td><td>", "<img src='" + o + "' " + i + "style='", "" != this.options.imageWidth ? "width:" + parseInt(this.options.imageWidth) + "px;" : "", "" != this.options.imageHeight ? "height:" + parseInt(this.options.imageHeight) + "px;" : "", "' />", "</td></table>"].join(""); var s = t.getElementsByTagName("td")[1].firstChild, n = this.mainGrid.getElemRowIndex(t), l = this.mainGrid.getColumnIndex(this.colID), h = this.mainGrid._dataList.filteredRowIndexArr[n], p = this; d.B.addListener(s, "onclick", (function(t) { if (d.B.stopPropagation(t), p.mainGrid.editedCell) { var i = p.mainGrid._getGroupbyDisplayRowIndex(p.mainGrid.editedCell.editRowIndex), o = p.mainGrid.editedCell.colID, s = p.mainGrid._dataList.getCellData(i, o); p.mainGrid.editedCell.handleEndEdit(); var a = p.mainGrid._dataList.getCellData(i, o); a != s && d.B.fireEvent(p.mainGrid, "onviewchange", { oldValue: s, newValue: a, rowIndex: i, colIndex: p.mainGrid.getColumnIndex(o) }) } var n = p.mainGrid.getInput(p).getValue(), u = r.D.getGlobalFunction(p.options.imageClickFunction, p.scope_id); d.B.fireEvent(p.mainGrid, "ontextimageclick", e, l), "function" == typeof u && (p.options.displayRowIndex ? u.call(p.mainGrid, e, p.colID, n) : u.call(p.mainGrid, h, p.colID, n)) })), this.editRowIndex = e, this.editTd = t, this.internal && (this.parentColumnInfo.editRowIndex = e, this.parentColumnInfo.editTd = t), this.setPosition(); var u = this.mainGrid.getInput(this); this.comp = u, u.formatter = "all" == this.options.applyFormat ? this.formatter : this.emptyFormatter, u.options.applyFormat = this.options.applyFormat, u.setValue(this.mainGrid.dataList._getCellData(e, this.colID)), u.focus(), "native" !== this.mainGrid.options.drawType && (this.mainGrid.render.scrollLeft = 0, this.mainGrid.render.scrollTop = 0), "select" == u.options.editType ? u.select() : "focus" == u.options.editType && (r.D.isIE() || r.D.isFF()) && WebSquare.text.setCaretPos(u.render, u.render.value.length) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.textImage.prototype.setPosition = function() { try { var t = { top: 0, left: 0, width: 0, height: 0, tdWidth: 0 }; if (r.D.isFF() ? t = { top: -1, left: -1, width: 0, height: 0, tdWidth: 0 } : r.D.isOpera() && (t = { top: 0, left: 0, width: 0, height: 1, tdWidth: 0 }), "native" === this.mainGrid.options.drawType) { var e = document.getElementById(this.mainGrid.id + "_dataLayer"); t.top -= e.scrollTop, t.left -= e.scrollLeft } var i = this.editTd, o = i.getElementsByTagName("td"), s = o[1].firstChild, n = i.clientWidth - s.offsetWidth - 1 + t.tdWidth, l = i.offsetTop + 1 + t.top, h = i.offsetLeft + 1 + t.left, d = i.clientWidth - s.offsetWidth - 6 + t.width, p = i.clientHeight - 2 + t.height; if (this.mainGrid.options.groupbyZone) { var u = this.mainGrid.groupbyZoneStatus.groupbyZoneRender.offsetHeight; this.mainGrid.options.groupbyFilterBox && "top" === this.mainGrid.options.groupbyFilterBoxLocation && (u = parseInt(this.mainGrid.options.groupbyZoneHeight, 10) + document.getElementById(this.mainGrid.id + "_groupbyFilterBox_div").offsetHeight), l += u } o[0].style.width = n + "px"; var c = this.mainGrid.getInput(this); if ("" != this.options.imeMode) c.render.style.imeMode = this.options.imeMode; else { var g = this.mainGrid.getColumnOption(this.options.col_id, "dataType"); c.render.style.imeMode = "number" == g ? "disabled" : "" } if (this.mainGrid.hasClass("w2grid_adaptive_crosstab")) l -= document.getElementById(this.mainGrid.id + "_body_tbody").scrollLeft, c.render.style.lineHeight = p + "px"; c.show(), c.render.style.top = l + "px", c.render.style.left = h + "px", c.render.style.width = d + "px", c.render.style.height = p + "px", c.render.style.lineHeight = p + "px", c.render.style.textAlign = "" == i.style.textAlign ? "center" : i.style.textAlign } catch (t) { a.w.printStackTrace(t, null, this) } }, A.textImage.prototype.removeCellData = function(t, e) { this.mainGrid.dataList.__setCellData(t, e, "") },
										A.textImage.prototype._handleEndEdit_common = function(t) { try { var e = this.mainGrid.getInput(this), i = e.getValue(); i = e.validator.validateString(i), this.setInnerHTML(this.editTd, i, this.editRowIndex, this.getColumnIndex(this.colID)); var o = {}; o[this.mainGrid.id] = !0; var s = r.D.getGlobalFunction(this.options.customModelFormatter, this.scope_id); if ("function" == typeof s) { this.useCustomModelFormatter = !0; var n = this.getDisplayData(i); i = s.call(this.mainGrid, i, n, this.editRowIndex, this.getColumnIndex(this.colID)) } else this.useCustomModelFormatter = !1; return this.mainGrid.dataList.__setCellData(this.editRowIndex, this.colID, i, null, null, null, o), e } catch (t) { a.w.printStackTrace(t, null, this) } }, A.textImage.prototype._handleEndEdit_focus = function(t) { t.setDisabled(!1), t.setReadOnly(!1), t.hide() }, A.textImage.prototype._getEditedValue = function(t) { return this.mainGrid.getInput(this).getValue() }, A.textImage.prototype._handleCancelEdit = function(t) { try { var e = this.mainGrid.getInput(this), i = this.mainGrid.dataList._getCellData(this.editRowIndex, this.colID); this.setInnerHTML(this.editTd, i, this.editRowIndex, this.getColumnIndex(this.colID)), e.hide() } catch (t) { a.w.printStackTrace(t, null, this) } }, A.textImage.prototype.doDefaultAction = function(t) { t.ctrlKey || this.mainGrid.setEditHtml(t) }, A.textImage.prototype.showReadonly = function(t, e) { this.setEditMode(t, e); var i = this.mainGrid.getInput(this); i.setDisabled(!0), i.setReadOnly(!0), this.mainGrid.editedCell = this }, A.prototype.setDataListCellRefresh = function(t) { try { if (t) { this.initFormatter(t); var e = this.options.dataType; e || (e = this.mainGrid._dataList.getColumnOption(this.options.col_id, "dataType")), "date" != e || this.options.displayFormat || (this.options.displayFormat = s.v.getConfiguration("/WebSquare/" + this.mainGrid.options.pluginName + "/dataType/date/@displayFormat")), "time" != e || this.options.displayFormat || (this.options.displayFormat = "HH:mm"); var i = !this.options.groupName || !this.options.groupValue, o = this.options.inputType; if (i && ("button" != o && "image" != o)) { var r = this.mainGrid._dataList.getCellInfo(this.colID), n = !(!r || !r.element && r.id !== this.id); this.options.readOnly = !n || t.getAttribute("readOnly") } } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.spinner = function() { }, A.spinner.prototype.initializeCellInfo = function(t) { try { if (!this.xml) if ("json" === t._elementType) t._element.N = "w2:" + this.options.inputType, this.xml = t; else { var e = "", i = (e = r.D.isIE("6 7") && this.internal ? WebSquare.xml.nodeWellFormed(t.outerHTML) : WebSquare.xml.serialize(t)).indexOf("xmlns:w2") < 0 ? ' xmlns:w2="http://www.inswave.com/websquare"' : ""; e = (e = e.wq_replaceAll("<w2:column", "<w2:spinner" + i)).wq_replaceAll("</w2:column", "</w2:spinner"); var o = WebSquare.xml.parse(e, !0); this.xml = o.documentElement } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.spinner.prototype.setInnerHTML = function(t, e, i, o, s) { null == e && (e = ""), this.spinner && this.spinner.render && t.firstChild == this.spinner.render && t.removeChild(this.spinner.render), t.innerHTML = this.mainGrid.dataTagOpen + this.getDisplayData(e, i) + this.mainGrid.dataTagClose; var a = this.mainGrid.dataList.getRealRowIndex(i), n = this.mainGrid.getCellOption(a, o, "viewType"), l = this.mainGrid.getColumnOption(this.options.col_id, "dataType"), h = r.D.getDataPrefix("editModeEvent"); ("icon" == n || "" == n && "own" == l) && (this.mainGrid.addClass(t, this.mainGrid.options.bodyTdClass + "_spinner"), t.setAttribute(h, this.options.editModeEventIcon)) }, A.spinner.prototype.setEditMode = function(t, e) {
											try {
												if ("" == this.style) {
													var i = r.D.getDataPrefix("tdindex"); this.style = "position:relative;left:0px;top:0px;background-color:#ffffff;", this.xml.setAttribute("class", this.mainGridId + "_spinner_" + this.id), this.xml.setAttribute("style", this.style), this.configOptions = {}, this.options.dataType && (this.configOptions.dataType = this.options.dataType), this.options.buttonSize && (this.configOptions.buttonSize = this.options.buttonSize), this.options.dateIncrementType && (this.configOptions.dateIncrementType = this.options.dateIncrementType), this.options.displayFormat && (this.configOptions.displayFormat = this.options.displayFormat),
														this.options.displayFormatter && (this.configOptions.displayFormatter = this.options.displayFormatter), this.options.increment && (this.configOptions.increment = this.options.increment), this.options.min && (this.configOptions.min = this.options.min), this.options.max && (this.configOptions.max = this.options.max), this.options.editType && (this.configOptions.editType = this.options.editType); var o = t.getAttribute(i); this.mainGrid._getEditDisabled(e, o) ? this.configOptions.disabled = !0 : this.configOptions.disabled = !1, this.configOptions.xmlEvents = [{ name: "ondblclick", action: "script", param: { handler: function(t) { d.B.stopPropagation(t) } } }], this.spinner = new WebSquare.uiplugin.spinner(this.mainGridId + "_spinner_" + this.id, this.configOptions, this.xml), this.spinner.isGridCellComponent = !0; var s = this; this.spinner._handleClickEvent = this.spinner.handleClickEvent, this.spinner.handleClickEvent = function(t) { var e = s.mainGrid.getElemRowIndex(this.render.parentElement), o = s.mainGrid._getGroupbyDisplayRowIndex(e), a = this.render.parentElement.getAttribute(i); if (this.options.customFormatter) { try { var n = null, l = {}; if ("function" == typeof (n = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id))) for (var h in l = n(o, a)) this.options.hasOwnProperty(h) && (this.options[h] = l[h]) } catch (t) { n = null } this._handleClickEvent(t) } else this._handleClickEvent(t); d.B.stopEvent(t) }, this.spinner._inputKeyDown = this.spinner.inputKeyDown, this.spinner.inputKeyDown = function(t, e) { 27 == t.keyCode || s.spinner._inputKeyDown(t, e) }, t.innerHTML = this.spinner.toHTML(), this.spinner.activate(), this.spinner.setSize(t.clientWidth - 2, t.clientHeight - 2)
												} else t.innerHTML = "", t.appendChild(this.spinner.render), this.spinner.show(); this.spinner.options.maxValue && (this.maxValue = Number(this.spinner.options.maxValue)), this.spinner.options.minValue && (this.minValue = Number(this.spinner.options.minValue)), this.editColIndex = this.mainGrid.getColumnIndex(this.id), this.editRowIndex = e, this.editTd = t, this.spinner.setValue(this.mainGrid.dataList._getCellData(e, this.id)), "select" != this.options.editType && "focus" != this.options.editType || this.spinner.focus()
											} catch (t) { a.w.printStackTrace(t, null, this.mainGrid) }
										}, A.spinner.prototype._handleEndEdit_common = function(t) { try { var e = this.spinner.getValue(); if ("number" == this.spinner.options.dataType) { Number(e); this.options.customFormatter ? (this.spinner.options.maxValue && (this.maxValue = Number(this.spinner.options.maxValue)), this.spinner.options.minValue && (this.minValue = Number(this.spinner.options.minValue)), !isNaN(this.maxValue) && e > this.maxValue ? e = this.maxValue + "" : !isNaN(this.minValue) && this.minValue > e && (e = this.minValue)) : !isNaN(this.maxValue) && e > this.maxValue ? e = this.maxValue + "" : !isNaN(this.minValue) && this.minValue > e && (e = this.minValue) } else this.spinner.options.dataType; this.mainGrid.dataList.__setCellData(this.editRowIndex, this.id, e), this.setInnerHTML(this.editTd, e, this.editRowIndex, this.id), this.spinner.hide() } catch (t) { a.w.printStackTrace(t, null, this) } }, A.spinner.prototype._handleCancelEdit = function(t) { }, A.spinner.prototype._handleEndEdit_focus = function() { try { return null } catch (t) { a.w.printStackTrace(t, null, this) } }, A.spinner.prototype.doDefaultAction = function(t) { t.ctrlKey || this.mainGrid.setEditHtml(t) }, A.custom = function() { }, A.custom.prototype.initializeCellInfo = function(t, e) { try { !e && t && "function" == typeof t.getTagName && "w2:column" == t.getTagName() && (1 == this.mainGrid.options.setCellInputTypeCustom ? (this.parseTypeGetter(), this.cellManagerHashByRowIndex = [], this.cellManagerIDByRowIndex = []) : (this.parseTypeGetter(), this.cellManagerHashByID = {}, this.cellManagerHashByRowIndex = {}, this.cellManagerIDByRowIndex = {})) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.initializeCellManager = function(t, e) {
											try {
												var i = e.inputType ? e.inputType : e.tagName; if (t.id = e.id, t.colID = this.id, t._position = { colIndex: this.mainGrid.getColumnIndex(this.colID), colID: this.id, realRowIndex: e.realRowIndex, displayRowIndex: e.displayRowIndex }, t.parentColumnInfo = this, t.options.inputType = i, t.initializeInputType = this.getTagName(i),
													t.initializeInfo = e, "gridViewItemset" === e.itemTableType && !e.itemSet) for (var o in t.initializeInfo.itemSet = { nodeset: e.nodeset, label: e.label, value: e.value }, t.options.itemSet = t.initializeInfo.itemSet, t.options.item = e.item, t.options.gridViewOptions = {}, t.options.itemTableType = "gridViewItemset", e) t.options.gridViewOptions[o] = e[o]; for (var o in e.options) t.options[o] = e.options[o]; t.initFormatter()
											} catch (t) { a.w.printStackTrace(t, null, this) }
										}, A.custom.prototype.getMapping = function(t, e) { try { switch (t) { case "text": return o.x.extend(e, WebSquare.uiplugin.cellInfo.text.prototype), !0; case "link": return o.x.extend(e, WebSquare.uiplugin.cellInfo.link.prototype), !0; case "checkbox": return o.x.extend(e, WebSquare.uiplugin.cellInfo.checkbox.prototype), !0; case "button": return o.x.extend(e, WebSquare.uiplugin.cellInfo.button.prototype), !0; case "image": return o.x.extend(e, WebSquare.uiplugin.cellInfo.image.prototype), !0; case "radio": return o.x.extend(e, WebSquare.uiplugin.cellInfo.radio.prototype), !0; case "select": return o.x.extend(e, WebSquare.uiplugin.cellInfo.itemsetControl.prototype), o.x.extend(e, WebSquare.uiplugin.cellInfo.select.prototype), !0; case "calendar": return o.x.extend(e, WebSquare.uiplugin.cellInfo.calendar.prototype), !0; case "textarea": return o.x.extend(e, WebSquare.uiplugin.cellInfo.textarea.prototype), !0; case "expression": return o.x.extend(e, WebSquare.uiplugin.cellInfo.expression.prototype), !0; case "textImage": return o.x.extend(e, WebSquare.uiplugin.cellInfo.textImage.prototype), !0; case "checkcombobox": return o.x.extend(e, WebSquare.uiplugin.cellInfo.itemsetControl.prototype), o.x.extend(e, WebSquare.uiplugin.cellInfo.checkcombobox.prototype), !0; case "autoComplete": return o.x.extend(e, WebSquare.uiplugin.cellInfo.itemsetControl.prototype), o.x.extend(e, WebSquare.uiplugin.cellInfo.autoComplete.prototype), !0; default: return o.x.extend(e, WebSquare.uiplugin.cellInfo.text.prototype), !0 } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.getTagName = function(t) { try { switch (t) { case "text": return "input"; case "link": return "anchor"; case "button": return "trigger"; case "select": return "selectbox"; default: return t } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.parseTypeGetter = function() { try { this.options.typeGetter ? (this.typeGetter = r.D.getGlobalFunction(this.options.typeGetter, this.scope_id), this.isValidTypeGetter = !0) : (this.isValidTypeGetter = !1, 0 == this.options.setCellInputTypeCustom && $l("Custom type 그리드 생성 중 오류가 발생하였습니다. typeGetter 속성이 정의되어 있지 않습니다.  gridView [" + this.mainGrid.id + "] column:[" + this.id + "]")) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.updateCellManagerHash = function(t, e, i, o) { try { this.isValidTypeGetter ? (this.cellManagerHashByID[t] = i, this.cellManagerHashByRowIndex[e] = i, this.cellManagerIDByRowIndex[e] = t) : (this.cellManagerHashByRowIndex[e] = i, this.cellManagerIDByRowIndex[e] = t), o && i.itemsetObj && o.nodeset !== i.itemsetObj.nodeset && i.setColumnNodeSet(o.nodeset, o.label, o.value) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.createCellManager = function(t, e) { try { var i = e.id, o = e.realRowIndex, s = new WebSquare.uiplugin.cellInfo(t, this.mainGrid, !0); if (this.mainGrid.options.senseReader && "false" !== s.options.embeddedInput && (s.options.embeddedInput = !0), this.getMapping(e.inputType, s)) { if (this.initializeCellManager(s, e), s.initializeCellInfo(t, e.options), s.isLocked = !0, this.updateCellManagerHash(i, o, s), !0 === s.options.embeddedInput) { var r = e.itemSet; r && "function" == typeof s.setColumnNodeSet && s.setColumnNodeSet(r.nodeset, r.label, r.value, o) } return this.cellManagerHashByRowIndex[o] } var n = this.options.id, l = this.mainGrid.getColumnIndex(n); return $l("Custom type 그리드 생성 중 오류가 발생하였습니다. gridView [" + this.mainGrid.id + "] column:[" + this.id + "] inputType:[" + e.inputType + "] realRowIndex:[" + o + "] colIndex[" + l + "]"), !1 } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.getCellManager = function(t) {
											try {
												var e = t.managerID, i = t.element, o = t.rowIndex, s = t.realRowIndex, r = this.options.id, n = this.mainGrid.getColumnIndex(r), l = this.mainGrid.dataList.getCellData(o, n), h = { colID: r, colIndex: n, rowIndex: o, displayRowIndex: t.rowIndex, realRowIndex: t.realRowIndex, value: l }; try { var d, p; if (1 != this.mainGrid.options.setCellInputTypeCustom || this.isValidTypeGetter) { if (this.cellManagerHashByID[e]) return this.cellManagerHashByID[e]; if (this.isValidTypeGetter) { var u = !1; p = this.typeGetter(h); g = this.cellManagerIDByRowIndex[s]; var c = this.cellManagerHashByRowIndex[s]; if (c && c.options.embeddedInput && t.td && (t.td.firstChild ? t.td.firstChild && t.td.firstChild.id !== this.mainGrid.id + "_" + g && (u = !0) : u = !0), !p || g !== p.id || u) { f = this.mainGrid.id + "_" + g; m = this.mainGrid.dom[f], y = null; null != m && (y = WebSquare.idCache[m.uuid]), y && "function" == typeof y.remove && y.remove(), delete this.mainGrid.dom[f], this.cellManagerHashByID[g] = null, this.cellManagerHashByRowIndex[s] = null } } else this.parseTypeGetter(), this.isValidTypeGetter && (p = this.typeGetter(h)) } else if (1 == t.dynamicInputType) { if ((p = t.options).id = "dynamic_" + p.inputType + "_" + o + "_" + n, this.cellManagerHashByRowIndex[s]) { var g = this.cellManagerIDByRowIndex[s], f = this.mainGridId + g, m = this.mainGrid.dom[f], y = null; null != m && (y = WebSquare.idCache[m.uuid]), y && "function" == typeof y.remove && y.remove(), delete this.mainGrid.dom[f], this.cellManagerIDByRowIndex[s] = null, this.cellManagerHashByRowIndex[s] = null } } else if (this.cellManagerHashByRowIndex[s] && !t.dynamicInputType) return this.cellManagerHashByRowIndex[s]; return p ? (p.isUDC || ((d = 1 == this.mainGrid.options.setCellInputTypeCustom ? this.cellManagerHashByRowIndex[s] : this.cellManagerHashByID[p.id]) ? (this.updateCellManagerHash(p.id, s, d, p.itemSet), d.isLocked) : (p.realRowIndex = s, p.rowIndex = o, p.displayRowIndex = o, d = this.createCellManager(i, p))), 1 != this.mainGrid.options.setCellInputTypeCustom && (d.customValue = p.value)) : d = this.createCellManager(i, { id: this.colID + "_" + s + "__default", inputType: "text", realRowIndex: s }), d } catch (t) { return $l("Custom type 그리드 생성 중 오류가 발생하였습니다. gridView [" + this.mainGrid.id + "] column:[" + this.id + "] realRowIndex:[" + s + "] colIndex[" + n + "]"), !1 }
											} catch (t) { a.w.printStackTrace(t, null, this) }
										}, A.custom.prototype.setInnerHTML = function(t, e, i, o, s) { try { var r = this.mainGrid.getRealRowIndex(i), n = this.getCellManager({ element: this.element, rowIndex: i, realRowIndex: r, td: t }); if (!1 === n) t.innerHTML = this.mainGrid.dataTagOpen + e + this.mainGrid.dataTagClose; else { this.clearStyle(n, t); !0 === this.isValidTypeGetter && n.options.class && this.mainGrid.addClass(t, n.options.class), n.setInnerHTML(t, e, i, o), null != n.customValue && (e = n.customValue, this.mainGrid.dataList.__setCellData(i, this.colID, e)), this.useCustomFormatter = n.useCustomFormatter, this.useCustomModelFormatter = n.useCustomModelFormatter, this.useEscapeFormatter = n.useEscapeFormatter } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.setEditMode = function(t, e) { try { if (!this.internal) { var i = this.mainGrid.getRealRowIndex(e), o = this.cellManagerHashByRowIndex[i]; o && o.setEditMode(t, e) } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.setPosition = function() { try { if (!this.internal) { var t = this.mainGrid.getRealRowIndex(this.editRowIndex), e = this.cellManagerHashByRowIndex[t]; e && e.setPosition() } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype._handleEndEdit_common = function(t) { try { if (!this.internal) { var e = this.mainGrid.getRealRowIndex(this.editRowIndex) || this.editRowIndex, i = this.cellManagerHashByRowIndex[e]; if (i) return i._handleEndEdit_common(t) } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype._handleEndEdit_focus = function(t) { try { if (!this.internal) { var e = this.mainGrid.getRealRowIndex(this.editRowIndex) || this.editRowIndex, i = this.cellManagerHashByRowIndex[e]; i && i._handleEndEdit_focus(t) } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype._handleCancelEdit = function(t) { try { if (!this.internal) { var e = this.mainGrid.getRealRowIndex(this.editRowIndex), i = this.cellManagerHashByRowIndex[e]; i && i._handleCancelEdit() } } catch (t) { a.w.printStackTrace(t, null, this) } },
										A.custom.prototype.doDefaultAction = function(t) { try { if (!this.internal) { var e = this.mainGrid.getRealRowIndex(this.editRowIndex), i = this.cellManagerHashByRowIndex[e]; i && i.doDefaultAction() } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.clearStyle = function(t, e) { try { var i = r.D.getDataPrefix("editModeEvent"); "calendar" != t.initializeInputType && this.mainGrid.hasClass(e, this.mainGrid.options.bodyTdClass + "_calendar") && (WebSquare.style.removeClass(e, this.mainGrid.options.bodyTdClass + "_calendar"), e.setAttribute(i, "")), "select" != t.initializeInputType && this.mainGrid.hasClass(e, this.mainGrid.options.bodyTdClass + "_select") && (WebSquare.style.removeClass(e, this.mainGrid.options.bodyTdClass + "_select"), e.setAttribute(i, "")), "autoComplete" != t.initializeInputType && this.mainGrid.hasClass(e, this.mainGrid.options.bodyTdClass + "_autoComplete") && (WebSquare.style.removeClass(e, this.mainGrid.options.bodyTdClass + "_autoComplete"), e.setAttribute(i, "")), "checkcombobox" != t.initializeInputType && this.mainGrid.hasClass(e, this.mainGrid.options.bodyTdClass + "_checkcombobox") && (WebSquare.style.removeClass(e, this.mainGrid.options.bodyTdClass + "_checkcombobox"), e.setAttribute(i, "")) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.validate = function() { try { if (!this.internal) { var t = this.mainGrid.getRealRowIndex(this.editRowIndex), e = this.cellManagerHashByRowIndex[t]; if (!e) return !0; switch (e.options.inputType) { case "calendar": return e.validate(); default: return !0 } } } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype._getEditedValue = function() { try { if (!this.internal) { var t = this.mainGrid.getRealRowIndex(this.editRowIndex), e = this.cellManagerHashByRowIndex[t]; if (e && e._getEditedValue) return e._getEditedValue() } return "" } catch (t) { a.w.printStackTrace(t, null, this) } }, A.custom.prototype.refreshCellManagerHash = function() { try { for (var t = this.mainGrid.getRowCount(), e = 0; e < t; e++)this.getCellManager({ element: this.element, rowIndex: e, realRowIndex: this.mainGrid.getRealRowIndex(e) }) } catch (t) { a.w.printStackTrace(t, null, this) } }, A.user = function() { }, A.user.prototype.setInnerHTML = function(t, e, i, o, s) { var a, n = r.D.getGlobalFunction(this.options.customFormatter, this.scope_id), l = this.mainGrid._getGroupbyDisplayRowIndex(i), h = this.getDisplayData(e); "function" == typeof n ? (this.useCustomFormatter = !0, a = n.call(this.mainGrid, e, h, l, o)) : (this.useCustomFormatter = !1, a = h), t.innerHTML = this.mainGrid.dataTagOpen + a + this.mainGrid.dataTagClose }, A.user.prototype.doDefaultAction = function(t) { if ("none" == this.mainGrid.options.focusMode) { for (var e = d.B.getTarget(t); e && "TD" != e.tagName;)e = e.parentNode; if (!e) return; var i = this.mainGrid.getElemRowIndex(e), o = this.mainGrid._getGroupbyDisplayRowIndex(i), s = r.D.getDataPrefix("col_id"), a = this.mainGrid.getColumnIndex(e.getAttribute(s)) } else { var n = this.mainGrid.getLastFocusedCell(); i = n.focusedRowIndex, o = this.mainGrid._getGroupbyDisplayRowIndex(i), a = n.focusedColIndex } this.mainGrid._getEditDisabled(i, a) || this.mainGrid.___getEditReadOnly(i, a) || d.B.fireEvent(this.mainGrid, "oncellclick", o, a, this.options.id) }; var F = function(t, e, i) { n.s.call(this, t, e, i) }; o.x.extend(F.prototype, n.s.prototype), F.prototype.defaultOptions = {
											useConfig: !0, pluginType: "uiplugin.gridView", pluginName: "gridView", serializable: !0, userEvents: ["oncellclick", "oncelldblclick", "onrightbuttonclick", "ontextimageclick", "ondateselect", "oneditdblclick", "oncellindexchange", "onrowindexchange", "oncolumnindexchange", "onfilereadend", "onscrollend", "onscrollstart", "onbeforeedit", "oneditend", "oneditkeydown", "onafteredit", "onscrolly", "onscrollx", "onsort", "onbeforesort", "onheaderclick", "onheaderrightbuttonclick", "onheaderdblclick", "onfooterclick", "onsubtotalclick", "onsubtotaldblclick", "onbodymouseover", "onbodymouseout", "ongroupby", "ontoggleclick", "onclick", "onblankclick", "onkeydown", "onkeyup", "onviewchange", "onbeforepaste", "onafterpaste", "oncolumnwidthchange", "onbeforecolumnmove", "onaftercolumnmove", "onaftercolumnresize", "ondatadragstart", "ondatadragover", "ondatadrop", "oncontextopen", "oncontextclick", "oneditkeyup"],
											rowNumVisible: !1, rowNumRowSpan: !0, rowNumHeaderValue: "", rowNumLocaleRef: "", rowNumBackgroundColor: "", rowNumStatusResize: !1, rowStatusVisible: !1, rowStatusRowSpan: !0, rowStatusColSpan: !1, rowStatusHeaderValue: "", rowStatusLocaleRef: "", overflowX: "auto", overflowY: "auto", fixedColumn: 0, fixedColumnWithHidden: !0, fixedColumnNoBGColor: !1, fixedColumnScrollHidden: !1, fixedColumnNoMove: !1, rowNumStatusFixed: !0, fixedRightColumn: 0, fixedRow: 0, lastFixedRow: 0, lastFixedRowStartIndex: 0, resize: !0, rowResize: !1, baseNode: "vector", repeatNode: "data/INFO", valueNode: "", focusMode: "cell", selectedCellColor: "#FCA73C", selectedRowColor: "#FCA73C", oddEvenColorDisplay: !1, oddRowBackgroundColor: "#EFF7FF", evenRowBackgroundColor: "#FFFFFF", rowMouseOver: !1, rowMouseOverColor: "#ffff80", selectedCellOverColor: "", selectedRowOverColor: "", editModeEvent: "ondblclick", editModeEventIcon: "onclick", keyMoveEditMode: !1, enterKeyMove: "down", sortable: !1, sortHeaderDiv: !1, sortOrderReverse: !1, noSortInit: !1, showSortableImage: !1, preventMultisort: !1, useCtrlOnMultisort: !0, useCtrlKey: !0, sortedImagePosition: "", sortedIconPosition: "", sortEvent: "ondblclick", headerTooltipDisplay: !1, rowStatusTooltipDisplay: !1, tabKeyMove: "right", tooltipDisplay: !1, tooltipDisplayTime: 0, tooltipClass: "", tooltipStyle: "", tooltipHide: "click", tooltipShowAlways: !1, tooltipShowAlwaysColumns: "", tooltipHeaderShowAlways: !1, tooltipFormatter: "", tooltipFormatterHeader: "", tooltipPositionX: "20", tooltipPositionY: "3+cellHeight", tooltipDisplayColumn: "", tooltipHeader: !1, showImageTooltip: !1, captionTitle: "", captionAuto: !1, noResultMessageVisibleAlways: !1, noResultMessageVisible: !1, noResultMessageExclude: "", noResultMessage: "", noResultMessageClass: "", noResultMessageStyle: "", hiddenClass: "", readOnly: "", readOnlyPriority: "", readOnlyBackgroundColor: "", readOnlyBackgroundImg: "", readOnlyBackgroundImgCSS: "", readOnlyTabIgnore: !1, ignoreNonEditableCell: !1, ignoreNonEditableCellTabEnter: !1, disabledPriority: "", disabledBackgroundColor: "", disabledFontColor: "", summary: "", footerCaption: "", footerCaptionAuto: !1, footerSummary: "", footerSummaryAuto: !1, drawLimitTime: 70, drawLimitRow: 4, loadCount: 0, autoFit: "", autoFitMinWidth: "", autoFitFixYScroll: !1, fastScroll: "", lazyDrawHiddenColumn: !1, defaultCellHeight: -1, defaultHeaderCellHeight: -1, hideHeader: !1, dataDragDrop: !1, dataDragDropOther: !1, dataDragDropSelf: !1, dataDragDropStatus: !1, dataDragSelect: !1, dataDragSelectAutoScroll: !1, dataDragSelectAutoScrollDPI: 5, dataDragSelectAutoScrollPeriod: 70, dataDragSelectAutoScrollDelay: 50, dataDragSelectAutoScrollLevel: 1300, dragDisplayColumn: "", dragStartFunction: "", dragEndFunction: "", headFiller: !1, focusMove: "true", focusFlow: "default", scrollMsg: "", visibleRowNum: "", visibleRowNumFix: !1, fixHeight: !1, fastEditMode: !1, iScrollMoveEffectTime: 500, iScrollSlideTime: 800, iScrollSlidePeriod: 100, rollbackCommit: !0, numberCasting: !1, backgroundColorMode: "lazy", senseReader: !1, senseReaderLinkFocus: !1, useStartEndDiv: !0, showLastRow: !1, autoScope: !1, autoResizeEmbeddedInput: !1, servletPopup: !1, excelUploadPopupURL: "", advancedExcelUploadPopupURL: "", advancedExcelMultiUploadPopupURL: "", advancedExcelDownloadPopupURL: "", excelUploadURL: "", excelDownloadURL: "", csvDownloadURL: "", csvUploadPopupURL: "", csvUploadURL: "", advancedExcelUploadURL: "", advancedExcelDownloadURL: "", drilldownRealRowIndex: !0, drilldownRealRowIndexAll: !1, drilldownToggleScrollFix: !1, escape: !0, fixPrint: !1, xmlEncode: !1, wheelRows: 3, wheelStop: !1, scrollByColumn: !1, scrollByColumnAdaptive: !1, rowNumWidth: "", rowStatusWidth: "", keepDefaultColumnWidth: !1, columnMove: !1, columnMoveWithFooter: !1, columnOrder: "", copyAmount: "", copyOption: "", copyType: "default", pasteOption: "", rowCopy: !1, customPasteFormatter: "", checkReadOnlyOnPaste: !1, checkDisabledOnPaste: !1, checkReadOnlyOnCut: !0, checkDisabledOnCut: !0, checkBlankRowOnPaste: !1, checkEditableInputClass: !1, checkOnCellClick: !1, setDefaultValueOnPaste: !1, preventAddRowOnPaste: !1, preventCopy: !1, preventPaste: !1, groupbyZone: !1, groupbyZoneSearch: !1, groupbyListVisibleRowNum: 10, groupbyZoneMessage: "", groupbyZoneHeight: "50", groupbyMaxCount: -1,
											groupbyDisplayRowIndex: !1, groupbyFilterIcon: !1, plainText: !1, excludeDeletedRows: !1, excludeModifiedRows: !1, initFixedHeightByRowNum: -1, moveKeyEditMode: !1, moveKeyEditModeAll: !1, keepBeforeDisplayData: !1, touchScrollDelta: 5, dataList: "", useFilterSearch: !1, useFilterList: !1, useFilterListSync: !1, useFilterListFormat: !1, filterListRowHeight: 20, filterListVisibleRowNum: 0, filterListWidth: 0, caseSensitive: !1, displayValueOnUseFilterList: !1, customFilterListVisibleRowNum: 10, showAllFilterList: !1, useFilterEmptyMsg: "", filterDisplayMode: "label", filterSearchTarget: "label", filterShowAlways: !1, duplicateColumnId: !1, filterFocusMode: "", focusOnSetData: !1, focusDefaultColumn: !1, focusAutoRemove: !1, scrollFix: !1, scrollRowHeight: !1, applyAllColumnStyle: !1, disabledScrollHidden: !1, hammerEnabled: !1, hammerPressTime: 351, dynamic: !1, ignoreCellClick: !1, ignoreToggleOnDisabled: !1, adaptive: "", autoFitFilterList: !1, summaryAuto: !1, summaryOnlyAuto: !1, arrowMove: !1, filterBoxvisibleRowNum: 4, groupbyFilterBox: !1, groupbyFilterBoxLocation: "bottom", groupbyFilterBoxLabelSize: 3, customFilterBox: !1, customFilterFrameModal: !1, fixAdaptive: !1, groupbyFilterBoxFormatter: "", showSortableUseFilter: !1, customFormatterRealRowIndex: !1, oddEvenColorMerged: !1, showCustomFilterReset: !1, setCellInputTypeCustom: !1, useHeaderCheckboxLabelFor: !0, returnTrueFalseValue: !1, initStyle: !1, mergeCol: "", mergeRow: "", mergeCells: "never", noImageTooltip: !1, mergeCellsFixedCols: "never", mergeCellsFixedRows: "never", mergeExcludeValue: "", rowNumStatusUniqueId: !1, checkHeaderOnly: !1, checkAllType: "include", useDefaultStyle: !1, foldAll: !1, contextMenu: !1, useHeaderContextMenu: !1, contextMenuRowHeight: 20, contextMenuAltClick: !1, titleAuto: !1, syncScroll: !1, disabledClass: "w2grid_default_disabled", readOnlyClass: "w2grid_default_readonly", selectByLabel: !1, syncWithScrollTrack: !1, aliasDataCollection: "", editInputClass: "", directEdit: !1, numberMask: "", euroMask: "", rupeeMask: "", tengeMask: "", useMaxLength: !1, noSelect: !1, scrollFocus: !1, postMsg: !1, useXHR: !1, preventDuplicateFocusedCell: !1, alwaysTriggerScrollStart: !1, CellClickFixScrollX: !1, drawType: "virtual", mergeRefreshAlways: !0, subtotalStyleFormatter: "", useImageClick: !1, hideSortIconOnNoData: !1, hideFilterIconOnNoData: !1, showCheckboxLabelUserFormat: !1, showRadioLabelUserFormat: !1, useMoreButton: !1, moreButtonTitle: "", useTextMultiLink: !1, dataTag: "nobr", ctrlShiftKey: !1, scrollXNative: !1, scrollXNativeMobile: ""
										}, F.prototype.initialize = function(t) {
											if (this.initializeType = "gridView", isNaN(parseInt(this.options.visibleRowNum, 10)) || (this.options.initFixedHeightByRowNum = -1), this.options.initFixedHeightByRowNum > 0 && "" === this.options.visibleRowNum && (this.options.visibleRowNum = this.options.initFixedHeightByRowNum), this.firstEmbeddedInputResize = !0, "none" === this.options.autoFit && (this.options.autoFit = ""), "native" === this.options.drawType && (this.options.visibleRowNum = "all"), "native" === this.options.copyType && (this.options.noSelect = !1), t) { for (var e = !1, i = !1, s = t.getChildNodes(), a = 0; a < s.length; a++)"w2:header" != s[a].getTagName() ? "w2:gBody" != s[a].getTagName() || (e = !0) : i = !0; if (!e || !i) return this.uncompleted = !0, void (this.options.dynamic || $l(" gridView error : cannot find <w2:header> or <w2:gBody>.[" + this.id + "]")) } if (this.options.dataList = this.options.dataList.wq_replaceAll("data:", ""), this._dataList = null, this.options.dataList && (this._dataList = this.modelControl.getDataComp(this.options.dataList, { type: "aliasDataCollection" })), this._dataList) switch (this._grid = this, this._dataList.addChild(this), this._dataList = WebSquare.DataCollection.api.getObj(this._dataList), this.successBinding = !0, this._dataList.initializeType) {
												case "linkedDataList": this._linkedDataList = this._dataList, this._dataList = this._linkedDataList._dataList, this._dataList ? (this.dataList = new WebSquare.uiplugin.mappingController(this), o.x.extend(this, WebSquare.uiplugin.linkedMappingController.prototype), o.x.extend(this.dataList, WebSquare.uiplugin.linkedMappingController.prototype), this.dataList._linkedDataList = this._linkedDataList) : (this.successBinding = !1, this._dataList = {}); break; case "dataList":
													this.dataList = new WebSquare.uiplugin.mappingController(this), this.dataList.mappingCommonAPI()
											} else $l(" gridView error : invalid dataList(" + this.options.dataList + ").[" + this.id + "]"), this.successBinding = !1, this._dataList = {}; this.skipPreActivate = !0; var r = this.options.dataList; null != this.scope_obj && (r = this.scope_obj.id + "_" + this.options.dataList), WebSquare.DataCollection.api.addRelation(this.id, r, !1), this.skipPreActivate = !1, this.myhelper = new WebSquare.korHelper, this._initialize()
										}, F.prototype._initialize = function(t) {
											this.focusedCellInfo = {}, this.extraData = { grid: {}, row: [], col: [], cell: [] }, this.drilldown = new WebSquare.uiplugin.drilldown, "false" != this.options.focusMove && "horizontal" != this.options.focusMove || (this.options.enterKeyMove = "none"), this.options.groupbyFilterBox && (this.groupbyFilterBox_select = null, this.groupbyFilterBox_history = []), this.date = new Date, this.isDrillDown = !1, this.depthColumn = "", this.showDepth = "", this.removed = !1, this.useExpression = !1, this.colWidthList = [], this.gridWidth = 0, this.resizeStarted = !1, this.headerHeight = 0, this.footerHeight = 0, this.hgap = [], this.autofitColumn = !1, this.autofitColumnIndexArr = [], this.autofitColumnWidthArr = [], this.autofitDone = !1, this.resizeStatus = "init", this.scrollWidthSize = 18, this.scrollLayerWidthSize = 18, this.hiddenList = [], this.headerFocus = !1, this.headerObjArr = [], this.tmpSelectbox = null, this.noevent = !1, this.rowIndex = -1, this.lastIndex = -1, this.oelIndex = -1, this.initializeDrawController(), this.drawedRowLength = 0, this.maxRowLength = 0, this.drawSizeChanged = !1, this.drawSizeAdded = !1, this.isExistTextarea = !1, this.bodyHeight = 0, this.scrollEvent = !0, this.isColMerge = !1, this.isColMergeAnd = !1, this.upperToLowerColumnRelation = {}, this.hasSubtotal = !1, this.startRowNumber = 0, this.dataRowList = [], this.subtotalRowHash = {}, this.subtotalDataArr = {}, this.subtotalObj = {}, this.drawSetTimeoutKey = [], this.overElem = null, this.outElem = null, this.hasFooter = !1, this.footerDataObj = null, this.drawFooterStatus = !0, this.bScrollTop = -1, this.bScrollY = 0, this.drawedTime = 0, this.defaultColCnt = 0, this.options.rowNumVisible && this.defaultColCnt++, this.options.rowStatusVisible && this.defaultColCnt++, this.loadCheck = [], this.beforeDataLength = -1, this.beforeMaxRowLength = -1, this.checkScrollStart = !0, this.editEnd = !1, this.lastOverSrc = null, this.headerInfoHash = {}, this.headerInfoHash2 = {}, this.cellInfoHash = {}, this.cellInfoHash2 = {}, this.expressionAssArr = [], this.labelColumnAssArr = [], this.rowStyleValueObj = {}, this.columnStyleValueObj = {}, this.cellStyleValueObj = {}, this.defaultStyleValueObj = {}, this.initStyleValueObj = {}, this.adaptiveColumnStyleValueObj = {}, this.rowStyleFixedValueObj = {}, this.rowStyleDataValueObj = {}, this.columnStyleFixedValueObj = {}, this.columnStyleDataValueObj = {}, this.disabledCellStyleObj = {}, this.headerCellStyleValueObj = {}, this.headerCellClassObj = {}, this.rowStyleIndex = 0, this.cellStyleIndex = 0, this.rowStyleFixedIndex = 0, this.rowStyleDataIndex = 0, this.rowStyleArr = [], this.cellStyleArr = [], this.cellClassArr = [], this.tdCellClassArr = [], this.columnClassObj = {}, this.rowStyleFixedArr = [], this.rowStyleDataArr = [], this.columnStyleFixedArr = [], this.columnStyleDataArr = [], this.rowReadOnlyArr = [], this.cellReadOnlyArr = [], this.rowDisabledArr = [], this.cellDisabledArr = [], this.focusedCell = [], this.focusedRow = [], this.headerToBodyRelation = {}, this.bodyToHeaderRelation = {}, this.passiveColSpanRelation = {}, this.colMoveBolockedHeaderObj = {}, this.backupHeaderHTML = {}, this.expressionHeaderInfo = {}, this.columnOrder = [], this.isIE6 = r.D.isIE("6"), "BackCompat" == document.compatMode && (this.isIE6 = !0), this.isIE7 = r.D.isIE("7"), this.isIE6or7 = this.isIE6 || this.isIE7, this.isMobile = r.D.isMobile(), this.isWebKit = /webkit/.test(navigator.userAgent.toLowerCase()), this.tmpCnt = 0, this.initFlag = !1, this.options.rowNumBackgroundColor = this.options.rowNumBackgroundColor.wq_trim(), this.options.selectedCellColor = this.options.selectedCellColor.wq_trim(), this.options.selectedRowColor = this.options.selectedRowColor.wq_trim(), this.options.oddRowBackgroundColor = this.options.oddRowBackgroundColor.wq_trim(),
											this.options.evenRowBackgroundColor = this.options.evenRowBackgroundColor.wq_trim(), this.options.rowMouseOverColor = this.options.rowMouseOverColor.wq_trim(), this.options.readOnlyBackgroundColor = this.options.readOnlyBackgroundColor.wq_trim(), this.options.disabledBackgroundColor = this.options.disabledBackgroundColor.wq_trim(), this.options.disabledFontColor = this.options.disabledFontColor.wq_trim(), r.D.getBoolean(this.options.focusOnSetData) && (this.options.focusOnSetData = !0), this.options.senseReader && (this.options.focusFlow = "linear", "all" === this.options.visibleRowNum && (this.options.showLastRow = !0), this.element && "false" != this.element.getAttribute("autoScope") && (this.options.autoScope = !0), this.senseReaderMode = !0), this.embeddedWidthObj = {}, this.options.sortable && this.options.sortHeaderDiv && (this.options.showSortableImage = !0, this.options.sortEvent = "onclick"), this.radioGroupRepChk = {}, this.options.excelUploadPopupURL = this.options.excelUploadPopupURL || this.options.servletPopup ? this.getURL(WebSquare.BootLoader.inquiresPath("engine/servlet/fileUpload.jsp"), { baseServletURI: !0 }) : this.getURL(WebSquare.BootLoader.inquiresPath("uiplugin/grid/upload/fileUpload.html"), { baseURI: !0 }), this.options.advancedExcelUploadPopupURL = this.options.advancedExcelUploadPopupURL || this.options.servletPopup ? this.getURL(WebSquare.BootLoader.inquiresPath("engine/servlet/advancedfileUpload.jsp"), { baseServletURI: !0 }) : this.getURL(WebSquare.BootLoader.inquiresPath("uiplugin/grid/upload/advancedfileUpload.html"), { baseURI: !0 }), this.options.advancedExcelMultiUploadPopupURL = this.options.advancedExcelMultiUploadPopupURL || this.getURL(WebSquare.BootLoader.inquiresPath("uiplugin/grid/upload/advancedMultiUpload.html"), { baseURI: !0 }), this.options.advancedExcelDownloadPopupURL = this.options.advancedExcelDownloadPopupURL || this.getURL(WebSquare.BootLoader.inquiresPath("uiplugin/grid/download/advancedfileDownload.html"), { baseURI: !0 }), this.options.excelUploadURL = this.options.excelUploadURL || WebSquare.baseServletURI + "excelToGrid.wq", this.options.excelDownloadURL = this.options.excelDownloadURL || WebSquare.baseServletURI + "xmlToExcel.wq", this.options.csvDownloadURL = this.options.csvDownloadURL || WebSquare.baseServletURI + "xmlToCSV.wq", this.options.csvUploadURL = this.options.csvUploadURL || WebSquare.baseServletURI + "csvToXML.wq", this.options.csvUploadPopupURL = this.options.csvUploadPopupURL || this.options.servletPopup ? this.getURL(WebSquare.BootLoader.inquiresPath("engine/servlet/csvfileUpload.jsp"), { baseServletURI: !0 }) : this.getURL(WebSquare.BootLoader.inquiresPath("uiplugin/grid/upload/csvfileUpload.html"), { baseURI: !0 }), this.options.advancedExcelUploadURL = this.options.advancedExcelUploadURL || WebSquare.baseServletURI + "excelToGrid2.wq", this.options.advancedExcelDownloadURL = this.options.advancedExcelDownloadURL || WebSquare.baseServletURI + "xmlToExcel2.wq", this.groupbyStatus = {}, this.groupbyZoneStatus = {}, this.groupbyDisplayOptions = {}, this.directItemChoiceKeyObj = {}, this.rowStatusColIDArr = [], this.cellIdList = [], this.firstOpenCustomFilter = {}, this.customFilterStatusObj = {}, this.beforeEditedCellInfo = null, this.hiddenAdaptiveList = [], this.adaptiveEmbeddedInputIdList = [], this.hideThresholdObj = {}, this.orgBodyHeightObj = {}, this.orgHeaderHeightObj = {}, this.orgFooterHeightObj = {}, this.orgSubtotalHeightObj = {}, this.oldOptions = {}, this.adaptiveGridType = 0, this.tooltipPositionParse = !1, this.oneRowScrollHeight = 20, this._manager = null, this.beforeEditedCellInfo = null, this.options.noResultMessage = this.options.noResultMessage || WebSquare.language.getMessage("Grid_noResultMessage") || "조회 결과가 없습니다.", this.options.scrollMsg = this.options.scrollMsg || WebSquare.language.getMessage("Grid_scrollMsg") || "화면 갱신 중 입니다...", this.cellMergeInfo = {}, this.cellMergeRealInfo = {}, this.tdMergeInfo = {}, this.mergeColObj = {}, this.mergeRowObj = {}, this.hiddenRowObj = { length: 0, extraRow: 0, row: {}, init: !1 }, this.hiddenCellObj = { length: 0, init: !1 }, !0 === this.options.moveKeyEditModeAll && (this.options.moveKeyEditMode = !0),
											this.filterEmptyStr = this.options.useFilterEmptyMsg || WebSquare.language.getMessage("GRID_useFilterEmptyMsg"), this.useFilterEmptyValueInfo = { "": !0 }; var e = this.options.useFilterEmptyValue ? this.options.useFilterEmptyValue.split(",") : []; e.push(""); for (var i = 0; i < e.length; i++)e[i] = e[i].trim(), this.useFilterEmptyValueInfo[e[i]] = !0; this._regDetectDOM = new RegExp("<[^<]+>", "i"), this._regRemoveDOM = new RegExp("<[/]{0,1}[^></]+[/]{0,1}>", "g"), this._bindDrag = !1, this._subtotalDisplayFormat = "", this._dynamicVisibleRowNum = -1, "span" == this.options.dataTag ? (this.dataTagOpen = "<span class='w2grid_span'>", this.dataTagClose = "</span>") : (this.dataTagOpen = "<" + this.options.dataTag + ">", this.dataTagClose = "</" + this.options.dataTag + ">"), WebSquare.util.isMobile() && this.options.scrollXNativeMobile && (this.options.scrollXNative = r.D.getBoolean(this.options.scrollXNativeMobile))
										}, F.prototype.setPreAction = function() { try { var t = this.render.offsetWidth, e = this.render.offsetHeight; this.resizeObj = { width: t, height: e, scrollLeft: 0, scrollTop: 0, clientWidth: this.render.clientWidth }; var i = this.getElementById(this.id + "_head_table").getElementsByTagName("tr"), o = i[i.length - 1], s = this.getElementById(this.id + "_body_table"); this.gridLastTrBottomFix = s.offsetHeight - o.offsetTop - o.offsetHeight, this.setTableLayout(), this._handleScrollX(), this.setCellInfo(), this.setDataListCellInfo(), 1 == this.isDrillDown && this.initDrilldown(), !0 !== this.options.preventCopy && !0 !== this.options.noSelect || this.addClass("w2noselect") } catch (t) { a.w.printStackTrace(t, null, this) } }, F.prototype.setAction = function() {
											try {
												if (this.initializeEvent(), this.options.columnOrder && this.setColumnOrder(this.options.columnOrder), this.options.mergeCol) { for (var t = this.getColumnCount(), e = 0; e < t; e++)this.mergeColObj[e] = !1; var i = this.options.mergeCol.split(","); for (e = 0; e < i.length; e++) { var o = i[e]; isNaN(o) || (o = Number(o)), this.mergeCol(i[e], !0) } } this._noResultMessageDivTop = WebSquare.util.getStyleProperty(this.getElementById(this.id + "_noresult"), "top"); for (e = 0; e < this.oneRowDataLength; e++) { var s = this.getColumnID(e), n = this.getCellInfo(e); if ("" != this.options.hiddenClass || "" != n.options.hiddenClass) { var l = this.options.hiddenClass; "" != n.options.hiddenClass && (l = n.options.hiddenClass); var h = this._getRealColIndex("body", s) + this.defaultColCnt, d = null != this.bodyToHeaderRelation[s] ? this.getHeaderLayer(this.bodyToHeaderRelation[s]) : null; this.hiddenList[h] ? null == d || this.hasClass(d, l) || this.addClass(d, l) : null != d && this.hasClass(d, l) && this.removeClass(d, l) } } !this.startedDisplayNone && this.getRowCount && this.getRowCount() > 0 && this.notifyDataChanged({ refreshScroll: !0 }), !this.startedDisplayNone && this.options.focusOnSetData && this._setFocusedCell(0, 0), this.successBinding && this._dataList && this._dataList.options.initRowPosition && this._dataList.broadcast({ linkedDataList: ["notifyRowPositionChanged"] }); var p = WebSquare.BootLoader.fullViewed || !1, u = r.D.fullViewed || !1; if (p || u || !this.startedDisplayNone && this.checkAdaptiveGridType() && ("" == this.options.adaptive && 0 == Object.keys(this.hideThresholdObj).length || (this.oldOptions.headerColBorder = "", this.oldOptions.bodyColBorder = "", this.setAdaptive(), this.event.addListener(window, "onresize", this.event.bindAsEventListener(this, this.setAdaptive)))), 1 == this.options.summaryAuto) { var c = this.getHeaderValueList(), g = "", f = ""; for (e = 0; e < c.length; e++)g.length > 0 && (f = ","), g = g + f + c[e]; this.setSummary(g) } if (this.changeCount = 0, r.D.getBoolean(this.options.captionAuto)) { for (c = this.getHeaderValueList(), g = "", f = "", e = 0; e < c.length; e++)g.length > 0 && (f = ","), g = g + f + c[e]; this.options.captionTitle ? this.setCaption(this.options.captionTitle + WebSquare.language.getMessage("Grid_caption2") + g + WebSquare.language.getMessage("Grid_caption")) : this.setCaption(g + WebSquare.language.getMessage("Grid_caption")) } if (this.options.nextTabID && this.setNextTabID(this.options.nextTabID, this.scope_id), this.options.initStyle) { var m = document.getElementById(this.id).style.cssText, y = document.getElementById(this.id).getAttribute("class"); WebSquare.initStyle[this.id] = { style: m, className: y } }
												if (this.startedDisplayNone || this._setVisibleRowNumFix(), this.options.noResultMessageVisibleAlways && this.displayNoResultMessage(), this.options.groupbyZone) { if (this.delayedDraw({})) return; this._drawGroupbyZone() }
											} catch (t) { a.w.printStackTrace(t, null, this) }
										}, F.prototype.setDataList = function() { try { if (!this.successBinding && (this._dataList = this.modelControl.getDataComp(this.options.dataList), this._dataList)) { switch (this._grid = this, this._dataList.addChild(this), this.successBinding = !0, this._dataList.initializeType) { case "linkedDataList": this._linkedDataList = this._dataList, this._dataList = this._linkedDataList._dataList, this._dataList ? (this.dataList = new WebSquare.uiplugin.mappingController(this), o.x.extend(this, WebSquare.uiplugin.linkedMappingController.prototype)) : (this.successBinding = !1, this._dataList = {}); break; case "dataList": this.dataList = new WebSquare.uiplugin.mappingController(this), this.dataList.mappingCommonAPI() }for (var t = 0; t < this.oneRowDataLength; t++)this.getCellInfo(t).setDataListCellRefresh(this.getCellInfo(t).element); this.render && this.notifyDataChanged({ refreshScroll: !0 }) } } catch (t) { a.w.printStackTrace(t, null, this) } }, F.prototype.resetDataList = function() { try { this.successBinding = !1, this.setDataList() } catch (t) { a.w.printStackTrace(t, null, this) } }, F.prototype.serialize = function() { return this.focusedCell }, F.prototype.restore = function(t) { try { for (var e = 0, i = t.length; e < i; e++)this._setFocusedCell(t[e].focusedRowIndex, t[e].focusedColIndex, null, { useShiftKey: !0 }) } catch (t) { return a.w.printStackTrace(t), !1 } return !0 }, F.prototype.onComplete = function() { this._setRedrawTextAreaColumn(), n.s.prototype.onComplete.call(this) }, o.x.extend(F.prototype, l.prototype), o.x.extend(F.prototype, u.prototype), o.x.extend(F.prototype, c.prototype), o.x.extend(F.prototype, g.prototype), o.x.extend(F.prototype, f.prototype), o.x.extend(F.prototype, m.prototype), o.x.extend(F.prototype, y.prototype), o.x.extend(F.prototype, b.prototype), o.x.extend(F.prototype, w.prototype), o.x.extend(F.prototype, C.prototype), o.x.extend(F.prototype, I.L.prototype), o.x.extend(F.prototype, _.prototype), o.x.extend(F.prototype, S.prototype), o.x.extend(F.prototype, D.prototype)
	}, 2712: (t, e, i) => {
		"use strict"; i.d(e, { v: () => n }); i(2981); var o = i(2085), s = i(1960), a = i(3082), r = i(7275), n = function(t) { this._grid = t }; n.prototype.getRealRowIndex = function(t) { try { var e; if (this._grid.groupbyStatus && this._grid.groupbyStatus.grouped) { for (var i in this._grid.customFilterStatusObj) if (this._grid.customFilterStatusObj[i]) return this._grid._dataList.getRealRowIndex(t); e = this._grid.groupbyStatus.groupedRowIndexArr[t] } else e = this._grid._dataList.getRealRowIndex(t); return e } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getTotalRow = function() { try { return this._grid._dataList.getTotalRow() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getTotalCol = function() { try { return this._grid.oneRowDataLength } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRowCount = function() { try { return this._grid._dataList.getDataLength() } catch (t) { o.w.printStackTrace(t) } }, n.prototype._getData = function(t, e) { try { e = this._grid.getColumnID(e); var i = this._grid.cellInfoHash[e] || { options: {} }; if ((1 != this._grid.options.moveKeyEditModeAll || "checkbox" != i.options.inputType && "radio" != i.options.inputType) && this._grid.editEndBeforeGetData(), i && "expression" == i.options.inputType) return i.getExpressionValue(t); var s = this._grid._dataList._getData(t, e); return null == s && (s = ""), s } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getCellData = function(t, e, i) { try { e = this._grid.getColumnID(e); return "2" == (i = null == i || void 0 === i ? "0" : i + "") ? this._getCellData(t, e, i) : this._grid.options && "grid" === this._grid.options.pluginName && this._grid.isDrillDown && this._grid.options.drilldownRealRowIndex && !this._grid._linkedDataList ? this._getCellData(t, e, "0" === i ? 3 : i) : this._getCellData(t, e, i) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._getCellData = function(t, e, i) {
			try {
				e = this._grid.getColumnID(e); if ("2" == (i = null == i || void 0 === i ? "0" : i + "")) return this._grid._getCellDisplayData(t, e); var s = this._grid.getRealRowIndex(t)
					; return "3" != i && null != s && (t = s), this._getData(t, e)
			} catch (t) { o.w.printStackTrace(t) }
		}, n.prototype.getOriginalCellData = function(t, e) { try { e = this._grid.getColumnID(e); return this._grid._dataList.getOriginalCellData(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getColCnt = function() { try { for (var t = 0, e = this._grid.htmlInfo ? this._grid.htmlInfo.head.rowArr[0] : this._grid.struct.head.rowArr[0], i = 0; i < e.length; i++) { var s = e[i]; t += parseInt(s.colSpan, 10) || 1 } return t } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.getColData = function(t, e) { try { t = this._grid.getColumnID(t); return this._grid._dataList.getColData(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRowData = function(t, e) { try { for (var i = [], s = 0; s < this._grid.getColumnCount(); s++)"displayData" != e ? i.push(this.getCellData(t, s)) : i.push(this._grid._getCellDisplayData(t, s)); return i } catch (t) { o.w.printStackTrace(t) } }, n.prototype._getRowData = function(t, e) { try { for (var i = [], s = 0; s < this._grid.getColumnCount(); s++)"displayData" != e ? i.push(this._getData(t, s)) : i.push(this._grid._getDisplayData(t, s)); return i } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getDataRow = function(t) { try { return this._grid._dataList.getDataRow(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getMatchedData = function(t, e, i, s, a) { try { t = this._grid.getColumnID(t); return this._grid._dataList.getMatchedData(t, e, i, s, a) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUnmatchedData = function(t, e, i, s, a) { try { return this._grid._dataList.getUnmatchedData(t, e, i, s, a) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getMatchedColumnData = function(t, e, i, s, a, r) { try { return this._grid._dataList.getMatchedColumnData(t, e, i, s, a, r) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUnmatchedColumnData = function(t, e, i, s, a, r) { try { return this._grid._dataList.getUnmatchedColumnData(t, e, i, s, a, r) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getMatchedIndex = function(t, e, i, s, a) { try { return this._grid._dataList.getMatchedIndex(t, e, i, s, a) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUnmatchedIndex = function(t, e, i, s, a) { try { return this._grid._dataList.getUnmatchedIndex(t, e, i, s, a) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRangeData = function(t, e, i) { try { var s = []; if (t > e) { var a = e; e = t, t = a } t < 0 && (t = 0), e > this._grid.getDataLength() && (e = this._grid.getDataLength()); for (var r = t; r < e; r++)s = s.concat(this.getRowData(r, i)); return s } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getAllData = function() { try { return this._grid._dataList.getAllData() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getColumnDistinctDataArray = function(t) { try { t = this._grid.getColumnID(t); return this._grid._dataList.getColumnDistinctDataArray(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRangeXML = function(t, e) { try { return this._grid._dataList.getRangeXML(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getMatchedXML = function(t, e, i, s, a) { try { t = this._grid.getColumnID(t); return this._grid._dataList.getMatchedXML(t, e, i, s, a) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUnmatchedXML = function(t, e, i, s, a) { try { t = this._grid.getColumnID(t); return this._grid._dataList.getUnmatchedXML(t, e, i, s, a) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRowXML = function(t) { try { return this._grid._dataList.getRowXML(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getAllXML = function() { try { return this._grid._dataList.getAllXML() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRowJSON = function(t) { try { return this._grid._dataList.getRowJSON(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getAllJSON = function() { try { return this._grid._dataList.getAllJSON() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRangeJSON = function(t, e) { try { return this._grid._dataList.getRangeJSON(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getMatchedJSON = function(t, e, i, s, a) { try { t = this._grid.getColumnID(t); return this._grid._dataList.getMatchedJSON(t, e, i, s, a) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUnmatchedJSON = function(t, e, i, s, a) {
			try { t = this._grid.getColumnID(t); return this._grid._dataList.getUnmatchedJSON(t, e, i, s, a) } catch (t) {
				o.w.printStackTrace(t)
			}
		}, n.prototype.getRowArray = function(t) { try { return this._grid._dataList.getRowArray(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getAllArray = function() { try { return this._grid._dataList.getAllArray() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRangeArray = function(t, e) { try { return this._grid._dataList.getRangeArray(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getMatchedArray = function(t, e, i, s, a) { try { t = this._grid.getColumnID(t); return this._grid._dataList.getMatchedArray(t, e, i, s, a) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUnmatchedArray = function(t, e, i, s, a) { try { t = this._grid.getColumnID(t); return this._grid._dataList.getUnmatchedArray(t, e, i, s, a) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.setCellData = function(t, e, i, s, a, r, n, l) { try { e = this._grid.getColumnID(e); if (this._grid._linkedDataList) { var h = this._grid._linkedDataList.filteredRowIndexArr[t]; "number" != typeof (t = this._grid._dataList.getFilteredRowIndex(h)) && (t = h) } this._setCellData(t, e, i, null, s, a, r, n, l) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._setCellData = function(t, e, i, a, r, n, l, h, d) {
			try {
				var p = !1; if ("object" == typeof t && null != t) { e = t.colID, i = t.data, a = t.noDraw, r = t.direction, n = t.skipBroadCast, l = t.noEvent, h = t.excludeId, d = t.skipInstance, p = t.useRealRowIndex; var u = t.filteredRowIndex; t = null, t = u } null == i && (i = ""), null == this._grid.editedCell || this._grid.getCellOption(t, e, "embeddedInput") || this._grid.editedCell.handleCancelEdit(); var c, g = this._grid._dataList.getTotalRow(), f = this._grid._dataList.getTotalCol(); c = !0 === p || this._grid.options && "grid" === this._grid.options.pluginName && this._grid.isDrillDown && this._grid.options.drilldownRealRowIndex && !this._grid._linkedDataList ? t : this._grid.getRealRowIndex(t); var m = t, y = "", b = (e = this._grid.getColumnID(e), this._grid.getColumnIndex(e)), w = this._grid._dataList.getColumnIndex(e), v = this._grid.groupbyStatus.grouped ? c : t; if (this._grid.isDrillDown && this._grid._dataList.options.depthColumn ? y = this.getCellData(c, e, "3") : v >= 0 && v < g && w >= 0 && w < f && (y = this.getCellData(t, e)), v >= 0 && v < g && w >= 0 && w < f) {
					var C = this._grid.cellInfoHash[this._grid.tdIdList[b]] || { options: {} }, I = C.options.inputType || "text"; if (("text" == I || "textImage" == I || "drilldown" == I) && "all" == C.options.applyFormat && !C.options.embeddedInput) { var _ = this._grid.getInput(C); y = C.formatter.format(y), y = _.validator.validateString(y) } var x = this._grid.getColumnOption(C.options.col_id, "dataType"); if ("bigDecimal" == x && "string" == typeof i ? i = WebSquare.bigDecimal(i).toString() : "bigDecimal" == x && ($l("If dataType is bigDecimal, data must be entered to String.[" + this.id + "]"), i = WebSquare.bigDecimal(i).toString()), i.toString().replace(/\r(\n)?/, "\n") !== y.toString().replace(/\r(\n)?/, "\n")) {
						var S = t; if (this._grid.isDrillDown && this._grid._dataList.options.depthColumn && (S = c), this._grid.groupbyStatus.grouped ? this._grid._dataList._setCellData({ filteredRowIndex: c, colID: e, value: i, direction: r, skipBroadCast: n, noEvent: l, excludeId: h, realRowIndex: !0, notifyRowIndex: t, skipInstance: d }) : this._grid._dataList._setCellData(S, e, i, r, n, l, h, d), null == this._grid._dataList.getColumnID(e) && this._grid.notifyCellChanged(m, b), s.B.fireEvent(this._grid, "onchange", t, b, i, y), "radio" == C.options.inputType && C.options.groupName && C.options.trueValue == i && (C.resetOthers(t), this._grid.radioGroupRepChk[C.options.groupName] && this.setCellData(t, C.options.groupName, C.options.groupValue)), this._grid.radioGroupRepChk[C.options.id]) { for (var D = this._grid.getColumnCount(), R = 0; R < D; R++) { var L = this._grid.cellInfoHash[this._grid.tdIdList[R]] || { options: {} }; if ("radio" == L.options.inputType && L.options.groupName == C.options.id && L.options.groupValue == i) { this.setCellData(t, R, L.options.trueValue, r, n, l, h, d); break } } R == D && this._grid._resetRadioGroup(t, C.id, !1) } if (this._grid.isDrillDown) if (this._grid.drilldown.options.depthColumn == b) this._grid.notifyDataChanged({ keepTop: !0 }), 0 == this._grid.getDataLength() && this._grid.removeFocusedCell(),
							this._grid.setScrollYHeight(); else if ("checkbox" == C.options.inputType && C.options.setRecursive) for (var T = this._grid.drilldown.getChildRowArr(t, !0), k = 0; k < T.length; k++)this._getData(T[k], b) != i && this._setCellData(T[k], b, i, a, r, n, l, h, d)
					} else null == this._grid.editedCell || a || this._grid.notifyCellChanged(m, b)
				}
			} catch (t) { o.w.printStackTrace(t) }
		}, n.prototype.__setCellData = function(t, e, i, s, a, r, n) { try { var l; e = this._grid.getColumnID(e); this._grid._linkedDataList ? (l = this._grid._linkedDataList.filteredRowIndexArr[t], "number" != typeof (t = this._grid._dataList.getFilteredRowIndex(l)) && (t = l)) : l = this._grid.dataList.getRealRowIndex(t), this._grid.options && "grid" === this._grid.options.pluginName && this._grid.isDrillDown && this._grid.options.drilldownRealRowIndex && !this._grid._linkedDataList && (t = l), this._setCellData(t, e, i, null, s, a, r, n) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.setOriginalCellData = function(t, e, i) { try { e = this._grid.getColumnID(e); this._grid._dataList.setOriginalCellData(t, e, i) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._setOriginalCellData = function(t, e, i) { try { e = this._grid.getColumnID(e); this._grid._dataList._setOriginalCellData(t, e, i) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.setColumnDefaultValue = function(t, e) { try { t = this._grid.getColumnID(t); this._grid._dataList.setColumnDefaultValue(t, e) } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.setRowData = function(t, e, i) { try { this._grid._dataList.setRowData(t, e, i) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.setDataFile = function(t, e) { try { t = this._grid._dataList.toArray(t); for (var i, s = [], a = 0; a < this._grid.oneRowDataLength; a++) { "expression" == (n = this._grid.getCellInfo(a)).options.inputType && s.push(a) } i = t.length / this._grid.oneRowDataLength; for (a = 0; a < s.length; a++)for (var r = 0; r < i; r++) { t[p = r * this._grid.oneRowDataLength + parseInt(s[a], 10)] = "" } for (a = 0; a < this._grid.oneRowDataLength; a++) { var n, l = (n = this._grid.getCellInfo(a)).options.dataType; if ("select" == n.options.inputType) { var h = []; for (r = 0; r < n.itemArr.length; r++) { h[(d = n.itemArr[r]).label] = d.value } for (r = 0; r < i; r++) { t[p = r * this._grid.oneRowDataLength + a] = h[t[p]] } } else if ("checkcombobox" == n.options.inputType) { for (h = [], r = 0; r < n.itemArr.length; r++) { var d; h[(d = n.itemArr[r]).label] = d.value } for (r = 0; r < i; r++) { for (var p = r * this._grid.oneRowDataLength + a, u = [], c = t[p].split(n.separator), g = 0; g < c.length; g++)u.push(h[c[g]]); t[p] = u.join(n.separator) } } if ("" != n.options.displayFormat) for (r = 0; r < i; r++) { var f, m = t[p = r * this._grid.oneRowDataLength + a], y = n.options.displayFormat; f = "number" == l || "bigDecimal" == l ? WebSquare.text.unformatCurrency(y, m) : "date" == l ? WebSquare.text.unformatDate(y, m) : "time" == l ? WebSquare.text.unformatTime(y, m) : WebSquare.text.unformatText(y, m), t[p] = f } } this._grid._dataList.setData(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.setData = function(t, e, i) { try { this._grid._dataList.setData(t, e, i) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.insertData = function(t, e) { try { this._grid._dataList.insertData(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._insertData = function(t, e, i) { try { this._grid._dataList._insertData(t, e, i) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getDataLength = function() { try { var t; if (this._grid.successBinding) if (this._grid.groupbyStatus && this._grid.groupbyStatus.grouped) { for (var e in this._grid.customFilterStatusObj) if (this._grid.customFilterStatusObj[e]) return this._grid._dataList.getDataLength(); t = this._grid.groupbyStatus.groupedRowIndexArr.length } else t = this._grid._dataList.getDataLength(); else t = 0; return t } catch (t) { o.w.printStackTrace(t) } }, n.prototype.setRowXML = function(t, e, i) { try { this._grid._dataList.setRowXML(t, e, i) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.setXML = function(t, e, i) {
			try {
				if ("grid" == this._grid.initializeType && i && i.ref && (this._grid.options.ref = i.ref, this._grid._dataList.options.ref = i.ref, i.baseNode && (this._grid.options.baseNode = i.baseNode, this._grid._dataList.options.baseNode = i.baseNode), i.repeatNode && (this._grid.options.repeatNode = i.repeatNode, this._grid._dataList.options.repeatNode = i.repeatNode),
					i.aliasDataCollection && (this._grid.options.aliasDataCollection = i.aliasDataCollection, this._grid._dataList.options.aliasDataCollection = i.aliasDataCollection), this._grid._setRef(), this._grid._dataList.repeatNodeTagName = this.repeatNodeTagName), null == t) return void r.k.printLog("[WebSquare.uiplugin.mappingController.setXML] XML is null[" + this.id + "]"); var s = this._grid.xmlData2ArrData(t); if (void 0 === s) return void r.k.printLog("[WebSquare.uiplugin.mappingController.setXML] DataArray which converted from XML is undefined.[" + this.id + "]"); this.setData(s, e)
			} catch (t) { o.w.printStackTrace(t) }
		}, n.prototype.insertXML = function(t, e) { try { this._grid._dataList.insertXML(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.setJSON = function(t, e) { try { if (null == t) return void r.k.printLog("[WebSquare.uiplugin.mappingController.setJSON] JSON is null[" + this.id + "]"); var i = this._grid.jsonData2ArrData(t); if (void 0 === i) return void r.k.printLog("[WebSquare.uiplugin.mappingController.setJSON] DataArray which converted from JSON is undefined.[" + this.id + "]"); this.setData(i, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.setRowJSON = function(t, e, i) { try { this._grid._dataList.setRowJSON(t, e, i) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.insertJSON = function(t, e) { try { this._grid._dataList.insertJSON(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.rowMoveUp = function(t) { try { this._grid._dataList.rowMoveUp(t) } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.rowMoveDown = function(t) { try { this._grid._dataList.rowMoveDown(t) } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.insertRow = function(t, e) { try { e = e || {}; return this._grid.options.insertIntoSortedRow && (e.insertIntoSortedRow = this.options.insertIntoSortedRow), "grid" == this.initializeType && this.options.ref && 1 == this.repeatNodeTagNameFilter && (t = null), this._grid._dataList.insertRow(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.removeRow = function(t, e) { try { return this._grid._dataList.removeRow(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.removeRows = function(t) { try { return this._grid._dataList.removeRows(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.removeAll = function() { try { return this._grid._dataList.removeAll() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.removeRange = function(t, e) { try { return this._grid._dataList.removeRange(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.reform = function() { try { this._grid._dataList.reform() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.undoRow = function(t) { try { this._grid._dataList.undoRow(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._undoRow = function(t) { try { this._grid._dataList._undoRow(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.undoAll = function() { try { this._grid._dataList.undoAll() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRowStatusValue = function(t) { try { var e = this._grid._getGroupbyDisplayRowIndex(t); return this._grid._dataList.getRowStatusValue(e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._getRowStatusValue = function(t) { try { return this._grid._dataList._getRowStatusValue(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRowStatus = function(t) { try { var e = this._grid._getGroupbyDisplayRowIndex(t); return this._grid._dataList.getRowStatus(e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._getRowStatus = function(t) { try { return this._grid._dataList._getRowStatus(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRowIndexByStatus = function(t) { try { return this._grid._dataList.getRowIndexByStatus(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getInsertedIndex = function() { try { return this.getRowIndexByStatus("C") } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUpdatedIndex = function() { try { return this.getRowIndexByStatus("U") } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getDeletedIndex = function() { try { return this.getRowIndexByStatus("DV") } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getOnlyDeletedIndex = function() { try { return this.getRowIndexByStatus("D") } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getVoidIndex = function() {
			try {
				return this.getRowIndexByStatus("V")
			} catch (t) { o.w.printStackTrace(t) }
		}, n.prototype.getModifiedIndex = function() { try { return this.getRowIndexByStatus("CUD") } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getInsertedData = function() { try { return this._grid._dataList.getInsertedData() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getInsertedXML = function() { try { return this._grid._dataList.getInsertedXML() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getInsertedJSON = function() { try { return this._grid._dataList.getInsertedJSON() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getInsertedArray = function() { try { return this._grid._dataList.getInsertedArray() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getDeletedData = function() { try { return this._grid._dataList.getDeletedData() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getDeletedXML = function() { try { return this._grid._dataList.getDeletedXML() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getDeletedJSON = function() { try { return this._grid._dataList.getDeletedJSON() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getDeletedArray = function() { try { return this._grid._dataList.getDeletedArray() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRemovedXML = function() { try { return this._grid._dataList.getRemovedXML() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRemovedJSON = function() { try { return this._grid._dataList.getRemovedJSON() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getRemovedArray = function() { try { return this._grid._dataList.getRemovedArray() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getVoidData = function() { try { return this._grid._dataList.getVoidData() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getVoidXML = function() { try { return this._grid._dataList.getVoidXML() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getVoidJSON = function() { try { return this._grid._dataList.getVoidJSON() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getVoidArray = function() { try { return this._grid._dataList.getVoidArray() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getOnlyDeletedData = function() { try { return this._grid._dataList.getOnlyDeletedData() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getOnlyDeletedXML = function() { try { return this._grid._dataList.getOnlyDeletedXML() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getOnlyDeletedJSON = function() { try { return this._grid._dataList.getOnlyDeletedJSON() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getOnlyDeletedArray = function() { try { return this._grid._dataList.getOnlyDeletedArray() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUpdatedData = function() { try { return this._grid._dataList.getUpdatedData() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUpdatedXML = function() { try { return this._grid._dataList.getUpdatedXML() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUpdatedJSON = function() { try { return this._grid._dataList.getUpdatedJSON() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getUpdatedArray = function() { try { return this._grid._dataList.getUpdatedArray() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getModifiedData = function() { try { return this._grid._dataList.getModifiedData() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getModifiedXML = function() { try { return this._grid._dataList.getModifiedXML() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getModifiedJSON = function() { try { return this._grid._dataList.getModifiedJSON() } catch (t) { o.w.printStackTrace(t) } }, n.prototype.getModifiedArray = function() { try { return this._grid._dataList.getModifiedArray() } catch (t) { o.w.printStackTrace(t) } }, n.prototype._setRowStatus = function(t, e) { try { return this._grid._dataList._setRowStatus(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._initRowStatus = function(t) { try { this._grid._dataList._initRowStatus(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.initRowStatus = function(t) { try { this._grid._dataList.initRowStatus(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._createRowStatus = function(t) { try { this._grid._dataList._createRowStatus(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._updateRowStatus = function(t) {
			try {
				this._grid._dataList._updateRowStatus(t)
			} catch (t) { o.w.printStackTrace(t) }
		}, n.prototype.removeRowStatus = function(t) { try { return this._grid._dataList.removeRowStatus(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.deleteRow = function(t) { try { this._grid._dataList.deleteRow(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._deleteRowStatus = function(t) { try { this._grid._dataList._deleteRowStatus(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.undeleteRow = function(t) { try { this._grid._dataList.undeleteRow(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype._undeleteRowStatus = function(t) { try { this._grid._dataList._undeleteRowStatus(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.modifyAllStatus = function(t) { try { this._grid._dataList.modifyAllStatus(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.modifyRangeStatus = function(t, e, i) { try { var a = [], r = this.getDataLength() + 1; if (0 <= t && e < r) for (var n = t; n < e; n++) { var l = this.getRealRowIndex(n), h = this._setRowStatus(l, i); i != h && a.push({ rowIndex: n, newRowStatus: i, oldRowStatus: h }) } s.B.fireEvent(this, "onrowstatuschange", a), this.broadcast({ gridView: ["notifyModifyRangeStatus", [t, e, i]] }) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.modifyMatchedStatus = function(t, e, i) { try { this._grid._dataList.modifyMatchedStatus(t, e, i) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.modifyRowStatus = function(t, e) { try { this._grid._dataList.modifyRowStatus(t, e) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.setColumnFilter = function(t, e, i, s) { try { "object" != typeof t || a.D.isString(t) || (t.internal = !0), this._grid._linkedDataList ? this._grid._linkedDataList.setColumnFilter(t, e, i, s) : this._grid._dataList.setColumnFilter(t, e, i, s) } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.removeColumnFilter = function(t) { try { t = this._grid.getColumnID(t); this._grid._linkedDataList ? this._grid._linkedDataList.removeColumnFilter(t, { internal: !0 }) : this._grid._dataList.removeColumnFilter(t, { internal: !0 }) } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.clearSortFilter = function() { try { this._grid._linkedDataList ? this._grid._linkedDataList.clearSortFilter() : this._grid._dataList.clearSortFilter() } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.removeColumnFilterAll = function() { try { this._grid._linkedDataList ? this._grid._linkedDataList.removeColumnFilterAll() : this._grid._dataList.removeColumnFilterAll() } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.setFilter = function(t) {
			try {
				if (this._grid._linkedDataList) t.internal = !0, this._grid._linkedDataList.setFilter(t); else {
					if (t) {
						var e = this._grid.getColumnID(t.sortIndex); if ((r = this._grid.cellInfoHash[e] || { options: {} }) && "expression" == r.options.inputType && (t.isExpression = !0, t.cellInfo = r, "gridView" == this._grid.initializeType && isNaN(this._grid._dataList.getColumnIndex(t.sortIndex)) && (t.fakeExpressionArr = this._grid.getFakeExpressionArr())), e) {
							var i = e.split(" "), s = []; t.isCustomCol = [], t.sortLabel = []; for (var a = 0; a < i.length; a++) {
								var r = this._grid.cellInfoHash[i[a]], n = !1; if ("custom" != r.options.inputType || r.internal || (n = !0), n) if (t.isCustomCol.push(!0), t.customSortItemsetIdObj = [], r.options.sortLabel) { for (var l = this.getTotalRow(), h = {}, d = {}, p = 0; p < l; p++) { var u = r.cellManagerHashByRowIndex[p] ? r.cellManagerHashByRowIndex[p] : r; if ("select" == u.options.inputType || "autoComplete" == u.options.inputType) { var c = u.dataComp; if (c && !h[c]) "linkedDataList" == (g = this._grid.modelControl.getDataComp(c)).initializeType ? h[c] = g._dataList.getAllJSON() : h[c] = g.getAllJSON(); d[p] = c, t.customSortItemsetIdObj[p] = { label: u.itemsetObj.label, value: u.itemsetObj.value } } else d[p] = "" } t.customCellDataListInfo = d, t.customDataListInfoHash = h, t.sortLabel.push(!0) } else s[a] = [], t.sortLabel.push(!1); else if (t.isCustomCol.push(!1), !r.options.sortLabel || "select" != r.options.inputType && "autoComplete" != r.options.inputType) s[a] = [], t.sortLabel.push(!1); else {
									var g; if (r.dataComp) "linkedDataList" == (g = this._grid.modelControl.getDataComp(r.dataComp)).initializeType ? s[a] = g._dataList.getAllJSON() : s[a] = g.getAllJSON(); else s[a] = r.getItemArray(); t.sortItemsetIdObj = {
										label: r.itemsetObj.label,
										value: r.itemsetObj.value
									}, t.sortLabel.push(!0)
								}
							} s.length > 0 && (t.sortItemArr = s)
						}
					} t.internal = !0, this._grid._dataList.setFilter(t), "outfocus" == t.focuseMode && this._grid.setScrollTop(0)
				}
			} catch (t) { o.w.printStackTrace(t, null, this) }
		}, n.prototype.removeFilter = function(t, e) { try { t && (t.internal = !0), this._grid._linkedDataList ? this._grid._linkedDataList.removeFilter(t, e) : this._grid._dataList.removeFilter(t, e) } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.clearFilter = function(t) { try { this._grid._linkedDataList ? this._grid._linkedDataList.clearFilter(t) : this._grid._dataList.clearFilter(t) } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.sort = function(t, e) { try { this._grid._linkedDataList ? this._grid._linkedDataList.sort(t, e) : this._grid._dataList.sort(t, e) } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.clearSort = function() { try { this._grid._linkedDataList ? this._grid._linkedDataList.clearSort() : (this._grid._dataList.clearSort(), "outfocus" == this._grid.options.filterFocusMode && this._grid.setScrollTop(0)) } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.multisort = function(t) { try { this._grid._linkedDataList ? this._grid._linkedDataList.multisort(t) : this._grid._dataList.multisort(t) } catch (t) { o.w.printStackTrace(t, null, this) } }, n.prototype.setMatchIgnoreCase = function(t) { try { return this._grid._dataList.setMatchIgnoreCase(t) } catch (t) { o.w.printStackTrace(t) } }, n.prototype.mappingCommonAPI = function() {
			try {
				this._grid._getData = this._getData, this._grid._getRowData = this._getRowData, this._grid._setCellData = this._setCellData, this._grid._setOriginalCellData = this._setOriginalCellData, this._grid._insertData = this._insertData, this._grid._undoRow = this._undoRow, this._grid._getRowStatusValue = this._getRowStatusValue, this._grid._getRowStatus = this._getRowStatus, this._grid._setRowStatus = this._setRowStatus, this._grid._createRowStatus = this._createRowStatus, this._grid._updateRowStatus = this._updateRowStatus, this._grid._deleteRowStatus = this._deleteRowStatus, this._grid._undeleteRowStatus = this._undeleteRowStatus, this._grid.getRowJSON = this.getRowJSON, this._grid.getRowCount = this.getRowCount, this._grid.getCellData = this.getCellData, this._grid._getCellData = this._getCellData, this._grid.getOriginalCellData = this.getOriginalCellData, this._grid.getColData = this.getColData, this._grid.getRowData = this.getRowData, this._grid.getDataRow = this.getDataRow, this._grid.getMatchedData = this.getMatchedData, this._grid.getUnmatchedData = this.getUnmatchedData, this._grid.getMatchedColumnData = this.getMatchedColumnData, this._grid.getUnmatchedColumnData = this.getUnmatchedColumnData, this._grid.getMatchedIndex = this.getMatchedIndex, this._grid.getUnmatchedIndex = this.getUnmatchedIndex, this._grid.getRangeData = this.getRangeData, this._grid.getAllData = this.getAllData, this._grid.getColumnDistinctDataArray = this.getColumnDistinctDataArray, this._grid.getRangeXML = this.getRangeXML, this._grid.getMatchedXML = this.getMatchedXML, this._grid.getUnmatchedXML = this.getUnmatchedXML, this._grid.getRowXML = this.getRowXML, this._grid.getAllXML = this.getAllXML, this._grid.getRowJSON = this.getRowJSON, this._grid.getAllJSON = this.getAllJSON, this._grid.getRangeJSON = this.getRangeJSON, this._grid.getMatchedJSON = this.getMatchedJSON, this._grid.getUnmatchedJSON = this.getUnmatchedJSON, this._grid.getRowStatusValue = this.getRowStatusValue, this._grid.getRowStatus = this.getRowStatus, this._grid.getRowIndexByStatus = this.getRowIndexByStatus, this._grid.getInsertedIndex = this.getInsertedIndex, this._grid.getUpdatedIndex = this.getUpdatedIndex, this._grid.getDeletedIndex = this.getDeletedIndex, this._grid.getModifiedIndex = this.getModifiedIndex, this._grid.getInsertedData = this.getInsertedData, this._grid.getInsertedXML = this.getInsertedXML, this._grid.getInsertedJSON = this.getInsertedJSON, this._grid.getDeletedData = this.getDeletedData, this._grid.getDeletedXML = this.getDeletedXML, this._grid.getDeletedJSON = this.getDeletedJSON, this._grid.getVoidData = this.getVoidData, this._grid.getVoidXML = this.getVoidXML, this._grid.getVoidJSON = this.getVoidJSON,
				this._grid.getOnlyDeletedData = this.getOnlyDeletedData, this._grid.getOnlyDeletedXML = this.getOnlyDeletedXML, this._grid.getOnlyDeletedXML = this.getOnlyDeletedXML, this._grid.getOnlyDeletedJSON = this.getOnlyDeletedJSON, this._grid.getUpdatedData = this.getUpdatedData, this._grid.getUpdatedXML = this.getUpdatedXML, this._grid.getUpdatedJSON = this.getUpdatedJSON, this._grid.getModifiedData = this.getModifiedData, this._grid.getModifiedXML = this.getModifiedXML, this._grid.getModifiedJSON = this.getModifiedJSON, this._grid.setMatchIgnoreCase = this.setMatchIgnoreCase
			} catch (t) { o.w.printStackTrace(t, null, this) }
		}
	}, 736: (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
		"use strict"; __webpack_require__.d(__webpack_exports__, { L: () => subtotalDataController }); var _websquareGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2981), _engine_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1656), _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2085), _engine_util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3082), subtotalDataController = function(t) { }; subtotalDataController.prototype._subtotalHidden = function(t) { try { for (var e = 0; e < t.length; e++) { if (this.isIE6or7) for (var i = t[e].getElementsByTagName("td"), o = 0; o < i.length; o++)i[o].style.borderWidth = "0px"; "none" !== t[e].style.display && (this.drawedSubtotal && this.drawedSubtotal.drawedRowLength--, t[e].style.display = "none") } } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.subtotalHidden = function(t) { try { if (!this.hasSubtotal) return; if (t) { if ("number" == typeof t.index) for (var e = this.drawedSubtotal.splice(t.index, 1), i = 0; i < e.length; i++)this._subtotalHidden(e[i]); if ("number" == typeof t.rowIndex) for (i = this.drawedSubtotal.length - 1; i >= 0; i--)if (this.drawedSubtotal[i].rowIndex == t.rowIndex) { e = this.drawedSubtotal.splice(i, 1); for (var o = 0; o < e.length; o++)this._subtotalHidden(e[o]) } if ("number" == typeof t.startRowIndex) for (i = this.drawedSubtotal.length - 1; i >= 0; i--)if (this.drawedSubtotal[i].rowIndex >= t.startRowIndex) for (e = this.drawedSubtotal.splice(i, 1), o = 0; o < e.length; o++)this._subtotalHidden(e[o]); if ("number" == typeof t.endRowIndex) for (i = this.drawedSubtotal.length - 1; i >= 0; i--)if (this.drawedSubtotal[i].rowIndex <= t.endRowIndex) for (e = this.drawedSubtotal.splice(i, 1), o = 0; o < e.length; o++)this._subtotalHidden(e[o]) } else { for (var s in this.subtotalTableList) { var a = this.subtotalRowHash[s]; a && this._subtotalHidden(a) } this.drawedSubtotal = [], this.drawedSubtotal.drawedRowLength = 0 } } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.refreshSubtotalRow = function(t) { try { for (var e = t - this.rowIndex, i = "native" === this.options.drawType ? this.getRowCount() - 1 : this.lastIndex, o = e; o <= i; o++)this.drawSubtotalRow(o + 1, o + this.rowIndex); var s = WebSquare.BootLoader.fullViewed || !1, a = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.fullViewed || !1; if (!s && !a) { var r = this.options.adaptive, n = parseInt(this.options.adaptiveThreshold) || 480; if ("crosstab" == r && !(_engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.isIE() && parseInt(_engine_core_js__WEBPACK_IMPORTED_MODULE_1__.v.browserVersion(), 10) < 10) && parseInt(top.document.documentElement.clientWidth || top.document.body.clientWidth) <= n) { for (o = this.defaultColCnt; o < this.hiddenList.length; o++)1 == this.hiddenList[o] && this.setAdaptiveColumnVisible(o, !0); this.removeAdaptiveGridSubtotalHeight(), this.setAdaptiveGridSubtotalHeight(); for (o = this.defaultColCnt; o < this.hiddenList.length; o++)1 == this.hiddenList[o] && this.setAdaptiveColumnVisible(o, !1); this.event.hasEvent(this.id + "_body_tbody", "onscroll") || this.event.addListener(this.getElementById(this.id + "_body_tbody"), "onscroll", this.event.bindAsEventListener(this, this.tbodyMoveXScroll)) } } } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.drawSubtotalRow = function(t, e, i) {
			try {
				var o = 0; if (!this.hasSubtotal || e < 0 || e >= this.getDataLength()) return o; var s = NaN
					; if (i && !isNaN(i.maxCount) && (s = i.maxCount), s <= 0) return o; for (var a in this.subtotalTableList) { var r = this.dataList._getCellData(e, a), n = r + "_12"; if (e < this.getDataLength() - 1) n = this.dataList._getCellData(e + 1, a); if (r != n) { var l = this.subtotalRowHash[a], h = this.subtotalTableList[a], d = h.rows.length, p = []; p.rowIndex = e, p.targetID = a; for (var u = 0; u < d; u++) { var c = l ? l[t * d + u] : void 0; if (c) { if (this.isIE6or7) for (var g = c.getElementsByTagName("td"), f = 0; f < g.length; f++)g[f].style.borderWidth = ""; o >= s ? c.style.display = "none" : (c.style.display = "", o++), c.setAttribute("data-subtotalrowindex", e), p.push(c), this.lastSubtotalRow = c } } if (this.drawedSubtotal.push(p), this.drawedSubtotal.drawedRowLength += o, this.setSubtotalData(h, a, r, e, p, i), o >= s) break } } return o
			} catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) }
		}, subtotalDataController.prototype.hasUpperSubtotalRow = function(t) { try { if (!this.hasSubtotal || t < 0 || t >= this.getDataLength()) return !1; for (var e in this.subtotalTableList) { var i = this.dataList._getCellData(t, e), o = i; if (t < this.getDataLength()) o = this.dataList._getCellData(t - 1, e); if (i != o) return !0 } return !1 } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.getHasSubtotalCount = function(t) { try { if (!this.hasSubtotal || t < 0 || t >= this.getDataLength()) return 0; var e = 0; for (var i in this.subtotalTableList) { var o = this.dataList._getCellData(t, i), s = o; t + 1 < this.getDataLength() ? s = this.dataList._getCellData(t + 1, i) : t + 1 == this.getDataLength() && e++, o != s && e++ } return e } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.setSubtotalData = function(t, e, i, o, s, a) { try { var r, n = this.subtotalDataArr[e + "_" + i]; if (null == n && (n = this.getSubtotalData(t, e, i, o)), this.options.subtotalStyleFormatter) try { "function" == typeof this.options.subtotalStyleFormatter ? r = this.options.subtotalStyleFormatter : null != (r = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getGlobalFunction(this.options.subtotalStyleFormatter, this.scope_id)) && (this.options.subtotalStyleFormatter = r) } catch (t) { r = null } for (var l = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("inputType"), h = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("NaNFormat"), d = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("colMerge"), p = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("value"), u = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("useLocale"), c = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("localeRef"), g = 0; g < s.length; g++)for (var f = s[g].getElementsByTagName("td"), m = 0; m < f.length; m++) { var y = f[m], b = y.getAttribute("id"); if (null != n[b]) { var w = n[b]; if ("expression" == y.getAttribute(l) && isNaN(w) && null != y.getAttribute(h) && "NaN" != y.getAttribute(h) && (w = y.getAttribute(h)), y.innerHTML = this.dataTagOpen + w + this.dataTagClose, "function" == typeof r) { var v = n[b + "_org"]; null == v && (v = w); var C = r(v, w, y.id); if (y && C) { var I = y.getAttribute("data-bkclassname"); null == I && (I = y.className, y.setAttribute("data-bkclassname", I)), y.className = y.getAttribute("data-bkclassname") + " " + C } } } else if ("true" != y.getAttribute(d) || this.groupbyStatus.grouped) { var _ = y.getAttribute(p), x = y.getAttribute(u), S = y.getAttribute(l); if ("true" === x || this.options.useLocale && !x) { var D = y.getAttribute(c); if (D && "expression" !== S) { var R = this.getLocaleValue(D); R && (_ = R) } } _ = null != _ ? _ : "", y.innerHTML = this.dataTagOpen + _ + this.dataTagClose } else y.style.borderTopWidth = "0px", y.style.borderBottomWidth = "0px" } } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.getSubtotalData = function(subTotalTable, targetID, nowValue, rowIndex) {
			try {
				var obfuscator_targetID = targetID, subtotalObj = this.subtotalObj[targetID]; if (null == subtotalObj) {
					subtotalObj = {}
					; for (var dataInputType = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("inputType"), dataExpression = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("expression"), dataColindex = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("colindex"), dataDataType = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("dataType"), dataDisplayFormat = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("displayFormat"), dataDisplayFormatter = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getDataPrefix("displayFormatter"), i = 0; i < subTotalTable.rows.length; i++)for (var subTds = subTotalTable.rows[i].getElementsByTagName("td"), j = 0; j < subTds.length; j++) { var subTd = subTds[j]; if ("expression" == subTd.getAttribute(dataInputType)) { var obj = {}; obj.id = subTd.getAttribute("id"); var str = subTd.getAttribute(dataExpression) || ""; "" != str && (str = str.replace(/[sS][uU][mM][\s]*[(]/g, "this.subtotalcolsum( obfuscator_st, obfuscator_en ,"), str = str.replace(/[aA][vV][gG][\s]*[(]/g, "this.subtotalcolavg( obfuscator_st, obfuscator_en ,"), str = str.replace(/[mM][aA][xX][\s]*[(]/g, "this.subtotalcolmax( obfuscator_st, obfuscator_en ,"), str = str.replace(/[mM][iI][nN][\s]*[(]/g, "this.subtotalcolmin( obfuscator_st, obfuscator_en ,"), str = str.replace(/[cC][oO][uU][nN][tT][\s]*[(]/g, "this.subtotalcolcnt( obfuscator_st, obfuscator_en ,"), str = str.replace(/[tT][aA][rR][gG][eE][tT][cC][oO][lL][vV][aA][lL][uU][eE][\s]*[(]/g, "this.dataList._getCellData( obfuscator_en, obfuscator_targetID"), str = str.replace(/[tT][aA][rR][gG][eE][tT][cC][oO][lL][lL][aA][bB][eE][lL][\s]*[(]/g, "this.subtotaltargetcollabel( obfuscator_st, obfuscator_en, obfuscator_targetID"), str = str.replace(/[tT][aA][rR][gG][eE][tT][fF][oO][oO][tT][eE][rR][vV][aA][lL][uU][eE][\s]*[(]/g, "this.subtotaltargetfootervalue( obfuscator_st, obfuscator_en,")); var dataListDataType = "text", dataListIndex = parseInt(subTd.getAttribute(dataColindex)) - this.defaultColCnt, targetColumnDataType; if (dataListIndex >= 0 && (dataListDataType = this._dataList.getCellInfo(dataListIndex).options.dataType), "true" === this.options.useCurrency ? obj.dataType = subTd.getAttribute(dataDataType) : obj.dataType = subTd.getAttribute(dataDataType) || dataListDataType, obj.expression = str, !obj.dataType) { targetColumnID = eval(str.substring(str.indexOf("(") + 1, str.indexOf(")"))); var targetColumnCellInfo = this.getCellInfo(targetColumnID), targetColumnDataType = targetColumnCellInfo && targetColumnCellInfo.options && targetColumnCellInfo.options.dataType; targetColumnID && "true" === this.options.useCurrency ? (obj.dataType = targetColumnDataType, "function" == typeof targetColumnCellInfo.options.customModelUnformatter ? obj.customModelUnformatter = targetColumnCellInfo.options.customModelUnformatter : obj.customModelUnformatter = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.getGlobalFunction(targetColumnCellInfo.options.customModelUnformatter, this.scope_id)) : obj.dataType = dataListDataType } obj.displayFormat = subTd.getAttribute(dataDisplayFormat) || "", obj.displayFormatter = subTd.getAttribute(dataDisplayFormatter) || "", "true" !== this.options.useCurrency || obj.displayFormatter || (obj.displayFormat = targetColumnCellInfo.options.displayFormat || subTd.getAttribute(dataDisplayFormat) || "", obj.displayFormatter = targetColumnCellInfo.options.displayFormatter || ""), obj.formatter = WebSquare.format.createFormatter(obj.dataType, obj.displayFormat, obj.displayFormatter, null, null, null, this.scope_id, this.id), subtotalObj[obj.id] = obj } } this.subtotalObj[targetID] = subtotalObj
				} for (var minRowIndex = rowIndex; minRowIndex > 0 && nowValue == this.dataList._getCellData(minRowIndex - 1, targetID);)minRowIndex--; var obfuscator_st = minRowIndex, obfuscator_en = rowIndex, subtotalData = {}; for (var id in subtotalObj) {
					var obj = subtotalObj[id], exp = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.scopingFuncBody(obj.expression, this.scope_id); this._subtotalDisplayFormat = obj.displayFormat || ""; var subValue = Function("obfuscator_st", "obfuscator_en", "obfuscator_targetID", exp).call(this, obfuscator_st, obfuscator_en, obfuscator_targetID)
						; obj.customModelUnformatter && (subValue = obj.customModelUnformatter.call(this, subValue)); var formattedValue = obj.formatter.format(subValue); subtotalData[id] = formattedValue, this.options.subtotalStyleFormatter && subValue !== formattedValue && (subtotalData[id + "_org"] = subValue)
				} return this._subtotalDisplayFormat = "", subtotalData
			} catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) }
		}, subtotalDataController.prototype.getSubtotalRowList = function(t) { try { var e = []; t && "object" === t.returnType && (e = {}); var i = this.getDataLength(); for (var o in this.subtotalStrList) for (var s = 1; s < i; s++) { this.dataList._getCellData(s - 1, o) != this.dataList._getCellData(s, o) && (t && "object" === t.returnType ? e[s] = !0 : e.push(s)) } return e } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.subtotalcolsum = function(t, e, i) { try { var o, s = this.getColumnSubtotalRangeDataArray(t, e, i), a = ""; if (s.length > 0) if (o = this.getColumnOption(i, "dataType"), a = 0, "bigDecimal" === o) for (var r = 0; r < s.length; r++)a = WebSquare.bigDecimal(a + "").plus(s[r]); else if ("time" === o) for (r = 0; r < s.length; r++) { var n = WebSquare.text.fillZero(a, 4); a = WebSquare.date.dateTimeAdd(n, s[r], "hour", "time") } else a = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.sum(s, { displayFormat: this._subtotalDisplayFormat }); return _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.setPrecision(a) } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.subtotalcolavg = function(t, e, i) { try { var o = this.getColumnSubtotalRangeDataArray(t, e, i), s = ""; if ("bigDecimal" === this.getColumnOption(i, "dataType")) { for (var a in s = "0", o) s = WebSquare.bigDecimal(s).plus(o[a]); s = s.divide(WebSquare.bigDecimal(o.length)) } else o.length > 0 && (s = _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.sum(o, { displayFormat: this._subtotalDisplayFormat }) / o.length); return s } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.subtotalcolmax = function(t, e, i) { try { var o = this.getColumnSubtotalRangeDataArray(t, e, i), s = this.getColumnOption(i, "dataType"), a = null; if ("bigDecimal" === s) for (var r in o) a = null == a ? o[r] : a.compare(o[r]); else for (r = 0; r < o.length; r++) { var n = parseFloat(o[r]); isNaN(n) || (null == a || a < n) && (a = n) } return a = null == a ? "" : a, _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.setPrecision(a) } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.subtotalcolmin = function(t, e, i) { try { var o = this.getColumnSubtotalRangeDataArray(t, e, i), s = this.getColumnOption(i, "dataType"), a = null; if ("bigDecimal" === s) for (var r in o) a = null == a ? o[r] : a.compare(o[r], !0); else for (r = 0; r < o.length; r++) { var n = parseFloat(o[r]); isNaN(n) || (null == a || a > n) && (a = n) } return a = null == a ? "" : a, _engine_util_js__WEBPACK_IMPORTED_MODULE_3__.D.setPrecision(a) } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.subtotalcolcnt = function(t, e, i, o) { try { o = o || {}; return (this.getColumnSubtotalRangeDataArray(t, e, i, o) || []).length } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.subtotaltargetcollabel = function(t, e, i, o) { var s = ""; try { s = this.dataList._getCellData(e, i); var a = this.getCellInfo(i), r = a.options.inputType; "select" !== r && "autoComplete" !== r && "checkcombobox" !== r || (s = a.getData(s, e)) } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } return s }, subtotalDataController.prototype.subtotaltargetfootervalue = function(t, e, i, o) { var s; try { this.hasFooter && this.footerTempSum && this.footerTempSum[i] && (s = this.footerTempSum[i].sum) } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } return s }, subtotalDataController.prototype.getColumnSubtotalRangeDataArray = function(t, e, i, o) {
			try {
				for (var s, a = [], r = this.getColumnID(i), n = this.getColumnOption(r, "dataType"), l = this.dataList.getDeletedIndex(), h = this.dataList.getModifiedIndex(), d = t; d <= e; d++) { if (this.options.excludeDeletedRows) { for (var p = !1, u = 0; u < l.length; u++)if (l[u] === d) { p = !0; break } if (p) continue } if (this.options.excludeModifiedRows) { for (p = !1, u = 0; u < h.length; u++)if (h[u] === d) { p = !0; break } if (p) continue } "bigDecimal" === n ? s = WebSquare.bigDecimal(this.dataList._getCellData(d, i)) : (s = this.dataList._getCellData(d, i), s += ""), void 0 === s || "" == s ? (s = "0", "object" == typeof o && !1 !== o.blank && a.push(s)) : a.push(s) } return a
			} catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) }
		}, subtotalDataController.prototype._getLastSubtotalCount = function() { try { if (!this.hasSubtotal) return 0; for (var t = 0, e = this.getDataLength(), i = Math.max(e - this._getVisibleLastIndex(this.drawedRowLength), 0), o = 0, s = e - 1; s >= i; s--) { for (var a = 0; a < this.struct.subtotalArr.length; a++) { var r = this.struct.subtotalArr[a], n = r.attr.targetColumnID, l = this.dataList._getCellData(s, n), h = l + "_12"; if (s < e - 1) h = this.dataList._getCellData(s + 1, n); if (l != h && (t += r.rowArr.length, this.options.initFixedHeightByRowNum > -1)) { if (o + t >= this.options.initFixedHeightByRowNum) { i = s + 1; break } i = Math.max(e - this._getVisibleLastIndex(this.drawedRowLength - t), 0) } } o++ } return t } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }, subtotalDataController.prototype.setSubtotalVisible = function(t) { try { if (0 === this.render.offsetHeight && 0 === this.render.offsetWidth) return this.resizeObj = { width: 0, height: 0, scrollLeft: 0, scrollTop: 0, clientWidth: 0 }, this.setRedrawStatus("stop"), void this.delayedDraw({ subTotalVisible: t }); !0 === t ? (this.hasSubtotal = !0, this.lastTopRowIndex = null, this._applyRowVisible(), this.setScrollYHeight()) : !1 === t && (this.subtotalHidden(), this.lastTopRowIndex = null, this.hasSubtotal = !1, this.setScrollYHeight()) } catch (t) { _engine_exception_js__WEBPACK_IMPORTED_MODULE_2__.w.printStackTrace(t, null, this) } }
	}
}]);